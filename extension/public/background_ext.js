/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 90:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = exports.qX = __webpack_unused_export__ = exports.d3 = exports.$v = exports.KA = __webpack_unused_export__ = __webpack_unused_export__ = __webpack_unused_export__ = exports.S_ = __webpack_unused_export__ = __webpack_unused_export__ = exports.Jq = exports.tH = exports.US = __webpack_unused_export__ = __webpack_unused_export__ = exports.pJ = exports.YU = __webpack_unused_export__ = __webpack_unused_export__ = void 0;
function assertNumber(n) {
    if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
}
__webpack_unused_export__ = assertNumber;
function chain(...args) {
    const wrap = (a, b) => (c) => a(b(c));
    const encode = Array.from(args)
        .reverse()
        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);
    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);
    return { encode, decode };
}
function alphabet(alphabet) {
    return {
        encode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('alphabet.encode input should be an array of numbers');
            return digits.map((i) => {
                assertNumber(i);
                if (i < 0 || i >= alphabet.length)
                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                return alphabet[i];
            });
        },
        decode: (input) => {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('alphabet.decode input should be array of strings');
            return input.map((letter) => {
                if (typeof letter !== 'string')
                    throw new Error(`alphabet.decode: not string element=${letter}`);
                const index = alphabet.indexOf(letter);
                if (index === -1)
                    throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                return index;
            });
        },
    };
}
function join(separator = '') {
    if (typeof separator !== 'string')
        throw new Error('join separator should be string');
    return {
        encode: (from) => {
            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                throw new Error('join.encode input should be array of strings');
            for (let i of from)
                if (typeof i !== 'string')
                    throw new Error(`join.encode: non-string input=${i}`);
            return from.join(separator);
        },
        decode: (to) => {
            if (typeof to !== 'string')
                throw new Error('join.decode input should be string');
            return to.split(separator);
        },
    };
}
function padding(bits, chr = '=') {
    assertNumber(bits);
    if (typeof chr !== 'string')
        throw new Error('padding chr should be string');
    return {
        encode(data) {
            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of data)
                if (typeof i !== 'string')
                    throw new Error(`padding.encode: non-string input=${i}`);
            while ((data.length * bits) % 8)
                data.push(chr);
            return data;
        },
        decode(input) {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of input)
                if (typeof i !== 'string')
                    throw new Error(`padding.decode: non-string input=${i}`);
            let end = input.length;
            if ((end * bits) % 8)
                throw new Error('Invalid padding: string should have whole number of bytes');
            for (; end > 0 && input[end - 1] === chr; end--) {
                if (!(((end - 1) * bits) % 8))
                    throw new Error('Invalid padding: string has too much padding');
            }
            return input.slice(0, end);
        },
    };
}
function normalize(fn) {
    if (typeof fn !== 'function')
        throw new Error('normalize fn should be function');
    return { encode: (from) => from, decode: (to) => fn(to) };
}
function convertRadix(data, from, to) {
    if (from < 2)
        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data))
        throw new Error('convertRadix: data should be array');
    if (!data.length)
        return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d) => {
        assertNumber(d);
        if (d < 0 || d >= from)
            throw new Error(`Wrong integer: ${d}`);
    });
    while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (!Number.isSafeInteger(digitBase) ||
                (from * carry) / from !== carry ||
                digitBase - digit !== from * carry) {
                throw new Error('convertRadix: carry overflow');
            }
            carry = digitBase % to;
            digits[i] = Math.floor(digitBase / to);
            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)
                throw new Error('convertRadix: carry overflow');
            if (!done)
                continue;
            else if (!digits[i])
                pos = i;
            else
                done = false;
        }
        res.push(carry);
        if (done)
            break;
    }
    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
    return res.reverse();
}
const gcd = (a, b) => (!b ? a : gcd(b, a % b));
const radix2carry = (from, to) => from + (to - gcd(from, to));
function convertRadix2(data, from, to, padding) {
    if (!Array.isArray(data))
        throw new Error('convertRadix2: data should be array');
    if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data) {
        assertNumber(n);
        if (n >= 2 ** from)
            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = (carry << from) | n;
        if (pos + from > 32)
            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
            res.push(((carry >> (pos - to)) & mask) >>> 0);
        carry &= 2 ** pos - 1;
    }
    carry = (carry << (to - pos)) & mask;
    if (!padding && pos >= from)
        throw new Error('Excess padding');
    if (!padding && carry)
        throw new Error(`Non-zero padding: ${carry}`);
    if (padding && pos > 0)
        res.push(carry >>> 0);
    return res;
}
function radix(num) {
    assertNumber(num);
    return {
        encode: (bytes) => {
            if (!(bytes instanceof Uint8Array))
                throw new Error('radix.encode input should be Uint8Array');
            return convertRadix(Array.from(bytes), 2 ** 8, num);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix.decode input should be array of strings');
            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        },
    };
}
function radix2(bits, revPadding = false) {
    assertNumber(bits);
    if (bits <= 0 || bits > 32)
        throw new Error('radix2: bits should be in (0..32]');
    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
        throw new Error('radix2: carry overflow');
    return {
        encode: (bytes) => {
            if (!(bytes instanceof Uint8Array))
                throw new Error('radix2.encode input should be Uint8Array');
            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix2.decode input should be array of strings');
            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        },
    };
}
function unsafeWrapper(fn) {
    if (typeof fn !== 'function')
        throw new Error('unsafeWrapper fn should be function');
    return function (...args) {
        try {
            return fn.apply(null, args);
        }
        catch (e) { }
    };
}
function checksum(len, fn) {
    assertNumber(len);
    if (typeof fn !== 'function')
        throw new Error('checksum fn should be function');
    return {
        encode(data) {
            if (!(data instanceof Uint8Array))
                throw new Error('checksum.encode: input should be Uint8Array');
            const checksum = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum, data.length);
            return res;
        },
        decode(data) {
            if (!(data instanceof Uint8Array))
                throw new Error('checksum.decode: input should be Uint8Array');
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for (let i = 0; i < len; i++)
                if (newChecksum[i] !== oldChecksum[i])
                    throw new Error('Invalid checksum');
            return payload;
        },
    };
}
__webpack_unused_export__ = { alphabet, chain, checksum, radix, radix2, join, padding };
exports.YU = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
exports.pJ = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
__webpack_unused_export__ = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
__webpack_unused_export__ = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
exports.US = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
exports.tH = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
const genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));
exports.Jq = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
__webpack_unused_export__ = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
__webpack_unused_export__ = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');
const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
exports.S_ = {
    encode(data) {
        let res = '';
        for (let i = 0; i < data.length; i += 8) {
            const block = data.subarray(i, i + 8);
            res += exports.Jq.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');
        }
        return res;
    },
    decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
            const slice = str.slice(i, i + 11);
            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            const block = exports.Jq.decode(slice);
            for (let j = 0; j < block.length - blockLen; j++) {
                if (block[j] !== 0)
                    throw new Error('base58xmr: wrong padding');
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
    },
};
const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.Jq);
__webpack_unused_export__ = base58check;
const BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
const POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 0x1ffffff) << 5;
    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if (((b >> i) & 1) === 1)
            chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
    const len = prefix.length;
    let chk = 1;
    for (let i = 0; i < len; i++) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
            throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ (c >> 5);
    }
    chk = bech32Polymod(chk);
    for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);
    for (let v of words)
        chk = bech32Polymod(chk) ^ v;
    for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
}
function genBech32(encoding) {
    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix, words, limit = 90) {
        if (typeof prefix !== 'string')
            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))
            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        prefix = prefix.toLowerCase();
        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;
    }
    function decode(str, limit = 90) {
        if (typeof str !== 'string')
            throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || (limit !== false && str.length > limit))
            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
            throw new Error(`String must be lowercase or uppercase`);
        str = lowered;
        const sepIndex = str.lastIndexOf('1');
        if (sepIndex === 0 || sepIndex === -1)
            throw new Error(`Letter "1" must be present between prefix and data only`);
        const [prefix, _words] = [str.slice(0, sepIndex), str.slice(sepIndex + 1)];
        if (_words.length < 6)
            throw new Error('Data must be at least 6 characters long');
        const words = BECH_ALPHABET.decode(_words).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!_words.endsWith(sum))
            throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
    }
    const decodeUnsafe = unsafeWrapper(decode);
    function decodeToBytes(str) {
        const { prefix, words } = decode(str, false);
        return { prefix, words, bytes: fromWords(words) };
    }
    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
__webpack_unused_export__ = genBech32('bech32');
__webpack_unused_export__ = genBech32('bech32m');
exports.KA = {
    encode: (data) => new TextDecoder().decode(data),
    decode: (str) => new TextEncoder().encode(str),
};
exports.$v = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {
    if (typeof s !== 'string' || s.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
}));
const CODERS = {
    utf8: exports.KA, hex: exports.$v, base16: exports.YU, base32: exports.pJ, base64: exports.US, base64url: exports.tH, base58: exports.Jq, base58xmr: exports.S_
};
const coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;
const bytesToString = (type, bytes) => {
    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (!(bytes instanceof Uint8Array))
        throw new TypeError('bytesToString() expects Uint8Array');
    return CODERS[type].encode(bytes);
};
exports.d3 = bytesToString;
__webpack_unused_export__ = exports.d3;
const stringToBytes = (type, str) => {
    if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (typeof str !== 'string')
        throw new TypeError('stringToBytes() expects string');
    return CODERS[type].decode(str);
};
exports.qX = stringToBytes;
__webpack_unused_export__ = exports.qX;


/***/ }),

/***/ 550:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = (__webpack_require__(601).Buffer);
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);


/***/ }),

/***/ 452:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249), __webpack_require__(269), __webpack_require__(214), __webpack_require__(888), __webpack_require__(109));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var BlockCipher = C_lib.BlockCipher;
	    var C_algo = C.algo;

	    // Lookup tables
	    var SBOX = [];
	    var INV_SBOX = [];
	    var SUB_MIX_0 = [];
	    var SUB_MIX_1 = [];
	    var SUB_MIX_2 = [];
	    var SUB_MIX_3 = [];
	    var INV_SUB_MIX_0 = [];
	    var INV_SUB_MIX_1 = [];
	    var INV_SUB_MIX_2 = [];
	    var INV_SUB_MIX_3 = [];

	    // Compute lookup tables
	    (function () {
	        // Compute double table
	        var d = [];
	        for (var i = 0; i < 256; i++) {
	            if (i < 128) {
	                d[i] = i << 1;
	            } else {
	                d[i] = (i << 1) ^ 0x11b;
	            }
	        }

	        // Walk GF(2^8)
	        var x = 0;
	        var xi = 0;
	        for (var i = 0; i < 256; i++) {
	            // Compute sbox
	            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
	            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
	            SBOX[x] = sx;
	            INV_SBOX[sx] = x;

	            // Compute multiplication
	            var x2 = d[x];
	            var x4 = d[x2];
	            var x8 = d[x4];

	            // Compute sub bytes, mix columns tables
	            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
	            SUB_MIX_0[x] = (t << 24) | (t >>> 8);
	            SUB_MIX_1[x] = (t << 16) | (t >>> 16);
	            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);
	            SUB_MIX_3[x] = t;

	            // Compute inv sub bytes, inv mix columns tables
	            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
	            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);
	            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);
	            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);
	            INV_SUB_MIX_3[sx] = t;

	            // Compute next counter
	            if (!x) {
	                x = xi = 1;
	            } else {
	                x = x2 ^ d[d[d[x8 ^ x2]]];
	                xi ^= d[d[xi]];
	            }
	        }
	    }());

	    // Precomputed Rcon lookup
	    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

	    /**
	     * AES block cipher algorithm.
	     */
	    var AES = C_algo.AES = BlockCipher.extend({
	        _doReset: function () {
	            var t;

	            // Skip reset of nRounds has been set before and key did not change
	            if (this._nRounds && this._keyPriorReset === this._key) {
	                return;
	            }

	            // Shortcuts
	            var key = this._keyPriorReset = this._key;
	            var keyWords = key.words;
	            var keySize = key.sigBytes / 4;

	            // Compute number of rounds
	            var nRounds = this._nRounds = keySize + 6;

	            // Compute number of key schedule rows
	            var ksRows = (nRounds + 1) * 4;

	            // Compute key schedule
	            var keySchedule = this._keySchedule = [];
	            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
	                if (ksRow < keySize) {
	                    keySchedule[ksRow] = keyWords[ksRow];
	                } else {
	                    t = keySchedule[ksRow - 1];

	                    if (!(ksRow % keySize)) {
	                        // Rot word
	                        t = (t << 8) | (t >>> 24);

	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];

	                        // Mix Rcon
	                        t ^= RCON[(ksRow / keySize) | 0] << 24;
	                    } else if (keySize > 6 && ksRow % keySize == 4) {
	                        // Sub word
	                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];
	                    }

	                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
	                }
	            }

	            // Compute inv key schedule
	            var invKeySchedule = this._invKeySchedule = [];
	            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
	                var ksRow = ksRows - invKsRow;

	                if (invKsRow % 4) {
	                    var t = keySchedule[ksRow];
	                } else {
	                    var t = keySchedule[ksRow - 4];
	                }

	                if (invKsRow < 4 || ksRow <= 4) {
	                    invKeySchedule[invKsRow] = t;
	                } else {
	                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^
	                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
	                }
	            }
	        },

	        encryptBlock: function (M, offset) {
	            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
	        },

	        decryptBlock: function (M, offset) {
	            // Swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;

	            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

	            // Inv swap 2nd and 4th rows
	            var t = M[offset + 1];
	            M[offset + 1] = M[offset + 3];
	            M[offset + 3] = t;
	        },

	        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
	            // Shortcut
	            var nRounds = this._nRounds;

	            // Get input, add round key
	            var s0 = M[offset]     ^ keySchedule[0];
	            var s1 = M[offset + 1] ^ keySchedule[1];
	            var s2 = M[offset + 2] ^ keySchedule[2];
	            var s3 = M[offset + 3] ^ keySchedule[3];

	            // Key schedule row counter
	            var ksRow = 4;

	            // Rounds
	            for (var round = 1; round < nRounds; round++) {
	                // Shift rows, sub bytes, mix columns, add round key
	                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
	                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
	                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
	                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

	                // Update state
	                s0 = t0;
	                s1 = t1;
	                s2 = t2;
	                s3 = t3;
	            }

	            // Shift rows, sub bytes, add round key
	            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

	            // Set output
	            M[offset]     = t0;
	            M[offset + 1] = t1;
	            M[offset + 2] = t2;
	            M[offset + 3] = t3;
	        },

	        keySize: 256/32
	    });

	    /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */
	    C.AES = BlockCipher._createHelper(AES);
	}());


	return CryptoJS.AES;

}));

/***/ }),

/***/ 109:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249), __webpack_require__(888));
	}
	else {}
}(this, function (CryptoJS) {

	/**
	 * Cipher core components.
	 */
	CryptoJS.lib.Cipher || (function (undefined) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var Base64 = C_enc.Base64;
	    var C_algo = C.algo;
	    var EvpKDF = C_algo.EvpKDF;

	    /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */
	    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */
	        cfg: Base.extend(),

	        /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createEncryptor: function (key, cfg) {
	            return this.create(this._ENC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */
	        createDecryptor: function (key, cfg) {
	            return this.create(this._DEC_XFORM_MODE, key, cfg);
	        },

	        /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */
	        init: function (xformMode, key, cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Store transform mode and key
	            this._xformMode = xformMode;
	            this._key = key;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-cipher logic
	            this._doReset();
	        },

	        /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */
	        process: function (dataUpdate) {
	            // Append
	            this._append(dataUpdate);

	            // Process available blocks
	            return this._process();
	        },

	        /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */
	        finalize: function (dataUpdate) {
	            // Final data update
	            if (dataUpdate) {
	                this._append(dataUpdate);
	            }

	            // Perform concrete-cipher logic
	            var finalProcessedData = this._doFinalize();

	            return finalProcessedData;
	        },

	        keySize: 128/32,

	        ivSize: 128/32,

	        _ENC_XFORM_MODE: 1,

	        _DEC_XFORM_MODE: 2,

	        /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */
	        _createHelper: (function () {
	            function selectCipherStrategy(key) {
	                if (typeof key == 'string') {
	                    return PasswordBasedCipher;
	                } else {
	                    return SerializableCipher;
	                }
	            }

	            return function (cipher) {
	                return {
	                    encrypt: function (message, key, cfg) {
	                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
	                    },

	                    decrypt: function (ciphertext, key, cfg) {
	                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
	                    }
	                };
	            };
	        }())
	    });

	    /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */
	    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
	        _doFinalize: function () {
	            // Process partial blocks
	            var finalProcessedBlocks = this._process(!!'flush');

	            return finalProcessedBlocks;
	        },

	        blockSize: 1
	    });

	    /**
	     * Mode namespace.
	     */
	    var C_mode = C.mode = {};

	    /**
	     * Abstract base block cipher mode template.
	     */
	    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
	        /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */
	        createEncryptor: function (cipher, iv) {
	            return this.Encryptor.create(cipher, iv);
	        },

	        /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */
	        createDecryptor: function (cipher, iv) {
	            return this.Decryptor.create(cipher, iv);
	        },

	        /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */
	        init: function (cipher, iv) {
	            this._cipher = cipher;
	            this._iv = iv;
	        }
	    });

	    /**
	     * Cipher Block Chaining mode.
	     */
	    var CBC = C_mode.CBC = (function () {
	        /**
	         * Abstract base CBC mode.
	         */
	        var CBC = BlockCipherMode.extend();

	        /**
	         * CBC encryptor.
	         */
	        CBC.Encryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // XOR and encrypt
	                xorBlock.call(this, words, offset, blockSize);
	                cipher.encryptBlock(words, offset);

	                // Remember this block to use with next block
	                this._prevBlock = words.slice(offset, offset + blockSize);
	            }
	        });

	        /**
	         * CBC decryptor.
	         */
	        CBC.Decryptor = CBC.extend({
	            /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */
	            processBlock: function (words, offset) {
	                // Shortcuts
	                var cipher = this._cipher;
	                var blockSize = cipher.blockSize;

	                // Remember this block to use with next block
	                var thisBlock = words.slice(offset, offset + blockSize);

	                // Decrypt and XOR
	                cipher.decryptBlock(words, offset);
	                xorBlock.call(this, words, offset, blockSize);

	                // This block becomes the previous block
	                this._prevBlock = thisBlock;
	            }
	        });

	        function xorBlock(words, offset, blockSize) {
	            var block;

	            // Shortcut
	            var iv = this._iv;

	            // Choose mixing block
	            if (iv) {
	                block = iv;

	                // Remove IV for subsequent blocks
	                this._iv = undefined;
	            } else {
	                block = this._prevBlock;
	            }

	            // XOR blocks
	            for (var i = 0; i < blockSize; i++) {
	                words[offset + i] ^= block[i];
	            }
	        }

	        return CBC;
	    }());

	    /**
	     * Padding namespace.
	     */
	    var C_pad = C.pad = {};

	    /**
	     * PKCS #5/7 padding strategy.
	     */
	    var Pkcs7 = C_pad.Pkcs7 = {
	        /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */
	        pad: function (data, blockSize) {
	            // Shortcut
	            var blockSizeBytes = blockSize * 4;

	            // Count padding bytes
	            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

	            // Create padding word
	            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;

	            // Create padding
	            var paddingWords = [];
	            for (var i = 0; i < nPaddingBytes; i += 4) {
	                paddingWords.push(paddingWord);
	            }
	            var padding = WordArray.create(paddingWords, nPaddingBytes);

	            // Add padding
	            data.concat(padding);
	        },

	        /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */
	        unpad: function (data) {
	            // Get number of padding bytes from last byte
	            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;

	            // Remove padding
	            data.sigBytes -= nPaddingBytes;
	        }
	    };

	    /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */
	    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */
	        cfg: Cipher.cfg.extend({
	            mode: CBC,
	            padding: Pkcs7
	        }),

	        reset: function () {
	            var modeCreator;

	            // Reset cipher
	            Cipher.reset.call(this);

	            // Shortcuts
	            var cfg = this.cfg;
	            var iv = cfg.iv;
	            var mode = cfg.mode;

	            // Reset block mode
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                modeCreator = mode.createEncryptor;
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                modeCreator = mode.createDecryptor;
	                // Keep at least one block in the buffer for unpadding
	                this._minBufferSize = 1;
	            }

	            if (this._mode && this._mode.__creator == modeCreator) {
	                this._mode.init(this, iv && iv.words);
	            } else {
	                this._mode = modeCreator.call(mode, this, iv && iv.words);
	                this._mode.__creator = modeCreator;
	            }
	        },

	        _doProcessBlock: function (words, offset) {
	            this._mode.processBlock(words, offset);
	        },

	        _doFinalize: function () {
	            var finalProcessedBlocks;

	            // Shortcut
	            var padding = this.cfg.padding;

	            // Finalize
	            if (this._xformMode == this._ENC_XFORM_MODE) {
	                // Pad data
	                padding.pad(this._data, this.blockSize);

	                // Process final blocks
	                finalProcessedBlocks = this._process(!!'flush');
	            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
	                // Process final blocks
	                finalProcessedBlocks = this._process(!!'flush');

	                // Unpad data
	                padding.unpad(finalProcessedBlocks);
	            }

	            return finalProcessedBlocks;
	        },

	        blockSize: 128/32
	    });

	    /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */
	    var CipherParams = C_lib.CipherParams = Base.extend({
	        /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */
	        init: function (cipherParams) {
	            this.mixIn(cipherParams);
	        },

	        /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */
	        toString: function (formatter) {
	            return (formatter || this.formatter).stringify(this);
	        }
	    });

	    /**
	     * Format namespace.
	     */
	    var C_format = C.format = {};

	    /**
	     * OpenSSL formatting strategy.
	     */
	    var OpenSSLFormatter = C_format.OpenSSL = {
	        /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */
	        stringify: function (cipherParams) {
	            var wordArray;

	            // Shortcuts
	            var ciphertext = cipherParams.ciphertext;
	            var salt = cipherParams.salt;

	            // Format
	            if (salt) {
	                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
	            } else {
	                wordArray = ciphertext;
	            }

	            return wordArray.toString(Base64);
	        },

	        /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */
	        parse: function (openSSLStr) {
	            var salt;

	            // Parse base64
	            var ciphertext = Base64.parse(openSSLStr);

	            // Shortcut
	            var ciphertextWords = ciphertext.words;

	            // Test for salt
	            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
	                // Extract salt
	                salt = WordArray.create(ciphertextWords.slice(2, 4));

	                // Remove salt from ciphertext
	                ciphertextWords.splice(0, 4);
	                ciphertext.sigBytes -= 16;
	            }

	            return CipherParams.create({ ciphertext: ciphertext, salt: salt });
	        }
	    };

	    /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */
	    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */
	        cfg: Base.extend({
	            format: OpenSSLFormatter
	        }),

	        /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Encrypt
	            var encryptor = cipher.createEncryptor(key, cfg);
	            var ciphertext = encryptor.finalize(message);

	            // Shortcut
	            var cipherCfg = encryptor.cfg;

	            // Create and return serializable cipher params
	            return CipherParams.create({
	                ciphertext: ciphertext,
	                key: key,
	                iv: cipherCfg.iv,
	                algorithm: cipher,
	                mode: cipherCfg.mode,
	                padding: cipherCfg.padding,
	                blockSize: cipher.blockSize,
	                formatter: cfg.format
	            });
	        },

	        /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, key, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Decrypt
	            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

	            return plaintext;
	        },

	        /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */
	        _parse: function (ciphertext, format) {
	            if (typeof ciphertext == 'string') {
	                return format.parse(ciphertext, this);
	            } else {
	                return ciphertext;
	            }
	        }
	    });

	    /**
	     * Key derivation function namespace.
	     */
	    var C_kdf = C.kdf = {};

	    /**
	     * OpenSSL key derivation function.
	     */
	    var OpenSSLKdf = C_kdf.OpenSSL = {
	        /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */
	        execute: function (password, keySize, ivSize, salt) {
	            // Generate random salt
	            if (!salt) {
	                salt = WordArray.random(64/8);
	            }

	            // Derive key and IV
	            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

	            // Separate key and IV
	            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
	            key.sigBytes = keySize * 4;

	            // Return params
	            return CipherParams.create({ key: key, iv: iv, salt: salt });
	        }
	    };

	    /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */
	    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */
	        cfg: SerializableCipher.cfg.extend({
	            kdf: OpenSSLKdf
	        }),

	        /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        encrypt: function (cipher, message, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Encrypt
	            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

	            // Mix in derived params
	            ciphertext.mixIn(derivedParams);

	            return ciphertext;
	        },

	        /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */
	        decrypt: function (cipher, ciphertext, password, cfg) {
	            // Apply config defaults
	            cfg = this.cfg.extend(cfg);

	            // Convert string to CipherParams
	            ciphertext = this._parse(ciphertext, cfg.format);

	            // Derive key and other params
	            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

	            // Add IV to config
	            cfg.iv = derivedParams.iv;

	            // Decrypt
	            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

	            return plaintext;
	        }
	    });
	}());


}));

/***/ }),

/***/ 249:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/*globals window, global, require*/

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {

	    var crypto;

	    // Native crypto from window (Browser)
	    if (typeof window !== 'undefined' && window.crypto) {
	        crypto = window.crypto;
	    }

	    // Native crypto in web worker (Browser)
	    if (typeof self !== 'undefined' && self.crypto) {
	        crypto = self.crypto;
	    }

	    // Native crypto from worker
	    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
	        crypto = globalThis.crypto;
	    }

	    // Native (experimental IE 11) crypto from window (Browser)
	    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
	        crypto = window.msCrypto;
	    }

	    // Native crypto from global (NodeJS)
	    if (!crypto && typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.crypto) {
	        crypto = __webpack_require__.g.crypto;
	    }

	    // Native crypto import via require (NodeJS)
	    if (!crypto && "function" === 'function') {
	        try {
	            crypto = __webpack_require__(480);
	        } catch (err) {}
	    }

	    /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */
	    var cryptoSecureRandomInt = function () {
	        if (crypto) {
	            // Use getRandomValues method (Browser)
	            if (typeof crypto.getRandomValues === 'function') {
	                try {
	                    return crypto.getRandomValues(new Uint32Array(1))[0];
	                } catch (err) {}
	            }

	            // Use randomBytes method (NodeJS)
	            if (typeof crypto.randomBytes === 'function') {
	                try {
	                    return crypto.randomBytes(4).readInt32LE();
	                } catch (err) {}
	            }
	        }

	        throw new Error('Native crypto module could not be used to get secure random number.');
	    };

	    /*
	     * Local polyfill of Object.create

	     */
	    var create = Object.create || (function () {
	        function F() {}

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }());

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var j = 0; j < thatSigBytes; j += 4) {
	                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            for (var i = 0; i < nBytes; i += 4) {
	                words.push(cryptoSecureRandomInt());
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            var processedWords;

	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),

/***/ 269:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var C_enc = C.enc;

	    /**
	     * Base64 encoding strategy.
	     */
	    var Base64 = C_enc.Base64 = {
	        /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;
	            var map = this._map;

	            // Clamp excess bits
	            wordArray.clamp();

	            // Convert
	            var base64Chars = [];
	            for (var i = 0; i < sigBytes; i += 3) {
	                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;
	                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;
	                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;

	                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;

	                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {
	                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));
	                }
	            }

	            // Add padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                while (base64Chars.length % 4) {
	                    base64Chars.push(paddingChar);
	                }
	            }

	            return base64Chars.join('');
	        },

	        /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */
	        parse: function (base64Str) {
	            // Shortcuts
	            var base64StrLength = base64Str.length;
	            var map = this._map;
	            var reverseMap = this._reverseMap;

	            if (!reverseMap) {
	                    reverseMap = this._reverseMap = [];
	                    for (var j = 0; j < map.length; j++) {
	                        reverseMap[map.charCodeAt(j)] = j;
	                    }
	            }

	            // Ignore padding
	            var paddingChar = map.charAt(64);
	            if (paddingChar) {
	                var paddingIndex = base64Str.indexOf(paddingChar);
	                if (paddingIndex !== -1) {
	                    base64StrLength = paddingIndex;
	                }
	            }

	            // Convert
	            return parseLoop(base64Str, base64StrLength, reverseMap);

	        },

	        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
	    };

	    function parseLoop(base64Str, base64StrLength, reverseMap) {
	      var words = [];
	      var nBytes = 0;
	      for (var i = 0; i < base64StrLength; i++) {
	          if (i % 4) {
	              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
	              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
	              var bitsCombined = bits1 | bits2;
	              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
	              nBytes++;
	          }
	      }
	      return WordArray.create(words, nBytes);
	    }
	}());


	return CryptoJS.enc.Base64;

}));

/***/ }),

/***/ 743:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS.enc.Utf8;

}));

/***/ }),

/***/ 888:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249), __webpack_require__(783), __webpack_require__(824));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var WordArray = C_lib.WordArray;
	    var C_algo = C.algo;
	    var MD5 = C_algo.MD5;

	    /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */
	    var EvpKDF = C_algo.EvpKDF = Base.extend({
	        /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */
	        cfg: Base.extend({
	            keySize: 128/32,
	            hasher: MD5,
	            iterations: 1
	        }),

	        /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */
	        init: function (cfg) {
	            this.cfg = this.cfg.extend(cfg);
	        },

	        /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */
	        compute: function (password, salt) {
	            var block;

	            // Shortcut
	            var cfg = this.cfg;

	            // Init hasher
	            var hasher = cfg.hasher.create();

	            // Initial values
	            var derivedKey = WordArray.create();

	            // Shortcuts
	            var derivedKeyWords = derivedKey.words;
	            var keySize = cfg.keySize;
	            var iterations = cfg.iterations;

	            // Generate key
	            while (derivedKeyWords.length < keySize) {
	                if (block) {
	                    hasher.update(block);
	                }
	                block = hasher.update(password).finalize(salt);
	                hasher.reset();

	                // Iterations
	                for (var i = 1; i < iterations; i++) {
	                    block = hasher.finalize(block);
	                    hasher.reset();
	                }

	                derivedKey.concat(block);
	            }
	            derivedKey.sigBytes = keySize * 4;

	            return derivedKey;
	        }
	    });

	    /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */
	    C.EvpKDF = function (password, salt, cfg) {
	        return EvpKDF.create(cfg).compute(password, salt);
	    };
	}());


	return CryptoJS.EvpKDF;

}));

/***/ }),

/***/ 824:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));

/***/ }),

/***/ 214:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Constants table
	    var T = [];

	    // Compute constants
	    (function () {
	        for (var i = 0; i < 64; i++) {
	            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;
	        }
	    }());

	    /**
	     * MD5 hash algorithm.
	     */
	    var MD5 = C_algo.MD5 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Swap endian
	            for (var i = 0; i < 16; i++) {
	                // Shortcuts
	                var offset_i = offset + i;
	                var M_offset_i = M[offset_i];

	                M[offset_i] = (
	                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	                );
	            }

	            // Shortcuts
	            var H = this._hash.words;

	            var M_offset_0  = M[offset + 0];
	            var M_offset_1  = M[offset + 1];
	            var M_offset_2  = M[offset + 2];
	            var M_offset_3  = M[offset + 3];
	            var M_offset_4  = M[offset + 4];
	            var M_offset_5  = M[offset + 5];
	            var M_offset_6  = M[offset + 6];
	            var M_offset_7  = M[offset + 7];
	            var M_offset_8  = M[offset + 8];
	            var M_offset_9  = M[offset + 9];
	            var M_offset_10 = M[offset + 10];
	            var M_offset_11 = M[offset + 11];
	            var M_offset_12 = M[offset + 12];
	            var M_offset_13 = M[offset + 13];
	            var M_offset_14 = M[offset + 14];
	            var M_offset_15 = M[offset + 15];

	            // Working varialbes
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];

	            // Computation
	            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);
	            d = FF(d, a, b, c, M_offset_1,  12, T[1]);
	            c = FF(c, d, a, b, M_offset_2,  17, T[2]);
	            b = FF(b, c, d, a, M_offset_3,  22, T[3]);
	            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);
	            d = FF(d, a, b, c, M_offset_5,  12, T[5]);
	            c = FF(c, d, a, b, M_offset_6,  17, T[6]);
	            b = FF(b, c, d, a, M_offset_7,  22, T[7]);
	            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);
	            d = FF(d, a, b, c, M_offset_9,  12, T[9]);
	            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
	            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
	            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);
	            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
	            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
	            b = FF(b, c, d, a, M_offset_15, 22, T[15]);

	            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);
	            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);
	            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
	            b = GG(b, c, d, a, M_offset_0,  20, T[19]);
	            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);
	            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);
	            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
	            b = GG(b, c, d, a, M_offset_4,  20, T[23]);
	            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);
	            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);
	            c = GG(c, d, a, b, M_offset_3,  14, T[26]);
	            b = GG(b, c, d, a, M_offset_8,  20, T[27]);
	            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);
	            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);
	            c = GG(c, d, a, b, M_offset_7,  14, T[30]);
	            b = GG(b, c, d, a, M_offset_12, 20, T[31]);

	            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);
	            d = HH(d, a, b, c, M_offset_8,  11, T[33]);
	            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
	            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
	            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);
	            d = HH(d, a, b, c, M_offset_4,  11, T[37]);
	            c = HH(c, d, a, b, M_offset_7,  16, T[38]);
	            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
	            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);
	            d = HH(d, a, b, c, M_offset_0,  11, T[41]);
	            c = HH(c, d, a, b, M_offset_3,  16, T[42]);
	            b = HH(b, c, d, a, M_offset_6,  23, T[43]);
	            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);
	            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
	            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
	            b = HH(b, c, d, a, M_offset_2,  23, T[47]);

	            a = II(a, b, c, d, M_offset_0,  6,  T[48]);
	            d = II(d, a, b, c, M_offset_7,  10, T[49]);
	            c = II(c, d, a, b, M_offset_14, 15, T[50]);
	            b = II(b, c, d, a, M_offset_5,  21, T[51]);
	            a = II(a, b, c, d, M_offset_12, 6,  T[52]);
	            d = II(d, a, b, c, M_offset_3,  10, T[53]);
	            c = II(c, d, a, b, M_offset_10, 15, T[54]);
	            b = II(b, c, d, a, M_offset_1,  21, T[55]);
	            a = II(a, b, c, d, M_offset_8,  6,  T[56]);
	            d = II(d, a, b, c, M_offset_15, 10, T[57]);
	            c = II(c, d, a, b, M_offset_6,  15, T[58]);
	            b = II(b, c, d, a, M_offset_13, 21, T[59]);
	            a = II(a, b, c, d, M_offset_4,  6,  T[60]);
	            d = II(d, a, b, c, M_offset_11, 10, T[61]);
	            c = II(c, d, a, b, M_offset_2,  15, T[62]);
	            b = II(b, c, d, a, M_offset_9,  21, T[63]);

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);

	            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
	            var nBitsTotalL = nBitsTotal;
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (
	                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)
	            );
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |
	                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)
	            );

	            data.sigBytes = (dataWords.length + 1) * 4;

	            // Hash final blocks
	            this._process();

	            // Shortcuts
	            var hash = this._hash;
	            var H = hash.words;

	            // Swap endian
	            for (var i = 0; i < 4; i++) {
	                // Shortcut
	                var H_i = H[i];

	                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	            }

	            // Return final computed hash
	            return hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    function FF(a, b, c, d, x, s, t) {
	        var n = a + ((b & c) | (~b & d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function GG(a, b, c, d, x, s, t) {
	        var n = a + ((b & d) | (c & ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function HH(a, b, c, d, x, s, t) {
	        var n = a + (b ^ c ^ d) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    function II(a, b, c, d, x, s, t) {
	        var n = a + (c ^ (b | ~d)) + x + t;
	        return ((n << s) | (n >>> (32 - s))) + b;
	    }

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
	    C.MD5 = Hasher._createHelper(MD5);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
	    C.HmacMD5 = Hasher._createHmacHelper(MD5);
	}(Math));


	return CryptoJS.MD5;

}));

/***/ }),

/***/ 783:
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(249));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-1 hash algorithm.
	     */
	    var SHA1 = C_algo.SHA1 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init([
	                0x67452301, 0xefcdab89,
	                0x98badcfe, 0x10325476,
	                0xc3d2e1f0
	            ]);
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];

	            // Computation
	            for (var i = 0; i < 80; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
	                    W[i] = (n << 1) | (n >>> 31);
	                }

	                var t = ((a << 5) | (a >>> 27)) + e + W[i];
	                if (i < 20) {
	                    t += ((b & c) | (~b & d)) + 0x5a827999;
	                } else if (i < 40) {
	                    t += (b ^ c ^ d) + 0x6ed9eba1;
	                } else if (i < 60) {
	                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;
	                } else /* if (i < 80) */ {
	                    t += (b ^ c ^ d) - 0x359d3e2a;
	                }

	                e = d;
	                d = c;
	                c = (b << 30) | (b >>> 2);
	                b = a;
	                a = t;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */
	    C.SHA1 = Hasher._createHelper(SHA1);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */
	    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	}());


	return CryptoJS.SHA1;

}));

/***/ }),

/***/ 678:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*
 * ed2curve: convert Ed25519 signing key pair into Curve25519
 * key pair suitable for Diffie-Hellman key exchange.
 *
 * Written by Dmitry Chestnykh in 2014. Public domain.
 */
/* jshint newcap: false */
(function(root, f) {
  'use strict';
  if ( true && module.exports) module.exports = f(__webpack_require__(780));
  else root.ed2curve = f(root.nacl);
}(this, function(nacl) {
  'use strict';
  if (!nacl) throw new Error('tweetnacl not loaded');

  // -- Operations copied from TweetNaCl.js. --

  var gf = function(init) {
    var i, r = new Float64Array(16);
    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
    return r;
  };

  var gf0 = gf(),
      gf1 = gf([1]),
      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  function car25519(o) {
    var c;
    var i;
    for (i = 0; i < 16; i++) {
      o[i] += 65536;
      c = Math.floor(o[i] / 65536);
      o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);
      o[i] -= (c * 65536);
    }
  }

  function sel25519(p, q, b) {
    var t, c = ~(b-1);
    for (var i = 0; i < 16; i++) {
      t = c & (p[i] ^ q[i]);
      p[i] ^= t;
      q[i] ^= t;
    }
  }

  function unpack25519(o, n) {
    var i;
    for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
    o[15] &= 0x7fff;
  }

  // addition
  function A(o, a, b) {
    var i;
    for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;
  }

  // subtraction
  function Z(o, a, b) {
    var i;
    for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;
  }

  // multiplication
  function M(o, a, b) {
    var i, j, t = new Float64Array(31);
    for (i = 0; i < 31; i++) t[i] = 0;
    for (i = 0; i < 16; i++) {
      for (j = 0; j < 16; j++) {
        t[i+j] += a[i] * b[j];
      }
    }
    for (i = 0; i < 15; i++) {
      t[i] += 38 * t[i+16];
    }
    for (i = 0; i < 16; i++) o[i] = t[i];
    car25519(o);
    car25519(o);
  }

  // squaring
  function S(o, a) {
    M(o, a, a);
  }

  // inversion
  function inv25519(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) c[a] = i[a];
    for (a = 253; a >= 0; a--) {
      S(c, c);
      if(a !== 2 && a !== 4) M(c, c, i);
    }
    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function pack25519(o, n) {
    var i, j, b;
    var m = gf(), t = gf();
    for (i = 0; i < 16; i++) t[i] = n[i];
    car25519(t);
    car25519(t);
    car25519(t);
    for (j = 0; j < 2; j++) {
      m[0] = t[0] - 0xffed;
      for (i = 1; i < 15; i++) {
        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
        m[i-1] &= 0xffff;
      }
      m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
      b = (m[15]>>16) & 1;
      m[14] &= 0xffff;
      sel25519(t, m, 1-b);
    }
    for (i = 0; i < 16; i++) {
      o[2*i] = t[i] & 0xff;
      o[2*i+1] = t[i] >> 8;
    }
  }

  function par25519(a) {
    var d = new Uint8Array(32);
    pack25519(d, a);
    return d[0] & 1;
  }

  function vn(x, xi, y, yi, n) {
    var i, d = 0;
    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
    return (1 & ((d - 1) >>> 8)) - 1;
  }

  function crypto_verify_32(x, xi, y, yi) {
    return vn(x, xi, y, yi, 32);
  }

  function neq25519(a, b) {
    var c = new Uint8Array(32), d = new Uint8Array(32);
    pack25519(c, a);
    pack25519(d, b);
    return crypto_verify_32(c, 0, d, 0);
  }

  function pow2523(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) c[a] = i[a];
    for (a = 250; a >= 0; a--) {
      S(c, c);
      if (a !== 1) M(c, c, i);
    }
    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function set25519(r, a) {
    var i;
    for (i = 0; i < 16; i++) r[i] = a[i] | 0;
  }

  function unpackneg(r, p) {
    var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

    set25519(r[2], gf1);
    unpack25519(r[1], p);
    S(num, r[1]);
    M(den, num, D);
    Z(num, num, r[2]);
    A(den, r[2], den);

    S(den2, den);
    S(den4, den2);
    M(den6, den4, den2);
    M(t, den6, num);
    M(t, t, den);

    pow2523(t, t);
    M(t, t, num);
    M(t, t, den);
    M(t, t, den);
    M(r[0], t, den);

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) M(r[0], r[0], I);

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) return -1;

    if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

    M(r[3], r[0], r[1]);
    return 0;
  }

  // ----

  // Converts Ed25519 public key to Curve25519 public key.
  // montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
  function convertPublicKey(pk) {
    var z = new Uint8Array(32),
      q = [gf(), gf(), gf(), gf()],
      a = gf(), b = gf();

    if (unpackneg(q, pk)) return null; // reject invalid key

    var y = q[1];

    A(a, gf1, y);
    Z(b, gf1, y);
    inv25519(b, b);
    M(a, a, b);

    pack25519(z, a);
    return z;
  }

  // Converts Ed25519 secret key to Curve25519 secret key.
  function convertSecretKey(sk) {
    var d = new Uint8Array(64), o = new Uint8Array(32), i;
    nacl.lowlevel.crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    for (i = 0; i < 32; i++) o[i] = d[i];
    for (i = 0; i < 64; i++) d[i] = 0;
    return o;
  }

  function convertKeyPair(edKeyPair) {
    var publicKey = convertPublicKey(edKeyPair.publicKey);
    if (!publicKey) return null;
    return {
      publicKey: publicKey,
      secretKey: convertSecretKey(edKeyPair.secretKey)
    };
  }

  return {
    convertPublicKey: convertPublicKey,
    convertSecretKey: convertSecretKey,
    convertKeyPair: convertKeyPair,
  };

}));


/***/ }),

/***/ 729:
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 780:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function(nacl) {
'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
};

//  Pluggable, initialized in high-level API below.
var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

var _0 = new Uint8Array(16);
var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function ts64(x, i, h, l) {
  x[i]   = (h >> 24) & 0xff;
  x[i+1] = (h >> 16) & 0xff;
  x[i+2] = (h >>  8) & 0xff;
  x[i+3] = h & 0xff;
  x[i+4] = (l >> 24)  & 0xff;
  x[i+5] = (l >> 16)  & 0xff;
  x[i+6] = (l >>  8)  & 0xff;
  x[i+7] = l & 0xff;
}

function vn(x, xi, y, yi, n) {
  var i,d = 0;
  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  return (1 & ((d - 1) >>> 8)) - 1;
}

function crypto_verify_16(x, xi, y, yi) {
  return vn(x,xi,y,yi,16);
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x,xi,y,yi,32);
}

function core_salsa20(o, p, k, c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }
   x0 =  x0 +  j0 | 0;
   x1 =  x1 +  j1 | 0;
   x2 =  x2 +  j2 | 0;
   x3 =  x3 +  j3 | 0;
   x4 =  x4 +  j4 | 0;
   x5 =  x5 +  j5 | 0;
   x6 =  x6 +  j6 | 0;
   x7 =  x7 +  j7 | 0;
   x8 =  x8 +  j8 | 0;
   x9 =  x9 +  j9 | 0;
  x10 = x10 + j10 | 0;
  x11 = x11 + j11 | 0;
  x12 = x12 + j12 | 0;
  x13 = x13 + j13 | 0;
  x14 = x14 + j14 | 0;
  x15 = x15 + j15 | 0;

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x1 >>>  0 & 0xff;
  o[ 5] = x1 >>>  8 & 0xff;
  o[ 6] = x1 >>> 16 & 0xff;
  o[ 7] = x1 >>> 24 & 0xff;

  o[ 8] = x2 >>>  0 & 0xff;
  o[ 9] = x2 >>>  8 & 0xff;
  o[10] = x2 >>> 16 & 0xff;
  o[11] = x2 >>> 24 & 0xff;

  o[12] = x3 >>>  0 & 0xff;
  o[13] = x3 >>>  8 & 0xff;
  o[14] = x3 >>> 16 & 0xff;
  o[15] = x3 >>> 24 & 0xff;

  o[16] = x4 >>>  0 & 0xff;
  o[17] = x4 >>>  8 & 0xff;
  o[18] = x4 >>> 16 & 0xff;
  o[19] = x4 >>> 24 & 0xff;

  o[20] = x5 >>>  0 & 0xff;
  o[21] = x5 >>>  8 & 0xff;
  o[22] = x5 >>> 16 & 0xff;
  o[23] = x5 >>> 24 & 0xff;

  o[24] = x6 >>>  0 & 0xff;
  o[25] = x6 >>>  8 & 0xff;
  o[26] = x6 >>> 16 & 0xff;
  o[27] = x6 >>> 24 & 0xff;

  o[28] = x7 >>>  0 & 0xff;
  o[29] = x7 >>>  8 & 0xff;
  o[30] = x7 >>> 16 & 0xff;
  o[31] = x7 >>> 24 & 0xff;

  o[32] = x8 >>>  0 & 0xff;
  o[33] = x8 >>>  8 & 0xff;
  o[34] = x8 >>> 16 & 0xff;
  o[35] = x8 >>> 24 & 0xff;

  o[36] = x9 >>>  0 & 0xff;
  o[37] = x9 >>>  8 & 0xff;
  o[38] = x9 >>> 16 & 0xff;
  o[39] = x9 >>> 24 & 0xff;

  o[40] = x10 >>>  0 & 0xff;
  o[41] = x10 >>>  8 & 0xff;
  o[42] = x10 >>> 16 & 0xff;
  o[43] = x10 >>> 24 & 0xff;

  o[44] = x11 >>>  0 & 0xff;
  o[45] = x11 >>>  8 & 0xff;
  o[46] = x11 >>> 16 & 0xff;
  o[47] = x11 >>> 24 & 0xff;

  o[48] = x12 >>>  0 & 0xff;
  o[49] = x12 >>>  8 & 0xff;
  o[50] = x12 >>> 16 & 0xff;
  o[51] = x12 >>> 24 & 0xff;

  o[52] = x13 >>>  0 & 0xff;
  o[53] = x13 >>>  8 & 0xff;
  o[54] = x13 >>> 16 & 0xff;
  o[55] = x13 >>> 24 & 0xff;

  o[56] = x14 >>>  0 & 0xff;
  o[57] = x14 >>>  8 & 0xff;
  o[58] = x14 >>> 16 & 0xff;
  o[59] = x14 >>> 24 & 0xff;

  o[60] = x15 >>>  0 & 0xff;
  o[61] = x15 >>>  8 & 0xff;
  o[62] = x15 >>> 16 & 0xff;
  o[63] = x15 >>> 24 & 0xff;
}

function core_hsalsa20(o,p,k,c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x5 >>>  0 & 0xff;
  o[ 5] = x5 >>>  8 & 0xff;
  o[ 6] = x5 >>> 16 & 0xff;
  o[ 7] = x5 >>> 24 & 0xff;

  o[ 8] = x10 >>>  0 & 0xff;
  o[ 9] = x10 >>>  8 & 0xff;
  o[10] = x10 >>> 16 & 0xff;
  o[11] = x10 >>> 24 & 0xff;

  o[12] = x15 >>>  0 & 0xff;
  o[13] = x15 >>>  8 & 0xff;
  o[14] = x15 >>> 16 & 0xff;
  o[15] = x15 >>> 24 & 0xff;

  o[16] = x6 >>>  0 & 0xff;
  o[17] = x6 >>>  8 & 0xff;
  o[18] = x6 >>> 16 & 0xff;
  o[19] = x6 >>> 24 & 0xff;

  o[20] = x7 >>>  0 & 0xff;
  o[21] = x7 >>>  8 & 0xff;
  o[22] = x7 >>> 16 & 0xff;
  o[23] = x7 >>> 24 & 0xff;

  o[24] = x8 >>>  0 & 0xff;
  o[25] = x8 >>>  8 & 0xff;
  o[26] = x8 >>> 16 & 0xff;
  o[27] = x8 >>> 24 & 0xff;

  o[28] = x9 >>>  0 & 0xff;
  o[29] = x9 >>>  8 & 0xff;
  o[30] = x9 >>> 16 & 0xff;
  o[31] = x9 >>> 24 & 0xff;
}

function crypto_core_salsa20(out,inp,k,c) {
  core_salsa20(out,inp,k,c);
}

function crypto_core_hsalsa20(out,inp,k,c) {
  core_hsalsa20(out,inp,k,c);
}

var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    mpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  }
  return 0;
}

function crypto_stream_salsa20(c,cpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = x[i];
  }
  return 0;
}

function crypto_stream(c,cpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20(c,cpos,d,sn,s);
}

function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
}

/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

var poly1305 = function(key) {
  this.buffer = new Uint8Array(16);
  this.r = new Uint16Array(10);
  this.h = new Uint16Array(10);
  this.pad = new Uint16Array(8);
  this.leftover = 0;
  this.fin = 0;

  var t0, t1, t2, t3, t4, t5, t6, t7;

  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  this.r[9] = ((t7 >>>  5)) & 0x007f;

  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
};

poly1305.prototype.blocks = function(m, mpos, bytes) {
  var hibit = this.fin ? 0 : (1 << 11);
  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  var h0 = this.h[0],
      h1 = this.h[1],
      h2 = this.h[2],
      h3 = this.h[3],
      h4 = this.h[4],
      h5 = this.h[5],
      h6 = this.h[6],
      h7 = this.h[7],
      h8 = this.h[8],
      h9 = this.h[9];

  var r0 = this.r[0],
      r1 = this.r[1],
      r2 = this.r[2],
      r3 = this.r[3],
      r4 = this.r[4],
      r5 = this.r[5],
      r6 = this.r[6],
      r7 = this.r[7],
      r8 = this.r[8],
      r9 = this.r[9];

  while (bytes >= 16) {
    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    h5 += ((t4 >>>  1)) & 0x1fff;
    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    h9 += ((t7 >>> 5)) | hibit;

    c = 0;

    d0 = c;
    d0 += h0 * r0;
    d0 += h1 * (5 * r9);
    d0 += h2 * (5 * r8);
    d0 += h3 * (5 * r7);
    d0 += h4 * (5 * r6);
    c = (d0 >>> 13); d0 &= 0x1fff;
    d0 += h5 * (5 * r5);
    d0 += h6 * (5 * r4);
    d0 += h7 * (5 * r3);
    d0 += h8 * (5 * r2);
    d0 += h9 * (5 * r1);
    c += (d0 >>> 13); d0 &= 0x1fff;

    d1 = c;
    d1 += h0 * r1;
    d1 += h1 * r0;
    d1 += h2 * (5 * r9);
    d1 += h3 * (5 * r8);
    d1 += h4 * (5 * r7);
    c = (d1 >>> 13); d1 &= 0x1fff;
    d1 += h5 * (5 * r6);
    d1 += h6 * (5 * r5);
    d1 += h7 * (5 * r4);
    d1 += h8 * (5 * r3);
    d1 += h9 * (5 * r2);
    c += (d1 >>> 13); d1 &= 0x1fff;

    d2 = c;
    d2 += h0 * r2;
    d2 += h1 * r1;
    d2 += h2 * r0;
    d2 += h3 * (5 * r9);
    d2 += h4 * (5 * r8);
    c = (d2 >>> 13); d2 &= 0x1fff;
    d2 += h5 * (5 * r7);
    d2 += h6 * (5 * r6);
    d2 += h7 * (5 * r5);
    d2 += h8 * (5 * r4);
    d2 += h9 * (5 * r3);
    c += (d2 >>> 13); d2 &= 0x1fff;

    d3 = c;
    d3 += h0 * r3;
    d3 += h1 * r2;
    d3 += h2 * r1;
    d3 += h3 * r0;
    d3 += h4 * (5 * r9);
    c = (d3 >>> 13); d3 &= 0x1fff;
    d3 += h5 * (5 * r8);
    d3 += h6 * (5 * r7);
    d3 += h7 * (5 * r6);
    d3 += h8 * (5 * r5);
    d3 += h9 * (5 * r4);
    c += (d3 >>> 13); d3 &= 0x1fff;

    d4 = c;
    d4 += h0 * r4;
    d4 += h1 * r3;
    d4 += h2 * r2;
    d4 += h3 * r1;
    d4 += h4 * r0;
    c = (d4 >>> 13); d4 &= 0x1fff;
    d4 += h5 * (5 * r9);
    d4 += h6 * (5 * r8);
    d4 += h7 * (5 * r7);
    d4 += h8 * (5 * r6);
    d4 += h9 * (5 * r5);
    c += (d4 >>> 13); d4 &= 0x1fff;

    d5 = c;
    d5 += h0 * r5;
    d5 += h1 * r4;
    d5 += h2 * r3;
    d5 += h3 * r2;
    d5 += h4 * r1;
    c = (d5 >>> 13); d5 &= 0x1fff;
    d5 += h5 * r0;
    d5 += h6 * (5 * r9);
    d5 += h7 * (5 * r8);
    d5 += h8 * (5 * r7);
    d5 += h9 * (5 * r6);
    c += (d5 >>> 13); d5 &= 0x1fff;

    d6 = c;
    d6 += h0 * r6;
    d6 += h1 * r5;
    d6 += h2 * r4;
    d6 += h3 * r3;
    d6 += h4 * r2;
    c = (d6 >>> 13); d6 &= 0x1fff;
    d6 += h5 * r1;
    d6 += h6 * r0;
    d6 += h7 * (5 * r9);
    d6 += h8 * (5 * r8);
    d6 += h9 * (5 * r7);
    c += (d6 >>> 13); d6 &= 0x1fff;

    d7 = c;
    d7 += h0 * r7;
    d7 += h1 * r6;
    d7 += h2 * r5;
    d7 += h3 * r4;
    d7 += h4 * r3;
    c = (d7 >>> 13); d7 &= 0x1fff;
    d7 += h5 * r2;
    d7 += h6 * r1;
    d7 += h7 * r0;
    d7 += h8 * (5 * r9);
    d7 += h9 * (5 * r8);
    c += (d7 >>> 13); d7 &= 0x1fff;

    d8 = c;
    d8 += h0 * r8;
    d8 += h1 * r7;
    d8 += h2 * r6;
    d8 += h3 * r5;
    d8 += h4 * r4;
    c = (d8 >>> 13); d8 &= 0x1fff;
    d8 += h5 * r3;
    d8 += h6 * r2;
    d8 += h7 * r1;
    d8 += h8 * r0;
    d8 += h9 * (5 * r9);
    c += (d8 >>> 13); d8 &= 0x1fff;

    d9 = c;
    d9 += h0 * r9;
    d9 += h1 * r8;
    d9 += h2 * r7;
    d9 += h3 * r6;
    d9 += h4 * r5;
    c = (d9 >>> 13); d9 &= 0x1fff;
    d9 += h5 * r4;
    d9 += h6 * r3;
    d9 += h7 * r2;
    d9 += h8 * r1;
    d9 += h9 * r0;
    c += (d9 >>> 13); d9 &= 0x1fff;

    c = (((c << 2) + c)) | 0;
    c = (c + d0) | 0;
    d0 = c & 0x1fff;
    c = (c >>> 13);
    d1 += c;

    h0 = d0;
    h1 = d1;
    h2 = d2;
    h3 = d3;
    h4 = d4;
    h5 = d5;
    h6 = d6;
    h7 = d7;
    h8 = d8;
    h9 = d9;

    mpos += 16;
    bytes -= 16;
  }
  this.h[0] = h0;
  this.h[1] = h1;
  this.h[2] = h2;
  this.h[3] = h3;
  this.h[4] = h4;
  this.h[5] = h5;
  this.h[6] = h6;
  this.h[7] = h7;
  this.h[8] = h8;
  this.h[9] = h9;
};

poly1305.prototype.finish = function(mac, macpos) {
  var g = new Uint16Array(10);
  var c, mask, f, i;

  if (this.leftover) {
    i = this.leftover;
    this.buffer[i++] = 1;
    for (; i < 16; i++) this.buffer[i] = 0;
    this.fin = 1;
    this.blocks(this.buffer, 0, 16);
  }

  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  for (i = 2; i < 10; i++) {
    this.h[i] += c;
    c = this.h[i] >>> 13;
    this.h[i] &= 0x1fff;
  }
  this.h[0] += (c * 5);
  c = this.h[0] >>> 13;
  this.h[0] &= 0x1fff;
  this.h[1] += c;
  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  this.h[2] += c;

  g[0] = this.h[0] + 5;
  c = g[0] >>> 13;
  g[0] &= 0x1fff;
  for (i = 1; i < 10; i++) {
    g[i] = this.h[i] + c;
    c = g[i] >>> 13;
    g[i] &= 0x1fff;
  }
  g[9] -= (1 << 13);

  mask = (c ^ 1) - 1;
  for (i = 0; i < 10; i++) g[i] &= mask;
  mask = ~mask;
  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  f = this.h[0] + this.pad[0];
  this.h[0] = f & 0xffff;
  for (i = 1; i < 8; i++) {
    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    this.h[i] = f & 0xffff;
  }

  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
};

poly1305.prototype.update = function(m, mpos, bytes) {
  var i, want;

  if (this.leftover) {
    want = (16 - this.leftover);
    if (want > bytes)
      want = bytes;
    for (i = 0; i < want; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    bytes -= want;
    mpos += want;
    this.leftover += want;
    if (this.leftover < 16)
      return;
    this.blocks(this.buffer, 0, 16);
    this.leftover = 0;
  }

  if (bytes >= 16) {
    want = bytes - (bytes % 16);
    this.blocks(m, mpos, want);
    mpos += want;
    bytes -= want;
  }

  if (bytes) {
    for (i = 0; i < bytes; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    this.leftover += bytes;
  }
};

function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  var s = new poly1305(k);
  s.update(m, mpos, n);
  s.finish(out, outpos);
  return 0;
}

function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  var x = new Uint8Array(16);
  crypto_onetimeauth(x,0,m,mpos,n,k);
  return crypto_verify_16(h,hpos,x,0);
}

function crypto_secretbox(c,m,d,n,k) {
  var i;
  if (d < 32) return -1;
  crypto_stream_xor(c,0,m,0,d,n,k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (i = 0; i < 16; i++) c[i] = 0;
  return 0;
}

function crypto_secretbox_open(m,c,d,n,k) {
  var i;
  var x = new Uint8Array(32);
  if (d < 32) return -1;
  crypto_stream(x,0,32,n,k);
  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
  crypto_stream_xor(m,0,c,0,d,n,k);
  for (i = 0; i < 32; i++) m[i] = 0;
  return 0;
}

function set25519(r, a) {
  var i;
  for (i = 0; i < 16; i++) r[i] = a[i]|0;
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function par25519(a) {
  var d = new Uint8Array(32);
  pack25519(d, a);
  return d[0] & 1;
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 250; a >= 0; a--) {
      S(c, c);
      if(a !== 1) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80), r, i;
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf();
  for (i = 0; i < 31; i++) z[i] = n[i];
  z[31]=(n[31]&127)|64;
  z[0]&=248;
  unpack25519(x,p);
  for (i = 0; i < 16; i++) {
    b[i]=x[i];
    d[i]=a[i]=c[i]=0;
  }
  a[0]=d[0]=1;
  for (i=254; i>=0; --i) {
    r=(z[i>>>3]>>>(i&7))&1;
    sel25519(a,b,r);
    sel25519(c,d,r);
    A(e,a,c);
    Z(a,a,c);
    A(c,b,d);
    Z(b,b,d);
    S(d,e);
    S(f,a);
    M(a,c,a);
    M(c,b,e);
    A(e,a,c);
    Z(a,a,c);
    S(b,a);
    Z(c,d,f);
    M(a,c,_121665);
    A(a,a,d);
    M(c,c,a);
    M(a,d,f);
    M(d,b,x);
    S(b,e);
    sel25519(a,b,r);
    sel25519(c,d,r);
  }
  for (i = 0; i < 16; i++) {
    x[i+16]=a[i];
    x[i+32]=c[i];
    x[i+48]=b[i];
    x[i+64]=d[i];
  }
  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32,x32);
  M(x16,x16,x32);
  pack25519(q,x16);
  return 0;
}

function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9);
}

function crypto_box_keypair(y, x) {
  randombytes(x, 32);
  return crypto_scalarmult_base(y, x);
}

function crypto_box_beforenm(k, y, x) {
  var s = new Uint8Array(32);
  crypto_scalarmult(s, x, y);
  return crypto_core_hsalsa20(k, _0, s, sigma);
}

var crypto_box_afternm = crypto_secretbox;
var crypto_box_open_afternm = crypto_secretbox_open;

function crypto_box(c, m, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_afternm(c, m, d, n, k);
}

function crypto_box_open(m, c, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_open_afternm(m, c, d, n, k);
}

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function crypto_hashblocks_hl(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16),
      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
      th, tl, i, j, h, l, a, b, c, d;

  var ah0 = hh[0],
      ah1 = hh[1],
      ah2 = hh[2],
      ah3 = hh[3],
      ah4 = hh[4],
      ah5 = hh[5],
      ah6 = hh[6],
      ah7 = hh[7],

      al0 = hl[0],
      al1 = hl[1],
      al2 = hl[2],
      al3 = hl[3],
      al4 = hl[4],
      al5 = hl[5],
      al6 = hl[6],
      al7 = hl[7];

  var pos = 0;
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos;
      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0;
      bh1 = ah1;
      bh2 = ah2;
      bh3 = ah3;
      bh4 = ah4;
      bh5 = ah5;
      bh6 = ah6;
      bh7 = ah7;

      bl0 = al0;
      bl1 = al1;
      bl2 = al2;
      bl3 = al3;
      bl4 = al4;
      bl5 = al5;
      bl6 = al6;
      bl7 = al7;

      // add
      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6);
      l = (al4 & al5) ^ (~al4 & al6);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // K
      h = K[i*2];
      l = K[i*2+1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // w
      h = wh[i%16];
      l = wl[i%16];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      th = c & 0xffff | d << 16;
      tl = a & 0xffff | b << 16;

      // add
      h = th;
      l = tl;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh7 = (c & 0xffff) | (d << 16);
      bl7 = (a & 0xffff) | (b << 16);

      // add
      h = bh3;
      l = bl3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = th;
      l = tl;

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh3 = (c & 0xffff) | (d << 16);
      bl3 = (a & 0xffff) | (b << 16);

      ah1 = bh0;
      ah2 = bh1;
      ah3 = bh2;
      ah4 = bh3;
      ah5 = bh4;
      ah6 = bh5;
      ah7 = bh6;
      ah0 = bh7;

      al1 = bl0;
      al2 = bl1;
      al3 = bl2;
      al4 = bl3;
      al5 = bl4;
      al6 = bl5;
      al7 = bl6;
      al0 = bl7;

      if (i%16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j];
          l = wl[j];

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = wh[(j+9)%16];
          l = wl[(j+9)%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma0
          th = wh[(j+1)%16];
          tl = wl[(j+1)%16];
          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma1
          th = wh[(j+14)%16];
          tl = wl[(j+14)%16];
          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          wh[j] = (c & 0xffff) | (d << 16);
          wl[j] = (a & 0xffff) | (b << 16);
        }
      }
    }

    // add
    h = ah0;
    l = al0;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[0];
    l = hl[0];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    hl[0] = al0 = (a & 0xffff) | (b << 16);

    h = ah1;
    l = al1;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[1];
    l = hl[1];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    hl[1] = al1 = (a & 0xffff) | (b << 16);

    h = ah2;
    l = al2;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[2];
    l = hl[2];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    hl[2] = al2 = (a & 0xffff) | (b << 16);

    h = ah3;
    l = al3;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[3];
    l = hl[3];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    hl[3] = al3 = (a & 0xffff) | (b << 16);

    h = ah4;
    l = al4;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[4];
    l = hl[4];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    hl[4] = al4 = (a & 0xffff) | (b << 16);

    h = ah5;
    l = al5;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[5];
    l = hl[5];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    hl[5] = al5 = (a & 0xffff) | (b << 16);

    h = ah6;
    l = al6;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[6];
    l = hl[6];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    hl[6] = al6 = (a & 0xffff) | (b << 16);

    h = ah7;
    l = al7;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[7];
    l = hl[7];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    hl[7] = al7 = (a & 0xffff) | (b << 16);

    pos += 128;
    n -= 128;
  }

  return n;
}

function crypto_hash(out, m, n) {
  var hh = new Int32Array(8),
      hl = new Int32Array(8),
      x = new Uint8Array(256),
      i, b = n;

  hh[0] = 0x6a09e667;
  hh[1] = 0xbb67ae85;
  hh[2] = 0x3c6ef372;
  hh[3] = 0xa54ff53a;
  hh[4] = 0x510e527f;
  hh[5] = 0x9b05688c;
  hh[6] = 0x1f83d9ab;
  hh[7] = 0x5be0cd19;

  hl[0] = 0xf3bcc908;
  hl[1] = 0x84caa73b;
  hl[2] = 0xfe94f82b;
  hl[3] = 0x5f1d36f1;
  hl[4] = 0xade682d1;
  hl[5] = 0x2b3e6c1f;
  hl[6] = 0xfb41bd6b;
  hl[7] = 0x137e2179;

  crypto_hashblocks_hl(hh, hl, m, n);
  n %= 128;

  for (i = 0; i < n; i++) x[i] = m[b-n+i];
  x[n] = 128;

  n = 256-128*(n<112?1:0);
  x[n-9] = 0;
  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
  crypto_hashblocks_hl(hh, hl, x, n);

  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

  return 0;
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  var i;
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for (i = 255; i >= 0; --i) {
    b = (s[(i/8)|0] >> (i&7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function crypto_sign_keypair(pk, sk, seeded) {
  var d = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()];
  var i;

  if (!seeded) randombytes(sk, 32);
  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  return 0;
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

function modL(r, x) {
  var carry, i, j, k;
  for (i = 63; i >= 32; --i) {
    carry = 0;
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = Math.floor((x[j] + 128) / 256);
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  for (i = 0; i < 32; i++) {
    x[i+1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64), i;
  for (i = 0; i < 64; i++) x[i] = r[i];
  for (i = 0; i < 64; i++) r[i] = 0;
  modL(r, x);
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  crypto_hash(r, sm.subarray(32), n+32);
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for (i = 32; i < 64; i++) sm[i] = sk[i];
  crypto_hash(h, sm, n + 64);
  reduce(h);

  for (i = 0; i < 64; i++) x[i] = 0;
  for (i = 0; i < 32; i++) x[i] = r[i];
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i+j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) M(r[0], r[0], I);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) return -1;

  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  M(r[3], r[0], r[1]);
  return 0;
}

function crypto_sign_open(m, sm, n, pk) {
  var i;
  var t = new Uint8Array(32), h = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  if (n < 64) return -1;

  if (unpackneg(q, pk)) return -1;

  for (i = 0; i < n; i++) m[i] = sm[i];
  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  crypto_hash(h, m, n);
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0;
    return -1;
  }

  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  return n;
}

var crypto_secretbox_KEYBYTES = 32,
    crypto_secretbox_NONCEBYTES = 24,
    crypto_secretbox_ZEROBYTES = 32,
    crypto_secretbox_BOXZEROBYTES = 16,
    crypto_scalarmult_BYTES = 32,
    crypto_scalarmult_SCALARBYTES = 32,
    crypto_box_PUBLICKEYBYTES = 32,
    crypto_box_SECRETKEYBYTES = 32,
    crypto_box_BEFORENMBYTES = 32,
    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
    crypto_sign_BYTES = 64,
    crypto_sign_PUBLICKEYBYTES = 32,
    crypto_sign_SECRETKEYBYTES = 64,
    crypto_sign_SEEDBYTES = 32,
    crypto_hash_BYTES = 64;

nacl.lowlevel = {
  crypto_core_hsalsa20: crypto_core_hsalsa20,
  crypto_stream_xor: crypto_stream_xor,
  crypto_stream: crypto_stream,
  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
  crypto_stream_salsa20: crypto_stream_salsa20,
  crypto_onetimeauth: crypto_onetimeauth,
  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
  crypto_verify_16: crypto_verify_16,
  crypto_verify_32: crypto_verify_32,
  crypto_secretbox: crypto_secretbox,
  crypto_secretbox_open: crypto_secretbox_open,
  crypto_scalarmult: crypto_scalarmult,
  crypto_scalarmult_base: crypto_scalarmult_base,
  crypto_box_beforenm: crypto_box_beforenm,
  crypto_box_afternm: crypto_box_afternm,
  crypto_box: crypto_box,
  crypto_box_open: crypto_box_open,
  crypto_box_keypair: crypto_box_keypair,
  crypto_hash: crypto_hash,
  crypto_sign: crypto_sign,
  crypto_sign_keypair: crypto_sign_keypair,
  crypto_sign_open: crypto_sign_open,

  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
  crypto_sign_BYTES: crypto_sign_BYTES,
  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
  crypto_hash_BYTES: crypto_hash_BYTES,

  gf: gf,
  D: D,
  L: L,
  pack25519: pack25519,
  unpack25519: unpack25519,
  M: M,
  A: A,
  S: S,
  Z: Z,
  pow2523: pow2523,
  add: add,
  set25519: set25519,
  modL: modL,
  scalarmult: scalarmult,
  scalarbase: scalarbase,
};

/* High-level API */

function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
}

function checkBoxLengths(pk, sk) {
  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
}

function checkArrayTypes() {
  for (var i = 0; i < arguments.length; i++) {
    if (!(arguments[i] instanceof Uint8Array))
      throw new TypeError('unexpected type, use Uint8Array');
  }
}

function cleanup(arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0;
}

nacl.randomBytes = function(n) {
  var b = new Uint8Array(n);
  randombytes(b, n);
  return b;
};

nacl.secretbox = function(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  var c = new Uint8Array(m.length);
  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
};

nacl.secretbox.open = function(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  var m = new Uint8Array(c.length);
  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32) return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
};

nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

nacl.scalarMult = function(n, p) {
  checkArrayTypes(n, p);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult(q, n, p);
  return q;
};

nacl.scalarMult.base = function(n) {
  checkArrayTypes(n);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult_base(q, n);
  return q;
};

nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

nacl.box = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox(msg, nonce, k);
};

nacl.box.before = function(publicKey, secretKey) {
  checkArrayTypes(publicKey, secretKey);
  checkBoxLengths(publicKey, secretKey);
  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
  crypto_box_beforenm(k, publicKey, secretKey);
  return k;
};

nacl.box.after = nacl.secretbox;

nacl.box.open = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox.open(msg, nonce, k);
};

nacl.box.open.after = nacl.secretbox.open;

nacl.box.keyPair = function() {
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  crypto_box_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.box.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  crypto_scalarmult_base(pk, secretKey);
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
nacl.box.nonceLength = crypto_box_NONCEBYTES;
nacl.box.overheadLength = nacl.secretbox.overheadLength;

nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  crypto_sign(signedMsg, msg, msg.length, secretKey);
  return signedMsg;
};

nacl.sign.open = function(signedMsg, publicKey) {
  checkArrayTypes(signedMsg, publicKey);
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var tmp = new Uint8Array(signedMsg.length);
  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
  if (mlen < 0) return null;
  var m = new Uint8Array(mlen);
  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
  return m;
};

nacl.sign.detached = function(msg, secretKey) {
  var signedMsg = nacl.sign(msg, secretKey);
  var sig = new Uint8Array(crypto_sign_BYTES);
  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  return sig;
};

nacl.sign.detached.verify = function(msg, sig, publicKey) {
  checkArrayTypes(msg, sig, publicKey);
  if (sig.length !== crypto_sign_BYTES)
    throw new Error('bad signature size');
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  var i;
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

nacl.sign.keyPair = function() {
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign.keyPair.fromSeed = function(seed) {
  checkArrayTypes(seed);
  if (seed.length !== crypto_sign_SEEDBYTES)
    throw new Error('bad seed size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  crypto_sign_keypair(pk, sk, true);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
nacl.sign.seedLength = crypto_sign_SEEDBYTES;
nacl.sign.signatureLength = crypto_sign_BYTES;

nacl.hash = function(msg) {
  checkArrayTypes(msg);
  var h = new Uint8Array(crypto_hash_BYTES);
  crypto_hash(h, msg, msg.length);
  return h;
};

nacl.hash.hashLength = crypto_hash_BYTES;

nacl.verify = function(x, y) {
  checkArrayTypes(x, y);
  // Zero length arguments are considered not equal.
  if (x.length === 0 || y.length === 0) return false;
  if (x.length !== y.length) return false;
  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
};

nacl.setPRNG = function(fn) {
  randombytes = fn;
};

(function() {
  // Initialize PRNG if environment provides CSPRNG.
  // If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  if (crypto && crypto.getRandomValues) {
    // Browsers.
    var QUOTA = 65536;
    nacl.setPRNG(function(x, n) {
      var i, v = new Uint8Array(n);
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
      }
      for (i = 0; i < n; i++) x[i] = v[i];
      cleanup(v);
    });
  } else if (true) {
    // Node.js.
    crypto = __webpack_require__(24);
    if (crypto && crypto.randomBytes) {
      nacl.setPRNG(function(x, n) {
        var i, v = crypto.randomBytes(n);
        for (i = 0; i < n; i++) x[i] = v[i];
        cleanup(v);
      });
    }
  }
})();

})( true && module.exports ? module.exports : (self.nacl = self.nacl || {}));


/***/ }),

/***/ 856:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 601:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 480:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 24:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 683:
/***/ ((module) => {


  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1048576, "");
  base64DecodeToExistingUint8Array(bufferView, 1065589, "");
  base64DecodeToExistingUint8Array(bufferView, 1106028, "EQABAAQAHAAAADYAAAAAAAkASwAAAAAAXAAEAAcAAgAaAAAAAAAAAAEAAAAHAAEADQA2ACwAAAAHAAEAAAAD");
  base64DecodeToExistingUint8Array(bufferView, 1106104, "BwAYAAAACQAAAAcADAABACsAAAACAA8AOQAZAAAAAgAGAAYAAgAAAAAABAAAAAAAAAAOAAIABQA8AAwAAAALAAAAAAAAAA8AAAABAAQAAAAx");
  base64DecodeToExistingUint8Array(bufferView, 1106198, "AQAMAAwAAAAdACcABgAJADIABwAIAAAAAAAHAAQAAAADABAABAAAAAAAEwADAAAAEAAAADgAAgAVAAAAAAACAAoAAQAGAAkABAACAAQAAgAAAAIASQAAAAAAAAACAAMAAgAAAAAADAAAAAAABQ==");
  base64DecodeToExistingUint8Array(bufferView, 1106316, "DgAlAAAAAAAAACMABwADAAAAAQAEAB0AAAAEAAQAAwABAAAAFAAAAAEACAATACEAFgAEAAAAAAAAAAsABQAAAA0ABwAAAAAABwAAAAAAAQACAA8ACgABABAAAQAEAAkAAAAGABAAEQACAAYABAAPAAEACgAVAAAAAgALAAAAAgAAAAEADgAZAAUACAAAAAIABgANAAoACQAHAAMAAAAAAAAAAQAAAAEAAAACAAoAAAABAAAAAgABAAIAAAAAAAAABwADAAAAAAAEAAUAAAALAAEAAAADAAMACgAAAAIAAQABAAAABgAGAAEADAADAAAAAwAAAAkAAQAFAAIAAwAP");
  base64DecodeToExistingUint8Array(bufferView, 1106584, "AwAAAAMAAw==");
  base64DecodeToExistingUint8Array(bufferView, 1106602, "BAAAAAkAAAAAAAUAAgAEAAIAAQAAAAMAAgAAAAQAAAAYAAIAAQAAAAEABgADABAACAAEAAAABQATAAEABQACAAIAAQACAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1106686, "BgAAAAAAAAAUAAcAAAADAAAAAgABAAAAAgADAAIAAAAEAAAAAQAAAAAAAQADAAAAAQACAAEABAAAAAMAAAAAAAEAAAAEAAAAAAABAAEACgAJAAAAAAAFABMAAQABAAAADAAEAAsAAQAAAAgAAQACAAgAAwAAAAgAAAABAAEAAAAAAAQABAAAAAEAAAAAAAEAAgACAA4AAgABAAEABAAAAAcAAAAAAAMAAQAAAAIAAgABAAAAAwADAAAAAwADAAAAAAAAAAYAAQAAAAcAAwABAAUAAQAAAAwAAQAAAAAAAQABAAIADwABAAAACgACAAIADAACAAMAAAABAAEAAAAAAAAACQAHAAAAAQACAAAAAQAHAAAABgAAAAAABQAAAAk=");
  base64DecodeToExistingUint8Array(bufferView, 1106984, "AwABAAIABgAAAAcAAQADAAAABQABAAEAAQAAAAIAAQACAAMAAAAEAAAABQACAAIAAgAAAAEAAQABAAMAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1107056, "AQAFAAIAAAAAAAMAAgAAAAAAAgAAAAMAAQADAAQAAQAEAAEAAAAFAAIAAAACAAIAAAABAAAABAABAAcABAAEAAIAAAAAAAEABAAAAAEAAAABAAAABQABAAIAAAABAAEAAgAHAAIAAQAD");
  base64DecodeToExistingUint8Array(bufferView, 1107172, "AQAAAAgAAwACAAgAAwADAAEAAwABAAAAAQAAAAMACAAFAAMAAAABAAEAAAAAAAEAAAAAAAAAAgAB");
  base64DecodeToExistingUint8Array(bufferView, 1107238, "CQAAAAAAAAACAAIABAABAAEAAAAAAAgAAgABAAEABwAEAAAAAwABAAUAAAABAAAAAQAEAAQAAQABAAAAAQAEAAQACwAAAAIAAgABAAIABQADAAMAAAAAAAIABAADAAAACgAAAAMAAAAEAAAAAAABAAAAAAABAAEAAQAAAAEAAAADAAIAAAAAAAIAAAADAAAAAQABAAQAAQAAAAUAAAACAAEAAQACAAEAAQABAAIAAAABAAEAAgACAAIAAQADAAgAAAAAAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 1107456, "AQACAAQAAAADAAAAAQABAAEAAgAAAAUAAAAAAAEAAQADAAIACQAAAAQAAwABAAEAAAABAAEAAwABAAMABQAAAAEAAgAFAAIAAAABAAAAAAACAAAA5koDANxIAwDmJP4A5ustAOZ8pgBrSQ4A5pMFANzgAgHm5yAA5ib+AObtqADmQgMA3OoGAObwpgDmQ9IB5uuoAHa4DgDcuBoA5rAaAAmqGwDcLf4AyiIDAAdGFAHYcNEB5tUdAAHjHACEdA8A5m0bAN6aBQDmDQMA5gUDAOZdBgASuAUA3Cv+AAc2EgHgLjAA5kkHAOZ1GgAJwBEB5irgAeboBgDcjRAA5uwdAOZRAwDmVAkA5uktAOb9CAB6yg4A5mwTAdy5GgDmwx0A5q3RAebqqADerQUA5iUIAOa+qgDmAhEB5umoANzjCADm5C0A6BUDAAfKEQHc1xwA3NPoAdw6CgHm4QYA5uQGAOhYAwDmhwQA6l0DACBQBgDm7qgA5uUdABG3BQDmGQgA5jBrAQHzagEHvAkA5todAOlfAwBrSw4A3EQHAMonAwAOtAUA5vQdANwxAwDmEgYA5qrRAeYN4AGCew8A5m4bAObxHQDYb9EBgXEPAAFo0QHc1ugB5mcDAOZtAwDm4BwA5tgGAObaHADcLwMAEscFAAlNDADmmAUA5h8IANzmCgHm/y0A3KUFAObhHQDcFgMA5uEtAOZF6QHcGA8A5kMHAAlNDQDm8C0A5KkYAAnSFwDm5qgA5twGAObjHQDaKjAA5gADANw1DwDmCwMA5j4DAOY6BwDm+BwACYQPANwXAwDmgwQA3FoIAOavBQAHwBUB5gcDANzdHADcGQMA5t8GAObkHQDcUgkA5gngAfBFAwDmn6YA5hfgAdzV6AHm0R0A5n2mANx+0QHmahMB5uSoAOb7CAAMsgUA3DMDAOZuAwDoGgMA5knpARe/BQDm/AgA5gkDAOZbAwDmhQQA5oYPAOb4LQDmZAMACUYQAQqwBQAJQhQB3Cz+ANwdAwAHPAkA5j8HAObsBgDm4qgA5kMDAOYC4AHmJf4AI3AGAObfCADcqgUA5lgGAObmLQDm4AYACTQRAebJHQDmxh0A5rQaAOZeEwAJKxcB3HvRAdw5BwDm5QoB5msTAeYIAwDmIwgA5hMDAObgCADcVQMA3FMDANhm0QHmMwcA5nIbANzeHADmEuAB5vctAOZRCQAHvAoA5tgIAOYk4AEB2SAA5kjpAcohAwDmEeAB5ugdAOpeAwDc6CAAAfRqAeaJ0QHmRukB5twgAOaDDwDm9C0A3O0GANwp/gDcHgMA6fwdAB1NBgDmRAMA5lIDAOYyBwDmhtEBAdQcAAiaMADmHQgA5mgTAebnCADm3h0AB7OpANyWBQDcRwMA5lkGAAc8CgAZwgUA5u8sAOb3CADcXAYA3CwDAOZrGwDmPwMA3LcaAOa7GgDmFgYABzwLAOadBQDmR+kB5rEaANw7BwDmI/4A5loGAObiLQDmt6oA5tcIAOYQBgABNQMA5u4tAAkGqADmPQcA3KIFAOYv/gDmxx0A5ucGAOaVBQDm3R0A5vCoAObxLQDmawMA5nITAQHyagHc/R0A5rCqAObvHQDcuhoA5u0HAAk6EADmRgMA5gDgAdxWBgDqYQMA5ngaABW8BQDmBuAB5v4dAObMHQDmEAMA5ucdAObIHQAJORAAB+YbANwxBwDmEgMA5ikIABjBBQDcKgMA5ibgAeZ2GgDm4QgA5h7gAebtHQDm46gA5nMbANxZAwDmIf4A5ijgAebxpgDmvBoA3DwHAOZ0EwHmrAUA3O8gAOb0HADcMgMA3Cr+ANwmAwDmGAgA5twdANybBQDmMmsB3E0DANgbAwDmd6YA5gPgAQnKDQDcpwUA6s0dANz/HQDmagMA5g8DAOblLQABOAMA5l0TAOY6GQBnOQ4ACc0MAObTHQDm4y0AATYDAOZxEwHm2yAA5lcGAOYRAwDcxg8AAdMgANxfBgDmFOAB5lsGAOb+LQDmM2sBAeQcAOYEAwAd8ggAAfFqAeaI0QHmG+AB5jgKAdzVHADmMAcAesgOAOYGAwDm4C0AIBoGAOahBQDmLQgA2HLRAdxOAwDmRQcA5uCoAOZUBgDm+i0A5gARAeY9AwDcwh0A5hUGANztHADmFxoAAegcAObrBgDmIP4A5jUHAOYn4AHczx0A5vUdAObwBwDc7ggA5oQEANwYAwDc0OgB3KYFANwuAwDcSAcA3JEFANw3BwDmwaoA5grgAQc0GwDm1gYA5nmmAObdCADmhw8A5vEsAMrQHQDm8i0A5rIaAOYMAwDcgNEB5mUDANwjAwDYbtEB5vEHANz2CAAJ7asAVFUMAObvqADmehoACT8cAeaSBQDc6QgA3FQDABC2BQDm0RwA5qzRAeYf4AHm+x0AB7cWAeZXAwDmq9EB5mYDAA+1BQDctKoAAeUgAOZvpgDmQAMACRQXAOYWCADm/wgA3HzRAeYmCADc3xwA5vstANwpAwDpYgMA3i0wAOYgCADmD+ABAWfRAQlgGgDmAREB5l8TAOZvGwDmcRsAgnIPAOaZBQDm/S0A5hjgAdxVBgDme6YAB8MUAeboLQDmZhMB5noDAeY2BwDcJ/4A5tEgAObaCAAJwhQB5h3gAQlTqQAeTgYACX8tAObbHADmUAMA5vgIAOZ2pgAB8GoB5tYgAAkzEQHcgdEBE7kFAOaeBQAJvxUB5qAFACJSBgDmIOAB5oIPAOYCAwDm7S0A5uIGAAm5EAHm8CwA5gTgAeb5HADmXgYA3NLoAdxaAwDm56gA3MUFANg5DwCCgA8A5kTpAebhqADmyx0A5uwIANhl0QHm1x0ACU0LAObzBwDmFAMA5icIAAE0AwDm0hwA5mgDAObbCAAJTQoA5mMDANwZDwDm2gYA3CQDAOYbCADcOxkA5m8DAObzHQAcTAYA3DcPAObBHQDYcdEBCT8WAQdzEQHc7wgA5kTSAdw7AwDmhgQAa0gOAObdFwDmFeABJBEHAObmHQDm5AgA5iwIAOYTBgDcowUAgn0PAGtKDgDmIggA3EkDAOZ7GgCCeg8A5p8FAObqHQDm8B0A5rMaAAnEqADkKzAAC7EFAObzLQDm3AgA5rKqAObnLQAhUQYA5uAdAOblqAAB5hwAG0sGAOY2awHm7wcA5g8KAQk6DgDcRgcA5hbgAdwcAwDc+ggA5tgdAOb2LQDc7iAA5lMGAAGevAETugUAZzgOAOSuBQDibdEB3CupAOYp4AEBNwMA3GwbAOYB4AHmxB0A5tYdANxCBwDm6i0ACTQXANzYHADm6SAA5mcTAdxZCADmDuAB5tcgAObrHQDm6ggAgnwPAOYQ4AHm7h0A5qgFAOZBBwDmdaYA5nAbANwtqQDm7KgA5gjgAeY0awHmCgMA3O0gAFtWDADmQtIB5iPgAeaH0QEUuwUAAdIgANw+BwDmBeAB3DkDAOZ6pgDmHAgA5v4IAOYc4AHcitEBAesgAAn2qgDm9S0AH08GAObAHQDoLDAACbYWAelcAwAJ8hsA3DADANy1GgAJqxsA5t4IANwtAwAeGAYA5mwDAAnqEgHmeAMB3NYcAOZ3GgAfGQYACUQbAObuBwDm6KgA5vAgAObUCAANswUACU0TAeYDAwDqYAMA5kcHAObiHQDmcBMBAeogAOYT4AHKKAMA5rOqAOY1awEJfxAB3DgHAAfpEgEBOQoB3H8aANx/0QEJPwoB5sQFANztCADmSwMA5nMTAeZMAwDmFwYA5usIANwfAwB2uQ4A5usHAOYqCADmSgcA3DwDAAHnHADcgtEB5jFrAebyHQAJTQkA5iEIAOYM4AHcpAUA5vQIANbOHQDmhdEB5ukdAObsLQAHvAwA5tQdAOb5LQABadEB5mkDAHrJDgAJNRIB5lMJAOZ4pgAB5RwA5riqANwNCgHc4wYACfMbABzxCADmeRoACJkwAOYUBgDmLv4A5nkDAeZpEwHc/QEB5tsdAOAvMADeORkAAdggAOb8LQDmIv4AAeYgAOYXCADmIeABCc0KANwgAwDm0h0A3FYDAOZBAwDcKP4A5tUgAObhIADm7AcA5gEDANy9GgDmdwMB5pQFAOb1CADc8gcA3PkIAObFHQDm8agA5qkFAObzCADmC+AB5tcGAObZBgDm2wYA3NkcAAHiHADc0egB5tYIAObQHADmHggA5pcFAOacBQAHNxwA5tAgANw6AwDmKwgA5hEGANwYGgAaHvsA5tkIAAnAqQDcLKkA5ugIAAc8EwHmQAcA5nYDAebvLQDcJQMA5t8dAOarBQDmv6oA3OYIANyL0QHm1QgA3NwcAAe6EAF6yw4A5nSmAObUIADm2R0AAdogANzKHQAHNxAA5p6mAOblCAAJzQsA3OwgAOYOAwDc1OgBG/AIANw0BwDcthoA3CsDANx90QEJzQkAFr0FAOZ8GgDcWwgAB0rpAYsFGAAAAAAACAOTAgAAvgHKARMAAAAEAAAAggDAAGYABAAAAE8AkQAiAC8ABgAQAAIAewBFAAEAAgAzAAYAAAAAACUADADzAAAAXwADAAAAAAAAAAgAAAAGAGMAIQAAACoAAAAAAKsADAAAAAAAPQArAAAAAABnAAAAAQAIAAMAAAAAAAIAAABTAAQAAACEAAAAMAAAAAAABQAGAHAACQBCAAEAbQACAC8AAAAaAAAAEQACAAAAGwABAAAABgAAABsAAAALAAAAAAAVAAAAAABfAAAABQAAADcADAAAAAUAAwBIABcACQAhAAcABAABAAAAUwCqAAAAAwAAAAAAJQAQAB8ALgBIAAAAAQAAABkAAQACAAAAAQAEAAAAAAAiAAAAAgAEAAAAAAAHABEAGwAaABEAEAAIAAIAKgAEAAAANQAZAA0AAAAFACcAAAADAAUAAAAcAAIAJgABAAAAAAAHAC8ABQA8AAAACwAIAAAAAAAaABkAAgAGAAAAAQAAAA4AAgAYAAMAAgADAAgAAAAJAA8ATgAAACcADgANAAAAGAAAABoAAAAAAAUAAQACAAAAAwAuACoAGwAAAAAABAAAACUAGwAHAAAAAABCAAoACAABAAEAAAAGAAUAFgAB");
  base64DecodeToExistingUint8Array(bufferView, 1111288, "BAAjAAMADAABAAcACQAJAAAAAQAJAAIAAgAEAAAABwABAAYACgAMAAMAIAAAABIAAQABAAIABAAIAAgAGwAEAAEAEAAAAAsAAAAFAAAABQAAAAwAAAAUAAAAMw==");
  base64DecodeToExistingUint8Array(bufferView, 1111388, "DQAAAAAANQAFAAAAAAAAABUAAAAAAAcABAAAADsAAQABAAEAAAAGAAAABAAYAAAAAAADAA0ADAACAAQAAQABAAEAAAAQAAAACAA2AAkAAQALAAMACwADAAAAAAAPAAYAAAAAAAcAAgA/AAoAAAAAAB4AAAAAAAEAAAACAAAAAAAAABo=");
  base64DecodeToExistingUint8Array(bufferView, 1111528, "AQAAAAkAAQAAAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1111548, "CAAAAAAAAQAAAAcAAAAKAAUADwAQAAEAAAAGAAEAAgAHAAkAAwABAA4ABwAAAAAAAQAIAAEADQAAAAAAAQACAAsAAAADAAYAAAAJAA4AAgAAAAcAMgAIAAAAAAAE");
  base64DecodeToExistingUint8Array(bufferView, 1111650, "HgAAAAAAAAAJAAAAAAAAAAMAAAACAAcAAAAAAAYACwAUAAsADAAAAAIABAABAAIAEAABAAEAAQAEAAMAAQALAAgABAABAAQABAAAABgAAAAAAAAALAAOAAcAAgAGAAIAEwAGAAQAAgAAAB0AEgAG");
  base64DecodeToExistingUint8Array(bufferView, 1111778, "Cg==");
  base64DecodeToExistingUint8Array(bufferView, 1111792, "CgACAAAAAAAOAAQAAQAAAAkAAQACAAIABwAAAAAAAgAEAAYAAAAJAAAABQAAAAAAAQAaAAkAAAABAAAAAAAAAAEABAANAAgAFwAHAAAAAAAFAA4AEgAKAAAAGwAHAAAAAAARAAEABAAJAAAAAQAAAAAAAwAAAAkAAAACAAwABAABABUABAAAAAQAAw==");
  base64DecodeToExistingUint8Array(bufferView, 1111946, "EgACAAUAAgABAAUACQAAAAAACAAAAAEAAAAAAAIAAAAAAAEABwABAAAAAAAJAAAAAwALAAIABgAEAAAAAAAFAAAACgACAAkACAAAAAAABwAAAB0ACgADAAAACAAAAAwAAQABAAAAAAAEAAcAAAAEABYAAwABAAgADQAAAAMABAAAAAAAAgAAAAAAAAAGAAYAAAACAAAAAAAJAAgACw==");
  base64DecodeToExistingUint8Array(bufferView, 1112112, "EgAAAAAABAABAAAADAAFAAMACwAEAAAAAAADAAEABwABAAAAAAAKAAUAAAAJAAAAAAAUAAAADAAAAAYAAAADAAIAAAAFAAMAAAAFAAEAEgAAAAAAAQAAAAIAAAAAAAc=");
  base64DecodeToExistingUint8Array(bufferView, 1112216, "BgANAAEABgAAAAsAAQACAAAAAAADAAAAAQAEAAAAAAAAAAkAAAAAAAUABwAAAAAADAACAAAAAwAXAAIAAAADAAAADgAAAA4ABwAAAAkABQABAAIAAQADAAAAAAAAAAMAAwACAAEAAgAAAAcABQAAAAgAAwABAAAABwABAAAADAAAAAEABQ==");
  base64DecodeToExistingUint8Array(bufferView, 1112360, "AwAAAAAAAAAGAAAAAAAAAAgADQAAAAIAAAAAAAAAAgAAAAYAAQANAAIAAAAAAAQABgAAAAYAAQAGAAEAAgAIAAQAAgACAAIABAAAAAAAFAARAAAAAAAIAAEAAgACAAIABwABAAAAAAAEAAo=");
  base64DecodeToExistingUint8Array(bufferView, 1112476, "Bw==");
  base64DecodeToExistingUint8Array(bufferView, 1112486, "BAAAAAMABQADAAQAAAAAAAMABQAAAAAAAAAEAAAAGgAAAAYAAAAEAAYABAAAAAEAAQAFAAEABAAGAAAABAABAAAACQABAAUABQABAAkAAgAGAAMAAAAIAAAAAAABAAUACQASAAEAAgAIAAAABgABAAAADQ==");
  base64DecodeToExistingUint8Array(bufferView, 1112620, "Aw==");
  base64DecodeToExistingUint8Array(bufferView, 1112632, "AQAAAAAAAAALAAAACwABAAIAAAAAAAMAAAADAAAAAgAFAAEAAQAHAAEAAgADAAoABwAIAAoAAQAAAAEAEgACAAQAAAACAAYAAgAJAAAABgAAAAIAAQAAAAEABAAAAAAAAAASAAAAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1112744, "BA==");
  base64DecodeToExistingUint8Array(bufferView, 1112754, "BAAAAAAAAAABAAAABQACAAAAAwAAAAEAAQADAAAAAgAAAAEABAAAAAUAAQABAAEAAgAIAAQAAQABAAIAAAACAAAAAgADAAEAAAAMAAEAAAAAAAAADQADAAAABAABAAAAAgAHABEAAAAFAAAACQACAAAAAgABAAQAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1112884, "BQACAAAAAAACAAEAAAAAAAIAAAAFAAEAAAABAAMAAAACAAwAAQACAAUAAAADAAIABQAAAAUAAQAAAAAAAQABAAAABAAAAAAACwADAAY=");
  base64DecodeToExistingUint8Array(bufferView, 1112970, "BQADAAAABAAAAAMACwAAAAAAAwACAAMABAADAAYACQACAAAAAQABAAgABAAIAAAAAAADAAAAAAAAAAUAAQABAAoABwAJAAgACQACAAAAAAADAAUAAQAGAAYAAQAC");
  base64DecodeToExistingUint8Array(bufferView, 1113072, "AQAAAAIAAQABAAAAAAAAAAEAAAAAAAIAAQAAAAAABwAIAAAAAAAOAAIAAAAAAAAAAQAGAAAAAQAAAAAABQAAAAEAAQADAAEAAAAFAAAAAAAFAAMAAAABAAEAAAAAAAMAEQACAAUAAwAAAAAAAQADAAIABQABAAoAAAABAAAAAAAAAAMAAQAFAAIAAgAAAAgAAQACAAAAAAAGAAYABgACAAwAAAABAAEAAg==");
  base64DecodeToExistingUint8Array(bufferView, 1113250, "CAABAAAAAAAAAAwAAAACAAAAAgAC");
  base64DecodeToExistingUint8Array(bufferView, 1113280, "AQACAAQACAAHAAYAAQACAAAAAQACAAsAAwACAAQAAAAKAAEAAwAMAAEAAAADAAEAAAANAAAAAQABAAEAAAAIAAQAAgAAAAEAAQAGAAcAAQAEAAAAAQANAAIAAgAAAAIAAQAAAAEAAgAFAAEAAQABAAAAAgAKAAQAAQAEAAIAAQABAAEAAAABAAAAAAABAAEABAADAAAAAgAAAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1113454, "Aw==");
  base64DecodeToExistingUint8Array(bufferView, 1113464, "CwABAAAAAAACAAAAAQABAAEAAAADAAUAAAALAAEAAwABAAAAAQABAAAAAwAGAAAAAAAGAAAAAQADAAAABAAEAAEAAgACAAEAAQAEAAEAAAABAAEAAAAAAAEAAAAAAAUAAwAEAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1113574, "AQAF");
  base64DecodeToExistingUint8Array(bufferView, 1113596, "BAACAAIABAAAAAIABAAAAAAAAQACAAUAAgABAAEAAQABAAIABwAAAAEABQABAAEAAAABAAAAAgACAAMAAQACAAIABQABAAoAAQAEAAYAAAAAAAIAAQAAAAAAAQADAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1113706, "DgAAAAAAAgAAAAAAAwAAAAAAAgACAAgAAAACAA4AAwAAAAIAAAAAAAMAAAABAAcAAAANAAcAAQACAAIAAAABAAMAAQACAAEACQAEAAMAAQACAAUAAAAAAAQAAAABAAAAAAAAAAEAAAAEAAAAAQAIAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1113828, "Ag==");
  base64DecodeToExistingUint8Array(bufferView, 1113850, "BAAAAAAAAwAAAAIAAAACAAwAAAADAAkAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1113884, "AwACAAkAAQAAAAIAAQAAAAEACwAAAAcAAQACAAEAAAAAAA0AAQAAAAMAAQAAAAIAAAABAAEAAgACAAMAAgABAAEAAgADAAIAAgAAAAkAAAAAAAAAAwAAAAAABAABAAEAAQAAAAUACAACAAIAAAAAAAAAAQACAAEABAAEAAMAAQAEAAgAAgABAAAAAQABAAAAAAABAAAABAAAAAAAAQAAAAEAAwAAAAIABQAAAAUAAwABAAAAAAAAAAEAAgADAAAAAgAAAAEAAQADAAAAAgACAAEAAAACAAQ=");
  base64DecodeToExistingUint8Array(bufferView, 1114110, "AQACAAEACwAAAAQAAQABAAEAAAACAAEAAQADAAAAAAACAAEAAwAHAAEAAwABAAAACQADAAAAAgAAAAEAAwAAAAAAAAADAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1114190, "DQADAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1114204, "AgAAAAgAAQAAAAEACAAGAAAAAQACAAEAAQAAAAIAAAAAAAUAAAABAAQAAAABAAEAAAAEAAAAAQAEAAUAAgABAAU=");
  base64DecodeToExistingUint8Array(bufferView, 1114278, "BgACAAoAAgABAAQABgAGAAIAAQABAAAABAABAAIAAAAIAAEAAQACAAMAAAADAAQAAAABAAEAAwABAAAAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1114348, "AgAAAAAAAQABAAEAAAAAAAIAAQAEAAIAAwAEAAIAAAABAAIAAQABAAIAAQABAAEAAAAAAAgABAAAAAQAAAAD");
  base64DecodeToExistingUint8Array(bufferView, 1114420, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 1114430, "AQAAAAAAAQAFAAAAAQABAAQAAgAKAAUAAAAAAAEAAQABAAEAAAAAAAIAAgACAAIAAQABAAQAAQAC");
  base64DecodeToExistingUint8Array(bufferView, 1114496, "BgAAAAEAAQAEAAEAAgABAAAAAgAAAAMAAwAHAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1114550, "AQAF");
  base64DecodeToExistingUint8Array(bufferView, 1114562, "AgAAAAEAAQAAAAAAAAACAAAAAAABAAAAAAACAAAAAQACAAQAAQABAAYAAwAAAAAAAgACAAQAAAACAAEAAwACAAQAAQACAAIAAAAAAAAABwACAAMAAAAAAAIABAAAAAEAAAAAAAs=");
  base64DecodeToExistingUint8Array(bufferView, 1114674, "AQAAAAQAAAADAAAAAAAAAAEABQABAAIAAgABAAEAAAAAAAEAAAADAAMABgACAAAABAADAAEABAAAAAQABAABAAAAAgABAAEAAQAEAAAAAgABAAAAAAAAAAIAAgAAAAEAAAAGAAAAAAABAAEAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1114802, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 1114816, "");
  base64DecodeToExistingUint8Array(bufferView, 1152760, "CgAiAR0AgQAQAAMCAAASAAAACgBFAAIAIgIAAHoAEgATAD0AAAAAAAUAjgAAAAAANwHVAFABCAAAAAAABgBQAIAAAAABABUACADWAIgATAAXADQAAAAAAHsBBwABABgAJgAEAAEAAABGAAkACgACAAAAGgAAAAAABwAlADoAeAAAAFIAAAAJAAAARQAHAAwABQAlAJcABgAHAAAAAAANAFkAAAA+AAYAAABbAE0AFwANAAAAEgAOAA4AAAAAAA0AGQAbABkACQAAAKcAAgAAAAAAAAAXACwBAAAAAE0ADgARAEUAAAABAAAAAAADABEAEwALAA0AAQAfAAMAAQAAAAUAAgADAAAAewAFAAoAAAAsAAAAAQCAAIcAAAB9AAAASQ==");
  base64DecodeToExistingUint8Array(bufferView, 1153058, "AQA8AB8AAAACAA0AcgAAAAAACAAHABYABwAAABgABwAAACUAAAAoAAAASQAfAAMAAAAvAAQAAAARAAAAQQAAADkAKAAAAAoAAAAAAAMADwABAAAABAACABsAAAAAAAAAJAABABsAAAATAAAAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1153176, "CQAAAAAABQAAADAAAwAJAAAAAAABAAMAAwABAAAAAgAAABUAAQAnAAAAAAASAAEAAwAjAAkAAAAiAAAAAQADAAAAEQACAAEABwAuABsAGAACADIARAAOAB4AAAABAAAACwAAAAEADgAAAAEABgAAAAAAcgABAAAAAAAGAAAAAAATAAAAAAAZAAAAAgAAAAcAAwAAAAIAAAAIAAEABAACAAAAAQBJABMAAQAIABsAAwAgAAEABQAEAAAAHABNAAQAAAAAAAEAJQACAAAALgAAAAQAAAAAAA0AFAAAAAAABQBWABkAFQAEAAAABgAAAAIAFAAGAAcABwADAAEAAAAeAAcADwAJAAYAEwAAAAAAAwABAAcAAAALAAoABAAAAAAAAAABAAQAAAAVABsAEQAGAB4ACQABAAAAAAADAAcAQwAAAAEABAAAABQAFgAAAB4AAQAWAAUAFwAAAAEAAAAAAAAAEQAOAAAAAAABAAAACQAAAAAAIQAnAGEAAwAAAAAAAQAaACcADgAIABsAAQAcABsAAAACAAMAAAAEAAAAAAAcAAAAAAAfAAAAAAADAAAAGwABAAcAEgACAAEAAAAFAAAAAAAEAAwACwAAABoAMAAAABIACgAFAAAAFgACABY=");
  base64DecodeToExistingUint8Array(bufferView, 1153666, "BAAAAAEADQAAAAgAAAAAABoAAAALAAEAAQBHAAAABAAMAAAABAAKAAo=");
  base64DecodeToExistingUint8Array(bufferView, 1153716, "BwASAAMAAAAAAAUACAACAAAABAAbAAAABgAAAAUAAAAQAAAAAQABAAMAAAAAAAAAAQAAAAEAEQATAA8AAgAAAA4AFQAAAAcADAAoAAIAbwAXAAUAAwARABkACQAHAA8AAAAHAAAABAAAAAMAFgAeAAYAAAArAAEAIQADAAEABAAJABAAAAAFAB0AAwAOAB0AAAAGAAAAAgAHAAAAAgACAAwAAQAFABQAAwAAACEAAwAAAAAAAgAAAAMAAAARAAAAGwA+AAAADgABAAAABwAAAAMAAAAMAAAAAAABAAYAPQAJAAQAAAACAAAACgAAAAQAAQAFAAEAAwAAAAUACAAAAAQAAAAAAAAACAAAAAAAAQAEAAAAHwABAAwABQACAAEAAwAIAAIAAAAAAAIAAQAAAAEAAAAAAA0AAAAOAAAAJQARAAAACQABAAAAAgAEAAEAAAASAAAAAQAAABoAAAAVAAEAEAABAAAAAAAAAA0AAgAAAAUAEgAFAAAAAwADABMAAAAZABEACgAAAAAAAAABAAUACAAuAAQAAAACAAAABwABAAMAAAAFAAAACwAKAAM=");
  base64DecodeToExistingUint8Array(bufferView, 1154158, "MAAEAAAAAQAAAAIAAAABAAQAAAAAAAkAAAAEAAUAGQAGAAEAAQAJAAEAAgACAAAAAAAwABkAAQAFAAAABAAPAAQAAwAAAAAAFAACAAAAAQAKABUADAAHACAAAAAAAAMAAgAAAAAAAAADAAsABgAMABIABwAVAAgAAgACAAAAAQAGAAUAAAAAAAUAIQAAAAoACAAFABUAAQAAAAEACAAAAAMAAQAEAAMAAAAAAAQAAAAAAAEAEAACAAMAAAAgAAYAAQAAABcAAAAGAAAAAAACAAAAAQAAAAAAAQAQAAAAEwABABMAAAAC");
  base64DecodeToExistingUint8Array(bufferView, 1154400, "HgAAAAAAAQAEAAcAAAAAAAQAHAADAAcABQACAAAAAAABAAAAAAADAAAABgABAAEABwAAAA0AAAAAAAEAAQACAAAAAAAFAAIAAwAEAAAADQAJAAQAAgAOAAAAAAAKAAIAAAAAAA8AAAAAAAEACgACAAAAAgABAAAACQAAAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1154534, "AwAKAAAAAwAAAAIABQAFAAEABgACAAAABQABAAAAAQAKAAAAAgAnAAEAAAADAAAAAAABAAcAAwAAAAAAAAABAAAAAQAAAAAAAgAJAAAAAwACAAAAAQAAAAAAAAAHAAEAAAACAAIAAgADAAEABAADAAIABwALAAAAAAAOAAEADQABAAAACAAKABUAAAAAABQABAAAAAAABwAMAAEAAAAAAAgABwAAAAQABgAJAAIACwACAAAABgAHAAQAHQAAAAAADAADAAAABAAAABsAAQASAAAAAAAGABEAAQABAAEACQAKAAAAEAAE");
  base64DecodeToExistingUint8Array(bufferView, 1154782, "AwAAAAgAAAAbAAsAAQAAAA8AAgAAAAcADgAEAAAACwAAAAgABQABAAAAAQAHAAAAAAACAAMAAAAAAAYAAAAAAAQAAQAAAAsAAAAAAAQACQATAAAABgAGAAIAAAAIAAYAAwAFAAAAAgAAAAAABQAKAAYAAQAAAAAAAgAAAAEAAAAAAAIAAgAAAAIAAgABAA0AAAAFAAYABAAAAAAAAAAcAAAAAAAYAAIACAACAAsAAAAAAAEAAwAGAAEAAAABAAMAAAAAAAUACgAJAAAAAQADAAAAAAABAAMACQABACUAAAABAAkAAgAbAAAABQAEAAEACgAPAAYAAQAPABcAAAANAAQAAQABAAQAAAAEAAAAAAAFAAgAAgAIAAMAAQACAAAABQAAAAEAEAAFAAUAAgAAAAcACQAHAAEAAAACAAAACQAAAAAAAAABAAMACwAAAAAAAAABAAoAAQAAAAEAAAAAAAAAAwARAAEABAAAAAAAAAAHAAwAAQAAABgACgADAAMAAQAAABAAAAADAAgAAAACAAAACgAHAAEAAQACAAoAAgAIAAIAAAABAAEAAAAGAAIAAgADAAAAAAALAAgAAAAAAAEABQAAAAAAAQAAAAAAAgAAAAAADwADAAAAAgACAAAAAAAAAAkABgAAAAIAAAACAAIABAACABcAAAABAAQAAwAGAAAAAQACAAEABgADAAoAAAAAAAAACQADAAAAAAAAAAEAAAAAAAIAAAABAAAAAAAGAAIAAAAHAAAAAgABAA8AAAAAAAAABAADAAo=");
  base64DecodeToExistingUint8Array(bufferView, 1155378, "EQAFAAkABwABAAcABQABAAAAAAAAAAwAAQAHAAAAAAACAAEAAAAAAAAABwACAAcAFQAOAAIACQAAAAAAAQAAAAAAAAAFAAMAAQAEAAEAAAAHAAEAAQABAAMADAACAAIAAQAGAAIAAgAAAAMAAQAAAAEABQABAAY=");
  base64DecodeToExistingUint8Array(bufferView, 1155506, "BQARAAIAAQACAAkAAAAOAAIAAAAIAAIADQABAAIABAAAAAEAAQAAAAAABQAAAAoACgABAAYABwABAAAAAgAEAA0AAQAAAAAABgADAAIAAgACAAAABgAAAAQAAwAGAAkAAQABAA4AAAAOAAIAAAADAAAABQAQAA8AAAABAAgAAwAAAAAAAgALAAMAAAADAAMAAw==");
  base64DecodeToExistingUint8Array(bufferView, 1155668, "AQACAAAABQADAAQAAQABAAMAAAAGAAAAAQAEAAAABAAAAAEAAAAAAAMAAAAOAAAAAAAAAAIAAQABAAAACQADAAAAAAAAAAYAAQAAAAcABAAAAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1155760, "AQAAAAIADgAAAAMAAwAFAAMAAAADAAEAAQAEAAQAAAAGAAUABQAEAAEAAwAAAAAAAAAFAAUAAAABAAAAAQAAAAAABAAIAAAAAgAAAAEABAAFAAAAAAACAAAAAAAKAAoAAAADAAIAAQAAAAAABAAFAAMAAAAVACMABAAAAAIAAAACAAIABgABAAMAAwABAAAABQAGAAoAAQARAAUAAAANAAQAAgABAAAAAgAKAAEAAAAAAAQAAgAHAAMAAgAAAAAAAAABAAIAAQABAAIAAQAAAAIAAgAGAAoAAAACAAEABQADAAAAAgACAAMAAAAIAAcAAQACAAMAAwAaAAIAAQAQAAAAAgABAAAABAAKAAIABgAAAAEAAQAMAA8AAAABAAUAAAABAAAAAQAAAAgAAAACAAAAAAAAAAMAAgABAAAAAwAFAAAACQADAAAAAgAAAAAAAQAAAAEABAABAAAAAAAFAAEAHwAFAAQAAAADAAIAFQAHAAAAAAAMAAAAAAAAAAQABwACAAkAAAAJAAEADAADAAEACgAAAAAABAAAAAIABwAEAAAAAAACAAAAAgADAAAAAAAEAAAAAgABAAAABwAAAAEABQAAAAAAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1156230, "AQAGAAcAAAAAAAsADgAGAAQAAAAAAAAAAgAMAAEAAQADAAMACQAAAAEABQACAAQAAAAEAAEAAAAEAAMAAQAAAAAAAAACAAkABgAAAAIAAAAAAAAAAwACAAEABQ==");
  base64DecodeToExistingUint8Array(bufferView, 1156332, "AQAHAAAAAgAHAAIABAAAAAMAAAAAAAAABQAGAAEAAAAEAAIABAABAAAABQABAAAABgAAAAAAAQAFAAAAAQAIAAMAAAAEAAQACQABAAIAAAABAAEAAAABAA4AAgABAAAABAAB");
  base64DecodeToExistingUint8Array(bufferView, 1156440, "AQAAAAAAAAABAAMAAAAAAAEAAgAFAAkAAAAAAAcAAAAAAAUAAwABAAAABAAMAAEADQAFAAIABAABAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1156510, "AgABAAAAAgAAAAAAAgAAAAIAAwAAAAQAAAACAAAAAgAAAAAAAQAAAAAAAAAT");
  base64DecodeToExistingUint8Array(bufferView, 1156564, "AgAAAAYAAQABAAAAAQABAAAAAAAAAAEAAQAAAAAAAgAEAAEAAAAAAAAAAQACAAIAAAAAAAUAAQABAAEAAgABAAEAAgADAAIAAgAAAAEABgADAAAABwAAAAAAAQAIAAIAAQADAAIAAAAAAAAAAgAKAAAAAgAAAAwAAAABAAYAAAADAAoACAADAAAAAAAGAAAAAQAAAAEAAgAFAAAABQADAAIABAAAAAUAAg==");
  base64DecodeToExistingUint8Array(bufferView, 1156742, "AQAAAAEABQABAAAAAQAFAAAAAQAIAAIAAQABAAIAAAACAAAAAgAAAAAAFgACAAAAAAACAAIAAAABAAMAAAAAAAAABwACAAAAAQABAAEAAQAAAAAAAwABAAMABAACAAAAAQABAAIACAAAAAMAAQABAAIADgACAAIAAAAAAAcAAQAAAAAAAgAAAAIAAAACAAAABgACAAAABAABAAAAAAABAAMAAAABAAgAAgAFAAAABwAAAAIAAAAJAAAAAAAGAAAAAAAAAAEAAAACAAMAAgADAAMAAAADAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1156970, "AQAAAAAABAAC");
  base64DecodeToExistingUint8Array(bufferView, 1156990, "AwAAAAMAAwACAAAAAAAKAAEAAAACAAIAEAAAAAIAAgABAAQACgAFAAEAAQAAAAEABgAFAAAAAgAEAAIAAwAAAAkAAAATAAgAAAAAAAEAAAAGAAkAAQAAAAAABQAAAAMAAAACAAQAAAAAAAAAAgAAAAEABwABAAMAAAACAAUAAQADAAUABQAMAAEAAgAAAAAABAABAAAAAAABABIAAQABAAYAAgAAAAkACgACAAEABAACAAAABQABAAEAAQACAAAAAAAAABIAAgAAAAIABgAAAAQABQADAAYAAgABAAEAAgAHAAEAAAAAAAIABQANAAAACgAEAAAAAQAAAAEAAgABAAcAAgAGAAIAAQABAAIAFAAFAAAAAQAAAAAAAgAAAAIAAgAAAAEAAgAAAAAAAwAAAAEAAAAAAAAAAQADAAAAAgACAAIAAAAAAAkAAAAGAAAAAQAAAAQAAgADAAEAAAACAAAAAQABAAQAAAABAAcABAADAAUAAAAAAAUABAACAAYABgAEAAkAAAAAAAUAAAAAAAIAAgAAAAMAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1157408, "BAABAAEAAAACAAIAAwAAAAAAAQABAAMABQABAAgAAAABAAEAAAAAAAEABgAAAAMAAgAAAAEAAAADAAEAAQADAAIAAgAAAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1157490, "AwAEAAAADwACAAEABQAAAAAAAQAAAAQAAQAAAAAAAwABAAEABAAAAAAAAAAEAAAAAAAFAA0AAwAAAAAAAAABAAAABgABAAAABwAEAAAAAgAAAAMABgACAAAAAwABAAAAAgAEAAIAAgACAAYAAAAAAAEAAAABAAIAFwABAAAAAAAAAAIAAgAEAAIAAAAAAAoAAAACAAIAAgADAAEAAQABAAIAAAACAAAAAAAAAAsAAQABAAEACwAAAAAAAgABAAAAAAAAAAEABwAAAAAAAQAUAAAAAAAEAAAAAAABAAMAAAAEAAEACwAFAAoAAAABAAIAAAAEAAAAAQABAAMAAAACAAgAAwACAAAAAAAGAAUABAAGAAAAAQABAAEABAAAAAMAAwABAAIACgADAAIAAQAAAAcAAAACAAAAAQAAAAAAAAACAAAAAQAAAAAAAAACAAIAAAAAAAEAAgABAAUAAQADAAAAAwACAAEAAw==");
  base64DecodeToExistingUint8Array(bufferView, 1157860, "BAAAAAIAAgAAAAIAAgABAAMABAAEAAEAAQACAAAAAAABAAIABwAFAAIAAQAFAAAABAADAAAAAgAAAAAAAAACAAEAAQAGAAMAAAAAAAEAAQABAAAAAAABAAEABAACAAAAAQAAAAAAAAABAAcAAAADAAIAAwACAAEAAAABAAEAAAACAAIACgABAAAAAAAAAAMACAAKAAMAAwABAAIAAAAEAAEAAAAAAAcAAAAAAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1158042, "BgAAAAIAAAABAAEAAgAOAAIAAQABAAEAAgAAAAAABAABAAAAAAAGAAYAAQABAAAAAQACAAgAAwAAAAEABQABAAAAAgABAAQAAgAAAAEACQAAAAAAAQAAAAIAAAAEAAEAAAACAAEAAAABAAEABQABAAAAAwAAAAkAAQABAAcAAAACAAEABgAAAAUAAAAIABEAAAAGAAEABwAAAAIAAAAEAAEAAQAAAAQABAAFAAAAAQAAAAAAAQAAAAMAAAAAAAkAAAAAAAgAAQAFAAEAAAABAAEAAAAC");
  base64DecodeToExistingUint8Array(bufferView, 1158266, "AQAHAAEAAAAGAAEABQAKAAIAAwAAAAAAAQAAAAAAAwACAAAAAAATAAAAAAADAAAAAgAAAAAAAQAAAAsAAQACAAAAAAABAAAAAQADAAEAAQANAAMABQABAAAAAQAHAAAAAwABAAEACAAAAAMACAADAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1158388, "BQACAAIAAgAAAAIAAQAAAAIAAQAAAAAAAQACAAUAAAADAAIAAAACAAAAAAAEAAAAAQADAAUAAAACAAEACAABAAMAAQAAAAgAAwABAAQAAAAAAAEABwAAAAIAAAAHAAIAAAABAAEAAQAGAAIAAQAAAAAAAAABAAMAAgABAAAAAwABAAEAAQAAAAIAAQADAAIAAAABAAEAAgABAAAAAQABAAEAAAABAAEAAAAAAAEAAQABAAI=");
  base64DecodeToExistingUint8Array(bufferView, 1158576, "AQABAAMAAgAEAAEAAAABAAEAAAADAAAAAAABAAUAAwAAAAAAAgAEAAkAAAAFAAMAAQAAAAEAAwACAAMAAQABAAAAAwABAAEAAgABAAIAAAADAAcAAQABAAAAAQACAAMAAAAOAAIAAQAAAAMAAAAAAAAAAgADAAAAAQAAAAEAAQAAAAIAAQAAAAAACgAAAAAAAAADAAMAAgAHAAEAAQABAAIAAAAC");
  base64DecodeToExistingUint8Array(bufferView, 1158750, "AgAAAAMAAgAAAAIAAwACAAAAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1158780, "AQABAAAAAAAEAAAAAQAAAAEAAQAAAAMABQABAAAAAQAAAAAAAgADAAAAAwABAAAAAgAHAAEAAQACAAcAAAAAAAAABAAAAAAAAAAEAAIAAgAHAAIABAACAAEABQACAAAAAQAAAAEAAQAGAAAAAAAFAAUAAQABAAQAAgAAAAAAAAADAAMAAQABAAUAAQABAAEAAAAAAAQAAgAAAAAAAAAEAAIAAQAAAAEAAAABAAIAAwACAAMAAAABAAAAAwAEAAUAAAABAAEAAQADAAoAAQADAAEAAAABAAIAAwAHAAAAAwABAAEAAAADAAAACAAKAAEAAwAAAAAAAQAEAAAABwAAAAAAAQABAAAAAwAFAAAAAQABAAQABAAAAAAABQABAAEAAwAAAAQAAQACAAQAAgADAAAAAgABAAEAAgAAAAIAAQABAAEAAwABAAQAAwAgAAQAAAABAAAABQAAAAMAAgABAAAAAgAEAAUAAAACAAYAAAAAAAEAAQAAAAEAAAAAAAIAAgAAAAEAAAAAAAAABQAAAAAAAwAEAAEAAAAAAAAAAgAC");
  base64DecodeToExistingUint8Array(bufferView, 1159206, "AgACAAAAAAABAAUAAAAE");
  base64DecodeToExistingUint8Array(bufferView, 1159230, "AwACAAMAAAAAAAEAAQAAAAcAAwAAAAUABgAAAAIAAAACAAEAAQAEAAE=");
  base64DecodeToExistingUint8Array(bufferView, 1159282, "AgAAAAEABAAAAAEAAQABAAAAAAABAAMADwAAAAMAAAACAAAAAwACAAUAAgAAAAIAAQAAAAAAAQAGAAEAAAABAAMAAAABAAMAAAACAAEAAwAEAAQAAQABAAEAAQAAAAEAAQAAAAEAAQABAAAAAwADAAIAAQAAAAQAAgACAAQAAQAAAAAAAQABAAIAAQAAAAIAAAADAAcAAQAEAAEAAwABAAEABQAFAAAAAwAAAAAAAQAAAAEAAQABAAMAAAAAAAEAAQACAAAAAwAAAAEABwACAAAAAgAAAAEAAAABAAAABQANAAEAAAAAAAAAAwAFAAAAAQADAAEAAAAAAAIAAQACAAAAAAAAAAEAAAACAAEAAAACAAMAAQABAAAAAgAFAAEAAwABAAEAAQABAAAAAAACAAAAAwAAAAAAAAACAAIAAwABAAAAAQAGAAAAAQAEAAAAAQAAAAYAAQAC");
  base64DecodeToExistingUint8Array(bufferView, 1159636, "AgAGAAAAAgABAAAAAAABAAIAAQ==");
  base64DecodeToExistingUint8Array(bufferView, 1159668, "AgAAAAEAAAADAAEAAAAAAAAAAQAAAAEAAAAAAAAAAwACAAAAAAAAAAIAAwABAAEAAAADAAAAAAABAAAAAgACAAIAAgABAAAAAAABAAAAAAABAAAAAAAAAAIAAQABAAAABAABAAEAAQABAAEAAAABAAQAAQABAAEAAAAHAAAAAAADAAQAAAAEAAAAAQAAAAAAAQAFAAAAAwAEAAMAAAABAAIAAQACAAEAAQAEAAQAAgACAAIABQAAAAMAAQACAAAAAAACAAAAAQACAAAABAABAAAAAQAEAAEAAAAFAAQAAwABAAAAAQAAAAEAAAABAAIAAAABAAAAAQAAAAEAAAADAAcAAAACAAAAAQAAAAEAAgAJAAEAAwADAAEAAAADAAAAAgABAAEAAQABAAEAAQABAAMAAQAAAAAACAACAAMAAQACAAEAAwAAAAMAAAAAAAMAAAABAAAAAQACAAMABgAEAAAAAgAB");
  base64DecodeToExistingUint8Array(bufferView, 1160036, "AwAAAAEABAABAAEAAAAFAAEAAAAfVwAAdwAAACgGAABHBgAApAMAAB0dAAA3BgAARQYAAC0GAABEAAAAUwAAANIGAABtAAAAbAAAAFcAAABzAAAALQYAAEkGAACRIQAAVgAAACgAAABNAAAAMwYAAEoGAABUBgAA1QYAAFYAAAAVIgAAbQAAAHYAAABpAAAAaQAAAGkAAABsAAAAQgYAAIcGAAAoAAAAMQAAADIAAAApAAAAMQAAAOVlAACrUQAAshEAAO0wAADLawAAdgAAAGkAAABwAAAARgAAALcDAACdAgAANQYAAHQAAABtAAAAQQYAADEGAABhAAAAVQAAALsDAACzawAAbwAAACgAAACUTgAAKQAAAHQRAAA5AAAAAREAAEcGAACRkAAADxEAAEcAAABCBgAASQYAADUGAABJBgAAMwAAADEAAAC+AwAAUgAAALwDAABBAAAAQwAAACdZAACgAwAANwYAAG0AAABpAAAAbAAAAHkGAACYAwAAuTAAAC0GAAAsBgAALQYAAGMAAAAuBgAALAYAAEYGAAAsBgAASQYAAIMGAAAUIAAA3jAAAAlnAAB5AAAANAAAADYAAABQAAAAUAAAAFYAAAAuBgAAOQAAAC4AAADPMAAApzAAACgAAABVAAAAKQAAACAAAAAoAwAAKAAAAOVlAAApAAAAuAMAAFBbAAAoAAAAfFQAACkAAABrAAAAdAAAADMAAAAwAAAAqQYAAHsAAAA4BgAARQYAACoGAAByAAAA4TAAAKswAACZMAAAyDAAAPMwAABFBgAAjE4AAEwAAABUAAAARAAAADcAAAB0BQAAdgUAAEEAAAAdUgAAeIIAAD8AAAAhAAAAqzAAAGoAAABFBgAASQYAAKgwAAArIgAAKyIAADMAAAAuAAAANwAAAAhnAAA9AAAAUQAAAKYGAAC0AwAAKAYAAEkGAABHBgAALAYAAEYAAADQBgAAMwAAADYAAAAqBgAALAYAAEkGAABmAAAALAYAAEUGAACjAwAAAhEAAEsBAABiAAAAWgAAAJQDAAAwVwAACU4AAGIAAABhAAAAcgAAALMRAABKAAAAP3IAAOVlAABwAAAAh2UAALwDAAAAUgAAAZgAAMIDAAAoBgAA3REAAEQGAAAnBgAAVAYAALEDAAAMgAAAMQAAADMAAADlZQAAAiIAAGmXAAA5BgAAMQAAADUAAADlZQAAKAAAAAMRAAApAAAAawAAAMADAADYeQAAnwMAAGsAAABnAAAAOAAAAG8RAABQAAAAUAAAAE0AAABJAAAAMwYAAC0GAABUAAAARQAAAEwAAAAtBgAARQYAAEoGAABlAAAAyjAAAEEGAABFBgAASgYAAMEDAAAqBgAARQYAAEcGAABFBgAARQYAAKcDAADbMAAAmTAAAOswAADIMAAAZAAAAEoGAABUBgAASQYAAHoGAABsEQAATgAAAEQAAABaAAAADAMAAGgRAABZAAAA7nYAAMYDAADzUwAANgAAAHUAAAAgAAAASgYAAFQGAABKBgAAZVEAACAAAAAFAwAAJQAAAEEGAAAuBgAARQYAADIAAAA0AAAAuXAAAAIRAABhEQAA8hEAAGYAAABmAAAAMgAAADoGAABGBgAARQYAAEoGAABUBgAA0AYAAFdbAADxEQAAmwMAABUwAAAoAAAAbVEAACkAAABmAAAAZgAAAGkAAABUAAAAMQAAAHoAAABFUwAAw54AADQGAABFBgAAZQAAAHIAAABnAAAAewYAADEAAAA1AAAALgAAAHgAAABpAAAAaQAAAEgAAAB6AAAAbgAAAEYAAAAqBgAASgYAACgGAAAyBgAAKAAAAHQAAAApAAAAqYwAALMwAADmMAAARAYAACwGAABKBgAAQgAAAHEAAADiMAAAqDAAAPwwAACrMAAA/DAAABQwAAAJTgAAFTAAAEIAAABQAAAAkQYAACgAAAAQEQAAKQAAAMUDAABIAAAA0jAAAJowAACzMAAAeAAAAOwwAADQBQAANwYAAC0GAADrWAAADVQAAG4AAABtAAAAOgYAACwGAAAQEQAAKAAAAAsRAABpEQAAEhEAAG4RAAApAAAAmAYAAFgAAABnAAAAdnYAACoGAABFBgAALAYAAMowAADOMAAA6TAAAEwAAACXAwAA35gAAEoGAABFBgAAfQAAAEMAAAAVIgAAawAAAGcAAACrMAAAmTAAAPMwAADeMAAA1TAAAEQGAAAnBgAAUwYAACoGAABFBgAALQYAACgAAAA2AAAAKQAAAK8GAAAgAAAAFAMAAEIDAAAzBgAARQYAAC0GAABFBgAAGhEAADAGAABnEQAAQQYAAC4GAABtAAAAVwAAAHEAAACyAwAAbAAAAG8AAABnAAAAKAAAAEMAAAApAAAAMiAAADIgAAAyIAAAMiAAAGMAAAAvAAAAbwAAAEYGAAAgAAAACAMAAAEDAAC4eQAAMgAAACwAAAA6AAAAKAAAAAURAAApAAAATwAAAFMAAAB2AAAANgYAACwGAAALTgAA43YAAD4AAACpIAAAZhEAAMslAABGBgAALAYAAMEGAACVYgAAEiIAAG0AAABvAAAAbAAAAN4wAADDMAAAzzAAAFtyAACAbgAAugMAAMcGAAB0BgAAyQMAAEmRAAAsBgAARQYAAC0GAABfAAAAmgMAAMcDAAA6BgAARQYAACgAAADRkQAAKQAAAG4AAABzAAAAPwAAAD8AAAAJEQAAE58AAHURAAAoAAAAMQAAADgAAAApAAAAn58AAKwAAAAuIgAALiIAADIAAAAxAAAAuXAAAL8DAADzlwAALAYAAK0RAACiMAAA/DAAAOswAAAoAAAAcQAAACkAAAAxAAAANwAAAC8GAADSMAAAKAAAAAIRAABhEQAAKQAAAJ0DAABgEQAALQAAAGUFAACCBQAARAYAACwGAABFBgAAMQAAADgAAABSAAAAcwAAAMYwAACtMAAA5TAAAOowAAD8MAAAKlEAADMAAAA1AAAAKAAAABERAAApAAAAtREAAEQGAAAtBgAAYS0AADIAAADlZQAASgYAACoGAABHBgAAMwAAADIAAAAzAAAAMQYAAMwGAAAnBgAARAYAAN4wAACkMAAArzAAAO0wAAC7MAAA8zAAAMEwAAA6BgAASgYAAHAAAABjAAAAtTAAAEYGAAAuBgAAZAAAAEIAAAAxAAAAMQAAAAhnAABEBgAARgYAACwGAABKBgAAZBEAALUDAABjAAAALwAAAHUAAAArBgAANgYAAEoGAAArBgAASgYAAC4AAAAuAAAAFjAAAKswAADtMAAA6jAAAPwwAABFAAAAgAYAAG4AAABXAAAAlgMAADEAAAAuAAAARgYAAC0GAAAREQAAG4IAAEoGAABUBgAARwYAACARAACvMAAASAYAAHQGAACrDgAAoQ4AAKxyAABrUQAAJwYAAEQGAABEBgAARwYAACAAAABCAwAApQMAADYGAAA4XAAAMgAAADgAAADlZQAAM4AAACgAAAAyAAAAKQAAAB91AABMAAAASgAAALwDAABWAAAAbgAAAHYAAABpAAAAWwAAACgAAAALEQAAYREAACkAAACgJQAAQAYAAFIGAABVYwAANAYAAC4GAACTAwAApAYAADEAAAAsAAAA1TAAAKMwAAD8MAAAyDAAAEMAAABvAAAALgAAADQAAAAxAAAAKAAAAA8RAABhEQAAKQAAAKowAAD8MAAA4DAAANx0AADLMAAAagIAAEQGAABKBgAAKAAAAGYAAAApAAAANAAAAONTAABrAAAAQQAAACgAAAA0bAAAKQAAAC0GAABKBgAASQAAAEkAAABJAAAAsQYAAHIRAAC3MAAADDAAADcAAAAsAAAA2zAAADcGAABKBgAASwAAAEsAAAAIYgAAFzAAAIgGAABNAAAAVgAAAMQwAAApAAAAQAYAAFAGAABDBgAARQYAAEUGAADxXQAALAAAAH9eAAAoAAAAbAAAACkAAADlMAAAyAMAAMsGAADYMAAAmjAAAMswAADSMAAAIxEAAEEGAABFBgAA7DAAAOAwAAAoAAAAcgAAACkAAAC1MAAApDAAAK8wAADrMAAAOnkAADMAAABEIAAANQAAACoGAAAtBgAARQYAAGgAAAC2VQAAJwYAAHQGAAA2BgAALgYAAEUGAAAoAAAASAAAACkAAAA2AAAA5WUAACAAAAAnAwAANwYAAEUGAABFBgAAbAAAAG0AAADPMAAAmjAAAPwwAAC7MAAA8zAAAMgwAABNAAAAQwAAALYDAABJBgAAcAYAADQGAABFBgAARQYAAEQGAABFBgAANQYAAEUGAACZAwAA7ZcAAIQRAAAoAAAABxEAACkAAACzMAAAszAAAKYwAAAyAAAANwAAAOVlAAA5BgAALAYAADIAAAA1AAAA5WUAAGQAAABtAAAAMgAAADQGAAApWQAAnYwAADEAAAAwAAAAbQAAADIAAACzjQAAUwAAAEQAAAANEQAASgYAAFQGAAAxBgAAsTAAACwGAABFBgAASQYAADEAAAA0AAAAuXAAAA4RAABhEQAARAYAACcGAADYmgAAswMAADIAAAAwAAAALgAAACgAAABXAAAAKQAAAGECAACIEQAAkAEAAPh8AACsmQAAAU8AAAsRAABXEQAAKAAAAKGMAAApAAAAKAAAABIRAABhEQAAKQAAAOAwAAAQEQAAYREAACgAAAALEQAAaREAAAwRAABlEQAAqxEAACkAAABvAAAAVgAAACAAAAAIAwAAQgMAALMwAADrMAAAyjAAAMEwAAA5BgAASQYAAEFTAAAoBgAALQYAAEoGAAA1AAAAKAAAAAlnAAApAAAAugYAAPl6AABtAAAAcwAAAG0AAABnAAAALwAAAMMDAAA2AAAALAAAAKQwAADzMAAAwTAAAApOAAA1BgAALQYAAEoGAAAydQAASAAAAFAAAABFBgAAJwYAACcGAABpEQAAqAMAAGsAAABtAAAAXU4AAD9OAABTAQAAFh0AACsGAAAyBgAARgYAACwGAAAtBgAAyBEAABAgAAArIgAAKyIAACsiAAAgAAAAAQMAACgAAABTAAAAKQAAADkGAAAsBgAARQYAADMGAABFBgAALAYAALUwAADzMAAAwTAAAPwwAADgMAAAsBEAADgAAADlZQAAKwAAAEYGAABJBgAAZgIAADQAAAA4AAAAR3IAABVZAACwAAAAQwAAAEqQAAAxAAAANQAAAOQwAAAgAAAATAYAAKsOAACZDgAAaQAAAGkAAABiawAApgMAAGkAAAB2AAAAMgAAADIAAADlZQAAYwAAAG0AAAAoAAAAMgAAADAAAAApAAAANQYAAEQGAABJBgAAIAAAACcGAABEBgAARAYAAEcGAAAgAAAAOQYAAEQGAABKBgAARwYAACAAAABIBgAAMwYAAEQGAABFBgAA8jAAADQAAAC5cAAAKAAAABIRAAApAAAALAYAAEUGAABKBgAArTAAAO0wAAAoAAAAEU8AACkAAABFBgAASgYAACAAAAAUAwAAAAMAAOowAADwAAAA4zAAAGQAAABtAAAAQwYAAEQGAABABgAAUAYAAFEGAACqMAAARAYAAC0GAABFBgAAYwAAAGEAAABsAAAABhEAABNfAACRAwAA/l0AADEAAABEIAAAMQAAADAAAACBeQAAYwIAADQAAAAzAAAAIAAAAAgDAAAoAAAAVFMAACkAAABkAAAAegAAAEoGAAAtBgAAbQAAAGIAAAA0BgAASgYAACoGAAAtBgAALAYAACEAAABEUwAAYwAAAG0AAAAyAAAASgYAAEUGAABFBgAAEhEAAEEGAABJBgAAKAAAAFYAAAApAAAA3zAAAOowAADPMAAAmTAAAPwwAADrMAAAvzAAAA8wAAA5BgAARQYAAEkGAAAqBgAALAYAAEUGAAAoZwAANAYAACwGAAAmAQAAdZ4AACcBAADcEAAASgYAAEUGAABKBgAA0xEAADYGAABFBgAABxEAADQGAABFBgAALgYAAK0wAAC8AgAAbgAAAFMAAABTAAAAMwYAAEoGAACcAwAAKgYAAC4GAAA0AAAA5WUAADMGAAAsBgAAQwYAAAoRAABZEQAAKAAAAHgAAAApAAAA6zAAAAwRAAAoAAAAXXkAACkAAADqMAAAwzAAAMgwAADrMAAAQwYAAC0GAADOMAAAwzAAAMgwAABwjQAANQAAAOVlAABNDgAAMg4AADEAAAAzAAAALgAAAH+AAAAgAAAACwMAABFPAAA0bAAAIAAAAJowAAA6BgAARQYAAEkGAAC7MAAA8zAAAMgwAAAATgAARQYAAEUGAABmAAAAbAAAAHERAABFBgAALQYAACwGAACsEQAAiwIAALMGAADbmAAANwYAAEkGAAA/AAAAKAAAAHoAAAApAAAAcQIAAEARAAA1IAAANSAAADUgAABiEQAANAAAADcAAABpAAAAagAAABQwAABTYgAAFTAAALZTAACmMAAAqTAAAPMwAAAyAAAAMAAAACAAAABQBgAAUQYAACgAAAAJEQAAYREAACkAAAAzAAAACGcAAGoRAADFBgAAQQYAAEoGAABDBgAARQYAAEoGAADcBQAAKAAAAGoAAAApAAAAKAAAAB9XAAApAAAAZgAAAG0AAAAqBgAASQYAADEAAAA5AAAA5WUAADUGAABFBgAARQYAACgAAACMTgAAKQAAAHgCAACNBgAABREAAK0wAADtMAAA7zAAAMMwAADIMAAATAQAAGgCAAAoAAAATgAAACkAAAAtBgAALAYAAEoGAAAoAAAASwAAACkAAAAoAAAAdgAAACkAAAA2YgAAzDAAADN1AAAnEQAAUF8AABwdAAAoAAAAYQAAACkAAADGkQAA11YAAK0GAADbMAAA/DAAAOswAAAoAAAAQgAAACkAAAAoAAAAUQAAACkAAAChAwAAzTAAACBrAAAgAAAAEwMAAAADAACFEQAAYwAAAGQAAACSIQAAMQAAADAAAAAuAAAAvQMAAKswAACZMAAA7TAAAPMwAAA8AAAAoJ8AADEBAACRAgAANAYAAC0GAABrcAAAqzAAAKQwAADqMAAATVIAAAURAABhEQAAVAAAAE0AAAAoAAAADBEAAGERAAApAAAAIAAAABMDAACZmQAAMQAAAEQgAAAyAAAAXAAAAImAAABBBgAALQYAABEwAAAwdQAARgYAAC0GAABJBgAAojAAAD9RAAComAAARAAAAFoAAAC7BgAASgYAAFQGAADIBgAAKAAAADEAAAA2AAAAKQAAADEAAAA4AAAA5WUAABQRAAA2BgAALgYAAEcGAABKBgAAngMAADMGAAAuBgAASQYAACgAAABNAAAAKQAAADZyAAArBgAARQYAAEaMAAAxAAAANAAAAC4AAAAGEQAAYREAAGSNAADbMAAAmjAAAKQwAADzMAAAyDAAACwGAABKBgAAMgYAAJkwAAA5VAAAMQAAADgAAAAuAAAAMwYAAEcGAAAoAAAATAAAACkAAABLAAAATQAAAChOAABEBgAALAYAACgAAAAJTgAAKQAAAHAAAAAuAAAAbQAAAC4AAADVMAAA6TAAAPMwAACXWwAAIwAAAJ4RAAAgAAAAMwMAADQAAAAwAAAASQAAAEoAAAA4UwAAGU4AACpoAAAPXwAAGk8AAD55AACGBgAAVAAAAEgAAAB6AAAAMQAAADQAAADlZQAAKAAAAEUAAAApAAAAU2IAAIgwAACKMAAASAYAAC4AAABilwAAZgAAAGkAAAA6BgAARQYAAEoGAAALXwAAFDAAAFdlAAAVMAAANwAAAEQgAAA4AAAA83cAAO8wAADDMAAAyDAAAHsCAAAyAAAAOAAAAEtiAABrAAAAVwAAAEoGAABUBgAALgYAAOZdAAA9AAAAPQAAACAAAABOBgAAZgAAAGYAAABsAAAAMQAAADgAAAC5cAAANAAAAC4AAABuEQAAMQAAADYAAADlZQAANwAAAC4AAAADEQAAogAAAGkAAABpAAAAaQAAAEYGAABFBgAASgYAAHAAAABBAAAAIGYAALwDAABzAAAANQYAAC4GAAAwAAAAq44AADoAAAA6AAAAPQAAACgAAABHAAAAKQAAANgwAACvMAAAvzAAAPwwAADrMAAANSAAADUgAAAqBgAARQYAAC4GAAA1BgAARAYAADkGAABFBgAAMQAAADIAAAAIZwAAkgMAANgwAABFBgAALAYAAEUGAAAoAAAABhEAACkAAACzMAAA/DAAANswAACaMAAAMQAAADMAAAC5cAAAMwAAADgAAADzgQAAvgYAAGwAAABqAAAAUQIAAOWcAAABMAAARgYAAC0GAABFBgAAbQAAAG0AAAAzAAAAbQAAADMAAABGBgAARgYAAEoGAABUBgAAMgYAACAAAABRBgAAcAYAACgAAABkAAAAKQAAAGUCAAA2TgAAMQAAADEAAAC5cAAAw18AAEUGAAAsBgAALgYAADQAAAAsAAAAbgAAAGoAAAARIgAANgYAAC0GAABJBgAAMwYAAEUGAAAtBgAAKAAAAFQAAAApAAAASgYAAFQGAADHBgAAyAYAAFICAAAzAAAALAAAAOBRAADmdAAAKAAAADEAAAA3AAAAKQAAACgAAABaAAAAKQAAABcdAABvBgAASgYAAFQGAAAtBgAAKAAAAD55AAApAAAA1AUAALaWAAAsBgAALQYAAEoGAAA1BgAASgYAAGZbAACDAgAA8FgAACAAAABNBgAAUQYAACgGAAAuBgAASgYAAGsRAACUTgAAKwYAAEkGAAAQMAAAYxEAANUwAAChMAAA6TAAAMMwAADIMAAAmTAAALswAABkAAAAegAAAAwDAABUAgAADhEAACEAAAA/AAAAaQAAAHgAAAA1AAAARCAAADgAAAAqBgAARQYAAEkGAABEBgAARQYAAC0GAAAOnwAARwAAAEgAAAB6AAAA5DAAAPwwAADrMAAAglMAADQGAAAxBgAAIJ8AAOgwAAAREQAAYREAADMAAAC5cAAAIXEAAPBmAABsAAAAeAAAAFAAAABhAAAAxAMAAKEGAAA3AAAAuXAAAAciAAAoAAAADxEAACkAAACxEQAAQgYAAC0GAABNAAAAVwAAADEAAAAwAAAA5WUAACgAAAAAEQAAKQAAAFUCAADMUwAASgYAAFQGAABFBgAAyDAAAJkwAADrMAAALQYAAEUGAABJBgAATQAAAEIAAACtMAAA7TAAAK8wAACZMAAA6TAAAOAwAAAzAAAANwAAADAAAAC5cAAACREAAGERAABCBgAASgYAADkGAABKBgAAJgAAACcGAABLBgAAFDAAAN1SAAAVMAAAOQYAAEUGAABKBgAASgYAAFQGAAAnBgAAglEAAFgRAAAoAAAAOAAAACkAAAASgAAAMwYAADEGAACEBgAA5DAAAPwwAADIMAAAmTAAAMYGAAB8AAAAlQMAAIVOAAB+BQAAdgUAAEMGAAAnBgAAd5UAAEMGAABKBgAAaAAAAGEAAAAoAAAAeQAAACkAAAA4AAAALgAAAMgwAAC/MAAAmTAAAPwwAAC5MAAAKAAAAGkAAAApAAAAMgAAADEAAABKBgAAMgYAABQwAAAsZwAAFTAAAKBOAABBAAAAVQAAAJdfAACGKQAA0Z4AAMkGAACOBgAA3xEAAEIGAABFBgAARQYAACwGAABEBgAAIAAAACwGAABEBgAAJwYAAEQGAABHBgAAjAYAAOOJAAAoBgAASgYAABIRAABhEQAAWU4AAC0GAAAsBgAAv3YAAEoGAAAtBgAASgYAAFRTAAA4AAAACGcAAGkAAABuAAAAQAYAAE8GAABRBgAA2DAAAJowAAD8MAAAtzAAAJkwAAA4BgAANAAAAEQgAAA1AAAASgYAAEoGAAAoAAAACGcAACkAAAAgAAAAFAMAAAEDAABtAAAAbQAAADIAAAAoAAAAAU8AACkAAAAnAAAAKAAAAFgAAAApAAAAbREAAHKCAABDBgAARQYAACgAAABmWwAAKQAAALMwAADIMAAAcFMAAIBbAABNhgAAKnIAAEoGAABGBgAANAYAAC0GAABFBgAAMQAAADYAAAAuAAAANn8AAHAAAABWAAAAKAAAADEAAAA5AAAAKQAAAHiMAAAoAAAANAAAACkAAAA3BgAARQYAADYGAAAtBgAASgYAABQwAACMTgAAFTAAAEsAAABCAAAARQYAACwGAAAoAAAAawAAACkAAAA0BgAARwYAACgAAABSAAAAKQAAACAAAABLBgAAkhEAADMAAAAzAAAALxEAADkGAABFBgAADBEAAG4RAAALEQAAdBEAAEQGAABFBgAASgYAAOEwAAAxAAAANwAAAC4AAABCBgAARQYAAC0GAAAyAAAAMwAAALlwAAClAAAAfgAAAEIGAABFBgAAKAAAAHAAAAApAAAAcwAAAHIAAACQAgAAOAAAACwAAAAyAAAANQAAAJuPAAALEQAAYREAAC4GAABKBgAA5V0AACQAAADmMAAAojAAAPMwAAAxAAAANQAAALlwAAAOZgAAu2wAADMAAABEIAAANAAAAMwGAACJcwAA3zAAAK8wAADtMAAA8zAAADEAAAAwAAAACGcAACgAAAAxAAAAMQAAACkAAAAtEQAAXFMAAN4wAADzMAAAtzAAAOcwAADzMAAA+zAAACgAAABjAAAAKQAAAApZAABHBgAARQYAAEQGAAAtBgAASgYAAAJZAAAMEQAAYREAACAAAABOBgAAUQYAADEAAAC5cAAALgYAAEkGAAAsEQAAkREAAA8RAABhEQAALU4AACoGAAAsBgAADhEAAGERAAC3EQAAABEAAGkRAABABgAASwYAADeMAAAoAAAARAAAACkAAAAxAAAARCAAADUAAACFHQAA3QMAAK52AABZcgAAIAAAABMDAABCAwAAKAAAAEYAAAApAAAAigIAAEoGAAB0BgAASgYAAFQGAABIBgAALAYAAC0GAABJBgAACFQAAKMAAAAzAAAARCAAADgAAABAAAAASgYAAC4GAABhXwAANQYAAEQGAABJBgAAaVMAAOgFAAA2BgAASQYAAD0AAAA9AAAAPQAAAKUwAAAxAAAANgAAAPlSAABABgAATgYAADEAAABEIAAAMwAAADIAAAAxAAAA5WUAAEUGAAAtBgAARQYAAN4wAACkMAAA6zAAAH4GAADQBQAA3AUAAEkGAABHAAAAeQAAACgAAABKAAAAKQAAACgAAAAqaAAAKQAAAAQRAAAoAAAAMQAAADAAAAApAAAARwYAAHAGAAByAgAAQQAAABUiAABtAAAASQAAAFUAAACEcwAAb6cAADQAAAA0AAAAUAIAAEQAAAB6AAAA3jAAAOswAACvMAAAMwYAACwGAAAtBgAAFG8AAHMRAABKBgAAVAYAAMYGAAAxBgAAMwYAAEgGAABEBgAAkCEAAMcGAACqEQAAKAYAAC0GAABGAAAAQQAAAFgAAABWAAAASQAAAEkAAABJAAAAWwIAACAAAAAEAwAAKgAAAE9VAAC8AwAAbAAAAHsdAABjAAAAbQAAADMAAAD4WwAAPQQAAPyBAACtMAAAmTAAAKswAACZMAAAMgAAADkAAAB7MAAASzAAAEJ9AABHBgAARQYAACwGAADhMAAA/DAAAMgwAADrMAAANAYAAEkGAABwEQAAbgYAAEQGAAAuBgAAXQAAACAAAAAUAwAAJwYAAEMGAAAoBgAAMQYAADMAAAAyAAAAbQAAAEEAAADTBQAAKAAAAG0AAAApAAAAKgYAACwGAABKBgAAIAAAAEwGAABRBgAAKAAAALRSAAApAAAAKAAAAG8AAAApAAAAKAAAAA4RAAApAAAAKwYAAEYGAABEBgAALgYAAEUGAADvMAAAIAAAAAYDAAC8AwAARgAAALQRAAAxAAAAMgAAAC4AAAAoAAAAWQAAACkAAAC5lgAARgYAAEcGAAAAigAAfwYAAEMGAAAuBgAAMgAAADAAAAC5cAAAKAAAAHMAAAApAAAAMgAAAEQgAAA1AAAAKQYAAHAAAABzAAAAIAAAAAcDAABIAAAAVgAAACgAAAAATgAAKQAAAEUGAAAsBgAASgYAAGkCAAAoAAAAA04AACkAAADnMAAAGlMAAOoFAABKBgAARwYAADYAAAAIZwAARAYAAC0GAABJBgAAsTAAAPwwAAC5MAAAcgAAAGEAAABkAAAAMwYAAC4GAAB0AgAARQYAAC4GAACMAgAAZAAAAG0AAAAzAAAAKAAAADkAAAApAAAAbQIAADUAAAAsAAAAxgAAADIAAAAyAAAAawAAAKkDAAA7UwAAOQAAAAhnAABzAAAAdAAAAGUAAABWAAAAWQIAAJICAAA1BgAARAYAANIGAAAqBgAALgYAAEoGAACtMAAA7TAAAOEwAAD8MAAAyDAAAOswAABrAAAASAAAAHoAAAAwBgAAcAYAAEoGAAAsBgAAMQAAADkAAAAuAAAASp8AADIAAAA0AAAAMwYAAC0GAAAsBgAAqzAAAOkwAADDMAAAyDAAAKgwAAC5MAAArzAAAPwwAADIMAAAmTAAAEQGAABJBgAAYQAAAL4CAADNawAARQYAAC0GAABKBgAAUAAAAFQAAABFAAAA71MAALpOAAB6egAATBEAAKIwAADzMAAA2DAAAJowAACiMAAACjAAAAsPAADHjAAAmVEAACERAAAxAAAAMAAAALlwAADPMAAAmjAAAPwwAADEMAAAMwAAADEAAADlZQAAMiAAADIgAAAyIAAAMgAAADQAAADlZQAANgYAADEGAABDAAAARAAAACh1AACtMAAAmTAAAMswAAD8MAAASgYAAFQGAAAsBgAAYQAAAC8AAABjAAAAMQAAADcAAAC5cAAAKgYAAEYGAAAzBgAARQYAAEUGAAA1BgAALQYAAC0GAABuggAAMwYAAEkGAADYMAAAmjAAAPMwAAC5MAAAMwYAACwGAABJBgAAllEAACgAAAAGEQAAYREAACkAAAAxAAAACGcAADEAAABEIAAAGHUAADAAAAAsAAAAKAAAAOqBAAApAAAASgYAAEkGAAAOMAAACGcAAHkCAAByAAAAYQAAAGQAAAAVIgAAcwAAADkGAABEBgAASgYAAEcGAABzXgAAEGIAACgAAABrcAAAKQAAACoGAAAtBgAAKAAAADEAAAA1AAAAKQAAAH12AAB2AAAAaQAAAGkAAABhEQAAtY8AAEQGAAAsBgAALAYAAM8wAACkMAAAxDAAAC4iAAAuIgAALiIAADIAAAAyAAAAuXAAACkRAAA2AAAAuXAAABQwAABTAAAAFTAAADUAAAAuAAAAqTAAADQAAAAIZwAAAjAAACdZAABjawAAYwAAAGMAAABYAAAASQAAAEkAAABrAAAAYwAAAGEAAABsAAAAKAAAABARAABhEQAAKQAAANEFAADfMAAAdQIAALIPAABxDwAAgA8AAJUCAABNAAAAUAAAAGEAAADXEQAA8TAAACgAAABoAAAAKQAAAEcAAABQAAAAYQAAAKWeAAAxBgAAcAYAAJQRAAAgAAAAUQYAAHR6AADfMAAA6jAAAE4AAABKAAAAbgAAAEEAAABABgAATwYAAKROAAAcWQAA8zAAADkAAAAsAAAAsGUAAEYGAAAtBgAASgYAALcwAADqMAAA8zAAAK8wAACZMAAARQYAAC4GAABFBgAAL2UAAGsAAABtAAAAMwAAAE0AAACpAwAANGUAAKIwAADPMAAAmjAAAPwwAADIMAAACzAAAL55AAAoAAAAZQAAACkAAAChjAAAKAYAACwGAABABgAAUQYAACpoAAAoAAAASQAAACkAAAAwAAAARCAAADMAAAA3dQAALgAAAC4AAAAuAAAARAAAAEoAAAA5AAAAuXAAADYGAAAtBgAAcQYAADMAAAAwAAAA5WUAAKRlAACzDwAAcQ8AAIAPAADOEQAAKAAAAAcRAABhEQAAKQAAAHQFAABlBQAAaZAAAOswAAD8MAAA1TAAAJkwAADrMAAADTAAAG0AAABtAAAArzAAAJkwAADpMAAA4DAAACAAAAAKAwAAKAAAADMAAAApAAAAMgAAALlwAABGBgAARQYAAEkGAAAPbAAAMQAAADIAAADlZQAALgYAAC0GAADbBQAASgYAADEGAAAgAAAATQYAANRrAAD0XgAAKAAAAFAAAAApAAAAMQAAADEAAAAHYwAAKAAAAPOBAAApAAAAKAAAAF1OAAApAAAALWYAAIxUAAAyAAAACGcAAHIAAABhAAAAZAAAABUiAABzAAAAMgAAAHMCAABvAgAAbAAAAG4AAACCAgAAqJoAABIwAABGBgAALAYAAEUGAAArBgAALAYAAHACAAA1BgAAMQYAAG0AAAAVIgAAcwAAADIAAAABTgAA44EAAECIAAC8AwAAbQAAACsGAAAxBgAAQQYAACwGAADbMAAA/DAAAPMwAADgZQAAMwYAAC4GAABKBgAACBEAANIFAAA0BgAALAYAAEoGAABWAAAASQAAAEkAAAAclgAAKAAAAAkRAAApAAAANwYAAEUGAABKBgAAMQAAAEQgAAA5AAAAAiUAACgGAAAuBgAAOgYAAEkGAACtMAAAmTAAAOswAAC/MAAAmTAAAPwwAAC9MAAAXwIAACenAAAoAAAAdwAAACkAAADDMAAAKAAAAON2AAApAAAAKAAAADcAAAApAAAAFREAAEkAAABYAAAAKAAAAAARAABhEQAAKQAAAEoGAABUBgAARgYAADQAAAA5AAAAbQAAABUiAABzAAAASAAAAGcAAADSMAAAmjAAAKIwAAC5MAAAyDAAAOswAACFKQAAL5sAAMwRAAAAEQAAYREAAHpeAABMAAAAtwAAACAAAAATAwAAAQMAAKQwAAAqBgAALgYAAEkGAADSMAAAmTAAAOswAABhAAAALwAAAHMAAAA3AgAAYQAAAC4AAABtAAAALgAAACwGAABJBgAAKAAAAGtRAAApAAAAKAAAANtWAAApAAAAKAAAAGIAAAApAAAAZAAAAGwAAACvMAAAmTAAAOkwAADgMAAAyDAAAPMwAAAeEQAAVwAAAGIAAAArBgAARwYAAEMGAAAsBgAA4ncAALllAAByXgAANQAAALlwAABSqwAAdAUAAG0FAAAxAAAANwAAAOVlAAA1BgAALQYAALRSAAA3qwAARwYAAEkGAACaMAAAA04AANgwAACZMAAA/DAAAL8wAAB4AAAAaQAAAOswAADSMAAAmjAAAPwwAABOAAAAagAAAK8wAADtMAAA/DAAAM0wAAAoAAAAbXkAACkAAABIBgAAMwYAAEQGAABFBgAAIgAAACgAAABBUwAAKQAAACAAAABSBgAANQAAAEQgAAA2AAAAxxEAACAAAABPBgAAUQYAAEUGAAAtBgAA4TAAAKswAACZMAAAJR0AACgAAABnAAAAKQAAACAAAAADAwAARQYAAC0GAABFBgAALwYAAB0RAABGBgAAMgYAAFF/AAAoAAAAx4wAACkAAAAxAAAAMwAAADkGAABFBgAARQYAAN+aAABelwAARQYAAC4GAAAsBgAA23cAADIAAAAwAAAA5WUAAJ8CAACOAQAAVwAAAEMAAABkAAAAYQAAAIp/AAAoAAAAQQAAACkAAABHEQAAQgYAAEUGAABKBgAAsAAAAEYAAACXZQAAXgAAAFwCAAAyAAAANgAAAM8wAACZMAAA/DAAAOwwAADrMAAAbgAAAFYAAABNAAAASAAAAHoAAAAyEQAAKAYAAEUGAAAiEQAAKAAAAA4RAABhEQAAKQAAAEUGAABFBgAASgYAABQwAAC5cAAAFTAAADMAAAA5AAAAMwAAAOVlAAAgAAAAmTAAAEQGAAAnBgAAVQYAADIAAABEIAAAMwAAACoGAAAuBgAARQYAABwRAADdBQAAKAAAAG4AAAApAAAAKAAAAE8AAAApAAAAc18AAEoGAAAsBgAASgYAAEYGAAAxBgAAkyEAAAIdAAAgAAAARQMAACgAAAAxAAAAKQAAAAWYAAAoBgAARgYAAMhTAAAoAAAACxEAACkAAADcAwAANhEAANtWAAAzAAAANAAAADtyAADYMAAA6zAAAMQwAADYMAAAmjAAAL0wAAA2AAAALgAAAP2eAACqMAAA8zAAALkwAAAqBgAARQYAAEoGAACjMAAAawIAACsiAAArIgAAKyIAACsiAABJAAAASQAAAGsAAABsAAAAMgAAAC4AAADbMAAA8zAAAGsAAABQAAAAYQAAANkRAADsMAAA8zAAAMgwAACxMAAAmTAAAPMwAAAxAAAAMQAAAC4AAABamwAAdAUAAGsFAAAxAAAAMQAAAOVlAADolgAAIAAAAE8GAADobAAA210AAGgAAABQAAAAYQAAAJaZAABxXAAA1TAAAJkwAADDMAAAtzAAAKcwAADrMAAAKAYAADEGAADNDgAAsg4AAHlyAACBAgAARwAAAEIAAAAoAAAADBEAAG4RAAApAAAAFDAAADQAAAA1AAAAQwYAAEkGAAAymwAAMgAAADYAAADlZQAAKxEAADoGAABFBgAARQYAACgAAAADEQAAYREAACkAAABABgAATgYAAFEGAAAoAAAAeXIAACkAAAC8AwAAVwAAACgAAAACEQAAKQAAADEAAABEIAAANwAAANswAACaMAAA8zAAAMgwAACZMAAALgYAAEUGAABNkQAAMgAAADcAAAAxAAAANAAAAFgAAABJAAAAzZ4AACEGAAAxAAAARCAAADYAAAChMAAAMiAAADIgAABzfAAASQAAAFYAAACLdQAAy5cAADIAAAA5AAAA5WUAADybAAAoAAAANQAAACkAAAAxAAAARCAAADQAAABWAAAASQAAACgAAAB1AAAAKQAAACgAAAAoZwAAKQAAAH6JAAAxAAAAMgAAAGuGAADOMAAAMgAAADMAAADlZQAApDAAAMswAADzMAAArzAAAJkwAABlEQAAOQAAAOVlAABEBgAARwYAABRsAADbawAAABEAADcAAADlZQAAUAAAAEgAAAAgAAAACAMAAAADAAA1AAAACGcAACgAAAAMEQAAKQAAAPAwAABjawAAoREAAAsRAABuEQAA6oEAAKYAAAAqBgAAMQYAAB+CAAD8MAAAUZcAABVTAABGBgAASgYAADEAAAA5AAAAuXAAACgAAAANVAAAKQAAAFKfAAAUMAAAiVsAABUwAABsAAAAtwAAADUAAAAwAAAAMAAAAC4AAABCBgAARAYAANIGAABQAAAAUgAAAFMAAABNAAAALhEAAICVAABwAAAAVwAAAOIFAABFBgAALgYAAEoGAAA0AAAAMgAAAEUGAAAsBgAALQYAACgAAAAxAAAAMwAAACkAAACiMAAA6zAAANUwAAChMAAANAYAAC0GAABKBgAAD1wAACICAAAHEQAAYREAADEAAAA2AAAAuXAAAIkCAABOAAAAbwAAALwDAABnAAAAZwAAAGEAAABsAAAAKAAAAONOAAApAAAAIQAAACEAAAAxAAAARCAAADgAAAA4AAAAuXAAAEwAAABqAAAAMQAAADIAAAC5cAAA6jAAAOkwAABXAAAAWgAAANKJAAB8XgAAIAAAAFAGAABrAAAAVgAAAEQAAAB6AAAADAMAAGsAAABtAAAAMgAAACoGAAAyBgAAEyAAACWbAAAMggAAknUAANIwAACaMAAArzAAAOswAACMXwAAAxEAAGERAABKBAAArzAAAOswAAC7MAAAmTAAAKQwAADtMAAAFDAAANd2AAAVMAAAj3sAACgAAAAFEQAAYREAACkAAAAoAAAAMQAAADQAAAApAAAATQAAAEQAAADGMAAAmTAAALcwAACrAQAAyDAAAPMwAAAoAAAAEREAAGERAAApAAAAbQAAAFYAAAAxAAAAOQAAAB8vAAB4sxEAAQAAADDUAQB8sxEAAQAAAKD8AACAsxEAAgAAAGnXAQCIsxEAAQAAAFkdAACMsxEAAQAAAHL9AACQsxEAAwAAAKPVAQCcsxEAAQAAAOLUAQCgsxEAAQAAAK77AACksxEAAQAAAJYzAACosxEAAgAAABrVAQCwsxEAAQAAAADWAQC0sxEAAQAAAP/8AAC4sxEAAgAAAOr/AADAsxEAAQAAALHUAQDEsxEAAQAAAH0gAADIsxEAAQAAAODVAQDMsxEAAQAAAG7uAQDQsxEAAQAAAOz7AADUsxEAAwAAAN4zAADgsxEAAwAAAHchAADssxEABAAAANPUAQCcsxEAAQAAAI7uAQDQsxEAAQAAAJXWAQD8sxEAAQAAANj+AAAAtBEAAQAAAH/7AAAEtBEAAQAAAH8kAAAItBEABAAAAOAzAAAYtBEAAgAAAA4vAAAgtBEAAQAAAKz/AAAktBEAAQAAAJv/AAAotBEAAQAAAE8vAAAstBEAAQAAAMvUAQAwtBEAAQAAAEghAAA0tBEAAQAAAIozAAA4tBEAAgAAADzXAQBAtBEAAQAAAKgdAABEtBEAAQAAALr+AABItBEAAQAAAFT/AABMtBEAAQAAAI7UAQBQtBEAAQAAABDuAQBUtBEAAQAAALPuAQBYtBEAAQAAAE7UAQBctBEAAQAAAIDVAQBgtBEAAQAAALTXAQBktBEAAQAAAE4vAABotBEAAQAAAJTVAQBstBEAAQAAACQyAABwtBEAAwAAANv/AAB8tBEAAQAAAP/XAQCAtBEAAQAAADIxAACEtBEAAQAAAOn+AACItBEAAQAAAKIvAACMtBEAAQAAALv/AACQtBEAAQAAAG7UAQCUtBEAAQAAAH78AACYtBEAAgAAAGDVAQBstBEAAQAAAAX9AACgtBEAAgAAAFsyAACotBEAAgAAAH3XAQCwtBEAAQAAAHAhAAA0tBEAAQAAAIHWAQC0tBEAAQAAAIIzAAC4tBEAAgAAAArWAQDAtBEAAQAAAK/7AACksxEAAQAAACQvAADEtBEAAQAAAD8hAADItBEAAQAAAEMdAABctBEAAQAAAML+AADMtBEAAQAAANUzAADQtBEAAwAAAGf7AADctBEAAQAAAEbUAQCgsxEAAQAAAKHXAQDgtBEAAQAAAHsvAADMFxEAAQAAAH3/AADktBEAAQAAAKL+AADotBEAAQAAAKf8AADstBEAAgAAAITUAQD0tBEAAQAAABn8AAD4tBEAAgAAAJn9AAAAtREAAwAAAHj7AAAMtREAAQAAAFj+AAAQtREAAQAAAO4yAAAUtREAAQAAADbyAQAYtREAAQAAAGbUAQActREAAQAAALsyAAAgtREAAgAAAE7xAQAotREAAwAAADfuAQA0tREAAQAAAJAkAAA4tREAAgAAAIr/AABAtREAAQAAAHbVAQB4ExEAAQAAAGr/AABEtREAAQAAAED/AADAJhEAAQAAACTxAQBItREAAwAAANsCAABUtREAAgAAADAyAABctREAAwAAAM3VAQBMtBEAAQAAALHXAQBotREAAQAAACYvAABstREAAQAAADoyAABwtREAAwAAAAbXAQBktBEAAQAAAM8zAAB8tREAAgAAAFoyAACEtREAAgAAAI77AACMtREAAQAAAFv+AACQtREAAQAAALbVAQCwsxEAAQAAADv9AACUtREAAgAAAE7uAQDQsxEAAQAAAJj+AACctREAAQAAAOrVAQCwsxEAAQAAAGPVAQCgtREAAQAAAEwzAACktREABQAAAOL+AAC4tREAAQAAAEHxAQC0tBEAAQAAAAYvAAC8tREAAQAAAM8yAADAtREAAwAAAGYkAADMtREAAQAAABP7AADQtREAAgAAAJzUAQDYtREAAQAAADzWAQDYtREAAQAAACDyAQDctREAAQAAAIsvAADgtREAAQAAAEggAADktREAAgAAANUyAADstREAAQAAACPUAQDwtREAAQAAAEn8AAD0tREAAgAAANMyAAD8tREAAQAAAFP/AAC0sxEAAQAAACwiAAAAthEAAgAAAIokAAAIthEAAgAAAMYyAAAQthEAAgAAAIwgAAAYthEAAQAAAIDWAQActhEAAQAAAHH7AAAgthEAAQAAAHPXAQAkthEAAQAAAAn8AAAothEAAgAAANf8AAAwthEAAgAAAG3UAQA4thEAAQAAAHQvAACYLBEAAQAAAOX7AAA8thEAAQAAALEyAABAthEAAgAAAKD9AABIthEAAwAAAKAdAABUthEAAQAAAA7VAQB4ExEAAQAAAKj8AABYthEAAgAAAKLXAQBgthEAAQAAAGEyAABkthEAAQAAAFEdAABothEAAQAAAMjWAQBAtBEAAQAAAB/VAQBsthEAAQAAAInWAQBwthEAAQAAAJPXAQB0thEAAQAAAJ4xAAB4thEAAQAAAIIyAAB8thEAAQAAAHQzAACAthEAAwAAAJQxAAB8thEAAQAAAK3/AACMthEAAQAAADnxAQCQthEAAQAAAFkvAACUthEAAQAAAJAyAACYthEAAQAAACnUAQCcthEAAQAAAEYyAACgthEAAQAAAMbVAQBQtBEAAQAAAFzUAQBstBEAAQAAALXXAQCkthEAAQAAABEvAACothEAAQAAALQvAACsthEAAQAAAIHXAQCwthEAAQAAACHuAQC0thEAAQAAAEfuAQDotBEAAQAAAEP/AAD0tBEAAQAAAG8xAAC4thEAAQAAAPf+AAC8thEAAwAAAKrXAQDIthEAAQAAAH0vAADMthEAAQAAAHwgAAAYthEAAQAAAOwzAADQthEAAwAAANvWAQDcthEAAQAAALAvAADgthEAAQAAAA/uAQDkthEAAQAAAO4zAADothEAAwAAAAIyAAD0thEAAwAAANLUAQDAtBEAAQAAAJTWAQAAtxEAAQAAALnXAQAEtxEAAQAAAJkyAAAItxEAAQAAALbWAQAMtxEAAQAAAI8zAAAQtxEAAgAAAOrXAQAYtxEAAQAAALDUAQBgtBEAAQAAAF0xAAActxEAAQAAANkzAAAgtxEAAwAAAKjVAQAstxEAAQAAANUkAABUthEAAQAAABDVAQDMsxEAAQAAAK78AAAwtxEAAgAAACEhAAA4txEAAwAAAFr9AABEtxEAAwAAAB7UAQBQtxEAAQAAABTVAQActhEAAQAAAIX/AABUtxEAAQAAAMH9AABYtxEAAwAAANLWAQBktxEAAQAAAHL8AABotxEAAgAAAP3XAQDMtREAAQAAAJT9AABwtxEAAwAAAGzXAQB8txEAAQAAAD4zAACAtxEABAAAAHrWAQB4ExEAAQAAAH4hAACQtxEAAQAAALcCAAB8sxEAAQAAAFjUAQAAtxEAAQAAAPr7AACUtxEAAwAAALP+AADQsxEAAQAAAF/7AACgtxEAAQAAAHn7AAAMtREAAQAAAFoxAACktxEAAQAAAKnUAQCotxEAAQAAAHrUAQCgsxEAAQAAAMQBAACstxEAAwAAAFYxAAC4txEAAQAAAMgkAACgsxEAAQAAABjUAQC8txEAAQAAAGwvAADAtxEAAQAAAHXUAQCotxEAAQAAAGjXAQBgthEAAQAAANfWAQDEtxEAAQAAAC7yAQDItxEAAQAAAMnXAQAEtxEAAQAAAIYgAADMtxEAAQAAAGQdAADQtxEAAQAAAAYgAADUtxEAAQAAAGn8AADYtxEAAwAAAPrVAQBQtBEAAQAAAAovAADktxEAAQAAAEr+AADotxEAAgAAAGr+AADwtxEAAQAAAMLWAQDIthEAAQAAAH39AAD0txEAAwAAAHAzAAAAuBEAAwAAAG8yAAAMuBEAAgAAAIMxAAAUuBEAAQAAAAD7AAAYuBEAAgAAABL/AAAguBEAAQAAADnUAQA4thEAAQAAAP/VAQCgtREAAQAAABvuAQAkuBEAAQAAAO78AAAouBEAAgAAAPb7AAAwuBEAAwAAAL7UAQA0tBEAAQAAAI8vAAAkAxEAAQAAABHyAQA8uBEAAQAAAIIxAABAuBEAAQAAAGDXAQBEuBEAAQAAAF7+AABIuBEAAQAAADLuAQAAtBEAAQAAACUyAABMuBEAAwAAAAP7AABYuBEAAwAAABXuAQCctREAAQAAAK/UAQBkuBEAAQAAAMckAAC0tBEAAQAAAO3XAQBouBEAAQAAADvWAQBsuBEAAQAAADowAABwuBEAAQAAAIbUAQBQtxEAAQAAAGckAAAYtxEAAQAAAMgvAAB0uBEAAQAAANnUAQCQthEAAQAAANEDAABotREAAQAAAOn8AAB4uBEAAgAAAM0yAACAuBEAAwAAAFT7AACMuBEAAQAAAN7XAQDMtxEAAQAAAJYkAACQuBEAAwAAAHshAACcuBEAAwAAAJAzAACouBEAAgAAAIszAACwuBEAAgAAAHX8AAC4uBEAAgAAAGv8AADAuBEAAgAAAKjuAQDMtBEAAQAAAK8kAADIuBEAAwAAACPyAQDUuBEAAQAAAHr/AADYuBEAAQAAAJX/AADcuBEAAQAAAKz9AADguBEAAwAAAMMzAADsuBEAAgAAAPIyAAD0uBEAAQAAAAgzAAD4uBEABAAAAEHyAQAIuREAAwAAAC4dAAAUuREAAQAAAA/UAQAYuREAAQAAAPEDAABktxEAAQAAAHggAAAYtxEAAQAAAGzWAQB8sxEAAQAAAI37AAAcuREAAQAAAAsyAAAguREAAwAAANbWAQAsuREAAQAAAHPVAQAwuREAAQAAAMnWAQBotREAAQAAADAzAAA0uREAAwAAAJMgAABAuREAAQAAAD3UAQCQthEAAQAAAJr/AABEuREAAQAAACH7AABIuREAAQAAACb8AABMuREAAgAAACAvAABUuREAAQAAAJQyAABYuREAAQAAAJozAABcuREAAgAAALz8AABkuREAAgAAAEwxAABsuREAAQAAAB4yAABwuREABgAAAIv7AACIuREAAQAAACwhAAAUuREAAQAAAIfWAQCMuREAAQAAAIjUAQCQuREAAQAAAGgvAACUuREAAQAAAIP+AACMChEAAgAAAJzVAQB8sxEAAQAAAFX9AACYuREAAwAAAEXxAQDEsxEAAQAAANLVAQActREAAQAAACgzAACkuREAAgAAAJf/AACsuREAAQAAAGwhAACwuREAAQAAADX9AAAwtxEAAgAAAJbXAQC0uREAAQAAALcvAAC4uREAAQAAAN38AAC8uREAAgAAADj+AADEuREAAQAAAHLuAQAAtBEAAQAAANPVAQBsuBEAAQAAAMYzAADIuREABAAAAA8zAADYuREABAAAAOsyAADouREAAQAAAPX+AADsuREAAwAAAFb9AAD4uREAAwAAAEzUAQC8txEAAQAAAPPVAQBUthEAAQAAAHkkAAAEuhEAAwAAAJL7AAAQuhEAAQAAAJggAABQtBEAAQAAAN8fAAAUuhEAAwAAANX+AAAAtBEAAQAAAB/8AAAguhEAAgAAABj8AAAouhEAAgAAAEAxAAAwuhEAAQAAAKz+AAA0uhEAAQAAAFUxAAA4uhEAAQAAAMD8AAA8uhEAAgAAALsdAABsuBEAAQAAAL0zAABEuhEAAgAAAGbWAQBMuhEAAQAAACQhAABwthEAAQAAANADAABQuhEAAQAAANIzAABUuhEAAwAAABLxAQBguhEAAwAAADcdAAB4ExEAAQAAAFcgAABsuhEABAAAAAUhAAB8uhEAAwAAAFrWAQBQtxEAAQAAAOX+AACIuhEAAQAAAIUDAACMuhEAAwAAAHEvAACYuhEAAQAAAAPxAQCcuhEAAgAAABP+AACkuhEAAQAAAKvXAQBQuhEAAQAAAAMyAACouhEAAwAAANfXAQCAtBEAAQAAAHbUAQC0uhEAAQAAANwzAAC4uhEAAgAAALT8AADAuhEAAgAAAEn/AAA0tBEAAQAAAKYyAADIuhEAAQAAAKb+AAA0tREAAQAAAKwyAADMuhEAAQAAABvVAQCMuREAAQAAAB7/AADQuhEAAQAAAOb/AADUuhEAAQAAAMf/AADYuhEAAQAAAKoAAABctBEAAQAAAO7/AADcuhEAAQAAAHfXAQBotREAAQAAANL8AADguhEAAgAAAN7VAQB4ExEAAQAAAKn7AADouhEAAQAAAHvUAQBkuBEAAQAAACfyAQDsuhEAAQAAAHH9AACQsxEAAwAAAHsgAADwuhEAAQAAANYzAAD0uhEAAwAAAEUzAAAAuxEAAwAAAFvuAQAkuBEAAQAAAFwvAAAMuxEAAQAAAHLUAQB4ExEAAQAAABzUAQD0tBEAAQAAADXyAQAQuxEAAQAAAN7WAQAUuxEAAQAAAHcGAAAYuxEAAgAAAMLXAQAguxEAAQAAAKMvAAAkuxEAAQAAAFn9AAAouxEAAwAAADT+AAA0uxEAAQAAACL/AAAUuREAAQAAAAHVAQBAuREAAQAAAJnXAQA4uxEAAQAAAF3XAQDgtBEAAQAAAJLUAQBMuhEAAQAAAEfxAQCMuREAAQAAAPn7AACUtxEAAwAAANjWAQA8uxEAAQAAAKzUAQActhEAAQAAAM3+AAAkuBEAAQAAACbXAQBEuBEAAQAAACz8AABAuxEAAgAAAErXAQAsuREAAQAAAPPWAQDgtBEAAQAAAOf8AAAguhEAAgAAAC4yAABIuxEAAwAAALEzAABUuxEAAgAAAFQxAADYuhEAAQAAAIn+AAAgGxEAAgAAAEcgAABcuxEAAgAAAGYyAABkuxEAAQAAALLXAQDMJxEAAQAAAND+AAAkuBEAAQAAAM4vAABouxEAAQAAANz/AABsuxEAAQAAAE3uAQCIuhEAAQAAABTyAQC8tREAAQAAAIUkAABwuxEABAAAAPMuAACAuxEAAQAAAOL/AACEuxEAAQAAAC8iAACIuxEAAgAAAG0zAACQuxEAAwAAAArXAQCcuxEAAQAAALMvAACguxEAAQAAAOgkAAActREAAQAAAILuAQCkuxEAAQAAAKb/AACouxEAAQAAAAMzAACsuxEAAwAAAKwkAAC4uxEAAwAAAHAkAADEuxEAAgAAAKPuAQDMuxEAAQAAAIv/AADQuxEAAQAAAHD7AAAgthEAAQAAAA8yAADUuxEABAAAAIEyAAC8tREAAQAAAJzXAQDkuxEAAQAAAKD/AADouxEAAQAAAIzXAQAUuxEAAQAAAA3/AADsuxEAAQAAAMDXAQA8uxEAAQAAAIcFAADwuxEAAgAAANokAAAAtxEAAQAAAFgdAADQtxEAAQAAALz9AAD4uxEAAwAAAHEkAAAEvBEAAgAAAKggAAAMvBEAAgAAAOIyAAAUvBEAAQAAAH0sAADEsxEAAQAAABIzAAAYvBEABAAAAJ0yAAAovBEAAQAAAD4dAAAYuREAAQAAAF8yAAAsvBEAAgAAAE8dAAAAtxEAAQAAAAwyAAA0vBEAAwAAAK//AABAvBEAAQAAAAbUAQCUtBEAAQAAAMr8AABEvBEAAgAAAG8tAABMvBEAAQAAAOEzAABQvBEAAgAAABXUAQDEsxEAAQAAAHDXAQDIthEAAQAAAEnuAQBYvBEAAQAAAJ/XAQDItBEAAQAAAKX8AABcvBEAAgAAABP/AABkvBEAAQAAAFMyAABovBEAAgAAANb+AAAAtBEAAQAAALLWAQBEuBEAAQAAAPz9AABwvBEABAAAAEb/AABUthEAAQAAAEMzAACAvBEABAAAACIzAACQvBEAAwAAAPr8AACcvBEAAgAAACj9AAB4uBEAAgAAAPPXAQDMtREAAQAAAHYzAACkvBEAAgAAAALyAQCsvBEAAQAAABnWAQC0tBEAAQAAANT8AACwvBEAAgAAAMgzAAC4vBEAAgAAAMoyAADAvBEAAwAAAAvuAQDMvBEAAQAAAMf9AADQvBEAAwAAAMX/AADcvBEAAQAAANzWAQDgvBEAAQAAAAYhAADkvBEAAwAAAJv+AADwvBEAAQAAAAj9AAD0vBEAAgAAAHv8AAD8vBEAAgAAACUgAAAEvREAAgAAABf+AAAMvREAAQAAAA0zAAAQvREABAAAANTUAQAgvREAAQAAAFr7AAAkvREAAQAAAEjWAQDMsxEAAQAAALszAAAovREAAgAAAI4yAACMBREAAQAAAJXXAQAwvREAAQAAAIgkAAA0vREAAgAAAEz8AAA8vREAAgAAAJfVAQCgtREAAQAAAOP8AABotxEAAgAAAE0xAABEvREAAQAAAIcvAABIvREAAQAAAJv8AABMvREAAwAAAHMxAABYvREAAQAAAHj/AABcvREAAQAAAOD8AABMvREAAwAAAOfUAQCMuREAAQAAAHYGAABgvREAAgAAAL7VAQBQtxEAAQAAAAzWAQAgvREAAQAAAN0OAABovREAAgAAAF0vAABwvREAAQAAAGvUAQCcsxEAAQAAACT/AACcsxEAAQAAAAXWAQBAuREAAQAAAEn+AADotxEAAgAAAM//AACktxEAAQAAAAsvAAB0vREAAQAAAPL9AAB4vREABAAAAA/WAQAwuREAAQAAAPP+AABYvBEAAQAAABbWAQC0uhEAAQAAAMAfAACIvREAAgAAAOf+AACIuhEAAQAAANIDAACQvREAAQAAACTVAQCQuREAAQAAAL3+AACUvREAAQAAACsvAACYvREAAQAAAPszAACcvREAAwAAAH8vAACovREAAQAAAN8kAACcthEAAQAAAEjxAQC8txEAAQAAACzuAQC4tREAAQAAAC0hAADAtBEAAQAAAHUkAACsvREAAwAAACLyAQC4vREAAQAAAMcBAAC8vREAAgAAAHvVAQAYuREAAQAAAAjWAQDYtREAAQAAALYzAADEvREAAgAAAHkgAACAtBEAAQAAAOjVAQBgtBEAAQAAAC/WAQDMvREAAQAAAHUhAADQvREAAgAAADv/AADYvREAAQAAACHXAQAwvREAAQAAABUyAADcvREABAAAAO3/AADsvREAAQAAAH/+AADwvREAAgAAAKf+AAA0tREAAQAAAF3VAQD8sxEAAQAAACjyAQD4vREAAQAAAKf7AADouhEAAQAAADn9AAD8vREAAgAAAKrWAQAEvhEAAQAAAGz7AAAIvhEAAQAAAN/UAQAYuREAAQAAACX/AAAgvREAAQAAAEgdAACQtxEAAQAAALD7AAAMJxEAAgAAAATXAQDMJxEAAQAAAALxAQAMvhEAAgAAADMzAAAUvhEABAAAAMczAAAkvhEAAwAAALICAADwtREAAQAAADzxAQDMsxEAAQAAAPnXAQBkvBEAAQAAAOL8AACAsxEAAgAAAEvUAQCMuREAAQAAAMfXAQDEtxEAAQAAALYyAAAwvhEAAgAAABgyAAA4vhEABAAAABAhAAAstxEAAQAAADbWAQDQtxEAAQAAAAozAABIvhEAAwAAANT+AABUtBEAAQAAAGAvAABUvhEAAQAAABkhAAAYuREAAQAAAOUyAABYvhEAAQAAACP/AADAtBEAAQAAALvuAQAkuBEAAQAAADvUAQAwuREAAQAAAKYdAABcvhEAAQAAAFDUAQD0tBEAAQAAABvWAQBkuBEAAQAAAHDWAQDYtREAAQAAAC/VAQCgtREAAQAAAET8AABgvhEAAgAAAKEkAABovhEAAwAAANzXAQB0vhEAAQAAAPPUAQDwtREAAQAAAB0vAAB4vhEAAQAAAIvXAQBotREAAQAAADvuAQAkuBEAAQAAABb/AADMtxEAAQAAAIQzAAB8vhEAAgAAACwyAACEvhEAAwAAAAD9AACQvhEAAgAAAGYdAABQuhEAAQAAAGIhAACYvhEAAwAAAPXUAQD8sxEAAQAAAJv7AACkvhEAAQAAANf/AACovhEAAQAAAF0dAABQuhEAAQAAAPoyAAAotBEAAQAAANsyAACsvhEAAQAAAAHuAQC0thEAAQAAAEH+AACwvhEAAQAAAN/VAQCwuREAAQAAAAjxAQC0vhEAAgAAAI7/AAC8vhEAAQAAABn/AACAtBEAAQAAAFHXAQBotREAAQAAAPb8AADAvhEAAgAAAJ4vAABMChEAAQAAALjVAQC8txEAAQAAANHWAQAEtxEAAQAAAM0zAADIvhEAAgAAAN/+AADMvBEAAQAAAMUvAAC0LhEAAQAAAD0vAADQvhEAAQAAABj+AADUvhEAAQAAAJDUAQBstBEAAQAAAMXXAQBotREAAQAAAOnXAQDMtREAAQAAAFfuAQA0tREAAQAAAHYgAADMtxEAAQAAALgCAAActREAAQAAABb9AACcvBEAAgAAAJX7AAAQuhEAAQAAAD3XAQBotREAAQAAAC3/AADMsxEAAQAAADrxAQB4ExEAAQAAAIj7AADYvhEAAQAAAEvxAQDcvhEAAgAAAOEyAADkvhEAAQAAAAHWAQBMtBEAAQAAAI4gAADovhEAAQAAAJ/WAQAwtBEAAQAAAHv+AADsvhEAAgAAALv9AAD0vhEAAwAAAMLVAQA0tBEAAQAAADAvAAAAvxEAAQAAACvVAQDMvREAAQAAAAz/AAAEvxEAAQAAADQvAAAIvxEAAQAAAFD/AACcthEAAQAAAKckAAAMvxEAAwAAAGj7AADctBEAAQAAADwhAAAEtxEAAQAAAOEkAACgtREAAQAAAJrUAQActREAAQAAADf+AACQtREAAQAAAB3WAQDEsxEAAQAAAG3/AAAYvxEAAQAAAP3WAQBQuhEAAQAAANnWAQAcvxEAAQAAAN/7AAAgvxEAAQAAADDXAQCQvREAAQAAADgzAAAkvxEABAAAACPVAQBUthEAAQAAAHUxAAA0vxEAAQAAADD8AAA4vxEAAgAAAFUzAABAvxEAAgAAAN3VAQCQthEAAQAAAGTuAQCItBEAAQAAAK0kAABIvxEAAwAAABHWAQCQthEAAQAAAB8zAABUvxEABAAAAHvXAQCkthEAAQAAACovAABMCREAAQAAAK/uAQDkthEAAQAAAGvVAQBsuBEAAQAAAHwhAAD8sxEAAQAAAOTXAQAguBEAAQAAAHAvAABkvxEAAQAAAFchAABovxEAAwAAALXVAQDEsxEAAQAAAFP9AAB0vxEAAwAAAOLVAQC0uhEAAQAAANrVAQCUtBEAAQAAAJHWAQCAvxEAAQAAAG/uAQDkthEAAQAAADryAQCEvxEAAQAAAHUGAACIvxEAAgAAAG/9AACQvxEAAwAAAJr7AACkvhEAAQAAABfxAQCcvxEAAwAAAOUzAACovxEAAgAAALgAAACwvxEAAgAAAMPWAQBQuhEAAQAAAHP9AAC4vxEAAwAAANXVAQAUuREAAQAAAFTUAQCQuREAAQAAANAzAADEvxEAAgAAAM7VAQDQtxEAAQAAAEv8AADguhEAAgAAACszAADMvxEABgAAAGrxAQDkvxEAAgAAAK/XAQDsvxEAAQAAAJD8AADwvxEAAgAAAIzWAQD0tBEAAQAAAPHWAQDItBEAAQAAAGz9AAD4vxEAAwAAAB0hAAC0tBEAAQAAAMz8AAAEwBEAAgAAACH8AAAMwBEAAgAAAP7XAQAYtxEAAQAAALDWAQAUwBEAAQAAALIvAAAYwBEAAQAAAFPWAQCMuREAAQAAAIcxAAAcwBEAAQAAADb+AADovhEAAQAAAAUyAAAgwBEAAwAAANP8AAA8vREAAgAAAJXUAQBMtBEAAQAAAFjWAQD0tBEAAQAAAM/XAQBouBEAAQAAAPHVAQCQtxEAAQAAAAHyAQAswBEAAgAAANIyAAA0wBEAAQAAAPozAAA4wBEAAwAAAOzWAQBEuBEAAQAAAJ3WAQBMtBEAAQAAALr8AABEwBEAAgAAAPgzAABMwBEAAwAAAL/VAQBUthEAAQAAAHgzAABYwBEAAwAAALTuAQBkwBEAAQAAABfyAQBowBEAAQAAAJkvAABswBEAAQAAAAXXAQAUuxEAAQAAABvXAQAEtxEAAQAAAGXWAQCcthEAAQAAAPzUAQC0sxEAAQAAAGv7AAAIvhEAAQAAAGkkAABwwBEAAgAAAKEzAAB4wBEAAgAAAKXUAQCQthEAAQAAAJwvAACAwBEAAQAAAEzxAQCEwBEAAgAAALn/AACMwBEAAQAAAGT8AACQwBEAAwAAANgyAACcwBEAAQAAAEPVAQCwuREAAQAAAKf9AACgwBEAAwAAAGYzAACswBEAAwAAABTUAQBgtBEAAQAAALkkAACcsxEAAQAAAEvVAQBkuBEAAQAAAHcyAAC4wBEAAgAAAKgyAADItxEAAQAAAPz+AADAwBEAAgAAALwvAADIwBEAAQAAAMAkAAB4ExEAAQAAAC3uAQCIuhEAAQAAAMTWAQDMwBEAAQAAAAfUAQAwuREAAQAAAEDxAQActhEAAQAAAI8yAAB4sxEAAQAAAKzXAQDMwBEAAQAAAJskAADQwBEAAwAAACbxAQDcwBEAAwAAAKIdAADowBEAAQAAAJ7UAQDAtBEAAQAAAIkxAADswBEAAQAAAAchAADwwBEAAQAAAF8gAADUtxEAAQAAAODWAQBktxEAAQAAAHcvAAD0wBEAAQAAALovAAD4wBEAAQAAAK0yAAD8wBEAAQAAAGjUAQDYtREAAQAAAEcxAAAAwREAAQAAAIQxAAAEwREAAQAAANfVAQCcsxEAAQAAAH/VAQBkuBEAAQAAADYyAAAIwREAAwAAAKX+AAA0tREAAQAAABsyAAAUwREABAAAAPAyAAAkwREAAQAAAPnUAQCcthEAAQAAAMDUAQAAtxEAAQAAAHkyAAAowREAAgAAAB0yAAAwwREABwAAAMfWAQDsvxEAAQAAAHUzAABMwREAAgAAADfVAQBsuBEAAQAAAJ0xAABowBEAAQAAAMEfAABUwREAAwAAAB0zAABgwREAAwAAAK7UAQCgsxEAAQAAAOAyAABswREAAQAAACH9AACgtBEAAgAAAOQyAABUtxEAAQAAAPf8AABwwREAAgAAADgwAAB4wREAAQAAAD0xAACMthEAAQAAACDWAQC8txEAAQAAAOHXAQCAtBEAAQAAANDXAQAguBEAAQAAAML9AAB8wREAAwAAALrWAQBgthEAAQAAAPHXAQCIwREAAQAAADIyAACMwREAAwAAAB3uAQCYwREAAQAAAHUvAACcwREAAQAAALMzAACgwREAAgAAAI4zAACowREAAgAAAA//AACwwREAAQAAAILXAQC0wREAAQAAAAfxAQC4wREAAgAAAAUzAADAwREAAwAAAJYxAADMwREAAQAAAKn9AADQwREAAwAAAJkxAADcwREAAQAAAMszAADgwREAAgAAABTWAQDMsxEAAQAAAIj8AADowREAAgAAAADuAQDwwREAAQAAAKDWAQB8sxEAAQAAAJwdAAD0tBEAAQAAAFHWAQDEsxEAAQAAAKn+AADMuxEAAQAAAMz/AAD0wREAAQAAABnUAQBwthEAAQAAAL/WAQD4wREAAQAAABAvAABEHhEAAQAAAJ4zAAD8wREAAgAAAEHWAQA4thEAAQAAAGP+AADsuxEAAQAAAIgyAAAEwhEAAQAAAH7XAQCcuxEAAQAAAJvUAQBsuBEAAQAAAAMvAAAIwhEAAQAAAPmnAAAMwhEAAQAAACb/AAA4thEAAQAAAFjXAQAEvhEAAQAAAFQdAAAQwhEAAQAAAHf8AAAUwhEAAgAAAPrWAQCEKhEAAQAAALj9AAAcwhEAAwAAAEjXAQC0wREAAQAAAOECAAD8sxEAAQAAADb/AADEsxEAAQAAAOzVAQC8txEAAQAAAGgxAAAowhEAAQAAABEgAAAswhEAAQAAAC0iAAAwwhEAAwAAAIQDAAA8whEAAgAAACLxAQBEwhEAAwAAAC7VAQBMuhEAAQAAAMT9AABQwhEAAwAAAGH9AABcwhEAAwAAACAzAABowhEABQAAAKr/AAB8whEAAQAAAOczAACAwhEAAgAAAFPVAQBsthEAAQAAAKrVAQB4ExEAAQAAAGL+AACIwhEAAQAAAOzUAQD0tBEAAQAAAN4kAABstBEAAQAAAI78AACMwhEAAgAAALECAACUwhEAAQAAAFX+AACkuhEAAQAAAL0yAACYwhEAAgAAAFovAACgwhEAAQAAADMdAACUtBEAAQAAACnuAQBYvBEAAQAAACMvAACkwhEAAQAAAAMhAACowhEAAgAAACvyAQCwwhEAAQAAAG4kAAC0whEAAgAAAPMyAAC8whEAAQAAAHL+AADAwhEAAgAAAAzXAQBktxEAAQAAANwOAADIwhEAAgAAAHEhAADQwhEAAgAAAFcxAAD0wREAAQAAABfUAQCMuREAAQAAAIvuAQDMvBEAAQAAAP3UAQBMtBEAAQAAAEwvAADYwhEAAQAAAEzXAQA8uxEAAQAAADHXAQDcwhEAAQAAAHMhAADgwhEAAgAAAEf/AACQuREAAQAAAPUzAADowhEAAwAAAJ0zAAD0whEAAgAAAFzXAQC0uREAAQAAAIckAAD8whEABAAAAPr9AAAMwxEAEgAAAGb/AABUwxEAAQAAAI3VAQCAvxEAAQAAADP/AACgsxEAAQAAAMfVAQDMvREAAQAAAFwzAABYwxEAAgAAAA0yAABgwxEAAwAAAKX9AABswxEAAwAAAPkyAABEuREAAQAAABQzAAB4wxEAAgAAAEEyAACAwxEAAwAAACHWAQBwthEAAQAAADXWAQBMtBEAAQAAAGwyAABEvREAAQAAAIPWAQBkuBEAAQAAAITuAQCItBEAAQAAAEr8AACMwxEAAgAAAN0fAACUwxEAAwAAAJj/AACgwxEAAQAAAJ4dAACkwxEAAQAAAAwhAAAwuREAAQAAAGz/AACowxEAAQAAAHczAACswxEAAgAAANrWAQAguxEAAQAAAEbXAQBktxEAAQAAAOv8AAC0wxEAAgAAAKzuAQC4tREAAQAAAPT8AAC8wxEAAwAAANQyAADIwxEAAQAAAN3XAQCIwREAAQAAAAvXAQAEtxEAAQAAALX9AADMwxEAAwAAAIgzAADYwxEAAwAAAGQyAADkwxEAAQAAAHv/AACsvBEAAQAAAJLWAQA0tBEAAQAAADgvAADowxEAAQAAAJDXAQDswxEAAQAAADEvAADwwxEAAQAAAFIhAAD0wxEABAAAADD+AAAEvREAAgAAADLyAQAExBEAAQAAAOACAAAIxBEAAQAAAGjWAQC0sxEAAQAAAEYhAACQtxEAAQAAALgyAAAMxBEAAgAAAKgAAAAUxBEAAgAAAHQgAAB0vhEAAQAAAO/VAQBsthEAAQAAAD8yAAAcxBEAAwAAAEnxAQBwthEAAQAAAHDUAQAstxEAAQAAAPMBAAAoxBEAAgAAAFb8AAAwxBEAAgAAAOf7AAA8thEAAQAAAKAvAAAYMhEAAQAAANQzAAA4xBEAAgAAAFTWAQC8txEAAQAAAP78AABAxBEAAgAAAEcvAACYthEAAQAAAN37AAAYuxEAAgAAAFL9AABIxBEAAwAAABX+AABUxBEAAQAAAI7+AADwwREAAQAAAOkkAABsuBEAAQAAADkwAABYxBEAAQAAAGX+AADQuhEAAQAAAKAzAABcxBEAAwAAAJz9AABoxBEAAwAAAL7/AAB0xBEAAQAAADH8AAB4xBEAAgAAACXxAQCAxBEAAwAAAEozAACMxBEABgAAAObXAQB0vhEAAQAAAGgdAABktxEAAQAAAOICAAC0sxEAAQAAAID/AACkxBEAAQAAAC7UAQDQtxEAAQAAAET+AACoxBEAAQAAADLxAQDAtBEAAQAAALfWAQDItBEAAQAAAPj+AAC8thEAAwAAAHj9AACsxBEAAwAAAPXXAQCAtBEAAQAAANAkAABctBEAAQAAAFD9AAC4xBEAAwAAAPQyAADcuBEAAQAAAOjWAQC0uREAAQAAACDVAQD0tBEAAQAAAI0yAADExBEAAQAAADf9AADIxBEAAgAAAPinAADQxBEAAQAAAMQvAADUxBEAAQAAAA8hAADYxBEAAQAAAPwQAADcxBEAAQAAALD9AADgxBEAAwAAAIfuAQDotBEAAQAAAHDuAQBUtBEAAQAAAGsxAADsxBEAAQAAAIUyAAD4GxEAAQAAALf8AADwxBEAAgAAALL/AAD4xBEAAQAAAIvWAQBsthEAAQAAAGv9AAD8xBEAAwAAADXuAQCctREAAQAAANYyAAAIxREAAQAAAEkBAAAMxREAAgAAALH7AAAMJxEAAgAAAE3xAQAUxREAAgAAAGrVAQActREAAQAAALjUAQD0tBEAAQAAANrXAQAguBEAAQAAAPz8AAAcxREAAgAAAGHXAQAkxREAAQAAAJcgAAD8sxEAAQAAAKP8AAAoxREAAgAAAOMzAAAwxREAAgAAAFPXAQDEtxEAAQAAAFfWAQBsthEAAQAAADT9AAA4xREAAgAAAFvVAQDwtREAAQAAAK7uAQDQsxEAAQAAAC3WAQD8sxEAAQAAANz+AABAxREAAQAAALb/AABExREAAQAAAGnUAQAUuREAAQAAAIYxAABIxREAAQAAAG0hAADAtBEAAQAAAJIgAABstBEAAQAAALMkAABMxREAAwAAAG78AAAothEAAgAAAPUDAADgvBEAAQAAAPgyAABYxREAAQAAALj/AABcxREAAQAAADcyAABgxREAAwAAAMD+AACUvREAAQAAAFEzAABsxREABAAAAMX8AAB8xREAAgAAACkzAACExREAAwAAAFz+AADEuREAAQAAAJsvAACQxREAAQAAANIkAAD0tBEAAQAAAHX9AABQwhEAAwAAAOQzAACUxREAAgAAADMOAACcxREAAgAAAP3VAQCcthEAAQAAAJQkAACkxREAAwAAAIAvAACwxREAAQAAAN0CAAC0xREAAgAAAKEyAAC8xREAAQAAAIwyAADAxREAAQAAAJwwAADExREAAgAAAPvXAQCIwREAAQAAAHv9AADMxREAAwAAAGH7AACgtxEAAQAAACMzAADYxREAAwAAAIAyAADkxREAAQAAADjxAQAstxEAAQAAAIn8AADoxREAAgAAAAL7AADwxREAAgAAABEhAAAstxEAAQAAACryAQB8thEAAQAAAHLXAQDMwBEAAQAAAF8xAAD4xREAAQAAAE0dAACQuREAAQAAAIn9AAD8xREAAwAAADUxAAAIxhEAAQAAALkdAAAMxhEAAQAAAJf7AAAQxhEAAQAAANbUAQCUtBEAAQAAALYvAAAUxhEAAQAAAFnuAQCUvREAAQAAAEPXAQCwtBEAAQAAABH9AAAYxhEAAgAAAB//AAAgxhEAAQAAALUkAAAkxhEAAwAAAKwdAAAwxhEAAQAAALj8AABMuREAAgAAAH8xAAA0xhEAAQAAADcgAAA4xhEAAwAAAPjVAQAAtxEAAQAAAFAxAABExhEAAQAAAMnVAQCcthEAAQAAAH7VAQCgsxEAAQAAALwyAABIxhEAAgAAADMBAABQxhEAAgAAAEXyAQBYxhEAAwAAAD4hAAAEvhEAAQAAAI3XAQDEtxEAAQAAABsvAABkxhEAAQAAAOHVAQCotxEAAQAAAPHUAQCAvxEAAQAAAJjUAQB8sxEAAQAAANL+AABUtBEAAQAAAAYzAABoxhEAAwAAAHMkAAB0xhEAAgAAAATVAQDYtREAAQAAAGL8AAB8xhEAAwAAABQyAACIxhEABAAAAMIyAACYxhEAAgAAACzVAQBstBEAAQAAAMokAABgtBEAAQAAADPVAQAwtBEAAQAAAGodAAA8uxEAAQAAAPfUAQDMvREAAQAAAFgxAACgxhEAAQAAAMr/AAA4uhEAAQAAALjuAQA0uhEAAQAAAOH7AACkxhEAAQAAADL8AACoxhEAAgAAACXWAQCQtxEAAQAAAOP+AAC4tREAAQAAALf9AACwxhEAAwAAANPWAQCwthEAAQAAAKjXAQCEKhEAAQAAAHvuAQAkuBEAAQAAACX7AAC8xhEAAQAAAKUkAADAxhEAAwAAALPUAQCMuREAAQAAAC8yAADMxhEAAwAAAJkzAADYxhEAAgAAAF3WAQCAvxEAAQAAAHT8AADgxhEAAgAAAKXVAQA4thEAAQAAAPIzAADoxhEAAwAAAE/XAQDcthEAAQAAAGb9AAD0xhEAAwAAACEyAAAAxxEAAwAAADD/AAAYuREAAQAAABLVAQC0uhEAAQAAADLWAQBMuhEAAQAAALIdAAAMxxEAAQAAAIL7AAAQxxEAAQAAAKn/AAAUxxEAAQAAABHXAQDEtxEAAQAAABczAAAYxxEABQAAAJ2mAAAsxxEAAQAAAEDWAQAgvREAAQAAAKQdAAAwxxEAAQAAAB3xAQA0xxEAAwAAAL/9AABAxxEAAwAAADLXAQB8txEAAQAAABrxAQBMxxEAAwAAALEkAABYxxEAAwAAAD4vAABkxxEAAQAAAOfWAQAwvREAAQAAAD7UAQB4ExEAAQAAAIf/AABoxxEAAQAAAG7WAQActREAAQAAAIjuAQDMtBEAAQAAANf+AAAAtBEAAQAAAFL/AACgtREAAQAAACDUAQCQuREAAQAAADjyAQBsxxEAAQAAAHYxAABwxxEAAQAAADkvAAB0xxEAAQAAAJjWAQBstBEAAQAAALgdAAB4xxEAAQAAAB/WAQCMuREAAQAAAGruAQBAxREAAQAAAHvWAQCwuREAAQAAAD0hAADMwBEAAQAAAE/uAQDkthEAAQAAAJwkAAB8xxEAAwAAAKQvAACIxxEAAQAAAB4vAACMxxEAAQAAAIb/AABYvhEAAQAAACTWAQD0tBEAAQAAAHfVAQCwuREAAQAAANX7AACQxxEAAQAAAEEzAACUxxEAAwAAALnUAQCQtxEAAQAAAOLWAQDswxEAAQAAABHxAQCgxxEAAwAAALD/AAAwuhEAAQAAAPfXAQBouBEAAQAAALPWAQAkxREAAQAAANskAAD8sxEAAQAAAHDVAQAgvREAAQAAAJnuAQCUvREAAQAAAJDVAQAAtxEAAQAAAMHVAQCAvxEAAQAAAHf7AAAMtREAAQAAACPXAQDgtBEAAQAAAKXXAQDcwhEAAQAAACDxAQCsxxEAAwAAACzXAQC4xxEAAQAAALz/AABsuREAAQAAAMTVAQAAtxEAAQAAAIb+AACIFhEAAgAAAK3XAQAkthEAAQAAADPWAQCgtREAAQAAAOcyAAC8xxEAAQAAAEsvAADAxxEAAQAAAM0fAADExxEAAwAAAIgxAADQxxEAAQAAAMUzAADUxxEAAgAAAOv/AADcxxEAAQAAAJEkAADgxxEAAwAAABb+AAAgxhEAAQAAAFTXAQBktxEAAQAAAO/XAQBkvBEAAQAAAM7WAQDsxxEAAQAAAA4zAADwxxEABAAAAKj+AAA0tREAAQAAADTUAQDYtREAAQAAAIPUAQBsthEAAQAAAEPUAQAYuREAAQAAABz/AAAAyBEAAQAAAAohAACQuREAAQAAANUvAAAEyBEAAQAAAKTWAQAIyBEAAQAAAL0dAAAMyBEAAQAAAGr7AAAIvhEAAQAAACv8AABkuREAAgAAAN7UAQC0uhEAAQAAAC79AAAQyBEAAgAAAIsyAAAYyBEAAQAAAFLVAQBctBEAAQAAAKP+AADotBEAAQAAAAszAAAcyBEAAwAAAFv7AAAkvREAAQAAAArUAQB4ExEAAQAAABzyAQAoyBEAAQAAAGAkAABouBEAAQAAAEHVAQCQthEAAQAAAHEyAAAsyBEAAgAAACIhAAA0yBEAAgAAABnuAQCUvREAAQAAAAH/AABUxBEAAQAAABYyAAA8yBEABAAAAMH8AAA4vxEAAgAAAL8fAABMyBEAAgAAAG4hAACcsxEAAQAAALkvAABUyBEAAQAAAL0AAABYyBEAAwAAADz/AABkyBEAAQAAAG/WAQBsuBEAAQAAABTuAQBkwBEAAQAAAIrUAQA0tBEAAQAAALX/AABkuxEAAQAAADj9AAAQyBEAAgAAAIEvAABoyBEAAQAAABDWAQAstxEAAQAAAL/8AABsyBEAAgAAAE7WAQCgsxEAAQAAADz+AAB0yBEAAQAAAMPUAQDMvREAAQAAAGIxAAB8tBEAAQAAAGUvAAB4yBEAAQAAAJb9AAB8yBEAAwAAAOfVAQBkuBEAAQAAALf/AAAAwREAAQAAAHogAACIwhEAAQAAANUDAADEtxEAAQAAAEXUAQC0tBEAAQAAANAyAACIyBEAAQAAAAkvAACMyBEAAQAAAG3uAQCIuhEAAQAAALUvAACQyBEAAQAAAOr+AACItBEAAQAAAOD+AADMvBEAAQAAAPEBAACUyBEAAgAAAKD7AACcyBEAAQAAAPX7AACgyBEAAwAAADzUAQAstxEAAQAAAE78AAAouBEAAgAAAOD7AACkxhEAAQAAAIMkAACsyBEABAAAAPEzAAC8yBEAAwAAAGUxAADIyBEAAQAAAFYdAACcthEAAQAAAJ37AACkvhEAAQAAACT8AADMyBEAAgAAAFT8AADUyBEAAgAAAGPXAQDcyBEAAQAAAKj9AADgyBEAAwAAAOvWAQA4uxEAAQAAABzxAQDsyBEAAwAAAIv+AAAgGxEAAgAAAFcvAAD4yBEAAQAAABjVAQBgtBEAAQAAAITXAQAsuREAAQAAAOX8AAD8yBEAAgAAAJYvAAAEyREAAQAAADn8AAB8xREAAgAAAEj8AADoxREAAgAAANv+AABAxREAAQAAAJUkAAAIyREAAwAAAHHuAQBItBEAAQAAAHIyAAAUyREAAgAAAJovAAAcyREAAQAAAD0zAAAgyREABQAAALD8AAAguhEAAgAAAAL9AAA0yREAAgAAAOvXAQCAtBEAAQAAALr9AAD4uxEAAwAAAIbuAQA8yREAAQAAAGvWAQAwtBEAAQAAAJ7/AABAyREAAQAAACXyAQBEyREAAQAAAJkkAABIyREAAwAAAOj8AABUyREAAgAAABvxAQBcyREAAwAAAAXVAQAUuREAAQAAAGfXAQDgtBEAAQAAAM4zAABoyREAAgAAAAEvAABwyREAAQAAAD/8AAB0yREAAgAAACIyAAB8yREAAwAAANgzAACIyREABAAAABLuAQAAtBEAAQAAADUzAACYyREAAwAAAKoyAACkyREAAQAAAPT7AACgyBEAAwAAAE3/AABQtBEAAQAAALoAAABstBEAAQAAALvWAQCIsxEAAQAAAAP/AACoyREAAQAAALnWAQDgtBEAAQAAAI0xAACsyREAAQAAAI/UAQDMvREAAQAAABcgAACwyREAAgAAAI3UAQD8sxEAAQAAALUyAAC4yREAAgAAADIBAADAyREAAgAAABYvAADIyREAAQAAAJsxAADMyREAAQAAAH8zAADQyREABAAAADwxAAAktBEAAQAAAH37AADgyREAAQAAAJQzAADkyREAAwAAACzUAQC0sxEAAQAAAH7UAQCwsxEAAQAAAL/+AACUvREAAQAAAO0zAADwyREAAwAAABTxAQD8yREAAwAAADHyAQAIyhEAAQAAAFH/AABMuhEAAQAAAMbXAQAUuxEAAQAAAJ8wAAAMyhEAAgAAANnXAQBouBEAAQAAAO7+AAAUyhEAAQAAADUhAABIuREAAQAAAJPUAQCgtREAAQAAAFrUAQBQtBEAAQAAAFDWAQBgtBEAAQAAAE3VAQDEsxEAAQAAACX9AADIxBEAAgAAACQgAAAYyhEAAQAAAM8kAABwthEAAQAAACvuAQDMvBEAAQAAAK8vAAAcyhEAAQAAALMCAACgtREAAQAAAIvVAQBUthEAAQAAAAH7AAAgyhEAAgAAAM7+AAAkuBEAAQAAAOIkAAC0sxEAAQAAAHr9AAAoyhEAAwAAAGnWAQBMtBEAAQAAADcvAAA0yhEAAQAAAEjyAQA4yhEAAwAAAFv/AACQtREAAQAAAF4hAABEyhEAAwAAAPL+AABYvBEAAQAAAG8vAABQyhEAAQAAAIrXAQDgvBEAAQAAAFczAABUyhEAAwAAAMzVAQC0sxEAAQAAALUCAABgyhEAAQAAAFgyAABkyhEAAgAAAKT8AABotxEAAgAAAIcyAAB0vREAAQAAABDyAQBsyhEAAQAAAL4zAABwyhEAAgAAAJn8AAB4yhEAAwAAAJbVAQBMuhEAAQAAAPjUAQBstBEAAQAAAMn+AADkthEAAQAAACzyAQCEyhEAAQAAAHUqAACIyhEAAgAAAHb+AACQyhEAAgAAAB3/AAAYthEAAQAAAH8hAABQtBEAAQAAAAT7AACYyhEAAwAAAGozAACkyhEAAwAAAE7+AAA0uxEAAQAAAIskAACwyhEAAgAAAMnUAQBMtBEAAQAAAGfVAQAwtBEAAQAAABHVAQCotxEAAQAAAO7XAQAguBEAAQAAAIz/AADouREAAQAAAFzWAQCQuREAAQAAAFwxAAC4yhEAAQAAAC3VAQCcthEAAQAAAO8zAAC8yhEAAwAAAFnWAQCQtxEAAQAAAI4kAADIyhEAAgAAADcxAADQyhEAAQAAAI/+AAC0thEAAQAAAO7UAQBQtxEAAQAAAOD/AADUyhEAAQAAAHIhAADYyhEAAwAAALHVAQC0tBEAAQAAACf/AACUtBEAAQAAAJr9AADkyhEAAwAAAGbXAQC4xxEAAQAAAIAzAADwyhEAAgAAABz9AACQvhEAAgAAADX+AADIsxEAAQAAABnyAQD4yhEAAQAAACrWAQA0tBEAAQAAAN3UAQCotxEAAQAAALIzAAD8yhEAAgAAALL8AAAEyxEAAgAAAGTUAQB8sxEAAQAAAIAgAAAMyxEAAQAAABzXAQDswxEAAQAAACghAABwthEAAQAAAJ0vAAAQyxEAAQAAAO38AAAEwBEAAgAAAHH/AACIyBEAAQAAAHQqAAAUyxEAAwAAAGTXAQAMtxEAAQAAABbxAQAgyxEAAwAAADYzAAAsyxEABQAAAOLXAQAMyxEAAQAAAGnuAQBYvBEAAQAAADYgAABAyxEAAgAAAL0fAABMyBEAAgAAAPvVAQDMvREAAQAAAFf9AABIyxEAAwAAABUhAACotxEAAQAAAEv/AAAAtxEAAQAAAPX9AABUyxEABAAAANckAACAvxEAAQAAAMsyAABkyxEAAwAAAOPWAQBwyxEAAQAAAOwyAAB0yxEAAQAAAI39AAB4yxEAAwAAAAQyAACEyxEAAwAAAB4zAACQyxEABAAAAGUzAACgyxEAAwAAAEX/AABQtxEAAQAAABfuAQA0tREAAQAAAJr+AADwvBEAAQAAAAbWAQActREAAQAAALMyAACsyxEAAgAAANXXAQDMtREAAQAAAGT+AAAAyBEAAQAAAJbUAQDQtxEAAQAAAIQvAAC0yxEAAQAAAKz7AAC4yxEAAQAAAHjUAQActhEAAQAAAK/VAQAYuREAAQAAAMkBAAC8yxEAAgAAAEUdAADEyxEAAQAAAMMvAADIyxEAAQAAAAjXAQDsxxEAAQAAABH+AADMyxEAAQAAAE/WAQBkuBEAAQAAAJX9AADQyxEAAwAAANTVAQDYtREAAQAAAKnuAQBYvBEAAQAAAKMzAADcyxEAAwAAAALVAQActREAAQAAAB3UAQCQtxEAAQAAAHXuAQCctREAAQAAAInUAQCAvxEAAQAAANb/AAD4xREAAQAAAE3WAQC0tBEAAQAAAKUzAADoyxEAAgAAAKvVAQCwuREAAQAAANPXAQCIwREAAQAAAD/XAQAUuxEAAQAAAMvWAQAUuxEAAQAAABfXAQBotREAAQAAABv/AACMNREAAQAAAI38AADwyxEAAgAAAGX8AAD4yxEAAwAAAAPXAQBotREAAQAAAJH7AACMtREAAQAAABL9AADAvhEAAgAAAGP8AAAEzBEAAwAAAE/UAQBsthEAAQAAAJ8kAAAQzBEAAwAAAKMdAAAczBEAAQAAAN/WAQDEtxEAAQAAAE7/AADMvREAAQAAAAIvAAAgzBEAAQAAAGMzAAAkzBEAAwAAADwvAAAwzBEAAQAAAJIxAADkxREAAQAAAJL9AAA0zBEAAwAAAAXxAQBAzBEAAgAAAMwBAABIzBEAAgAAAGr9AAD8xBEAAwAAAEAhAABQzBEAAQAAANr+AABAxREAAQAAADDyAQCQxREAAQAAAG79AABUzBEAAwAAAM4kAAC8txEAAQAAAFL7AACMuBEAAQAAAGD9AABgzBEAAwAAACPxAQBszBEAAwAAAPD7AAB4zBEAAwAAANv7AACEzBEAAQAAAK3VAQCotxEAAQAAAJsdAACIzBEAAQAAAATxAQCMzBEAAgAAABvyAQC4HREAAQAAAA8vAACUzBEAAQAAAGEvAACYzBEAAQAAAIQkAACczBEABAAAAGLUAQDQtxEAAQAAACnxAQCszBEAAwAAAM7UAQActREAAQAAAFUdAAC4zBEAAQAAAF38AADwvxEAAgAAAB/uAQC8zBEAAQAAADP+AAA0uxEAAQAAAAH8AADAzBEAAwAAADMyAADMzBEAAwAAACP7AADYzBEAAQAAABX8AADstBEAAgAAAF/VAQDMvREAAQAAAKovAADczBEAAQAAACXVAQCAvxEAAQAAAL79AADgzBEAAwAAAGLXAQDkuxEAAQAAAIj+AAD0GREAAgAAADPUAQBsuBEAAQAAAG37AAAIvhEAAQAAACL9AADszBEAAgAAAEExAADkwxEAAQAAAKsyAAD0zBEAAQAAAG3VAQAUuREAAQAAADDWAQBstBEAAQAAALQdAAD4zBEAAQAAACTyAQD8zBEAAQAAAF/8AAAAzREAAwAAAJzWAQC0sxEAAQAAADbxAQCUtBEAAQAAAHz9AAD0txEAAwAAAJ79AAAMzREAAwAAAOMkAABMtBEAAQAAAFkxAAAYzREAAQAAAIQyAAAczREAAQAAALfUAQBsthEAAQAAAKbXAQB8txEAAQAAADj/AACMuREAAQAAAMjXAQBktxEAAQAAALkAAABouBEAAQAAADkxAAAUxxEAAQAAAHr8AAAgzREAAgAAADv+AAAozREAAQAAAIggAAAYtxEAAQAAAALuAQCkuxEAAQAAAGMyAAAUxxEAAQAAAMT/AAAszREAAQAAAITVAQC8txEAAQAAAIXuAQAUyhEAAQAAAD/+AAAUNREAAQAAADIzAAAwzREABgAAAH7/AABIzREAAQAAAMwkAACwsxEAAQAAAKnVAQCQthEAAQAAAMYBAABMzREAAwAAAJHXAQBwyxEAAQAAAG0yAAB0xBEAAQAAAFMdAABYzREAAQAAAEoxAABczREAAQAAAEkgAABgzREAAgAAAHghAABozREAAgAAABrUAQBctBEAAQAAAHz7AADgyREAAQAAAJTuAQBkwBEAAQAAAF0hAABwzREAAwAAAKT9AAB8zREAAwAAAIf9AACIzREAAwAAAD/UAQCwuREAAQAAAM0vAACUzREAAQAAALb+AABkwBEAAQAAAGzVAQDYtREAAQAAAF/WAQDwtREAAQAAAJMzAACYzREAAwAAAE8zAACkzREAAwAAAHfUAQAYuREAAQAAAAv9AAD8vREAAgAAAIogAACIwhEAAQAAABovAACwzREAAQAAAA39AAC0zREAAgAAACb9AAAQyBEAAgAAAErVAQCgsxEAAQAAAM8vAAC8zREAAQAAAJL+AAC0thEAAQAAAEz+AADotxEAAgAAAJb/AADAzREAAQAAAJb+AACctREAAQAAAHoyAADEzREAAgAAAFszAADMzREAAgAAAEz/AAD8sxEAAQAAAGHVAQCcthEAAQAAABryAQDUzREAAQAAALX+AABkwBEAAQAAAHz/AACsvhEAAQAAAEgvAADYzREAAQAAANMzAADczREAAgAAAKkzAADkzREAAgAAAH3WAQCotxEAAQAAAC/uAQDkthEAAQAAAA/XAQDszREAAQAAAH7uAQDwzREAAQAAAF8zAAD0zREAAgAAAALWAQDQtxEAAQAAALPVAQBkuBEAAQAAAHzVAQActhEAAQAAAKPWAQBsuBEAAQAAAMvVAQCgtREAAQAAAG/XAQD8zREAAQAAAOjUAQC8txEAAQAAAI7VAQA0tBEAAQAAAAoyAAAAzhEAAwAAAETWAQAstxEAAQAAAHTUAQDMsxEAAQAAAKvuAQDMvBEAAQAAACn/AAAstxEAAQAAAJcyAAAUDhEAAQAAAIPuAQDMuxEAAQAAADL/AAC0tBEAAQAAAAruAQBAxREAAQAAAKv/AAAMzhEAAQAAACXXAQA4uxEAAQAAAGDUAQC0sxEAAQAAAML8AAAQzhEAAgAAADrWAQActREAAQAAAAjUAQAstxEAAQAAAL8zAAAYzhEAAgAAAGTWAQBstBEAAQAAAN3WAQBotREAAQAAAE7VAQCwsxEAAQAAAPLXAQDMtxEAAQAAADf/AACwsxEAAQAAAOkzAAAgzhEAAwAAAL7+AACUvREAAQAAAOj+AACIuhEAAQAAAAAyAAAszhEAAwAAABrWAQCgsxEAAQAAAJ0dAAA4zhEAAQAAAK38AAA4xREAAgAAABLyAQA8zhEAAQAAAGb8AABAzhEAAwAAAKHVAQAUuREAAQAAAMn8AAB0yREAAgAAAB/XAQB0thEAAQAAACXUAQD8sxEAAQAAAAjVAQAgvREAAQAAACYzAABMzhEAAwAAAFv9AABYzhEAAwAAAAj/AADIsxEAAQAAAEXXAQAEtxEAAQAAAIYzAABkzhEAAgAAABUzAABszhEABgAAADHuAQBItBEAAQAAALIyAACEzhEAAgAAAFgzAACMzhEAAgAAALvXAQCwthEAAQAAADrXAQDgvBEAAQAAAHQyAACUzhEAAgAAAH/8AACczhEAAgAAAEfXAQCwthEAAQAAAPj8AACkzhEAAgAAAGD+AACszhEAAQAAAOHUAQC0tBEAAQAAAJTUAQC0sxEAAQAAAJIyAAAYtREAAQAAAD39AACwzhEAAgAAACn9AAC0zREAAgAAAEkxAACMwBEAAQAAAKv7AAC4yxEAAQAAAEfyAQC4zhEAAwAAALb9AADEzhEAAwAAALz+AABItBEAAQAAAJUgAACAvxEAAQAAAHrVAQC0uhEAAQAAALbuAQDwvBEAAQAAAMrWAQDMJxEAAQAAAA4hAACAvxEAAQAAAFLWAQCwsxEAAQAAAMP+AADMtBEAAQAAAOv7AADQzhEAAwAAAALXAQBAtBEAAQAAABXWAQCotxEAAQAAAAwvAADczhEAAQAAAIUxAADgzhEAAQAAACrUAQBMuhEAAQAAAHskAADkzhEAAwAAAH4vAADwzhEAAQAAACr9AAD0zhEAAgAAAJogAACcthEAAQAAAHL7AAD8zhEAAQAAAAPVAQBsuBEAAQAAAFr/AABsuBEAAQAAAE4zAAAAzxEABAAAANr7AAAQzxEAAQAAADbuAQDwvBEAAQAAAFz/AAAUzxEAAQAAACLXAQC0uREAAQAAAJvXAQAkxREAAQAAACDXAQAYzxEAAQAAAAUvAAAczxEAAQAAABb7AAAgzxEAAgAAAID8AAAozxEAAgAAAMH+AADMtBEAAQAAAKcvAAAwzxEAAQAAAIT8AAA0zxEAAgAAADTuAQBkwBEAAQAAAMHUAQD8sxEAAQAAAMozAAA8zxEAAgAAAEPxAQBkuBEAAQAAALQkAABEzxEAAwAAAMkkAABkuBEAAQAAALfVAQCMuREAAQAAAI8kAABQzxEAAgAAAIT/AABYzxEAAQAAACQzAABczxEABAAAAPDVAQD0tBEAAQAAAEchAABQtxEAAQAAAKQkAABszxEAAwAAAFEyAAB4zxEAAgAAAJL8AACAzxEAAgAAAN/8AABAzhEAAwAAAJz+AADwvBEAAQAAAEDXAQBktBEAAQAAAEDyAQCIzxEAAwAAAAcvAACUzxEAAQAAAHMzAACYzxEAAgAAABj/AAAYtxEAAQAAABv9AAC4sxEAAgAAAFDyAQCgzxEAAQAAAGD/AACkzxEAAQAAAAb9AADszBEAAgAAAMovAACozxEAAQAAAOP7AACszxEAAQAAAOoyAADQuxEAAQAAAPDWAQAMtxEAAQAAAH38AACoxhEAAgAAAIf7AACwzxEAAQAAALskAAA4thEAAQAAAHTuAQBkwBEAAQAAANT7AACQxxEAAQAAAKv+AAA0uhEAAQAAAHAxAAC0zxEAAQAAAH/9AAC4zxEAAwAAAAbuAQA8yREAAQAAAPv9AADEzxEACAAAAOT7AAA8thEAAQAAAIX7AADkzxEAAQAAABbyAQDozxEAAQAAAMjVAQBstBEAAQAAANv8AAAwxBEAAgAAAG/8AADszxEAAgAAAHsyAAD0zxEAAgAAAAQvAAD8zxEAAQAAAPbXAQAMyxEAAQAAAKn8AAAA0BEAAgAAAC7/AACotxEAAQAAAGsvAAAI0BEAAQAAAPbUAQBQtBEAAQAAAK79AAAM0BEAAwAAAHLWAQDAtBEAAQAAAPb+AADsuREAAwAAAK8yAAAY0BEAAQAAALn8AACUtREAAgAAANb7AACQxxEAAQAAAPTXAQAYtxEAAQAAAOnUAQBwthEAAQAAAMcyAAAc0BEAAgAAANwyAADktBEAAQAAADDVAQC0sxEAAQAAAMwzAAAk0BEAAgAAAIDuAQDwwREAAQAAAPP8AAAs0BEAAwAAADszAAA40BEABQAAAKDVAQDYtREAAQAAAHD9AACQvxEAAwAAALQAAAA8whEAAgAAAC39AADIxBEAAgAAALruAQBM0BEAAQAAACnyAQDkxREAAQAAAFghAABQ0BEAAwAAADfXAQBQuhEAAQAAAFr8AABc0BEAAgAAALDuAQBUtBEAAQAAADUdAAAstxEAAQAAAKfXAQD4wREAAQAAAHHXAQBQuhEAAQAAADnWAQBAuREAAQAAAIMgAABkvBEAAQAAACoyAABk0BEAAwAAABbVAQCgsxEAAQAAADX8AACYtBEAAgAAAN4fAABw0BEAAwAAAJ7WAQDQtxEAAQAAAJ8zAAB80BEAAwAAAM/+AAAkuBEAAQAAAD0yAACI0BEAAwAAAAf/AACU0BEAAQAAACfxAQCY0BEAAwAAAEH/AABctBEAAQAAAFsxAACk0BEAAQAAAIovAACo0BEAAQAAABLXAQA8uxEAAQAAAJn+AADwvBEAAQAAANH+AABUtBEAAQAAAMj8AACs0BEAAgAAADsyAAC00BEAAwAAAP8wAADA0BEAAgAAAJb7AAAQxhEAAQAAAJ4yAADI0BEAAQAAAEkdAABQtxEAAQAAAF77AACgtxEAAQAAACcvAADM0BEAAQAAAIwvAADQ0BEAAQAAAFYvAADU0BEAAQAAAAfVAQCcsxEAAQAAAJT8AADY0BEAAgAAAD/WAQCcsxEAAQAAAGf9AADg0BEAAwAAAAn/AADovhEAAQAAAKTVAQAgvREAAQAAANP+AABUtBEAAQAAADkdAADMsxEAAQAAABzWAQBgtBEAAQAAAJckAADs0BEAAwAAAJH/AAAkwREAAQAAAHgvAAD40BEAAQAAALQzAAD80BEAAgAAAKfuAQDotBEAAQAAAIYkAAAE0REABAAAADb8AACczhEAAgAAACUvAABQDBEAAQAAAJgvAAAU0REAAQAAAHckAAAY0REAAwAAACf8AAAk0REAAgAAAJbuAQDwvBEAAQAAAKv9AAAs0REAAwAAAELyAQA40REAAwAAAIUzAABE0REAAgAAAJvVAQAwtBEAAQAAAEX8AABM0REAAgAAAPLWAQC4xxEAAQAAAEzVAQBgtBEAAQAAAKYkAABU0REAAwAAAO3VAQBwthEAAQAAANjUAQAstxEAAQAAAJMyAAAUNhEAAQAAADYvAAC4BhEAAQAAAOr8AABg0REAAgAAACHxAQBo0REAAwAAAEkhAADwtREAAQAAAPj7AAAwuBEAAwAAAMr+AADkthEAAQAAAMrVAQBMuhEAAQAAALnVAQBwthEAAQAAAHD+AAB00REAAgAAAIsxAAB80REAAQAAAEL/AABsthEAAQAAADrUAQCUtBEAAQAAALrXAQBktxEAAQAAAHruAQBM0BEAAQAAAF0yAACA0REAAgAAAFLUAQBQtxEAAQAAAHwxAACI0REAAQAAACTUAQAAtxEAAQAAALv8AACM0REAAgAAAIrVAQBQtxEAAQAAAH0yAACU0REABAAAAMYkAAActhEAAQAAAK39AACk0REAAwAAAPEyAACw0REAAQAAADr+AABIuBEAAQAAAJgkAAC00REAAwAAAJ/7AACYwREAAQAAAH79AADA0REAAwAAAG8zAADM0REAAwAAALv+AABItBEAAQAAAOX/AADY0REAAQAAACLuAQCkuxEAAQAAAF7/AADc0REAAQAAADXXAQD8zREAAQAAAMP8AADg0REAAgAAAEIvAACgthEAAQAAAOT+AAC4tREAAQAAABcvAAB4wREAAQAAAJEgAABQtxEAAQAAAKskAADo0REAAwAAAOfXAQCIwREAAQAAANszAAD00REAAgAAALwdAAD80REAAQAAAAnxAQAA0hEAAgAAAFUyAAAI0hEAAgAAAPnVAQD8sxEAAQAAAL/UAQDwtREAAQAAAJ8vAAAQ0hEAAQAAAJoxAAD8zxEAAQAAAHUyAAAU0hEAAgAAACD9AAAc0hEAAgAAAAvUAQCwuREAAQAAAC8vAAAk0hEAAQAAACLUAQA0tBEAAQAAAC78AABsyBEAAgAAAAT/AAAo0hEAAQAAALHuAQBItBEAAQAAAFAzAAAs0hEAAwAAAGczAAA40hEAAwAAAH4zAABE0hEAAgAAAL4AAABM0hEAAwAAAP37AABY0hEAAQAAAF8vAABc0hEAAQAAAEgzAABg0hEABAAAABH/AABouBEAAQAAAMkyAABw0hEAAwAAAJDuAQBUtBEAAQAAAPfWAQDcwhEAAQAAAH4kAAB80hEABAAAAKr+AADMuxEAAQAAAI3WAQCQtxEAAQAAAHoxAACM0hEAAQAAACvUAQCgtREAAQAAAPIDAACwthEAAQAAABgvAACQ0hEAAQAAAEczAACU0hEABQAAAGUdAAAwtBEAAQAAAHXXAQDsvxEAAQAAAFTVAQD0tBEAAQAAAGX/AACo0hEAAQAAAJ4kAACs0hEAAwAAACIvAAC40hEAAQAAAHHVAQA4thEAAQAAAGrUAQDAtBEAAQAAAD3VAQA4thEAAQAAAJkgAADMvREAAQAAAFL8AAC80hEAAgAAADTVAQB8sxEAAQAAAIH9AADE0hEAAwAAAAHXAQDsvxEAAQAAAGn+AAAo0hEAAQAAAFrXAQAYzxEAAQAAAKr7AAC4yxEAAQAAACEvAADQ0hEAAQAAABr/AACkuhEAAQAAAHYyAADU0hEAAgAAAGD8AADc0hEAAwAAAKjWAQDswxEAAQAAAHjXAQDMJxEAAQAAAMf8AAC0wxEAAgAAAHTVAQAstxEAAQAAAFkzAADo0hEAAgAAAB/9AADw0hEAAgAAAHkxAAD40hEAAQAAAKLuAQCkuxEAAQAAAGcyAAAAwREAAQAAAOokAAAMyxEAAQAAAIoxAAD80hEAAQAAAHgyAAAA0xEAAgAAADEdAAAgvREAAQAAAIbWAQCwsxEAAQAAAKUyAAAI0xEAAQAAACwvAADQGREAAQAAANH8AADoxREAAgAAAADVAQB8sxEAAQAAAAv8AAAM0xEAAgAAAHwyAAAU0xEABQAAABT/AAB0vhEAAQAAAE3XAQAcvxEAAQAAAHH+AAAo0xEAAgAAAJn/AABYxREAAQAAAMP9AAD0vhEAAwAAAJUvAAAw0xEAAQAAABPxAQA00xEAAwAAAIHUAQBwthEAAQAAAFUhAABA0xEAAwAAAKodAABM0xEAAQAAAMvXAQBQ0xEAAQAAABP8AAAgzREAAgAAAGovAABU0xEAAQAAAIz7AAAcuREAAQAAAFsvAABY0xEAAQAAAJb8AABc0BEAAgAAACjXAQDkuxEAAQAAAGXVAQBMtBEAAQAAAGzuAQC4tREAAQAAAM8fAABc0xEAAwAAAELxAQCgsxEAAQAAABXxAQBo0xEAAwAAAETVAQDMsxEAAQAAALcdAAB00xEAAQAAALfuAQA0tREAAQAAAMT+AADMtBEAAQAAAHgGAAB40xEAAgAAAO77AACA0xEAAwAAAE/8AACMwhEAAgAAAK3+AABYtBEAAQAAAAIgAADUtxEAAQAAAKb9AACM0xEAAwAAADHUAQBAuREAAQAAALn+AABItBEAAQAAAFfXAQBwyxEAAQAAAAfuAQDotBEAAQAAADYdAACQthEAAQAAACTXAQAUwBEAAQAAAAn9AADIxBEAAgAAAAXuAQAUyhEAAQAAAMPXAQDcthEAAQAAAMjUAQC0sxEAAQAAADAdAACcsxEAAQAAALACAACAvxEAAQAAAMHXAQAcvxEAAQAAADTyAQCY0xEAAQAAAOH/AACc0xEAAQAAAGgkAACAtBEAAQAAABbUAQCwsxEAAQAAAGnVAQBAuREAAQAAAIf8AABgvhEAAgAAAFwhAACg0xEAAwAAAEvuAQDMvBEAAQAAAGv+AACs0xEAAQAAADsxAAAMzhEAAQAAAK7XAQDgvBEAAQAAALzWAQCQvREAAQAAAGLuAQCkuxEAAQAAAHnuAQCUvREAAQAAAFf8AACw0xEAAgAAADovAAC40xEAAQAAAPn9AAC80xEAAwAAACTuAQCItBEAAQAAAAPuAQDMuxEAAQAAABkvAADI0xEAAQAAACf7AADM0xEAAQAAACP9AADQ0xEAAgAAACruAQBAxREAAQAAAHYqAADY0xEAAwAAAGn/AADk0xEAAQAAAG8kAADo0xEAAgAAABMvAADw0xEAAQAAAAf9AADQ0xEAAgAAAJ/VAQBsuBEAAQAAAFLuAQAAtBEAAQAAAHf+AAD00xEAAgAAAFMhAAD80xEAAwAAAE38AACwvBEAAgAAAK/+AAA8yREAAQAAAPQzAAAI1BEAAwAAAIr9AAAU1BEAAwAAAJvWAQCgtREAAQAAABPXAQAcvxEAAQAAAJP8AAC8uREAAgAAAEQzAAAg1BEAAwAAAKTXAQCQvREAAQAAAH/UAQCMuREAAQAAAEbVAQC0uhEAAQAAAKH7AACcyBEAAQAAADbXAQDIthEAAQAAADz8AACs0BEAAgAAAFn7AAAs1BEAAQAAAE/7AAAw1BEAAgAAAO/+AAA41BEAAQAAAMkzAAA81BEAAgAAAH8gAADMvREAAQAAADr/AABwthEAAQAAAHPWAQCcsxEAAQAAABnxAQBE1BEAAwAAABz8AAA4xREAAgAAAEnWAQCotxEAAQAAAInVAQCQtxEAAQAAADEyAABQ1BEAAwAAADgxAABc1BEAAQAAAH0kAABg1BEABAAAANn8AABw1BEAAgAAAK4dAAB41BEAAQAAAL7XAQAsuREAAQAAAN8zAAB81BEAAwAAAHozAACI1BEAAgAAAF4vAACQ1BEAAQAAAHCnAACU1BEAAQAAAI/uAQDkthEAAQAAALkyAACY1BEAAgAAAEQdAACg1BEAAQAAAPIBAACk1BEAAgAAAGPUAQAwtBEAAQAAAEYzAACs1BEAAwAAAKDXAQC4xxEAAQAAAJYgAAAAtxEAAQAAAGrXAQCQvREAAQAAAEj/AACAvxEAAQAAADLVAQDQtxEAAQAAAOAkAABMuhEAAQAAAF39AAC41BEAAwAAADQhAABstBEAAQAAAB79AAA0yREAAgAAACbyAQDE1BEAAQAAANr/AADI1BEAAQAAAGkdAADEtxEAAQAAACH/AADYtREAAQAAAEUxAABkuxEAAQAAADYxAACouxEAAQAAAPL7AADM1BEAAwAAAPb9AADY1BEABAAAAI7WAQBQtxEAAQAAAG/UAQAwuREAAQAAAOn/AADo1BEAAQAAANf7AADs1BEAAQAAADMxAADw1BEAAQAAADP9AAAk0REAAgAAAD7xAQC0uhEAAQAAALr/AABczREAAQAAAFAdAABQtBEAAQAAABf/AADMtREAAQAAANkkAADwtREAAQAAAIz8AAAouBEAAgAAAJfXAQDgtBEAAQAAAAb8AAD01BEAAgAAACnVAQD8sxEAAQAAADshAAD81BEAAwAAAGchAAAI1REABAAAAFvXAQAwvREAAQAAAEsdAAAY1REAAQAAAAAvAADkxREAAQAAAK8AAAAc1REAAgAAAJIvAAA8EREAAQAAAIX8AAAEwBEAAgAAAGH+AAAk1REAAQAAAHHWAQAUuREAAQAAABHUAQC0tBEAAQAAAC/UAQAwtBEAAQAAAEQyAAAo1REAAQAAABzVAQC8txEAAQAAAJL/AACw0REAAQAAAJUzAAAs1REAAgAAAHTWAQAgvREAAQAAAOb7AAA8thEAAQAAAKcdAAA01REAAQAAAKQzAAA41REAAwAAAOr7AADQzhEAAwAAAAEgAADUtxEAAQAAAM/WAQCwtBEAAQAAACgvAABE1REAAQAAAIH+AAAIMREAAgAAANjXAQAMyxEAAQAAAHgdAABI1REAAQAAAIUvAABM1REAAQAAABAzAABQ1REABAAAAL3XAQDszREAAQAAAFkyAABg1REAAgAAAADyAQBo1REAAgAAAFf/AAB8sxEAAQAAABfVAQBkuBEAAQAAACvWAQDwtREAAQAAAF4dAADMwBEAAQAAAF7VAQBQtBEAAQAAAIL/AADkvhEAAQAAACHyAQBw1REAAQAAAJP9AAB01REAAwAAALD+AAA8yREAAQAAAMXUAQCcthEAAQAAAJLXAQAEvhEAAQAAAE0zAACA1REABAAAABMhAAD8sxEAAQAAAIzVAQCQuREAAQAAABX/AACIwREAAQAAAP38AACQ1REAAgAAAKnWAQBwyxEAAQAAANX/AACY1REAAQAAABzuAQCc1REAAQAAAMv8AACg1REAAgAAAJXVAQCcthEAAQAAACbUAQBQtBEAAQAAAF8dAAAkthEAAQAAAFXWAQBwthEAAQAAALXWAQDcyBEAAQAAAEj+AACo1REAAQAAALH/AADkwxEAAQAAAP4fAACs1REAAgAAAPP9AAC01REABAAAAK/WAQDgtBEAAQAAAB7uAQDwzREAAQAAAPLVAQBQtxEAAQAAAFwyAADE1REAAgAAAHzXAQDsxxEAAQAAAIMzAADM1REAAgAAACL7AADU1REAAQAAAKgkAADY1REAAwAAAMQkAAC0uhEAAQAAAEIxAAD4xBEAAQAAANgkAAA0tBEAAQAAAJ/9AADk1REAAwAAAF78AADw1REAAwAAABPyAQBsMxEAAgAAAEv+AADotxEAAgAAADgyAAD81REAAwAAABvUAQBsthEAAQAAAA7uAQDQsxEAAQAAAKokAAAI1hEAAwAAAAkyAAAU1hEAAwAAAHn8AAAg1hEAAgAAAIX9AAAo1hEAAwAAAErWAQC0uhEAAQAAAPsyAAA01hEAAQAAANgCAAA41hEAAgAAAIwzAABA1hEAAgAAAK7/AABI1hEAAQAAAJMkAABM1hEAAwAAACjxAQBY1hEAAwAAAJXuAQCctREAAQAAAKsvAABk1hEAAQAAAMcvAAAABREAAQAAANb8AABo1hEAAgAAAGQhAADEsxEAAQAAAIP/AAAUvBEAAQAAAJQvAABw1hEAAQAAAO3WAQAkxREAAQAAACX8AADwxBEAAgAAAGP7AAB01hEAAQAAADr8AAB41hEAAgAAAGIyAADQyhEAAQAAAPrXAQB0vhEAAQAAAGwzAACA1hEAAwAAAK4kAACM1hEAAwAAAKrUAQC0uhEAAQAAAFXXAQAEtxEAAQAAAPUyAADAzREAAQAAAKD+AACkuxEAAQAAAKj/AABc1BEAAQAAAGj+AABkyBEAAQAAAFbVAQBQtxEAAQAAAFYhAACY1hEAAwAAAJP+AACk1hEAAQAAAPXWAQCIsxEAAQAAAPv7AACUtxEAAwAAALAzAACo1hEAAgAAANkCAACw1hEAAgAAAE3UAQBwthEAAQAAAErxAQC41hEAAgAAANz7AACEzBEAAQAAACr/AACQthEAAQAAACAyAADA1hEAAwAAAD3WAQAUuREAAQAAAOnWAQDgtBEAAQAAAMD9AADM1hEAAwAAAKPXAQCIsxEAAQAAACLWAQBctBEAAQAAAJz/AAA01hEAAQAAAGgyAABcxREAAQAAAKUdAADY1hEAAQAAACYyAADc1hEAAwAAALkzAADcvhEAAgAAAFHUAQCQtxEAAQAAANDVAQB8sxEAAQAAAG7/AADo1hEAAQAAABUvAADs1hEAAQAAAOYyAABoxxEAAQAAACj7AADw1hEAAQAAACf9AAD8vREAAgAAAPH8AAD01hEAAgAAAMUyAAD81hEAAgAAAGjVAQB8sxEAAQAAACbWAQBQtxEAAQAAAIL9AAAE1xEAAwAAABwzAAAQ1xEAAwAAABPVAQAYuREAAQAAAK0zAAAc1xEAAwAAAK/8AAAo1xEAAgAAAM/VAQAwtBEAAQAAAKQyAADMwREAAQAAAL3/AABEvREAAQAAAKnXAQD8zREAAQAAACz/AACwuREAAQAAAObVAQCgsxEAAQAAAFQvAADAxREAAQAAAAjuAQDMtBEAAQAAAHkhAABAuREAAQAAALAdAAAw1xEAAQAAAOrUAQBctBEAAQAAAMXVAQD8sxEAAQAAAOXXAQBkvBEAAQAAAPLUAQA0tBEAAQAAAF7WAQA0tBEAAQAAAHnWAQCQthEAAQAAAND8AAA01xEAAgAAAGT7AAB01hEAAQAAABD8AAC4uBEAAgAAAKf/AADQyhEAAQAAALodAAA81xEAAQAAAO/8AABo1hEAAgAAAHkzAABA1xEAAwAAAEvXAQDEtxEAAQAAAHwkAABM1xEAAwAAAKkdAABY1xEAAQAAAOzXAQAMyxEAAQAAAAbxAQBc1xEAAgAAADH+AAAQtREAAQAAAC0dAABk1xEAAQAAAFIyAABo1xEAAgAAAMAzAABw1xEAAgAAAG77AAAgthEAAQAAAFH8AAAwthEAAgAAANz8AACw0xEAAgAAAKkyAAB41xEAAQAAAMgyAAB81xEAAgAAAAX7AACE1xEAAgAAAIjWAQC8txEAAQAAAM4yAACM1xEAAgAAAJQgAACU1xEAAQAAAPzWAQDIthEAAQAAAPYyAACsuREAAQAAADXxAQA4thEAAQAAAL4dAACY1xEAAQAAAOXVAQC0tBEAAQAAAPD9AACc1xEAAwAAAKH9AACo1xEAAwAAAL/XAQDEtxEAAQAAABYzAAC01xEABgAAAJEzAADM1xEAAwAAAFv8AADY1xEAAgAAAB/UAQBUthEAAQAAABf8AAAA0BEAAgAAANr8AADg1xEAAgAAAJokAADo1xEAAwAAAIkyAAB4wREAAQAAANEvAAD01xEAAQAAAJj7AAAQxhEAAQAAADjVAQDYtREAAQAAAFj7AAAs1BEAAQAAAJcxAAAI0xEAAQAAAAL8AABAzhEAAwAAAET/AACQtxEAAQAAAHjWAQAstxEAAQAAAFQyAAD41xEAAgAAAFz9AAAA2BEAAwAAAM3WAQCkthEAAQAAAAwzAAAM2BEABAAAAAczAAAc2BEABgAAAN/XAQDMtREAAQAAAEP8AAA02BEAAgAAAEPWAQAwuREAAQAAAEYxAABExREAAQAAAJoeAAA82BEAAgAAAJn7AAAQxhEAAQAAABT9AACkzhEAAgAAANHUAQAUuREAAQAAAEL8AAAEwBEAAgAAAA3VAQCQthEAAQAAAJ8uAABE2BEAAQAAAIv9AABI2BEAAwAAAFAyAABU2BEAAwAAAFHyAQBg2BEAAQAAADP8AAAQzhEAAgAAACfuAQDotBEAAQAAAIXVAQBwthEAAQAAAJsgAAC0sxEAAQAAAJ8xAABk2BEAAQAAAFb/AAAwtBEAAQAAALT9AADA0REAAwAAADH9AABUyREAAgAAADPyAQBo2BEAAQAAACr8AACM0REAAgAAAM7XAQAMyxEAAQAAAC/8AAA8uhEAAgAAAJ3VAQBAuREAAQAAADvVAQCcsxEAAQAAAI/WAQBUthEAAQAAAIExAABs2BEAAQAAADn/AAC8txEAAQAAALokAAAgvREAAQAAAAIzAABw2BEABQAAAAshAAAwuREAAQAAAD3+AACE2BEAAQAAADDuAQBUtBEAAQAAAIH/AABswREAAQAAAF3/AADEuREAAQAAAAwPAACI2BEAAQAAAK4yAACM2BEAAQAAAAAgAADUtxEAAQAAAIH8AAC0wxEAAgAAAGD7AACgtxEAAQAAAGAxAACovhEAAQAAAJrXAQBEuBEAAQAAAKIyAACQ2BEAAQAAACHVAQCQtxEAAQAAALT/AACU2BEAAQAAAGIzAACY2BEAAwAAADz9AACwzhEAAgAAACwzAACk2BEABAAAACvxAQDAtBEAAQAAAP4zAAC02BEAAwAAADQgAADA2BEAAwAAAKL7AACcyBEAAQAAADHWAQCcthEAAQAAAPczAADM2BEAAwAAACz9AADY2BEAAgAAAPTVAQCQuREAAQAAAHb/AADstREAAQAAACL8AADAuhEAAgAAAC3xAQDg2BEAAgAAAGQvAADo2BEAAQAAAObWAQAYzxEAAQAAAD8xAABAvBEAAQAAAELXAQDsxxEAAQAAAK7WAQC0uREAAQAAAAAwAADUtxEAAQAAAC3yAQAI0xEAAQAAACfUAQDMvREAAQAAABEzAADs2BEABAAAAJf8AAD82BEAAwAAAOckAABAuREAAQAAAAAhAAAI2REAAwAAAGkzAAAU2REAAwAAAEIdAACwsxEAAQAAABPuAQBYtBEAAQAAADfUAQCcsxEAAQAAAHP8AAAg2REAAgAAABb8AABYthEAAgAAAGL9AAAo2REAAwAAAM/UAQBsuBEAAQAAAGT9AAA02REAAwAAAIkvAABA2REAAQAAAL7WAQB8txEAAQAAAJP7AAAQuhEAAQAAABf9AABE2REAAgAAADozAABM2REABAAAAF79AABc2REAAwAAAHP/AAA0wBEAAQAAAA0vAABo2REAAQAAABIyAABs2REABAAAAMAyAAB82REAAgAAAF8hAACE2REAAgAAAGIvAACM2REAAQAAAAT8AADYtxEAAwAAAFf7AAAs1BEAAQAAABXyAQB4DBEAAQAAAAHxAQCQ2REAAgAAAJsyAABQDBEAAQAAAGXUAQBAuREAAQAAAAb/AACszhEAAQAAAD//AAA0uxEAAQAAADTWAQC0sxEAAQAAAEIyAACY2REAAwAAABT+AACMNREAAQAAAB7yAQBYEBEAAQAAAFn8AACk2REAAgAAAEP+AACs2REAAQAAAFcdAABMtBEAAQAAANHXAQBkvBEAAQAAAETXAQCcuxEAAQAAAIb7AACwzxEAAQAAANrUAQB4ExEAAQAAAAb7AACE1xEAAgAAAGHWAQD8sxEAAQAAALLuAQAAtBEAAQAAAEkvAACw2REAAQAAAPv8AABE2REAAgAAAFH9AABIxBEAAwAAAI/7AACMtREAAQAAAL4kAAAstxEAAQAAAMzUAQB8sxEAAQAAAMX9AAD0xhEAAwAAADjWAQB8sxEAAQAAALQCAAC02REAAQAAAK4zAAC42REABQAAAPf9AADM2REABAAAAP7VAQBMuhEAAQAAAHszAADc2REAAgAAAAzuAQC4tREAAQAAACn7AACIwhEAAQAAAAv/AACIwhEAAQAAAAfXAQCkthEAAQAAACPWAQBsthEAAQAAACsyAADk2REAAwAAANkyAADYuBEAAQAAAKL8AADw2REAAgAAAH/XAQAEtxEAAQAAAFDVAQC8txEAAQAAAPD8AAC8uREAAgAAAID7AAAEtBEAAQAAALjWAQC4xxEAAQAAANMDAADEBhEAAgAAALMAAABkvBEAAQAAAIIkAAD42REABAAAAGkvAAAI2hEAAQAAAHYhAAAM2hEAAwAAAML/AAAY2hEAAQAAALIAAAAguBEAAQAAAJPWAQDwtREAAQAAAJj8AADAzBEAAwAAAFUvAAAYyBEAAQAAAKEvAAAc2hEAAQAAADgdAACwuREAAQAAAKP/AADw1BEAAQAAADbUAQDAtBEAAQAAAIP9AAAg2hEAAwAAADT8AADg0REAAgAAAJX8AACk2REAAgAAAI/XAQAEtxEAAQAAAIjVAQD0tBEAAQAAAOz8AACs0BEAAgAAACozAAAs2hEAAwAAAO3UAQCQtxEAAQAAAP4yAABUwxEAAQAAADAiAAA42hEAAwAAAG4zAABE2hEAAwAAAHcxAABQ2hEAAQAAAF4zAABU2hEAAgAAAO3+AAAUyhEAAQAAANvVAQAwuREAAQAAACrxAQBc2hEAAwAAAC7XAQBgthEAAQAAAIwkAABo2hEAAgAAAGv/AABw2hEAAQAAAPH+AABYvBEAAQAAAPkDAABgthEAAQAAAN3+AADMvBEAAQAAALYkAADYtREAAQAAAMMyAAB02hEAAgAAAJ3XAQDcyBEAAQAAANTXAQDMtxEAAQAAAGH/AAB82hEAAQAAAPTWAQBgthEAAQAAAH0zAACA2hEAAgAAAAT9AAAc0hEAAgAAAFf+AABUxBEAAQAAAMQzAACI2hEAAgAAAGshAACQ2hEAAwAAAIkzAACc2hEABAAAADzVAQAgvREAAQAAADvXAQDsvxEAAQAAAKHuAQC0thEAAQAAAOXUAQDEsxEAAQAAABkyAACs2hEABAAAAM3UAQBAuREAAQAAAAgvAABk2BEAAQAAADYhAAC82hEAAQAAACv/AAB4ExEAAQAAAJD/AADA2hEAAQAAALEdAADE2hEAAQAAAKbuAQA8yREAAQAAAO0yAAC8vhEAAQAAAHcPAADI2hEAAwAAAC/XAQCIsxEAAQAAAOQCAADU2hEAAQAAAKszAADY2hEAAwAAAPD+AAA41BEAAQAAADTxAQAgvREAAQAAAL39AAAcwhEAAwAAAL3WAQDcwhEAAQAAAGwxAADk2hEAAQAAAMzWAQBktBEAAQAAAP0yAADo2hEAAQAAAAnVAQA4thEAAQAAAKMkAADs2hEAAwAAAKwzAAD42hEAAwAAAIb8AAA02BEAAgAAAMYvAAAE2xEAAQAAAIQgAAB0vhEAAQAAAErUAQCwsxEAAQAAAFbXAQDswxEAAQAAAFz8AAAI2xEAAgAAAIwxAAAQ2xEAAQAAAHz+AAAU2xEAAgAAAEH8AACg1REAAgAAAAnWAQAUuREAAQAAAHMvAAAc2xEAAQAAALnuAQCUvREAAQAAAEkzAAAg2xEAAgAAAMoBAAAo2xEAAgAAAJ39AABoxBEAAwAAAKj7AADouhEAAQAAAKLWAQActREAAQAAAIEzAAAw2xEAAgAAAHn+AAA42xEAAgAAAMrUAQDQtxEAAQAAABjyAQBA2xEAAQAAACfWAQBUthEAAQAAANLXAQB0vhEAAQAAAJLVAQBQtBEAAQAAAILWAQCgsxEAAQAAACbVAQA0tBEAAQAAAF37AAAkvREAAQAAALAyAABE2xEAAQAAAHXVAQCQthEAAQAAAG/7AAAgthEAAQAAAN0kAADMvREAAQAAABr9AABAxBEAAgAAAJ3/AABI2xEAAQAAALLVAQCgsxEAAQAAAArxAQBM2xEAAgAAAB/yAQBU2xEAAQAAAJTXAQAYzxEAAQAAALP9AABY2xEAAwAAAIP7AAAQxxEAAQAAACEzAABk2xEABQAAABD/AAAMyxEAAQAAAA7WAQCUtBEAAQAAAK37AAC4yxEAAQAAAJLuAQAAtBEAAQAAAI/9AAB42xEAAwAAAEovAADExBEAAQAAANj8AAC80hEAAgAAAEfWAQCwuREAAQAAAEAvAACE2xEAAQAAAEvWAQAYuREAAQAAAO/7AACA0xEAAwAAAL8dAABotREAAQAAAKYzAACI2xEAAwAAAFnXAQB0thEAAQAAAG3XAQD4wREAAQAAAMEzAACU2xEAAgAAACj/AAAwuREAAQAAAOj7AAA41BEAAQAAAKH+AADotBEAAQAAAOTUAQBgtBEAAQAAAEEvAACc2xEAAQAAAAAzAACg2xEABQAAAD7+AAC02xEAAQAAADnVAQAUuREAAQAAAHIvAAC42xEAAQAAAGcdAADMwBEAAQAAAB7VAQBctBEAAQAAAKAkAAC82xEAAwAAAFb7AAAs1BEAAQAAAL0kAAAwuREAAQAAADodAACotxEAAQAAAFnVAQCAvxEAAQAAABbuAQDwvBEAAQAAAJYyAADI2xEAAQAAAJz8AADM2xEAAgAAAH3+AADU2xEAAgAAAJEyAADc2xEAAQAAAEodAACU1xEAAQAAANMkAACQtxEAAQAAAM3/AACgxhEAAQAAAGfuAQDotBEAAQAAAHzuAQCc1REAAQAAALfXAQCwtBEAAQAAACrXAQAMtxEAAQAAAA/VAQCwuREAAQAAAAMgAADUtxEAAQAAAJAgAABctBEAAQAAABjxAQDg2xEAAwAAAF/9AABgzBEAAwAAAIkhAADs2xEAAwAAAL3VAQCQtxEAAQAAAPH7AAB4zBEAAwAAAFbWAQBctBEAAQAAAGQkAACIwREAAQAAAGHUAQBMtBEAAQAAAFz7AAAkvREAAQAAAEf+AADYvREAAQAAAJoyAAD42xEAAQAAAELuAQCkuxEAAQAAAPnWAQD4wREAAQAAABn+AAD82xEAAwAAAJDxAQAI3BEAAgAAAHX7AAD8zhEAAQAAAGEzAAAQ3BEAAgAAACP8AAAY3BEAAgAAAFH7AAAg3BEAAQAAAP0zAAAk3BEAAwAAAFj/AABAuREAAQAAAPjXAQAguBEAAQAAAEQvAAAw3BEAAQAAAATUAQAgvREAAQAAAIEgAABouBEAAQAAAJ3+AACkuxEAAQAAAHkPAAA03BEAAwAAAA7XAQC0wREAAQAAAGoxAABA3BEAAQAAAFIdAABstBEAAQAAALTWAQDkuxEAAQAAAE//AABstBEAAQAAAO8yAADA2hEAAQAAABMyAABE3BEABAAAABT7AABU3BEAAgAAAJwyAABc3BEAAQAAADfxAQAwuREAAQAAABL8AAD8yBEAAgAAAOMCAABAuREAAQAAAHXWAQA4thEAAQAAAJwgAABMtBEAAQAAAFQzAABg3BEABQAAABohAAActhEAAQAAAF/uAQC8zBEAAQAAAGP/AAB03BEAAQAAAJwzAAB43BEAAgAAAHv7AADgyREAAQAAABgzAACA3BEABAAAAM0kAACMuREAAQAAANoCAACQ3BEAAgAAAJrWAQBMuhEAAQAAAHYkAACY3BEAAwAAAD8vAABsyhEAAQAAAAnuAQBYvBEAAQAAAGL7AAB01hEAAQAAAFozAACk3BEAAgAAAPzXAQDMtxEAAQAAAKL/AACEtBEAAQAAAP0fAAA8whEAAgAAAIHVAQDEsxEAAQAAANoyAACsvBEAAQAAAJv9AACs3BEAAwAAAFIvAAC43BEAAQAAAOszAAC83BEAAwAAALLUAQCwsxEAAQAAABHuAQBItBEAAQAAAGoyAACQtBEAAQAAAB7WAQCwsxEAAQAAABr8AADI3BEAAgAAAIb9AAAo1hEAAwAAABTXAQAguxEAAQAAAKUvAAAkMxEAAQAAACT7AADQ3BEAAQAAAJvuAQAkuBEAAQAAADwdAAC0uhEAAQAAAIkgAACAtBEAAQAAAJH8AADU3BEAAgAAANj7AADs1BEAAQAAAMv+AADkthEAAQAAAFL+AAAYyhEAAQAAAGDWAQAAtxEAAQAAANTWAQC0wREAAQAAAAUgAADUtxEAAQAAAGL/AACwvhEAAQAAAHT+AADc3BEAAgAAAE7XAQAguxEAAQAAAOnVAQDEsxEAAQAAAFAvAADk3BEAAQAAADUvAADo3BEAAQAAAJz7AACkvhEAAQAAAB/xAQDs3BEAAwAAAOTVAQActhEAAQAAAGokAAD43BEAAgAAAFvUAQDMvREAAQAAAAz8AADw2REAAgAAAC/yAQAA3REAAQAAAEMyAAAE3REAAwAAACgyAAAQ3REAAwAAAHwzAAAc3REAAgAAAMEyAAAk3REAAgAAAK8zAAAs3REABgAAAGT/AADMyxEAAQAAAK8dAABE3REAAQAAAFDXAQDgvBEAAQAAADH/AAActhEAAQAAAL3UAQCAvxEAAQAAAIn7AADYvhEAAQAAAFodAABI3REAAQAAAKX/AAAIxhEAAQAAANEzAABM3REAAgAAAH4gAADovhEAAQAAALMdAABU3REAAQAAALwkAACUtBEAAQAAALsvAABY3REAAQAAAKfVAQAwuREAAQAAADYwAABc3REAAQAAAJf9AABg3REAAwAAABH8AABs3REAAgAAAK0dAAB03REAAQAAANP7AACQxxEAAQAAAE/VAQCMuREAAQAAAA/9AAB43REAAgAAAEbxAQCwsxEAAQAAAKgzAACA3REABAAAAJwxAACQ3REAAQAAAIIvAACU3REAAQAAAETxAQBgtBEAAQAAAIL+AAAIMREAAgAAACfVAQDwtREAAQAAAK3WAQAwvREAAQAAAI4vAACY3REAAQAAAGj9AADg0BEAAwAAADXUAQAUuREAAQAAAED8AABEvBEAAgAAAJszAACc3REAAgAAABIhAACwuREAAQAAAHb8AACk3REAAgAAAL78AACs3REAAgAAAEIzAAC03REAAwAAAOHWAQAEtxEAAQAAACvXAQDItBEAAQAAAEYvAADA3REAAQAAAEEdAABgtBEAAQAAAAP9AADw0hEAAgAAAMf+AABM0BEAAQAAAH7WAQC0uhEAAQAAAF7XAQAUwBEAAQAAACLVAQBQtxEAAQAAAMb9AADE3REAAwAAAEMxAADQ3REAAQAAANT/AAActxEAAQAAAN0yAABIzREAAQAAADchAADU3REAAQAAAKb8AAD8yBEAAgAAAGn9AADY3REAAwAAAGYhAADk3REAAwAAANn7AAAQzxEAAQAAAKkvAADw3REAAQAAAAYyAAD03REAAwAAAOL7AACszxEAAQAAAHbWAQCUtBEAAQAAALvVAQBsthEAAQAAAHT9AAAA3hEAAwAAAFEhAAAM3hEAAwAAAOj/AAAY3hEAAQAAAJseAABYKhEAAgAAAGkyAABczREAAQAAAJ78AAAc3hEAAgAAAObUAQCwsxEAAQAAAMHWAQD8zREAAQAAAKXuAQAUyhEAAQAAAMbWAQDgvBEAAQAAANQDAAAEIxEAAgAAAIL8AACs0BEAAgAAAJjuAQA0uhEAAQAAAPn8AAAk3hEAAgAAABMzAAAs3hEABgAAAMfUAQCgtREAAQAAACD/AACs0xEAAQAAAN4yAABE3hEAAQAAADL9AABg0REAAgAAAKEdAABI3hEAAQAAAGb+AAAYthEAAQAAAFyrAABM3hEAAQAAAA79AAD0zhEAAgAAAIvUAQDwtREAAQAAALIkAABQ3hEAAwAAAF/+AACoyREAAQAAAG//AABc3hEAAQAAAEHXAQCkthEAAQAAAKcyAACEyhEAAQAAAKLUAQCUtBEAAQAAAD4gAADotxEAAgAAAJjVAQC0sxEAAQAAADwyAABg3hEAAwAAAHokAABs3hEAAwAAAIzuAQC4tREAAQAAAFD7AAAg3BEAAQAAANQvAABsBhEAAQAAABrXAQBktxEAAQAAAALUAQDAtBEAAQAAAKHWAQBAuREAAQAAAGYxAAB43hEAAQAAACwdAADYtREAAQAAALjXAQCcuxEAAQAAAC3UAQBMtBEAAQAAAGghAAB83hEAAgAAAP/UAQAwtBEAAQAAAA4yAACE3hEABAAAAGf8AACU3hEAAwAAALf+AABkwBEAAQAAADT/AABkuBEAAQAAAAX8AADM2xEAAgAAAPADAAAUuxEAAQAAAL4yAACg3hEAAgAAAETUAQActhEAAQAAAKczAACo3hEAAwAAAMwyAAC03hEAAgAAAC4zAAC83hEABgAAAF//AADU3hEAAQAAAHQhAAAwtBEAAQAAAJfuAQA0tREAAQAAAL8vAADY3hEAAQAAAGkxAADc3hEAAQAAAG4yAADg3hEAAgAAAGn7AADctBEAAQAAAA3uAQCIuhEAAQAAADMvAADo3hEAAQAAAD8BAADs3hEAAgAAAM4fAAD03hEAAwAAAGMxAABsuxEAAQAAAEr/AADwtREAAQAAAHL/AAAA3xEAAQAAAA7/AAAYyhEAAQAAAKL9AAAE3xEAAwAAAJT/AAC8whEAAQAAAPDXAQB0vhEAAQAAADEzAAAQ3xEAAwAAAAnXAQCwtBEAAQAAAAEhAAAc3xEAAwAAABruAQBM0BEAAQAAAHfuAQA0tREAAQAAAA38AAAoxREAAgAAAM78AABM0REAAgAAAKXWAQAo3xEAAQAAAMIzAAAs3xEABAAAAAH9AAA83xEAAgAAAG/VAQCcsxEAAQAAAAggAADUtxEAAQAAAHj8AAD8yBEAAgAAACcyAABE3xEAAwAAAEfUAQBkuBEAAQAAACMyAABQ3xEAAwAAAJ0kAABc3xEAAwAAAPzVAQBstBEAAQAAAArVAQCUtBEAAQAAAJczAABo3xEAAgAAABnXAQDEtxEAAQAAADD9AAB4uBEAAgAAABkzAABw3xEABgAAAJ38AAD01BEAAgAAAD78AAA0zxEAAgAAAIPXAQDszREAAQAAAJHUAQCcthEAAQAAAHIxAACI3xEAAQAAAP77AABY0hEAAQAAANzUAQDMsxEAAQAAAEbWAQB4ExEAAQAAANbVAQDAtBEAAQAAAN0zAACM3xEAAgAAAEDVAQAstxEAAQAAAOb8AACU3xEAAgAAANzVAQAstxEAAQAAAN78AAD01hEAAgAAAIIgAAAguBEAAQAAAMDVAQCQuREAAQAAAFIxAADcvBEAAQAAALTVAQBgtBEAAQAAADj8AACc3xEAAgAAAInXAQDcthEAAQAAAEHUAQCotxEAAQAAAG4vAACk3xEAAQAAAEUvAACo3xEAAQAAAO/UAQBUthEAAQAAADnyAQCUJREAAQAAAGsyAABsuREAAQAAAJnWAQCcthEAAQAAADIvAACs3xEAAQAAADDxAQDYtREAAQAAAF0zAACw3xEAAgAAAF+rAAC43xEAAQAAAOUkAAAwtBEAAQAAAP7WAQDMwBEAAQAAABf7AAC83xEAAgAAAIbVAQBctBEAAQAAAGIdAAA0tBEAAQAAAJD+AAC0thEAAQAAAIfXAQAcvxEAAQAAAPAzAADE3xEAAwAAADghAADU1REAAQAAACD8AADQ3xEAAgAAAJgyAADY3xEAAQAAACT9AAD0vBEAAgAAAF2rAADc3xEAAQAAAJruAQBM0BEAAQAAAFP8AADg3xEAAgAAAG7XAQCEKhEAAQAAAFD+AAAEvxEAAQAAAJ//AADo3xEAAQAAAILUAQBctBEAAQAAAAIhAADAtBEAAQAAAC//AAC0uhEAAQAAAB38AAAwtxEAAgAAAFT+AACMNREAAQAAAIYyAADs3xEAAQAAAA/8AADgxhEAAgAAADwzAADw3xEABAAAAFX8AADg1xEAAgAAAKbUAQB4ExEAAQAAAHohAAAA4BEAAgAAAFMzAAAI4BEABAAAAMsBAAAY4BEAAgAAABszAAAg4BEABAAAAEAyAAAw4BEAAwAAAHPUAQCwuREAAQAAAIj9AACIzREAAwAAAFbUAQA0tBEAAQAAAJPVAQDMvREAAQAAAIXXAQDEtxEAAQAAAMLUAQBQtBEAAQAAAKvWAQB0thEAAQAAAPj9AAA84BEABAAAAAL/AABM4BEAAQAAACkyAABQ4BEAAwAAAKT7AAAkIREAAgAAAO37AADUsxEAAwAAAH7+AABc4BEAAgAAAPf7AAAwuBEAAwAAAFohAABk4BEAAwAAAGcxAABw4BEAAQAAAJ77AACYwREAAQAAAMz+AADkthEAAQAAAGH8AAB04BEAAwAAAADXAQDgvBEAAQAAAP7UAQDQtxEAAQAAAFnUAQD8sxEAAQAAAOXWAQB0thEAAQAAAKP7AACcyBEAAQAAAEb8AACA4BEAAgAAAEszAACI4BEAAwAAAJnUAQBAuREAAQAAAIH7AAAEtBEAAQAAAOPXAQBouBEAAQAAAFwdAACU4BEAAQAAALXUAQBwthEAAQAAAF7UAQBMuhEAAQAAAFzVAQAAtxEAAQAAAKIkAACY4BEAAwAAADHxAQAUuREAAQAAAJ7+AACkuxEAAQAAAOPUAQBkuBEAAQAAAPz7AABY0hEAAQAAAHnUAQC0tBEAAQAAANwCAACk4BEAAgAAAPT9AACs4BEABAAAABLUAQCgsxEAAQAAAMv/AAC4txEAAQAAAHExAAC84BEAAQAAAIv8AADA4BEAAgAAAPX8AAAYxhEAAgAAAHkvAADI4BEAAQAAAD4yAADM4BEAAwAAAGwkAADY4BEAAgAAAHb9AADg4BEAAwAAAMDWAQCEKhEAAQAAAL0vAADs4BEAAQAAAAfWAQBsuBEAAQAAAK4vAADw4BEAAQAAAI79AAD04BEAAwAAAG0vAAAA4REAAQAAALP8AAAMwBEAAgAAAPMzAAAE4REAAwAAAKsdAAAQ4REAAQAAAKv8AAD4tBEAAgAAADIdAAAU4REAAQAAAG8hAADMsxEAAQAAALP/AADQ3REAAQAAABPWAQCwuREAAQAAAK7VAQC0uhEAAQAAAIr7AACIuREAAQAAAE/xAQAY4REAAgAAAHIzAAAg4REAAgAAAMX+AABM0BEAAQAAAGrWAQDQtxEAAQAAAIXUAQCQtxEAAQAAAKb7AADouhEAAQAAAHAgAAAMyxEAAQAAAHovAAAo4REAAQAAADEhAAA4thEAAQAAAI3uAQCIuhEAAQAAABDxAQAs4REAAwAAADMhAADMsxEAAQAAAIAxAAA44REAAQAAALL9AAA84REAAwAAAAkhAABI4REAAgAAAELVAQB4ExEAAQAAAHUgAACIwREAAQAAAFn+AADIsxEAAQAAABn9AACQ1REAAgAAAF/XAQA4uxEAAQAAAMIkAADMsxEAAQAAAKzWAQAYzxEAAQAAAEMvAABQ4REAAQAAAB39AAA83xEAAgAAAC38AACs3REAAgAAAHwvAABIKxEAAQAAAD7/AABU4REAAQAAAHbXAQBAtBEAAQAAAJ8dAABY4REAAQAAADfyAQCw2REAAQAAAFYyAABc4REAAgAAAC0zAABk4REABQAAACnWAQCAvxEAAQAAAFTuAQBkwBEAAQAAAFn/AAActREAAQAAACzxAQC0tBEAAQAAABnVAQDEsxEAAQAAALUzAAB44REAAgAAAJIzAACA4REAAwAAANL/AACk0BEAAQAAAH0xAACM4REAAQAAALUAAACkthEAAQAAAFfVAQBUthEAAQAAAGj8AACUtxEAAwAAAOH8AACQ4REAAgAAAHQxAACY4REAAQAAABcyAACc4REABAAAAFX/AADQtxEAAQAAALL+AADQsxEAAQAAAB7XAQAEvhEAAQAAALH9AACs4REAAwAAAADUAQDYtREAAQAAAETyAQC44REAAwAAAA78AABotxEAAgAAALQyAADE4REAAgAAAHT7AAD8zhEAAQAAABj9AAAcxREAAgAAAIf+AAD0GREAAgAAALDVAQActhEAAQAAAOIzAADM4REAAgAAABP9AABwwREAAgAAAIXWAQDEsxEAAQAAAIcgAADMtREAAQAAAN77AAAgvxEAAQAAAEcdAABsthEAAQAAAJswAADU4REAAgAAAJDWAQCQuREAAQAAAMXWAQAkthEAAQAAAPn+AADc4REAAwAAAFQhAADo4REAAwAAAFT9AAD04REAAwAAAO/WAQDcyBEAAQAAAG4xAAAA4hEAAQAAAO4fAACMuhEAAwAAAEjUAQBgtBEAAQAAACb7AAAE4hEAAQAAAIrWAQBctBEAAQAAAKkkAAAI4hEAAwAAAF3UAQCcthEAAQAAADPXAQD4wREAAQAAAJcvAAAIHhEAAQAAAB7xAQAU4hEAAwAAADsvAAAg4hEAAQAAAK/9AAAk4hEAAwAAAIr8AAAw4hEAAgAAAOz/AAA44hEAAQAAACzWAQAAtxEAAQAAAOb+AACIuhEAAQAAAJP/AAD0uBEAAQAAABD+AAAEvxEAAQAAAEYdAAA84hEAAQAAAI//AAAUtREAAQAAAKLVAQDAtBEAAQAAAIPVAQCMuREAAQAAAITWAQBgtBEAAQAAAIHuAQC0thEAAQAAAH8BAAC0sxEAAQAAAHoDAABA4hEAAgAAAHQkAABI4hEAAwAAAH//AABE3hEAAQAAADPxAQCcsxEAAQAAAKAyAABU4hEAAQAAAGP9AAAo2REAAwAAADnXAQAkthEAAQAAAFjVAQCQuREAAQAAAG38AABY4hEAAgAAAGfWAQCgtREAAQAAABwvAABg4hEAAQAAAPr+AADc4REAAwAAAF3uAQCYwREAAQAAAD3xAQCotxEAAQAAAFXVAQCQtxEAAQAAAAcyAABk4hEAAwAAAMrXAQBw4hEAAQAAALHWAQA4uxEAAQAAAH4xAAB04hEAAQAAAJX+AACctREAAQAAADjUAQAgvREAAQAAAJUxAAB44hEAAQAAACfXAQAkxREAAQAAAGLWAQBQtBEAAQAAAF4yAAB84hEAAgAAANX8AAAouBEAAgAAAHfWAQAwuREAAQAAANvXAQBkvBEAAQAAADQxAABkthEAAQAAAPvWAQD8zREAAQAAAC8hAABQtxEAAQAAAJMxAAC8tREAAQAAAIDXAQBktxEAAQAAAHwsAADwtREAAQAAAJrVAQDQtxEAAQAAAE3+AAA0uxEAAQAAAMMkAACotxEAAQAAACYgAAD82xEAAwAAAH0hAAD0tBEAAQAAABwhAAC0tBEAAQAAAFgvAACE4hEAAQAAAA7UAQC0uhEAAQAAAGvXAQDcwhEAAQAAAC/9AAD8vREAAgAAABDXAQAsuREAAQAAAKT/AABkthEAAQAAAB78AAAo1xEAAgAAAMUkAAAYuREAAQAAAMskAADEsxEAAQAAADkzAACI4hEAAwAAAOvUAQBsthEAAQAAAHf9AADg4BEAAwAAAAD8AAD82BEAAwAAADczAACU4hEAAwAAAI0kAACg4hEAAgAAAGX9AAA02REAAwAAAF4xAACY1REAAQAAAGbVAQDQtxEAAQAAAMwvAACo4hEAAQAAANXUAQA4thEAAQAAAKbVAQCUtBEAAQAAAAkzAACs4hEAAwAAADfWAQAwtBEAAQAAAMEkAACwuREAAQAAAFj8AAC8uREAAgAAAH3VAQC0tBEAAQAAADf8AAAozxEAAgAAAAr/AAAk1REAAQAAAKP9AAC44hEAAwAAAGj/AADE4hEAAQAAADLUAQActREAAQAAAF6rAADI4hEAAQAAAAwqAADM4hEABAAAACv9AAB43REAAgAAAGEhAADc4hEAAgAAAJgzAADk4hEAAgAAAIkkAADs4hEAAgAAAD8zAAD04hEAAgAAAOYkAAB8sxEAAQAAAC8gAADUtxEAAQAAAKr8AAAouhEAAgAAADkhAAA0tBEAAQAAAEnUAQDEsxEAAQAAAEgxAABcxREAAQAAAM/8AACA4BEAAgAAADHVAQBMtBEAAQAAAKozAAD84hEAAwAAAG39AAD4vxEAAwAAAG0xAAAI4xEAAQAAAD7VAQCUtBEAAQAAAFYzAAAM4xEABgAAAEnXAQDszREAAQAAAH77AAAEtBEAAQAAANnVAQA4thEAAQAAAJIkAAAk4xEAAwAAADAhAAAgvREAAQAAAPbWAQCQvREAAQAAAFsdAAAwtBEAAQAAAMIvAAAw4xEAAQAAAOTWAQAEvhEAAQAAAOjXAQDMtxEAAQAAAIj/AAC8xxEAAQAAAGEdAAA8uxEAAQAAABX7AAA04xEAAgAAANEyAAAA3xEAAQAAALzXAQC0wREAAQAAAD4xAABI1hEAAQAAAOozAAA84xEAAwAAAGz8AACQ4REAAgAAAKwvAABI4xEAAQAAAPP7AADM1BEAAwAAAP/WAQAkthEAAQAAAHj+AABM4xEAAgAAAJ8yAABU4xEAAQAAAC4vAABY4xEAAQAAAHEzAABc4xEAAwAAALckAAAUuREAAQAAABjuAQA0uhEAAQAAADv8AAC0wxEAAgAAAD7WAQDAtBEAAQAAAH3UAQDEsxEAAQAAAC3XAQDgtBEAAQAAAHnVAQCotxEAAQAAALgvAABo4xEAAQAAAGEkAAAguBEAAQAAAHcgAADMtREAAQAAAHr7AADgyREAAQAAAC0vAABs4xEAAQAAAOkyAABAtREAAQAAAPTUAQAAtxEAAQAAAF/UAQCgtREAAQAAAG3WAQBAuREAAQAAADQzAABw4xEABgAAAGr8AACI4xEAAgAAALMOAACQ4xEAAgAAAB3XAQBwyxEAAQAAAHHUAQCQthEAAQAAAJUyAACY4xEAAQAAALPXAQAUuxEAAQAAAGAdAADEtxEAAQAAALYCAACc4xEAAQAAAIczAACg4xEAAgAAABwyAACo4xEABAAAAF3+AAC44xEAAQAAALoyAAC84xEAAgAAAL8kAACQthEAAQAAALj+AABkwBEAAQAAAIP8AADE4xEAAgAAAHzWAQDMsxEAAQAAAMAvAADM4xEAAQAAAPkzAADQ4xEAAwAAAHgxAADc4xEAAQAAAInuAQBYvBEAAQAAAHn9AADg4xEAAwAAABAyAADs4xEABAAAAPL8AAD84xEAAwAAAJHVAQD8sxEAAQAAAATWAQB8sxEAAQAAAJ/+AACkuxEAAQAAAD3/AACo1REAAQAAADUyAAAI5BEAAwAAAJ/UAQCcsxEAAQAAAOn7AAA41BEAAQAAALwzAAAU5BEAAgAAAGExAADI1BEAAQAAAHrXAQBktBEAAQAAAFr+AADovhEAAQAAAJfWAQDMvREAAQAAAFP7AACMuBEAAQAAAI/VAQDwtREAAQAAAJPuAQBYtBEAAQAAAFb+AAAgxhEAAQAAAAEyAAAc5BEAAwAAAJHuAQBItBEAAQAAAA3UAQCotxEAAQAAAFAhAAAo5BEAAwAAAA0hAAAwuREAAQAAAD/xAQAYuREAAQAAADTXAQCEKhEAAQAAANHVAQBAuREAAQAAAEAzAAA05BEABQAAAJnVAQBMtBEAAQAAAAnUAQCQthEAAQAAABv8AABI5BEAAgAAADvyAQBQ5BEAAQAAAEf8AAA01xEAAgAAAFcyAABU5BEAAgAAAGkhAACMuREAAQAAAG0kAABc5BEAAgAAABLWAQB4ExEAAQAAAFX7AACMuBEAAQAAAIT+AACMChEAAgAAAJjXAQAUwBEAAQAAAGohAABk5BEAAgAAAMkvAABs5BEAAQAAAID+AABw5BEAAQAAACjUAQBstBEAAQAAAFkhAAB05BEAAwAAAIMyAAB44hEAAQAAAIDUAQC8txEAAQAAAOv+AACItBEAAQAAADbVAQActREAAQAAAGf/AACA5BEAAQAAAEQxAACU2BEAAQAAADjXAQDMwBEAAQAAAPv+AADAwBEAAgAAAOrWAQAUwBEAAQAAAO7WAQDkuxEAAQAAAMb+AABM0BEAAQAAAEzWAQActhEAAQAAAKX7AAAkIREAAgAAADMgAACE5BEAAgAAAIz+AAAgGxEAAgAAANMvAADUMxEAAQAAAOMyAABYzxEAAQAAAIzUAQAAtxEAAQAAAI3/AAB0yxEAAQAAANDUAQDYtREAAQAAAAPUAQCcsxEAAQAAAODXAQAYtxEAAQAAALH+AADQsxEAAQAAAOQkAADQtxEAAQAAAHb7AAAMtREAAQAAAHYvAACM5BEAAQAAAGUkAADMtxEAAQAAAGMhAACQ5BEAAgAAAKvUAQAYuREAAQAAALX8AAAY3BEAAgAAAGYvAACY5BEAAQAAABshAAC0tBEAAQAAAPbVAQA0tBEAAQAAALEvAACc5BEAAQAAAC7uAQDQsxEAAQAAAHEgAAA0tBEAAQAAALvUAQBUthEAAQAAAPwzAACg5BEAAwAAAMEvAACs5BEAAQAAAPvUAQCgtREAAQAAAHgkAACw5BEAAwAAALwAAAC85BEAAwAAAPjWAQB8txEAAQAAADXVAQBAuREAAQAAALzVAQD0tBEAAQAAAGUhAADI5BEAAgAAADX/AABgtBEAAQAAALAkAADQ5BEAAwAAAC0yAADc5BEAAwAAABPUAQBkuBEAAQAAAFvWAQBUthEAAQAAAGMkAAB0vhEAAQAAALXuAQCctREAAQAAAIsgAADwuhEAAQAAANcyAABcvREAAQAAAH/WAQAYuREAAQAAAJEvAADo5BEAAQAAAGskAADs5BEAAgAAAKYvAACMBREAAQAAACjWAQCQuREAAQAAAI0vAAD05BEAAQAAAMj+AABM0BEAAQAAAIjXAQAguxEAAQAAABXXAQDcthEAAQAAAKz8AABI5BEAAgAAAHTXAQDgvBEAAQAAAPT+AABYvBEAAQAAAAHUAQAUuREAAQAAAOgyAAD45BEAAQAAAIoyAACw2REAAQAAAPYzAAD85BEAAwAAAA3XAQCwthEAAQAAAELWAQCUtBEAAQAAAL38AABAuxEAAgAAAAQzAAAI5REABQAAAJgxAADIuhEAAQAAAMb/AAAc5REAAQAAAGUyAAD4xBEAAQAAAOgzAAAg5REAAgAAAM38AAAo5REAAgAAAFMvAAAw5REAAQAAABDUAQActhEAAQAAAOPVAQAYuREAAQAAAOH+AAC4tREAAQAAAAf8AAAc3hEAAgAAAFEvAAA05REAAQAAAKH/AAA45REAAQAAABL+AAB82hEAAQAAAOYzAAA85REAAgAAANczAABE5REAAgAAAAzUAQDMsxEAAQAAAO0fAABM5REAAwAAANXWAQDszREAAQAAAE0vAADwAxEAAQAAAJj9AABg3REAAwAAAMQyAABY5REAAgAAAOP/AAAc1REAAgAAAEAdAABkuBEAAQAAAGX7AAB01hEAAQAAAAgyAABg5REAAwAAAPwyAABs5REAAQAAAJT+AACk1hEAAQAAAKMyAABw5REAAQAAADQdAAAwuREAAQAAAIX+AACIFhEAAgAAAAogAADUtxEAAQAAABfWAQAYuREAAQAAAMsvAADYLREAAQAAAI4xAAB05REAAQAAAN8yAACkxBEAAQAAAH4yAAB45REAAgAAAKT+AADotBEAAQAAAIMvAACA5REAAQAAAOT/AACE5REAAQAAAOT8AABcvBEAAgAAADvxAQCwuREAAQAAANEkAABsthEAAQAAANYkAACQuREAAQAAAHjVAQDMsxEAAQAAAJr8AABAzhEAAwAAAPcyAACgwxEAAQAAAHD8AACI5REAAgAAAEwdAABY4REAAQAAAIT7AADkzxEAAQAAANfUAQAwuREAAQAAAIgvAACQ5REAAQAAAJf+AACctREAAQAAAHD/AACU5REAAQAAAFj9AAAouxEAAwAAAEsxAACQtBEAAQAAAC7WAQBQtBEAAQAAAK0vAACY5REAAQAAABQvAACc5REAAQAAAFD8AACg5REAAgAAAGszAACo5REAAwAAADQyAAC05REAAwAAANIvAADA5REAAQAAAEPyAQDE5REAAwAAAELUAQC0uhEAAQAAAEABAADQ5REAAgAAAL8yAADY5REAAgAAAADxAQDg5REAAgAAAM7/AAAYzREAAQAAAPH9AADo5REAAwAAADExAAA45REAAQAAANozAAD05REAAgAAAE4xAAB0xBEAAQAAAIr+AAAgGxEAAgAAAFMxAAAc5REAAQAAACAhAAD85REAAgAAANn+AABAxREAAQAAAD8dAAC0tBEAAQAAABbXAQDgvBEAAQAAAHsxAAAE5hEAAQAAAGAyAAA45REAAQAAAAP8AACUtxEAAwAAACHUAQCAvxEAAQAAABX9AAAk3hEAAgAAAMT8AACc3xEAAgAAAHz8AAB4xBEAAgAAAD7XAQDMJxEAAQAAAEDUAQDMsxEAAQAAAKgvAAAI5hEAAQAAALozAAAM5hEAAgAAAED+AAAgDBEAAQAAACD7AAAU5hEAAQAAALn9AAAY5hEAAwAAAOvVAQCMuREAAQAAALcyAAAk5hEAAgAAABjWAQActhEAAQAAAJ7XAQAMtxEAAQAAAHLVAQCUtBEAAQAAAIz9AAAs5hEAAwAAAIAkAAA45hEABAAAAAEzAABI5hEABAAAAO7VAQBctBEAAQAAAKr9AABY5hEAAwAAAMb8AAB41hEAAgAAAG7VAQDAtBEAAQAAADnuAQCUvREAAQAAACkvAABk5hEAAQAAAD0dAABo5hEAAQAAAHMyAABs5hEAAgAAAAvWAQCcsxEAAQAAADb9AAAo1xEAAgAAAGgzAAB05hEAAwAAAPrUAQBMuhEAAQAAALYdAACA5hEAAQAAAHnXAQAUuxEAAQAAALrVAQBctBEAAQAAAK3uAQCIuhEAAQAAABYhAACE5hEAAgAAAI0zAACM5hEAAgAAANQkAABQtxEAAQAAAAXUAQA4thEAAQAAAAj8AACQ4REAAgAAAJfUAQAwtBEAAQAAAP8zAACU5hEAAwAAAILVAQCwsxEAAQAAAN7+AADMvBEAAQAAAAPWAQAwtBEAAQAAAAQgAADUtxEAAQAAADkyAACg5hEAAwAAAJT7AAAQuhEAAQAAAGMvAAC4vREAAQAAAGzUAQAgvREAAQAAAMbUAQBMuhEAAQAAADwgAACs5hEAAgAAAHX/AADIwxEAAQAAAHn/AACcwBEAAQAAAFshAAC05hEAAwAAAGIkAABkvBEAAQAAAKH8AAAM0xEAAgAAACj8AACUtREAAgAAAHf/AAAIxREAAQAAAFHuAQBItBEAAQAAAGAzAADA5hEAAgAAAI7XAQBktxEAAQAAAEUhAACcsxEAAQAAALbXAQDsxxEAAQAAAMgBAADI5hEAAgAAAGQzAADQ5hEAAwAAAJ/8AACQ4REAAgAAADr9AAAk0REAAgAAAHP7AAD8zhEAAQAAAFrVAQA0tBEAAQAAAMP/AABExhEAAQAAAGTVAQC0sxEAAQAAAFIzAADc5hEAAgAAACrVAQBQtBEAAQAAANjVAQAgvREAAQAAAPDUAQCQuREAAQAAANP/AAC4yhEAAQAAAC7xAQDk5hEAAgAAAHbuAQDwvBEAAQAAAJ7VAQActREAAQAAADn+AAC44xEAAQAAAHT/AAD8tREAAQAAAGQxAADouxEAAQAAAJD7AACMtREAAQAAAE8xAAAY2hEAAQAAAHzUAQBgtBEAAQAAAGfUAQBsuBEAAQAAAMPVAQDwtREAAQAAAJMvAADs5hEAAQAAAA3WAQA4thEAAQAAAEUyAADw5hEAAQAAAAX/AADwtxEAAQAAAFfUAQDwtREAAQAAAJbWAQBQtBEAAQAAALDXAQBAtBEAAQAAAHr+AAD05hEAAgAAANDWAQCcuxEAAQAAAEL+AAB03BEAAQAAAJH+AAC0thEAAQAAAIbXAQA8uxEAAQAAALgzAAD85hEAAgAAAJAvAABkCREAAQAAACn8AABEwBEAAgAAAMUBAAAE5xEAAwAAAKIzAAAQ5xEAAwAAAEXWAQCQthEAAQAAAHH8AAAc5xEAAgAAAP/7AABY0hEAAQAAAFLXAQAUuxEAAQAAADL+AAAk5xEAAQAAAL4vAAAo5xEAAQAAAIUgAACIwREAAQAAAAkgAADUtxEAAQAAAODUAQActhEAAQAAAIYvAAAs5xEAAQAAAK7+AABYtBEAAQAAADoxAAB8whEAAQAAAGb7AADctBEAAQAAAGcvAAAw5xEAAQAAAKzVAQDMsxEAAQAAAPQDAADgtBEAAQAAABjXAQAUuxEAAQAAANvUAQCwuREAAQAAAC8zAAA05xEABAAAAAr8AADszxEAAgAAAAr9AAAQyBEAAgAAAGMdAACgtREAAQAAAB3yAQBE5xEAAQAAAPfVAQDwtREAAQAAAHAyAABI5xEAAgAAALgkAADAtBEAAQAAAID9AADMwxEAAwAAAIfVAQBsthEAAQAAAJymAABQ5xEAAQAAAAz9AAB4uBEAAgAAANAvAAAkKxEAAQAAAAcgAADUtxEAAQAAAIT9AAAg2hEAAwAAABozAABU5xEABgAAAGLVAQBMuhEAAQAAAD38AADE4xEAAgAAALTUAQC8txEAAQAAAEbyAQBs5xEAAwAAAEcyAAB45xEAAQAAAGAhAAAstxEAAQAAAE/+AAA0uxEAAQAAABEyAAB85xEABAAAAIEkAACM5xEABAAAACjVAQAAtxEAAQAAAGvxAQCc5xEAAgAAAI/8AACg5REAAgAAABD9AADY2BEAAgAAAI0gAADIsxEAAQAAAFExAAAszREAAQAAAFPUAQBUthEAAQAAABT8AAD8vBEAAgAAAOz+AACItBEAAQAAACUzAACk5xEAAwAAALT+AADQsxEAAQAAABIvAAD8JxEAAQAAALUdAACw5xEAAQAAACczAAC05xEAAgAAAI3+AADwwREAAQAAANwkAABQtBEAAQAAAGXXAQDItBEAAQAAACnXAQDcyBEAAQAAABoyAAC85xEABAAAAKAAAADUtxEAAQAAALb8AADMyBEAAgAAAFH+AADMyxEAAQAAAMTXAQDgvBEAAQAAANbXAQAYtxEAAQAAALbUAQBctBEAAQAAAGPWAQDMvREAAQAAALczAADM5xEAAgAAAIfUAQBUthEAAQAAALH8AADQ3xEAAgAAAGHuAQC0thEAAQAAAHIkAADU5xEAAgAAANYDAAAEtxEAAQAAAGjuAQDMtBEAAQAAAIn/AAD45BEAAQAAAPXVAQCAvxEAAQAAAAQAAAAAAAAAQAAAAAQAAAAEAAAAQQAAAEIAAABDAAAARAAAAAAAAAABAAAARQAAAEYAAABHAAAAJwAAACYAAAAWAAAAHwAAABkAAAAvAAAAIQAAACYAAAAxAAAAJgAAACAAAAA9AAAAVmUQADBlEAAaZRAA+2QQAOJkEACzZBAAkmQQAGxkEAA7ZBAAFWQQAPVjEAC4YxAABAQEBAQEAQEEBA==");
  base64DecodeToExistingUint8Array(bufferView, 1217944, "SQAAAAAAAABK");
  base64DecodeToExistingUint8Array(bufferView, 1217968, "SQAAAAAAAABJbnZhbGlkIGZsYWdzAAAASgAAAAAAAABzZWxmIHRlc3QgZmFpbGVkAGN0eCAhPSBydXN0c2VjcDI1NmsxX3YwXzRfMV9jb250ZXh0X25vX3ByZWNvbXAAcHVia2V5ICE9IE5VTEwAaW5wdXQgIT0gTlVMTABvdXRwdXRsZW4gIT0gTlVMTAAqb3V0cHV0bGVuID49ICgoZmxhZ3MgJiBTRUNQMjU2SzFfRkxBR1NfQklUX0NPTVBSRVNTSU9OKSA/IDMzdSA6IDY1dSkAb3V0cHV0ICE9IE5VTEwAKGZsYWdzICYgU0VDUDI1NksxX0ZMQUdTX1RZUEVfTUFTSykgPT0gU0VDUDI1NksxX0ZMQUdTX1RZUEVfQ09NUFJFU1NJT04Ac2lnICE9IE5VTEwAaW5wdXQ2NCAhPSBOVUxMAG91dHB1dDY0ICE9IE5VTEwAcnVzdHNlY3AyNTZrMV92MF80XzFfZWNtdWx0X2NvbnRleHRfaXNfYnVpbHQoJmN0eC0+ZWNtdWx0X2N0eCkAbXNnaGFzaDMyICE9IE5VTEwAAABIAAAAcnVzdHNlY3AyNTZrMV92MF80XzFfZWNtdWx0X2dlbl9jb250ZXh0X2lzX2J1aWx0KCZjdHgtPmVjbXVsdF9nZW5fY3R4KQBzaWduYXR1cmUgIT0gTlVMTABzZWNrZXkgIT0gTlVMTA==");
  base64DecodeToExistingUint8Array(bufferView, 1218536, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 1218568, "cmVjaWQgPj0gMCAmJiByZWNpZCA8PSAzAHJlY2lkICE9IE5VTEwARm9yIHRoaXMgc2FtcGxlLCB0aGlzIDYzLWJ5dGUgc3RyaW5nIHdpbGwgYmUgdXNlZCBhcyBpbnB1dCBkYXRhAADwinjLuu4IKwUq4HCPMvoeUMXEIap3K6XbtAai6mvjQoA=");
  base64DecodeToExistingUint8Array(bufferView, 1218768, "mBf4FluBAgCflY3i3LINAPybAgcLhw4AXCkGWsW6CwDc+X5mvnkAALjUEPuP0AcAxJlBVWiKBAC0F/2oCBEOAMC/T9pVRgwAoyZ32jpI");
  base64DecodeToExistingUint8Array(bufferView, 1218864, "VGhlIHNjYWxhciBmb3IgdGhpcyB4IGlzIHVua25vd24AAAAAAAAAAC/8///+////");
  base64DecodeToExistingUint8Array(bufferView, 1218937, "AQAAAAAAAM/K2i3i9scnBw==");
  base64DecodeToExistingUint8Array(bufferView, 1218992, "IXJ1c3RzZWNwMjU2azFfdjBfNF8xX2ZlX2lzX3plcm8oJmdlLT54KQAAAAAAAAAA7rrJL3KhDQACRPx1C5UBACNRRQE=");
  base64DecodeToExistingUint8Array(bufferView, 1219080, "QUE20IxeAgD9uwOK9GoOANyuuv7//w8A////////DwD///////8AAEFBNtCMXtI/7oAivZpzuyrr/////////w==");
  base64DecodeToExistingUint8Array(bufferView, 1219153, "AQAAAAAAAMFOd6qZAPI0AAEAAAAAAAAB");
  base64DecodeToExistingUint8Array(bufferView, 1219216, "AQ==");
  base64DecodeToExistingUint8Array(bufferView, 1219256, "w+S/Cql/VG8oiA4B1n5D5A==");
  base64DecodeToExistingUint8Array(bufferView, 1219288, "LFaxPajNZddtNHQHxQooiv7///////////////////8xsNtFmiCT6H/K6HEUiqo9FeuEkuSQbOjNa9SnIdKGMHF/xIqutHEVxgb1nawIEiLE5L8KqX9UbyiIDgHWfkPkcr0jG3yWAt94ZoEg6iIuElpkEogCHCal4DBcwEytY1PuAZVxKGwJABNcmVgvUQcASfCc6TQ0DADqeUTmBnEAAHxlK2rpeg==");
  base64DecodeToExistingUint8Array(bufferView, 1219472, "Fw==");
  base64DecodeToExistingUint8Array(bufferView, 1219496, "GA==");
  base64DecodeToExistingUint8Array(bufferView, 1219516, "AgAAAAEAAAAAAAAAAgAAAOiUEg==");
}
function asmFunc(env) {
 var buffer = new ArrayBuffer(1245184);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__wbindgen_is_undefined;
 var fimport$1 = env.__wbindgen_object_drop_ref;
 var fimport$2 = env.__wbg_self_1b7a39e3a92c949c;
 var fimport$3 = env.__wbg_crypto_968f1772287e2df0;
 var fimport$4 = env.__wbg_getRandomValues_a3d34b4fee3c2869;
 var fimport$5 = env.__wbg_require_604837428532a733;
 var fimport$6 = env.__wbg_getRandomValues_f5e14ab7ac8e995d;
 var fimport$7 = env.__wbg_randomFillSync_d5bd2d655fdf256a;
 var global$0 = 1048576;
 var i64toi32_i32$HIGH_BITS = 0;
 function $0($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $93_1 = 0, $94_1 = 0, $95_1 = 0, $96_1 = 0, $97_1 = 0, $98_1 = 0, $99_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $52_1 = $0_1 + 144 | 0;
  $76_1 = $52_1;
  $66_1 = HEAP32[$0_1 + 60 >> 2];
  $29_1 = $66_1;
  $3_1 = HEAP32[$0_1 + 52 >> 2];
  $63_1 = $3_1;
  $45_1 = $3_1;
  $78_1 = $0_1 + 184 | 0;
  $3_1 = $78_1;
  $79_1 = HEAP32[$3_1 >> 2];
  $91_1 = $0_1 + 152 | 0;
  $39_1 = $91_1;
  $92_1 = HEAP32[$39_1 >> 2];
  $34_1 = $92_1;
  $50_1 = $79_1 + $34_1 | 0;
  $80_1 = HEAP32[$3_1 + 4 >> 2];
  $93_1 = HEAP32[$39_1 + 4 >> 2];
  $3_1 = $80_1 + $93_1 | 0;
  $3_1 = $34_1 >>> 0 > $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $53_1 = HEAP32[$0_1 + 48 >> 2];
  $39_1 = $50_1;
  $50_1 = $53_1 + $39_1 | 0;
  $3_1 = $3_1 + $45_1 | 0;
  $3_1 = $39_1 >>> 0 > $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $61_1 = HEAP32[$0_1 + 56 >> 2];
  $39_1 = $50_1;
  $50_1 = $61_1 + $39_1 | 0;
  $45_1 = $3_1;
  $3_1 = $3_1 + $29_1 | 0;
  $3_1 = $39_1 >>> 0 > $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $45_1 = __wasm_rotl_i64($39_1 ^ 327033209, $45_1 ^ 1541459225, 32);
  $29_1 = i64toi32_i32$HIGH_BITS;
  $39_1 = $29_1;
  $9_1 = $50_1;
  $50_1 = $45_1 + 1595750129 | 0;
  $34_1 = $29_1 - (($45_1 >>> 0 < 2699217167) + 1521486533 | 0) | 0;
  $51_1 = __wasm_rotl_i64($79_1 ^ $50_1, $80_1 ^ $34_1, 40);
  $29_1 = $9_1 + $51_1 | 0;
  $59_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $59_1 + $3_1 | 0;
  $15_1 = $29_1;
  $43_1 = $15_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($45_1 ^ $15_1, $39_1 ^ $43_1, 48);
  $45_1 = $50_1 + $10_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $34_1 + $26_1 | 0;
  $12_1 = $45_1;
  $29_1 = $12_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $45_1 = __wasm_rotl_i64($51_1 ^ $12_1, $59_1 ^ $29_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $34_1 = $3_1;
  $72_1 = HEAP32[$0_1 + 44 >> 2];
  $54_1 = $72_1;
  $3_1 = HEAP32[$0_1 + 36 >> 2];
  $70_1 = $3_1;
  $51_1 = $3_1;
  $81_1 = $0_1 + 176 | 0;
  $3_1 = $81_1;
  $82_1 = HEAP32[$3_1 >> 2];
  $94_1 = HEAP32[$52_1 >> 2];
  $57_1 = $94_1;
  $60_1 = $82_1 + $57_1 | 0;
  $83_1 = HEAP32[$3_1 + 4 >> 2];
  $95_1 = HEAP32[$52_1 + 4 >> 2];
  $3_1 = $83_1 + $95_1 | 0;
  $3_1 = $57_1 >>> 0 > $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $39_1 = HEAP32[$0_1 + 32 >> 2];
  $52_1 = $39_1 + $60_1 | 0;
  $3_1 = $3_1 + $51_1 | 0;
  $3_1 = $52_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $59_1 = HEAP32[$0_1 + 40 >> 2];
  $60_1 = $52_1;
  $52_1 = $59_1 + $52_1 | 0;
  $51_1 = $3_1;
  $3_1 = $3_1 + $54_1 | 0;
  $54_1 = $52_1;
  $52_1 = $54_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = __wasm_rotl_i64($1_1 ^ $60_1 ^ -79577749, $2_1 ^ $51_1 ^ 528734635, 32);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $25_1 = $1_1;
  $3_1 = $25_1 + 1013904242 | 0;
  $1_1 = $8_1 - 23791573 | 0;
  $3_1 = $1_1 >>> 0 < 4271175723 ? $3_1 + 1 | 0 : $3_1;
  $51_1 = $1_1;
  $62_1 = $3_1;
  $6_1 = __wasm_rotl_i64($82_1 ^ $1_1, $83_1 ^ $3_1, 40);
  $1_1 = $6_1 + $54_1 | 0;
  $21_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $52_1 | 0;
  $3_1 = $1_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $1_1;
  $57_1 = HEAP32[$0_1 + 96 >> 2];
  $2_1 = $57_1;
  $1_1 = $11_1 + $2_1 | 0;
  $55_1 = $3_1;
  $64_1 = HEAP32[$0_1 + 100 >> 2];
  $3_1 = $3_1 + $64_1 | 0;
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = $1_1;
  $1_1 = $1_1 + $45_1 | 0;
  $3_1 = $3_1 + $34_1 | 0;
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = $1_1;
  $50_1 = HEAP32[$0_1 + 104 >> 2];
  $52_1 = $1_1 + $50_1 | 0;
  $1_1 = $3_1;
  $67_1 = HEAP32[$0_1 + 108 >> 2];
  $3_1 = $3_1 + $67_1 | 0;
  $19_1 = $52_1;
  $58_1 = $50_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $52_1 = $1_1;
  $73_1 = HEAP32[$0_1 + 28 >> 2];
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  $71_1 = $1_1;
  $84_1 = $0_1 + 168 | 0;
  $3_1 = $84_1;
  $85_1 = HEAP32[$3_1 >> 2];
  $77_1 = $0_1 + 136 | 0;
  $96_1 = HEAP32[$77_1 >> 2];
  $18_1 = $96_1;
  $9_1 = $85_1 + $18_1 | 0;
  $86_1 = HEAP32[$3_1 + 4 >> 2];
  $97_1 = HEAP32[$77_1 + 4 >> 2];
  $3_1 = $86_1 + $97_1 | 0;
  $3_1 = $9_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $60_1 = HEAP32[$0_1 + 16 >> 2];
  $18_1 = $9_1;
  $9_1 = $60_1 + $9_1 | 0;
  $3_1 = $1_1 + $3_1 | 0;
  $3_1 = $9_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $54_1 = HEAP32[$0_1 + 24 >> 2];
  $18_1 = $9_1;
  $9_1 = $54_1 + $9_1 | 0;
  $1_1 = $3_1;
  $3_1 = $3_1 + $73_1 | 0;
  $3_1 = $9_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $1_1 = __wasm_rotl_i64($18_1 ^ 725511199, $1_1 ^ -1694144372, 32);
  $18_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $18_1;
  $17_1 = $2_1;
  $2_1 = $9_1;
  $4_1 = $1_1 - 2067093701 | 0;
  $5_1 = $18_1 - (($1_1 >>> 0 < 2067093701) + 1150833018 | 0) | 0;
  $68_1 = __wasm_rotl_i64($85_1 ^ $4_1, $86_1 ^ $5_1, 40);
  $9_1 = $68_1;
  $2_1 = $2_1 + $9_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $3_1 | 0;
  $16_1 = $2_1;
  $18_1 = $16_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $20_1 = __wasm_rotl_i64($1_1 ^ $16_1, $20_1 ^ $18_1, 48);
  $27_1 = i64toi32_i32$HIGH_BITS;
  $1_1 = __wasm_rotl_i64($17_1 ^ $20_1, $27_1 ^ $52_1, 32);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $2_1;
  $24_1 = $1_1;
  $74_1 = HEAP32[$0_1 + 12 >> 2];
  $22_1 = $74_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $75_1 = $1_1;
  $87_1 = $0_1 + 160 | 0;
  $3_1 = $87_1;
  $88_1 = HEAP32[$3_1 >> 2];
  $98_1 = HEAP32[$0_1 + 128 >> 2];
  $23_1 = $98_1;
  $17_1 = $88_1 + $23_1 | 0;
  $89_1 = HEAP32[$3_1 + 4 >> 2];
  $99_1 = HEAP32[$0_1 + 132 >> 2];
  $3_1 = $89_1 + $99_1 | 0;
  $3_1 = $17_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $52_1 = HEAP32[$0_1 >> 2];
  $23_1 = $17_1;
  $17_1 = $52_1 + $17_1 | 0;
  $3_1 = $1_1 + $3_1 | 0;
  $3_1 = $17_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = HEAP32[$0_1 + 8 >> 2];
  $23_1 = $17_1;
  $17_1 = $9_1 + $17_1 | 0;
  $1_1 = $3_1;
  $3_1 = $3_1 + $22_1 | 0;
  $7_1 = $17_1;
  $17_1 = $7_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = __wasm_rotl_i64($23_1 ^ HEAP32[$0_1 + 192 >> 2] ^ -1377402159, $1_1 ^ HEAP32[$0_1 + 196 >> 2] ^ 1359893119, 32);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $23_1 = $1_1;
  $40_1 = $19_1;
  $33_1 = $45_1;
  $3_1 = $23_1 + 1779033703 | 0;
  $1_1 = $22_1 - 205731576 | 0;
  $3_1 = $1_1 >>> 0 < 4089235720 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $7_1;
  $45_1 = $3_1;
  $69_1 = __wasm_rotl_i64($88_1 ^ $1_1, $89_1 ^ $3_1, 40);
  $7_1 = $69_1;
  $19_1 = $13_1 + $7_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $17_1 | 0;
  $31_1 = $19_1;
  $17_1 = $7_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = __wasm_rotl_i64($22_1 ^ $19_1, $23_1 ^ $17_1, 48);
  $22_1 = $1_1 + $14_1 | 0;
  $13_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $45_1 + $13_1 | 0;
  $3_1 = $1_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $22_1;
  $45_1 = $22_1;
  $1_1 = $22_1 + $24_1 | 0;
  $22_1 = $3_1;
  $3_1 = $3_1 + $2_1 | 0;
  $19_1 = $1_1;
  $23_1 = $19_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($33_1 ^ $19_1, $23_1 ^ $34_1, 40);
  $2_1 = $49_1;
  $1_1 = $40_1 + $2_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $58_1 | 0;
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $44_1 = $1_1;
  $2_1 = HEAP32[$0_1 + 72 >> 2];
  $1_1 = $1_1 + $2_1 | 0;
  $7_1 = $3_1;
  $58_1 = HEAP32[$0_1 + 76 >> 2];
  $3_1 = $3_1 + $58_1 | 0;
  $42_1 = $1_1;
  $1_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($8_1 ^ $11_1, $25_1 ^ $55_1, 48);
  $45_1 = $51_1 + $36_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $62_1 + $48_1 | 0;
  $8_1 = $45_1;
  $25_1 = $8_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = __wasm_rotl_i64($6_1 ^ $8_1, $21_1 ^ $25_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $34_1 = $3_1;
  $51_1 = HEAP32[$0_1 + 80 >> 2];
  $55_1 = $51_1 + $16_1 | 0;
  $62_1 = HEAP32[$0_1 + 84 >> 2];
  $3_1 = $62_1 + $18_1 | 0;
  $3_1 = $51_1 >>> 0 > $55_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $55_1;
  $55_1 = $18_1 + $6_1 | 0;
  $3_1 = $3_1 + $34_1 | 0;
  $3_1 = $18_1 >>> 0 > $55_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $55_1;
  $45_1 = HEAP32[$0_1 + 88 >> 2];
  $18_1 = $21_1 + $45_1 | 0;
  $55_1 = $3_1;
  $65_1 = HEAP32[$0_1 + 92 >> 2];
  $3_1 = $3_1 + $65_1 | 0;
  $11_1 = $18_1;
  $18_1 = $11_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $42_1;
  $16_1 = $6_1;
  $6_1 = __wasm_rotl_i64($14_1 ^ $21_1, $13_1 ^ $55_1, 32);
  $55_1 = $6_1 + $12_1 | 0;
  $12_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $29_1 | 0;
  $29_1 = $55_1;
  $13_1 = $34_1;
  $34_1 = $6_1 >>> 0 > $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = __wasm_rotl_i64($16_1 ^ $29_1, $13_1 ^ $34_1, 40);
  $55_1 = $21_1 + $11_1 | 0;
  $11_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $11_1 + $18_1 | 0;
  $42_1 = $55_1;
  $18_1 = $21_1 >>> 0 > $42_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = __wasm_rotl_i64($6_1 ^ $42_1, $12_1 ^ $18_1, 48);
  $55_1 = $29_1 + $40_1 | 0;
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $34_1 + $37_1 | 0;
  $6_1 = $55_1;
  $12_1 = $29_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $34_1 = __wasm_rotl_i64($21_1 ^ $6_1, $11_1 ^ $12_1, 1);
  $29_1 = $33_1 + $34_1 | 0;
  $21_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $1_1 | 0;
  $3_1 = $29_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $29_1;
  $29_1 = HEAP32[$0_1 + 120 >> 2];
  $16_1 = $11_1 + $29_1 | 0;
  $1_1 = $3_1;
  $55_1 = HEAP32[$0_1 + 124 >> 2];
  $3_1 = $3_1 + $55_1 | 0;
  $33_1 = $16_1;
  $16_1 = $16_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $34_1;
  $13_1 = $1_1;
  $22_1 = __wasm_rotl_i64($32_1 ^ $69_1, $22_1 ^ $35_1, 1);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $35_1 = $1_1;
  $34_1 = HEAP32[$0_1 + 112 >> 2];
  $15_1 = $34_1 + $15_1 | 0;
  $69_1 = HEAP32[$0_1 + 116 >> 2];
  $3_1 = $69_1 + $43_1 | 0;
  $3_1 = $15_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $43_1 = $15_1 + $22_1 | 0;
  $3_1 = $1_1 + $3_1 | 0;
  $3_1 = $15_1 >>> 0 > $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $43_1;
  $1_1 = $29_1;
  $43_1 = $15_1 + $29_1 | 0;
  $29_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $32_1 = $43_1;
  $43_1 = $1_1 >>> 0 > $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = __wasm_rotl_i64($15_1 ^ $36_1, $29_1 ^ $48_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $36_1 = $3_1;
  $38_1 = $11_1;
  $3_1 = $5_1 + $27_1 | 0;
  $11_1 = $4_1 + $20_1 | 0;
  $3_1 = $11_1 >>> 0 < $20_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $11_1;
  $20_1 = $4_1 + $15_1 | 0;
  $29_1 = $3_1;
  $3_1 = $36_1 + $3_1 | 0;
  $3_1 = $4_1 >>> 0 > $20_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $22_1 ^ $20_1;
  $22_1 = $3_1;
  $27_1 = __wasm_rotl_i64($5_1, $35_1 ^ $3_1, 40);
  $5_1 = $27_1;
  $11_1 = $5_1 + $32_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $43_1 | 0;
  $32_1 = $11_1;
  $11_1 = $5_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($15_1 ^ $32_1, $36_1 ^ $11_1, 48);
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($38_1 ^ $36_1, $48_1 ^ $13_1, 32);
  $43_1 = i64toi32_i32$HIGH_BITS;
  $46_1 = $43_1;
  $13_1 = $3_1;
  $15_1 = $43_1;
  $5_1 = __wasm_rotl_i64($4_1 ^ $68_1, $29_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $29_1 = $3_1;
  $43_1 = HEAP32[$0_1 + 64 >> 2];
  $4_1 = $43_1 + $31_1 | 0;
  $68_1 = HEAP32[$0_1 + 68 >> 2];
  $3_1 = $68_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $29_1 | 0;
  $3_1 = $4_1 >>> 0 > $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $28_1 = $17_1;
  $4_1 = $2_1 + $17_1 | 0;
  $17_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $31_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $41_1 = $33_1;
  $38_1 = $14_1;
  $33_1 = $5_1;
  $14_1 = __wasm_rotl_i64($10_1 ^ $28_1, $17_1 ^ $26_1, 32);
  $17_1 = $8_1 + $14_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 > $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $29_1;
  $29_1 = $3_1;
  $10_1 = __wasm_rotl_i64($33_1 ^ $17_1, $8_1 ^ $3_1, 40);
  $8_1 = $10_1 + $31_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $26_1 + $4_1 | 0;
  $28_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = __wasm_rotl_i64($14_1 ^ $28_1, $5_1 ^ $8_1, 48);
  $25_1 = $17_1 + $4_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $29_1 + $5_1 | 0;
  $3_1 = $17_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $25_1;
  $29_1 = $25_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $15_1 | 0;
  $3_1 = $25_1 >>> 0 > $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $29_1;
  $15_1 = $21_1;
  $21_1 = $3_1;
  $33_1 = __wasm_rotl_i64($38_1 ^ $25_1, $15_1 ^ $3_1, 40);
  $14_1 = $33_1;
  $29_1 = $41_1 + $14_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $38_1 + $16_1 | 0;
  $3_1 = $14_1 >>> 0 > $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $41_1 = $29_1;
  $29_1 = $45_1 + $29_1 | 0;
  $16_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $15_1 = $29_1;
  $29_1 = $15_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $30_1 = __wasm_rotl_i64($24_1 ^ $44_1, $7_1 ^ $30_1, 48);
  $24_1 = $19_1 + $30_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $23_1 + $44_1 | 0;
  $3_1 = $19_1 >>> 0 > $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $3_1;
  $14_1 = __wasm_rotl_i64($49_1 ^ $24_1, $47_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $49_1 = $3_1;
  $23_1 = $3_1;
  $3_1 = $11_1 + $67_1 | 0;
  $7_1 = $32_1 + $50_1 | 0;
  $3_1 = $7_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $7_1;
  $7_1 = $7_1 + $14_1 | 0;
  $3_1 = $3_1 + $23_1 | 0;
  $3_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $7_1;
  $7_1 = $53_1 + $7_1 | 0;
  $23_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $32_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $15_1;
  $11_1 = __wasm_rotl_i64($4_1 ^ $11_1, $5_1 ^ $23_1, 32);
  $23_1 = $6_1 + $11_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $3_1;
  $14_1 = __wasm_rotl_i64($14_1 ^ $23_1, $49_1 ^ $3_1, 40);
  $12_1 = $14_1 + $32_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $4_1 + $7_1 | 0;
  $32_1 = $12_1;
  $7_1 = $14_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($11_1 ^ $12_1, $15_1 ^ $7_1, 48);
  $12_1 = $23_1 + $49_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $6_1 + $47_1 | 0;
  $3_1 = $12_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $23_1 = $12_1;
  $6_1 = $3_1;
  $12_1 = __wasm_rotl_i64($14_1 ^ $12_1, $4_1 ^ $3_1, 1);
  $14_1 = $56_1 + $12_1 | 0;
  $11_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $11_1 + $29_1 | 0;
  $3_1 = $14_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $61_1 + $14_1 | 0;
  $29_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $56_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $29_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $17_1 ^ $26_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $29_1 = $39_1;
  $39_1 = $29_1 + $42_1 | 0;
  $3_1 = $18_1 + $70_1 | 0;
  $3_1 = $29_1 >>> 0 > $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $39_1;
  $39_1 = $18_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $18_1 >>> 0 > $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $39_1;
  $39_1 = $43_1;
  $18_1 = $10_1 + $39_1 | 0;
  $43_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $26_1 = $18_1;
  $18_1 = $18_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $30_1, $43_1 ^ $44_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $3_1;
  $90_1 = $14_1;
  $31_1 = $26_1;
  $26_1 = $5_1;
  $3_1 = $22_1 + $48_1 | 0;
  $14_1 = $20_1 + $36_1 | 0;
  $3_1 = $14_1 >>> 0 < $20_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $20_1 = $5_1 + $10_1 | 0;
  $43_1 = $3_1;
  $3_1 = $30_1 + $3_1 | 0;
  $3_1 = $20_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $17_1;
  $17_1 = $3_1;
  $26_1 = __wasm_rotl_i64($26_1 ^ $20_1, $14_1 ^ $3_1, 40);
  $14_1 = $26_1;
  $22_1 = $31_1 + $14_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $31_1 + $18_1 | 0;
  $44_1 = $22_1;
  $18_1 = $14_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $30_1 = __wasm_rotl_i64($10_1 ^ $22_1, $30_1 ^ $18_1, 48);
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($90_1 ^ $30_1, $42_1 ^ $4_1, 32);
  $22_1 = i64toi32_i32$HIGH_BITS;
  $36_1 = $22_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $43_1 ^ $35_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $43_1 = $3_1;
  $3_1 = $8_1 + $69_1 | 0;
  $4_1 = $28_1 + $34_1 | 0;
  $3_1 = $4_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $43_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $51_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $62_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = $12_1;
  $27_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $40_1, $8_1 ^ $37_1, 32);
  $8_1 = $24_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $19_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $24_1 = $8_1;
  $10_1 = $43_1;
  $43_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1;
  $19_1 = $8_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $4_1 | 0;
  $27_1 = $19_1;
  $19_1 = $8_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = __wasm_rotl_i64($12_1 ^ $27_1, $5_1 ^ $19_1, 48);
  $8_1 = $24_1 + $4_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $43_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = $8_1;
  $43_1 = $8_1 + $14_1 | 0;
  $24_1 = $3_1;
  $3_1 = $3_1 + $22_1 | 0;
  $22_1 = $43_1;
  $8_1 = $8_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = __wasm_rotl_i64($48_1 ^ $22_1, $8_1 ^ $11_1, 40);
  $12_1 = $48_1;
  $43_1 = $12_1 + $56_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $40_1 + $15_1 | 0;
  $3_1 = $12_1 >>> 0 > $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $43_1;
  $43_1 = $59_1 + $43_1 | 0;
  $12_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $15_1 = $43_1;
  $43_1 = $15_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = __wasm_rotl_i64($13_1 ^ $41_1, $16_1 ^ $46_1, 48);
  $11_1 = $25_1 + $46_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $41_1 | 0;
  $3_1 = $11_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $11_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($33_1 ^ $11_1, $38_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $33_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $18_1 + $75_1 | 0;
  $13_1 = $44_1 + $52_1 | 0;
  $3_1 = $13_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $13_1 >>> 0 > $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $18_1;
  $11_1 = $60_1 + $13_1 | 0;
  $18_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $44_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $15_1;
  $13_1 = __wasm_rotl_i64($4_1 ^ $13_1, $5_1 ^ $18_1, 32);
  $18_1 = $23_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $6_1 + $15_1 | 0;
  $3_1 = $18_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $23_1 = $3_1;
  $4_1 = __wasm_rotl_i64($16_1 ^ $18_1, $33_1 ^ $3_1, 40);
  $6_1 = $4_1 + $44_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $3_1;
  $44_1 = __wasm_rotl_i64($13_1 ^ $6_1, $15_1 ^ $3_1, 48);
  $16_1 = $18_1 + $44_1 | 0;
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $23_1 + $33_1 | 0;
  $3_1 = $16_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $16_1;
  $23_1 = $3_1;
  $16_1 = __wasm_rotl_i64($4_1 ^ $18_1, $5_1 ^ $3_1, 1);
  $15_1 = $38_1 + $16_1 | 0;
  $13_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $13_1 + $43_1 | 0;
  $3_1 = $15_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $60_1 + $15_1 | 0;
  $43_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $38_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $43_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $35_1, $24_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $28_1 = $3_1;
  $3_1 = $7_1 + $72_1 | 0;
  $24_1 = $32_1 + $59_1 | 0;
  $3_1 = $24_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $24_1;
  $24_1 = $7_1 + $10_1 | 0;
  $3_1 = $3_1 + $28_1 | 0;
  $3_1 = $7_1 >>> 0 > $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $24_1;
  $43_1 = $54_1;
  $24_1 = $7_1 + $43_1 | 0;
  $54_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $35_1 = $24_1;
  $24_1 = $24_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = __wasm_rotl_i64($7_1 ^ $46_1, $54_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $32_1 = $3_1;
  $41_1 = $15_1;
  $3_1 = $17_1 + $42_1 | 0;
  $15_1 = $20_1 + $30_1 | 0;
  $3_1 = $15_1 >>> 0 < $20_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $30_1 = $15_1;
  $17_1 = $15_1;
  $20_1 = $17_1 + $7_1 | 0;
  $54_1 = $3_1;
  $3_1 = $32_1 + $3_1 | 0;
  $42_1 = $35_1;
  $35_1 = $20_1;
  $20_1 = $17_1 >>> 0 > $20_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $28_1 = __wasm_rotl_i64($10_1 ^ $35_1, $28_1 ^ $20_1, 40);
  $15_1 = $28_1;
  $17_1 = $42_1 + $15_1 | 0;
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $42_1 + $24_1 | 0;
  $46_1 = $17_1;
  $24_1 = $15_1 >>> 0 > $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = __wasm_rotl_i64($7_1 ^ $17_1, $32_1 ^ $24_1, 48);
  $32_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($41_1 ^ $17_1, $32_1 ^ $5_1, 32);
  $7_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $7_1;
  $15_1 = $3_1;
  $10_1 = __wasm_rotl_i64($26_1 ^ $30_1, $31_1 ^ $54_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $3_1;
  $54_1 = $9_1;
  $9_1 = $9_1 + $27_1 | 0;
  $3_1 = $19_1 + $74_1 | 0;
  $3_1 = $9_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $9_1;
  $9_1 = $9_1 + $10_1 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $3_1 = $9_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = $9_1;
  $19_1 = $57_1 + $9_1 | 0;
  $9_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $27_1 = $19_1;
  $19_1 = $19_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $16_1;
  $7_1 = $10_1;
  $16_1 = __wasm_rotl_i64($26_1 ^ $49_1, $9_1 ^ $47_1, 32);
  $9_1 = $25_1 + $16_1 | 0;
  $10_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $10_1 | 0;
  $3_1 = $9_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $5_1 = __wasm_rotl_i64($7_1 ^ $9_1, $3_1 ^ $5_1, 40);
  $21_1 = $5_1 + $27_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $26_1 + $19_1 | 0;
  $27_1 = $21_1;
  $19_1 = $5_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($16_1 ^ $21_1, $10_1 ^ $19_1, 48);
  $21_1 = $9_1 + $10_1 | 0;
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $30_1 | 0;
  $3_1 = $9_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $21_1;
  $9_1 = $21_1 + $15_1 | 0;
  $7_1 = $3_1;
  $3_1 = $41_1 + $3_1 | 0;
  $3_1 = $9_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $9_1;
  $21_1 = $3_1;
  $49_1 = __wasm_rotl_i64($56_1 ^ $9_1, $3_1 ^ $13_1, 40);
  $16_1 = $49_1;
  $9_1 = $16_1 + $38_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $4_1 | 0;
  $3_1 = $9_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $9_1;
  $9_1 = $61_1 + $9_1 | 0;
  $16_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $4_1 = $9_1;
  $9_1 = $4_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($14_1 ^ $37_1, $12_1 ^ $36_1, 48);
  $12_1 = $22_1 + $36_1 | 0;
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $8_1 + $37_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $8_1 = $3_1;
  $14_1 = __wasm_rotl_i64($48_1 ^ $12_1, $40_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $48_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $24_1 + $55_1 | 0;
  $13_1 = $1_1 + $46_1 | 0;
  $3_1 = $13_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $24_1 = $13_1 + $14_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $13_1 >>> 0 > $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $24_1;
  $12_1 = $50_1 + $13_1 | 0;
  $24_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $40_1 = $12_1;
  $12_1 = $12_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = $4_1;
  $13_1 = __wasm_rotl_i64($13_1 ^ $10_1, $24_1 ^ $30_1, 32);
  $24_1 = $18_1 + $13_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $23_1 + $4_1 | 0;
  $3_1 = $18_1 >>> 0 > $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $24_1;
  $24_1 = $3_1;
  $14_1 = __wasm_rotl_i64($14_1 ^ $18_1, $48_1 ^ $3_1, 40);
  $23_1 = $14_1 + $40_1 | 0;
  $10_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $10_1 + $12_1 | 0;
  $30_1 = $23_1;
  $23_1 = $14_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = __wasm_rotl_i64($13_1 ^ $30_1, $4_1 ^ $23_1, 48);
  $12_1 = $18_1 + $48_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $40_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($14_1 ^ $12_1, $10_1 ^ $3_1, 1);
  $13_1 = $46_1 + $12_1 | 0;
  $14_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $14_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $54_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $46_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $31_1, $7_1 ^ $26_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = $3_1;
  $3_1 = $11_1 + $64_1 | 0;
  $10_1 = $6_1 + $57_1 | 0;
  $3_1 = $10_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $10_1;
  $6_1 = $11_1 + $5_1 | 0;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $6_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $11_1 = $52_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $26_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $6_1 ^ $37_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $31_1 = $3_1;
  $6_1 = $3_1;
  $37_1 = $13_1;
  $3_1 = $20_1 + $32_1 | 0;
  $13_1 = $17_1 + $35_1 | 0;
  $3_1 = $13_1 >>> 0 < $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = $13_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $13_1 >>> 0 > $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $26_1;
  $6_1 = $7_1;
  $7_1 = $3_1;
  $26_1 = __wasm_rotl_i64($17_1 ^ $5_1, $6_1 ^ $3_1, 40);
  $5_1 = $26_1;
  $6_1 = $32_1 + $5_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $11_1 | 0;
  $32_1 = $6_1;
  $6_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = __wasm_rotl_i64($10_1 ^ $32_1, $31_1 ^ $6_1, 48);
  $36_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($37_1 ^ $31_1, $36_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $37_1 = $9_1;
  $11_1 = $3_1;
  $5_1 = __wasm_rotl_i64($13_1 ^ $28_1, $20_1 ^ $42_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $19_1 + $65_1 | 0;
  $13_1 = $45_1 + $27_1 | 0;
  $3_1 = $13_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $13_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $13_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $19_1;
  $13_1 = $39_1 + $10_1 | 0;
  $19_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $28_1 = $13_1;
  $13_1 = $13_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $12_1;
  $27_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $44_1, $19_1 ^ $33_1, 32);
  $19_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $8_1 + $5_1 | 0;
  $3_1 = $19_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $19_1;
  $8_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $19_1, $8_1 ^ $3_1, 40);
  $8_1 = $10_1;
  $19_1 = $8_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $13_1 | 0;
  $27_1 = $19_1;
  $19_1 = $8_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $27_1, $5_1 ^ $19_1, 48);
  $8_1 = $22_1 + $5_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $44_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $42_1 = $8_1;
  $22_1 = $8_1 + $11_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $8_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $3_1;
  $33_1 = __wasm_rotl_i64($56_1 ^ $22_1, $3_1 ^ $14_1, 40);
  $12_1 = $33_1;
  $9_1 = $12_1 + $46_1 | 0;
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $46_1 + $4_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $9_1;
  $9_1 = $50_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $4_1 = $9_1;
  $9_1 = $4_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = __wasm_rotl_i64($15_1 ^ $38_1, $16_1 ^ $41_1, 48);
  $16_1 = $25_1 + $38_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $41_1 | 0;
  $3_1 = $16_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $16_1;
  $21_1 = $3_1;
  $14_1 = __wasm_rotl_i64($49_1 ^ $16_1, $47_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $15_1 = $3_1;
  $3_1 = $6_1 + $73_1 | 0;
  $13_1 = $43_1 + $32_1 | 0;
  $3_1 = $13_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $14_1 | 0;
  $3_1 = $3_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $16_1 = $53_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $32_1 = $16_1;
  $16_1 = $16_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $90_1 = $4_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $44_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $4_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $14_1 = __wasm_rotl_i64($14_1 ^ $6_1, $15_1 ^ $3_1, 40);
  $6_1 = $14_1 + $32_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $15_1 + $16_1 | 0;
  $32_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($13_1 ^ $32_1, $4_1 ^ $6_1, 48);
  $16_1 = $18_1 + $49_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $47_1 | 0;
  $3_1 = $16_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $16_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($14_1 ^ $18_1, $15_1 ^ $3_1, 1);
  $13_1 = $90_1 + $16_1 | 0;
  $14_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $14_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $57_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $44_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $42_1, $20_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $23_1 + $58_1 | 0;
  $4_1 = $2_1 + $30_1 | 0;
  $3_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $23_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $23_1;
  $4_1 = $29_1 + $10_1 | 0;
  $23_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $38_1, $23_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $3_1;
  $23_1 = $3_1;
  $38_1 = $13_1;
  $42_1 = $28_1;
  $28_1 = $5_1;
  $3_1 = $7_1 + $36_1 | 0;
  $13_1 = $17_1 + $31_1 | 0;
  $3_1 = $13_1 >>> 0 < $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $7_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $23_1 | 0;
  $23_1 = $7_1;
  $13_1 = $20_1;
  $20_1 = $7_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $28_1 = __wasm_rotl_i64($28_1 ^ $7_1, $13_1 ^ $20_1, 40);
  $13_1 = $28_1;
  $7_1 = $42_1 + $13_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $31_1 + $4_1 | 0;
  $42_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $30_1 = __wasm_rotl_i64($10_1 ^ $42_1, $30_1 ^ $7_1, 48);
  $36_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($38_1 ^ $30_1, $36_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $38_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $26_1, $17_1 ^ $35_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $19_1 + $62_1 | 0;
  $4_1 = $27_1 + $51_1 | 0;
  $3_1 = $4_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $19_1;
  $4_1 = $34_1 + $10_1 | 0;
  $19_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $41_1 = $44_1;
  $44_1 = $16_1;
  $27_1 = $5_1;
  $16_1 = __wasm_rotl_i64($10_1 ^ $48_1, $19_1 ^ $40_1, 32);
  $19_1 = $25_1 + $16_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $19_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $19_1, $10_1 ^ $3_1, 40);
  $25_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $25_1;
  $25_1 = $10_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($16_1 ^ $26_1, $5_1 ^ $25_1, 48);
  $21_1 = $19_1 + $5_1 | 0;
  $27_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $27_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = $21_1;
  $19_1 = $21_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $44_1 = __wasm_rotl_i64($44_1 ^ $19_1, $3_1 ^ $14_1, 40);
  $16_1 = $44_1;
  $9_1 = $41_1 + $16_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $48_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $9_1;
  $9_1 = $29_1 + $9_1 | 0;
  $16_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = __wasm_rotl_i64($11_1 ^ $56_1, $12_1 ^ $37_1, 48);
  $12_1 = $22_1 + $37_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $8_1 + $41_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $8_1 = $3_1;
  $11_1 = __wasm_rotl_i64($33_1 ^ $12_1, $46_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $33_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $65_1 | 0;
  $14_1 = $45_1 + $42_1 | 0;
  $3_1 = $14_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $14_1 + $11_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $7_1;
  $12_1 = $34_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $42_1 = $12_1;
  $12_1 = $12_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = $15_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $7_1 ^ $27_1, 32);
  $7_1 = $18_1 + $14_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($11_1 ^ $7_1, $33_1 ^ $3_1, 40);
  $7_1 = $11_1 + $42_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $12_1 | 0;
  $27_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $42_1 = __wasm_rotl_i64($14_1 ^ $27_1, $15_1 ^ $7_1, 48);
  $12_1 = $18_1 + $42_1 | 0;
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $33_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($11_1 ^ $12_1, $5_1 ^ $3_1, 1);
  $14_1 = $46_1 + $12_1 | 0;
  $11_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $11_1 + $9_1 | 0;
  $3_1 = $14_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $52_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $46_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $35_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $73_1 | 0;
  $4_1 = $43_1 + $32_1 | 0;
  $3_1 = $4_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $54_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $35_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $37_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $32_1 = $3_1;
  $6_1 = $3_1;
  $41_1 = $14_1;
  $37_1 = $5_1;
  $3_1 = $20_1 + $36_1 | 0;
  $14_1 = $23_1 + $30_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $30_1 = __wasm_rotl_i64($37_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $14_1 = $30_1;
  $6_1 = $14_1 + $35_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $4_1 | 0;
  $36_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = __wasm_rotl_i64($10_1 ^ $36_1, $32_1 ^ $6_1, 48);
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($41_1 ^ $32_1, $37_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $28_1, $20_1 ^ $31_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $25_1 + $66_1 | 0;
  $4_1 = $26_1 + $61_1 | 0;
  $3_1 = $4_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $25_1;
  $4_1 = $2_1 + $10_1 | 0;
  $25_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $12_1;
  $28_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $49_1, $25_1 ^ $47_1, 32);
  $25_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $8_1 + $5_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $25_1;
  $8_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($28_1 ^ $22_1, $8_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $25_1 = $22_1 + $5_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $28_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $25_1;
  $22_1 = $25_1 + $14_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $22_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $49_1 = __wasm_rotl_i64($56_1 ^ $22_1, $3_1 ^ $11_1, 40);
  $12_1 = $49_1;
  $9_1 = $12_1 + $46_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = $9_1;
  $9_1 = $60_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = __wasm_rotl_i64($13_1 ^ $40_1, $16_1 ^ $38_1, 48);
  $11_1 = $19_1 + $40_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $38_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $11_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($44_1 ^ $11_1, $48_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $44_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $72_1 | 0;
  $13_1 = $36_1 + $59_1 | 0;
  $3_1 = $13_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $11_1 = $51_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $62_1 + $3_1 | 0;
  $36_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = $15_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $28_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $44_1 ^ $3_1, 40);
  $6_1 = $16_1 + $36_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $28_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $44_1 = __wasm_rotl_i64($13_1 ^ $28_1, $15_1 ^ $6_1, 48);
  $11_1 = $18_1 + $44_1 | 0;
  $36_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $36_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $13_1 = $48_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $29_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $48_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $4_1 ^ $20_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $55_1 | 0;
  $4_1 = $1_1 + $27_1 | 0;
  $3_1 = $4_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $39_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $40_1, $7_1 ^ $38_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $31_1 = $3_1;
  $7_1 = $3_1;
  $38_1 = $13_1;
  $40_1 = $27_1;
  $27_1 = $5_1;
  $3_1 = $17_1 + $37_1 | 0;
  $13_1 = $23_1 + $32_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $13_1 = $27_1;
  $7_1 = $40_1 + $13_1 | 0;
  $32_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $32_1 + $4_1 | 0;
  $40_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = __wasm_rotl_i64($10_1 ^ $40_1, $31_1 ^ $7_1, 48);
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($38_1 ^ $31_1, $37_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $38_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $30_1, $17_1 ^ $35_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $71_1 | 0;
  $4_1 = $26_1 + $60_1 | 0;
  $3_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $53_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $11_1;
  $30_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $42_1, $8_1 ^ $33_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($30_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $21_1 = $19_1 + $5_1 | 0;
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $30_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = $21_1;
  $19_1 = $21_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $42_1 = __wasm_rotl_i64($56_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $11_1 = $42_1;
  $9_1 = $11_1 + $48_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $48_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $9_1;
  $9_1 = $53_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = __wasm_rotl_i64($14_1 ^ $46_1, $12_1 ^ $41_1, 48);
  $12_1 = $22_1 + $46_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $41_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($49_1 ^ $12_1, $47_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $49_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $62_1 | 0;
  $14_1 = $51_1 + $40_1 | 0;
  $3_1 = $14_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $7_1;
  $12_1 = $1_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $47_1 = $12_1;
  $12_1 = $1_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $15_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $7_1 ^ $30_1, 32);
  $7_1 = $18_1 + $14_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $49_1 ^ $3_1, 40);
  $7_1 = $16_1 + $47_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $12_1 | 0;
  $30_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($14_1 ^ $30_1, $15_1 ^ $7_1, 48);
  $12_1 = $18_1 + $49_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $47_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($16_1 ^ $12_1, $5_1 ^ $3_1, 1);
  $14_1 = $40_1 + $12_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $14_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $39_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $40_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $35_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $72_1 | 0;
  $4_1 = $28_1 + $59_1 | 0;
  $3_1 = $4_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $61_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $46_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $35_1 = $3_1;
  $6_1 = $3_1;
  $56_1 = $14_1;
  $41_1 = $28_1;
  $28_1 = $5_1;
  $3_1 = $20_1 + $37_1 | 0;
  $14_1 = $23_1 + $31_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $28_1 = __wasm_rotl_i64($28_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $14_1 = $28_1;
  $6_1 = $41_1 + $14_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $31_1 + $4_1 | 0;
  $37_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = __wasm_rotl_i64($10_1 ^ $37_1, $35_1 ^ $6_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($56_1 ^ $35_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $20_1 ^ $32_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $58_1 | 0;
  $4_1 = $2_1 + $26_1 | 0;
  $3_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $52_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $12_1;
  $27_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $44_1, $8_1 ^ $36_1, 32);
  $8_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $10_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $25_1 = $22_1 + $5_1 | 0;
  $27_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $27_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $25_1;
  $22_1 = $25_1 + $14_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $22_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $44_1 = __wasm_rotl_i64($56_1 ^ $22_1, $3_1 ^ $16_1, 40);
  $12_1 = $44_1;
  $9_1 = $12_1 + $40_1 | 0;
  $36_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $36_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $9_1;
  $9_1 = $52_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = __wasm_rotl_i64($13_1 ^ $33_1, $11_1 ^ $38_1, 48);
  $11_1 = $19_1 + $33_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $38_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $11_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($42_1 ^ $11_1, $48_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $42_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $65_1 | 0;
  $13_1 = $45_1 + $37_1 | 0;
  $3_1 = $13_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $11_1 = $57_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $48_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $15_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $27_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $42_1 ^ $3_1, 40);
  $6_1 = $16_1 + $48_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $27_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $42_1 = __wasm_rotl_i64($13_1 ^ $27_1, $15_1 ^ $6_1, 48);
  $11_1 = $18_1 + $42_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $48_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $13_1 = $37_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $45_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $37_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $32_1, $4_1 ^ $20_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $73_1 | 0;
  $4_1 = $43_1 + $30_1 | 0;
  $3_1 = $4_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $50_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $30_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $33_1, $7_1 ^ $38_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $32_1 = $3_1;
  $7_1 = $3_1;
  $38_1 = $13_1;
  $33_1 = $30_1;
  $30_1 = $5_1;
  $3_1 = $17_1 + $46_1 | 0;
  $13_1 = $23_1 + $35_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $30_1 = __wasm_rotl_i64($30_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $13_1 = $30_1;
  $7_1 = $33_1 + $13_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $4_1 | 0;
  $33_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = __wasm_rotl_i64($10_1 ^ $33_1, $32_1 ^ $7_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($38_1 ^ $32_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $38_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $28_1, $17_1 ^ $31_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $69_1 | 0;
  $4_1 = $26_1 + $34_1 | 0;
  $3_1 = $4_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $54_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $11_1;
  $28_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $49_1, $8_1 ^ $47_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($28_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $21_1 = $19_1 + $5_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $28_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $21_1;
  $19_1 = $21_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $49_1 = __wasm_rotl_i64($56_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $11_1 = $49_1;
  $9_1 = $11_1 + $37_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $9_1;
  $9_1 = $1_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $1_1 >>> 0 > $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = __wasm_rotl_i64($14_1 ^ $40_1, $12_1 ^ $41_1, 48);
  $12_1 = $22_1 + $40_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $41_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($44_1 ^ $12_1, $36_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $44_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $68_1 | 0;
  $14_1 = $39_1 + $33_1 | 0;
  $3_1 = $14_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $7_1;
  $12_1 = $43_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $36_1 = $12_1;
  $12_1 = $12_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $15_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $7_1 ^ $28_1, 32);
  $7_1 = $18_1 + $14_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $44_1 ^ $3_1, 40);
  $7_1 = $16_1 + $36_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $12_1 | 0;
  $28_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $44_1 = __wasm_rotl_i64($14_1 ^ $28_1, $15_1 ^ $7_1, 48);
  $12_1 = $18_1 + $44_1 | 0;
  $36_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $36_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($16_1 ^ $12_1, $5_1 ^ $3_1, 1);
  $14_1 = $33_1 + $12_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $14_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $34_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $33_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $63_1 | 0;
  $4_1 = $27_1 + $53_1 | 0;
  $3_1 = $4_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $51_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $62_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $40_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $31_1 = $3_1;
  $6_1 = $3_1;
  $41_1 = $14_1;
  $40_1 = $27_1;
  $27_1 = $5_1;
  $3_1 = $20_1 + $46_1 | 0;
  $14_1 = $23_1 + $32_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $14_1 = $27_1;
  $6_1 = $40_1 + $14_1 | 0;
  $32_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $32_1 + $4_1 | 0;
  $40_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = __wasm_rotl_i64($10_1 ^ $40_1, $31_1 ^ $6_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($41_1 ^ $31_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $30_1, $20_1 ^ $35_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $71_1 | 0;
  $4_1 = $26_1 + $60_1 | 0;
  $3_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $57_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $12_1;
  $30_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $42_1, $8_1 ^ $48_1, 32);
  $8_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $10_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($30_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $25_1 = $22_1 + $5_1 | 0;
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $30_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = $25_1;
  $22_1 = $25_1 + $14_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $22_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $42_1 = __wasm_rotl_i64($56_1 ^ $22_1, $3_1 ^ $16_1, 40);
  $12_1 = $42_1;
  $9_1 = $12_1 + $33_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $48_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $9_1;
  $9_1 = $34_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = __wasm_rotl_i64($13_1 ^ $37_1, $11_1 ^ $38_1, 48);
  $11_1 = $19_1 + $37_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $38_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $11_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($49_1 ^ $11_1, $47_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $49_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $66_1 | 0;
  $13_1 = $40_1 + $61_1 | 0;
  $3_1 = $13_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $11_1 = $59_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $47_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $15_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $30_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $49_1 ^ $3_1, 40);
  $6_1 = $16_1 + $47_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $30_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($13_1 ^ $30_1, $15_1 ^ $6_1, 48);
  $11_1 = $18_1 + $49_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $47_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $13_1 = $40_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $50_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $40_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $35_1, $4_1 ^ $20_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $74_1 | 0;
  $4_1 = $28_1 + $54_1 | 0;
  $3_1 = $4_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $2_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $37_1, $7_1 ^ $38_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $35_1 = $3_1;
  $7_1 = $3_1;
  $38_1 = $13_1;
  $37_1 = $28_1;
  $28_1 = $5_1;
  $3_1 = $17_1 + $46_1 | 0;
  $13_1 = $23_1 + $31_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $28_1 = __wasm_rotl_i64($28_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $13_1 = $28_1;
  $7_1 = $37_1 + $13_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $31_1 + $4_1 | 0;
  $37_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = __wasm_rotl_i64($10_1 ^ $37_1, $35_1 ^ $7_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($38_1 ^ $35_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $38_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $17_1 ^ $32_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $70_1 | 0;
  $4_1 = $29_1 + $26_1 | 0;
  $3_1 = $4_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $50_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $11_1;
  $27_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $44_1, $8_1 ^ $36_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $26_1 + $4_1 | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $4_1 = __wasm_rotl_i64($11_1 ^ $8_1, $5_1 ^ $3_1, 48);
  $11_1 = $19_1 + $4_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $5_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $27_1 = $11_1;
  $19_1 = $11_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $3_1;
  $32_1 = __wasm_rotl_i64($32_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $16_1 = $32_1;
  $9_1 = $16_1 + $40_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $44_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = $9_1;
  $9_1 = $2_1 + $9_1 | 0;
  $16_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $40_1 = $9_1;
  $9_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = __wasm_rotl_i64($14_1 ^ $33_1, $12_1 ^ $41_1, 48);
  $12_1 = $22_1 + $33_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $41_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $25_1 = $3_1;
  $14_1 = __wasm_rotl_i64($42_1 ^ $12_1, $48_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $42_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $70_1 | 0;
  $15_1 = $29_1 + $37_1 | 0;
  $3_1 = $15_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $15_1 + $14_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $7_1;
  $12_1 = $51_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $62_1 + $3_1 | 0;
  $48_1 = $12_1;
  $12_1 = $12_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $40_1;
  $15_1 = __wasm_rotl_i64($4_1 ^ $15_1, $5_1 ^ $7_1, 32);
  $7_1 = $18_1 + $15_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $4_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $14_1 = __wasm_rotl_i64($14_1 ^ $7_1, $42_1 ^ $3_1, 40);
  $7_1 = $14_1 + $48_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $12_1 | 0;
  $42_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = __wasm_rotl_i64($15_1 ^ $42_1, $4_1 ^ $7_1, 48);
  $12_1 = $18_1 + $48_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $40_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($14_1 ^ $12_1, $5_1 ^ $3_1, 1);
  $15_1 = $37_1 + $12_1 | 0;
  $14_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $14_1 + $9_1 | 0;
  $3_1 = $12_1 >>> 0 > $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $60_1 + $15_1 | 0;
  $9_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $37_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $27_1, $17_1 ^ $26_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $74_1 | 0;
  $5_1 = $30_1 + $54_1 | 0;
  $3_1 = $5_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $5_1 + $10_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = $6_1;
  $5_1 = $1_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $27_1 = $5_1;
  $5_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = __wasm_rotl_i64($26_1 ^ $33_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $3_1;
  $6_1 = $3_1;
  $41_1 = $15_1;
  $33_1 = $27_1;
  $27_1 = $10_1;
  $3_1 = $20_1 + $46_1 | 0;
  $15_1 = $23_1 + $35_1 | 0;
  $3_1 = $15_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $15_1;
  $23_1 = $10_1 + $26_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $10_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $15_1 = $27_1;
  $6_1 = $33_1 + $15_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $35_1 + $5_1 | 0;
  $33_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = __wasm_rotl_i64($26_1 ^ $33_1, $30_1 ^ $6_1, 48);
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($41_1 ^ $26_1, $30_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $46_1 = $9_1;
  $15_1 = $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $28_1, $20_1 ^ $31_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $21_1 + $64_1 | 0;
  $10_1 = $8_1 + $57_1 | 0;
  $3_1 = $10_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $10_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $21_1 = $59_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $28_1 = $21_1;
  $21_1 = $21_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $41_1 = $37_1;
  $37_1 = $12_1;
  $31_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $49_1, $8_1 ^ $47_1, 32);
  $8_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $10_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($31_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $21_1 | 0;
  $31_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $31_1, $5_1 ^ $8_1, 48);
  $25_1 = $22_1 + $5_1 | 0;
  $49_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $49_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = $25_1;
  $22_1 = $25_1 + $15_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $22_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $37_1 = __wasm_rotl_i64($37_1 ^ $22_1, $3_1 ^ $14_1, 40);
  $12_1 = $37_1;
  $9_1 = $41_1 + $12_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $41_1 + $4_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $9_1;
  $9_1 = $57_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $4_1 = $9_1;
  $9_1 = $4_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($13_1 ^ $36_1, $16_1 ^ $38_1, 48);
  $21_1 = $19_1 + $36_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $11_1 + $38_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $21_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($32_1 ^ $19_1, $44_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $13_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $63_1 | 0;
  $14_1 = $33_1 + $53_1 | 0;
  $3_1 = $14_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $6_1;
  $11_1 = $43_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $32_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $4_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $6_1 ^ $49_1, 32);
  $6_1 = $18_1 + $14_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $4_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $13_1 ^ $3_1, 40);
  $6_1 = $16_1 + $32_1 | 0;
  $13_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $13_1 + $11_1 | 0;
  $32_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($14_1 ^ $32_1, $4_1 ^ $6_1, 48);
  $11_1 = $18_1 + $49_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $44_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $13_1 ^ $3_1, 1);
  $14_1 = $33_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $54_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $33_1 = $13_1;
  $13_1 = $13_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $47_1, $20_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $68_1 | 0;
  $4_1 = $39_1 + $42_1 | 0;
  $3_1 = $4_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $45_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $7_1 ^ $38_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $47_1 = $3_1;
  $7_1 = $3_1;
  $36_1 = $14_1;
  $42_1 = $5_1;
  $3_1 = $17_1 + $30_1 | 0;
  $14_1 = $23_1 + $26_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $26_1 = __wasm_rotl_i64($42_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $14_1 = $26_1;
  $7_1 = $14_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $4_1 | 0;
  $30_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = __wasm_rotl_i64($10_1 ^ $30_1, $47_1 ^ $7_1, 48);
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($36_1 ^ $47_1, $42_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $36_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $17_1 ^ $35_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $75_1 | 0;
  $4_1 = $31_1 + $52_1 | 0;
  $3_1 = $4_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $61_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $11_1;
  $31_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $48_1, $8_1 ^ $40_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($31_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $27_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $27_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $27_1, $5_1 ^ $8_1, 48);
  $21_1 = $19_1 + $5_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $35_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $21_1;
  $19_1 = $21_1 + $14_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $48_1 = __wasm_rotl_i64($38_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $11_1 = $48_1;
  $9_1 = $11_1 + $33_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $40_1 + $13_1 | 0;
  $3_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $9_1;
  $9_1 = $39_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $38_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = __wasm_rotl_i64($15_1 ^ $56_1, $12_1 ^ $46_1, 48);
  $12_1 = $22_1 + $46_1 | 0;
  $56_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $56_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($37_1 ^ $12_1, $41_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $15_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $73_1 | 0;
  $13_1 = $43_1 + $30_1 | 0;
  $3_1 = $13_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $7_1;
  $12_1 = $2_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $30_1 = $12_1;
  $12_1 = $2_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $7_1 ^ $35_1, 32);
  $7_1 = $18_1 + $13_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $5_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $15_1 ^ $3_1, 40);
  $7_1 = $16_1 + $30_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $15_1 + $12_1 | 0;
  $30_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = __wasm_rotl_i64($13_1 ^ $30_1, $5_1 ^ $7_1, 48);
  $12_1 = $18_1 + $35_1 | 0;
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $37_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($16_1 ^ $12_1, $15_1 ^ $3_1, 1);
  $13_1 = $12_1 + $38_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $53_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $38_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $66_1 | 0;
  $4_1 = $32_1 + $61_1 | 0;
  $3_1 = $4_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $34_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $31_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $46_1, $6_1 ^ $56_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $32_1 = $3_1;
  $6_1 = $3_1;
  $56_1 = $13_1;
  $41_1 = $31_1;
  $31_1 = $5_1;
  $3_1 = $20_1 + $42_1 | 0;
  $13_1 = $23_1 + $47_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $31_1 = __wasm_rotl_i64($31_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $13_1 = $31_1;
  $6_1 = $41_1 + $13_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $4_1 | 0;
  $42_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = __wasm_rotl_i64($10_1 ^ $42_1, $32_1 ^ $6_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($56_1 ^ $32_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $26_1, $20_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $67_1 | 0;
  $4_1 = $27_1 + $50_1 | 0;
  $3_1 = $4_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $45_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $12_1;
  $27_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $49_1, $8_1 ^ $44_1, 32);
  $8_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $10_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($12_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $25_1 = $22_1 + $5_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $28_1 | 0;
  $3_1 = $22_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $27_1 = $25_1;
  $22_1 = $25_1 + $13_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $22_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $49_1 = __wasm_rotl_i64($56_1 ^ $22_1, $3_1 ^ $16_1, 40);
  $12_1 = $49_1;
  $9_1 = $12_1 + $38_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $44_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $9_1;
  $9_1 = $45_1 + $9_1 | 0;
  $12_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($14_1 ^ $33_1, $11_1 ^ $36_1, 48);
  $11_1 = $19_1 + $36_1 | 0;
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $33_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $11_1;
  $21_1 = $3_1;
  $16_1 = __wasm_rotl_i64($48_1 ^ $11_1, $40_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $48_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $55_1 | 0;
  $14_1 = $1_1 + $42_1 | 0;
  $3_1 = $14_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $6_1;
  $11_1 = $29_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $42_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $15_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $6_1 ^ $28_1, 32);
  $6_1 = $18_1 + $14_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $48_1 ^ $3_1, 40);
  $6_1 = $16_1 + $42_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $28_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $42_1 = __wasm_rotl_i64($14_1 ^ $28_1, $15_1 ^ $6_1, 48);
  $11_1 = $18_1 + $42_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $48_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $14_1 = $40_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $43_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $40_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $27_1, $4_1 ^ $20_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $71_1 | 0;
  $4_1 = $30_1 + $60_1 | 0;
  $3_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $51_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $62_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $7_1 ^ $33_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $3_1;
  $7_1 = $3_1;
  $56_1 = $14_1;
  $33_1 = $27_1;
  $27_1 = $5_1;
  $3_1 = $17_1 + $46_1 | 0;
  $14_1 = $23_1 + $32_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $14_1 = $27_1;
  $7_1 = $33_1 + $14_1 | 0;
  $32_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $32_1 + $4_1 | 0;
  $36_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $30_1 = __wasm_rotl_i64($10_1 ^ $36_1, $30_1 ^ $7_1, 48);
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($56_1 ^ $30_1, $33_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $46_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $31_1, $17_1 ^ $47_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $72_1 | 0;
  $4_1 = $26_1 + $59_1 | 0;
  $3_1 = $4_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $52_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = $11_1;
  $31_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $35_1, $8_1 ^ $37_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($31_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $21_1 = $19_1 + $5_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $35_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $21_1;
  $19_1 = $21_1 + $14_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $3_1;
  $47_1 = __wasm_rotl_i64($47_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $11_1 = $47_1;
  $9_1 = $11_1 + $40_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $40_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $9_1;
  $9_1 = $54_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = __wasm_rotl_i64($13_1 ^ $38_1, $12_1 ^ $41_1, 48);
  $12_1 = $22_1 + $38_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $41_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $12_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($49_1 ^ $12_1, $44_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $49_1 = $3_1;
  $12_1 = $3_1;
  $3_1 = $7_1 + $75_1 | 0;
  $13_1 = $36_1 + $52_1 | 0;
  $3_1 = $13_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $12_1 | 0;
  $3_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $7_1;
  $12_1 = $39_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $44_1 = $12_1;
  $12_1 = $12_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = $15_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $7_1 ^ $35_1, 32);
  $7_1 = $18_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $49_1 ^ $3_1, 40);
  $7_1 = $16_1 + $44_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $12_1 | 0;
  $35_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($13_1 ^ $35_1, $15_1 ^ $7_1, 48);
  $12_1 = $18_1 + $49_1 | 0;
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $44_1 | 0;
  $3_1 = $12_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $12_1;
  $24_1 = $3_1;
  $12_1 = __wasm_rotl_i64($16_1 ^ $12_1, $5_1 ^ $3_1, 1);
  $13_1 = $36_1 + $12_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $29_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $36_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $69_1 | 0;
  $4_1 = $28_1 + $34_1 | 0;
  $3_1 = $4_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $2_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $38_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $31_1 = $3_1;
  $6_1 = $3_1;
  $41_1 = $13_1;
  $38_1 = $28_1;
  $28_1 = $5_1;
  $3_1 = $20_1 + $33_1 | 0;
  $13_1 = $23_1 + $30_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $28_1 = __wasm_rotl_i64($28_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $13_1 = $28_1;
  $6_1 = $38_1 + $13_1 | 0;
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $30_1 + $4_1 | 0;
  $33_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = __wasm_rotl_i64($10_1 ^ $33_1, $31_1 ^ $6_1, 48);
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($41_1 ^ $31_1, $38_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $20_1 ^ $32_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $63_1 | 0;
  $4_1 = $26_1 + $53_1 | 0;
  $3_1 = $4_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $1_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $12_1;
  $27_1 = $5_1;
  $12_1 = __wasm_rotl_i64($10_1 ^ $42_1, $8_1 ^ $48_1, 32);
  $8_1 = $22_1 + $12_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $10_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $26_1 + $4_1 | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $4_1 = __wasm_rotl_i64($12_1 ^ $8_1, $5_1 ^ $3_1, 48);
  $12_1 = $22_1 + $4_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $5_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $27_1 = $12_1;
  $22_1 = $12_1 + $13_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $12_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $12_1 = $3_1;
  $32_1 = __wasm_rotl_i64($32_1 ^ $22_1, $3_1 ^ $16_1, 40);
  $16_1 = $32_1;
  $9_1 = $16_1 + $36_1 | 0;
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $42_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = $9_1;
  $9_1 = $61_1 + $9_1 | 0;
  $16_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $48_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = __wasm_rotl_i64($14_1 ^ $37_1, $11_1 ^ $46_1, 48);
  $11_1 = $19_1 + $37_1 | 0;
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $46_1 | 0;
  $3_1 = $11_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $11_1;
  $21_1 = $3_1;
  $14_1 = __wasm_rotl_i64($47_1 ^ $11_1, $40_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $47_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $6_1 + $67_1 | 0;
  $15_1 = $50_1 + $33_1 | 0;
  $3_1 = $15_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $15_1 + $14_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $6_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $6_1;
  $11_1 = $61_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $40_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $33_1 = $48_1;
  $15_1 = __wasm_rotl_i64($4_1 ^ $15_1, $5_1 ^ $6_1, 32);
  $6_1 = $18_1 + $15_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $4_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $14_1 = __wasm_rotl_i64($14_1 ^ $6_1, $47_1 ^ $3_1, 40);
  $6_1 = $14_1 + $40_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $47_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $48_1 = __wasm_rotl_i64($15_1 ^ $47_1, $4_1 ^ $6_1, 48);
  $11_1 = $18_1 + $48_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $40_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($14_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $15_1 = $33_1 + $11_1 | 0;
  $14_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $14_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $53_1 + $15_1 | 0;
  $9_1 = $3_1;
  $3_1 = $63_1 + $3_1 | 0;
  $33_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $27_1, $20_1 ^ $26_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $62_1 | 0;
  $5_1 = $35_1 + $51_1 | 0;
  $3_1 = $5_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $5_1 + $10_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = $7_1;
  $5_1 = $59_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $27_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = __wasm_rotl_i64($26_1 ^ $37_1, $7_1 ^ $46_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $35_1 = $3_1;
  $7_1 = $3_1;
  $46_1 = $15_1;
  $37_1 = $27_1;
  $27_1 = $10_1;
  $3_1 = $17_1 + $38_1 | 0;
  $15_1 = $23_1 + $31_1 | 0;
  $3_1 = $15_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $15_1;
  $23_1 = $10_1 + $26_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $10_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $15_1 = $27_1;
  $7_1 = $37_1 + $15_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $31_1 + $5_1 | 0;
  $37_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = __wasm_rotl_i64($26_1 ^ $37_1, $35_1 ^ $7_1, 48);
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($46_1 ^ $26_1, $35_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $46_1 = $9_1;
  $15_1 = $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $28_1, $17_1 ^ $30_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $25_1 + $64_1 | 0;
  $10_1 = $8_1 + $57_1 | 0;
  $3_1 = $10_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $10_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $25_1 = $60_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $28_1 = $25_1;
  $25_1 = $25_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $33_1;
  $33_1 = $11_1;
  $30_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $49_1, $8_1 ^ $44_1, 32);
  $8_1 = $19_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $21_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($30_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $25_1 | 0;
  $30_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $30_1, $5_1 ^ $8_1, 48);
  $25_1 = $19_1 + $5_1 | 0;
  $49_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $49_1 | 0;
  $3_1 = $19_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $44_1 = $25_1;
  $19_1 = $25_1 + $15_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $33_1 = __wasm_rotl_i64($33_1 ^ $19_1, $3_1 ^ $14_1, 40);
  $21_1 = $33_1;
  $9_1 = $38_1 + $21_1 | 0;
  $38_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $38_1 + $4_1 | 0;
  $3_1 = $9_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $9_1;
  $9_1 = $43_1 + $9_1 | 0;
  $21_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $4_1 = $9_1;
  $9_1 = $4_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($13_1 ^ $36_1, $16_1 ^ $41_1, 48);
  $11_1 = $22_1 + $36_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $41_1 | 0;
  $3_1 = $11_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $11_1;
  $12_1 = $3_1;
  $16_1 = __wasm_rotl_i64($32_1 ^ $11_1, $42_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $13_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $7_1 + $74_1 | 0;
  $14_1 = $54_1 + $37_1 | 0;
  $3_1 = $14_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $7_1;
  $11_1 = $59_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $32_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $4_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $7_1 ^ $49_1, 32);
  $7_1 = $18_1 + $14_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $4_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $13_1 ^ $3_1, 40);
  $7_1 = $16_1 + $32_1 | 0;
  $13_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $13_1 + $11_1 | 0;
  $32_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($14_1 ^ $32_1, $4_1 ^ $7_1, 48);
  $11_1 = $18_1 + $49_1 | 0;
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $42_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $13_1 ^ $3_1, 1);
  $14_1 = $37_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $57_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $37_1 = $13_1;
  $13_1 = $13_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $44_1, $17_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $68_1 | 0;
  $4_1 = $39_1 + $47_1 | 0;
  $3_1 = $4_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $29_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $28_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $6_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $47_1 = $3_1;
  $6_1 = $3_1;
  $36_1 = $14_1;
  $44_1 = $5_1;
  $3_1 = $20_1 + $35_1 | 0;
  $14_1 = $23_1 + $26_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $26_1 = __wasm_rotl_i64($44_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $14_1 = $26_1;
  $6_1 = $14_1 + $28_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $28_1 + $4_1 | 0;
  $35_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = __wasm_rotl_i64($10_1 ^ $35_1, $47_1 ^ $6_1, 48);
  $44_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($36_1 ^ $47_1, $44_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $36_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $27_1, $20_1 ^ $31_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $62_1 | 0;
  $4_1 = $30_1 + $51_1 | 0;
  $3_1 = $4_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $60_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $71_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $41_1 = $11_1;
  $31_1 = $5_1;
  $11_1 = __wasm_rotl_i64($10_1 ^ $48_1, $8_1 ^ $40_1, 32);
  $8_1 = $22_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $12_1 = $20_1;
  $20_1 = $3_1;
  $10_1 = __wasm_rotl_i64($31_1 ^ $8_1, $12_1 ^ $3_1, 40);
  $8_1 = $10_1 + $27_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $27_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $27_1, $5_1 ^ $8_1, 48);
  $12_1 = $22_1 + $5_1 | 0;
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $30_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $31_1 = $12_1;
  $22_1 = $12_1 + $14_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $12_1 >>> 0 > $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $12_1 = $3_1;
  $48_1 = __wasm_rotl_i64($41_1 ^ $22_1, $3_1 ^ $16_1, 40);
  $11_1 = $48_1;
  $9_1 = $11_1 + $37_1 | 0;
  $40_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $40_1 + $13_1 | 0;
  $3_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $37_1 = $9_1;
  $9_1 = $29_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $70_1 + $3_1 | 0;
  $41_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = __wasm_rotl_i64($15_1 ^ $56_1, $21_1 ^ $46_1, 48);
  $21_1 = $19_1 + $46_1 | 0;
  $56_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $56_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $21_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($33_1 ^ $19_1, $38_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $15_1 = $3_1;
  $3_1 = $6_1 + $58_1 | 0;
  $13_1 = $2_1 + $35_1 | 0;
  $3_1 = $13_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $21_1 = $34_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $69_1 + $3_1 | 0;
  $35_1 = $21_1;
  $21_1 = $21_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $30_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $5_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $15_1 ^ $3_1, 40);
  $6_1 = $16_1 + $35_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $15_1 + $21_1 | 0;
  $30_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $35_1 = __wasm_rotl_i64($13_1 ^ $30_1, $5_1 ^ $6_1, 48);
  $21_1 = $18_1 + $35_1 | 0;
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $33_1 | 0;
  $3_1 = $18_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $21_1;
  $24_1 = $3_1;
  $21_1 = __wasm_rotl_i64($16_1 ^ $18_1, $15_1 ^ $3_1, 1);
  $13_1 = $21_1 + $41_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $13_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $59_1 + $13_1 | 0;
  $9_1 = $3_1;
  $3_1 = $72_1 + $3_1 | 0;
  $38_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $31_1, $4_1 ^ $20_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $7_1 + $67_1 | 0;
  $4_1 = $32_1 + $50_1 | 0;
  $3_1 = $4_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $7_1;
  $4_1 = $52_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $75_1 + $3_1 | 0;
  $31_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $46_1, $7_1 ^ $56_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $32_1 = $3_1;
  $7_1 = $3_1;
  $56_1 = $13_1;
  $41_1 = $31_1;
  $31_1 = $5_1;
  $3_1 = $17_1 + $44_1 | 0;
  $13_1 = $23_1 + $47_1 | 0;
  $3_1 = $13_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $13_1;
  $23_1 = $5_1 + $10_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $7_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $20_1;
  $20_1 = $3_1;
  $31_1 = __wasm_rotl_i64($31_1 ^ $23_1, $7_1 ^ $3_1, 40);
  $13_1 = $31_1;
  $7_1 = $41_1 + $13_1 | 0;
  $47_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $47_1 + $4_1 | 0;
  $44_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = __wasm_rotl_i64($10_1 ^ $44_1, $32_1 ^ $7_1, 48);
  $46_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($56_1 ^ $32_1, $46_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $41_1 = $9_1;
  $13_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $26_1, $17_1 ^ $28_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $8_1 + $55_1 | 0;
  $4_1 = $1_1 + $27_1 | 0;
  $3_1 = $4_1 >>> 0 < $1_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $8_1;
  $4_1 = $45_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $26_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $21_1;
  $27_1 = $5_1;
  $21_1 = __wasm_rotl_i64($10_1 ^ $49_1, $8_1 ^ $42_1, 32);
  $8_1 = $19_1 + $21_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $8_1;
  $10_1 = $17_1;
  $17_1 = $3_1;
  $10_1 = __wasm_rotl_i64($27_1 ^ $8_1, $10_1 ^ $3_1, 40);
  $8_1 = $10_1 + $26_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $26_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($21_1 ^ $26_1, $5_1 ^ $8_1, 48);
  $25_1 = $19_1 + $5_1 | 0;
  $28_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $17_1 + $28_1 | 0;
  $3_1 = $19_1 >>> 0 > $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $27_1 = $25_1;
  $19_1 = $25_1 + $13_1 | 0;
  $17_1 = $3_1;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $19_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $25_1 = $3_1;
  $49_1 = __wasm_rotl_i64($56_1 ^ $19_1, $3_1 ^ $16_1, 40);
  $21_1 = $49_1;
  $9_1 = $21_1 + $38_1 | 0;
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $42_1 + $15_1 | 0;
  $3_1 = $9_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = $9_1;
  $9_1 = $57_1 + $9_1 | 0;
  $21_1 = $3_1;
  $3_1 = $64_1 + $3_1 | 0;
  $15_1 = $9_1;
  $9_1 = $9_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = __wasm_rotl_i64($14_1 ^ $37_1, $11_1 ^ $36_1, 48);
  $11_1 = $22_1 + $36_1 | 0;
  $37_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $37_1 | 0;
  $3_1 = $11_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $11_1;
  $12_1 = $3_1;
  $16_1 = __wasm_rotl_i64($48_1 ^ $11_1, $40_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $48_1 = $3_1;
  $11_1 = $3_1;
  $3_1 = $7_1 + $63_1 | 0;
  $14_1 = $44_1 + $53_1 | 0;
  $3_1 = $14_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $14_1 + $16_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $7_1;
  $11_1 = $61_1 + $7_1 | 0;
  $7_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $44_1 = $11_1;
  $11_1 = $11_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $40_1 = $15_1;
  $14_1 = __wasm_rotl_i64($5_1 ^ $14_1, $7_1 ^ $28_1, 32);
  $7_1 = $18_1 + $14_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $7_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $7_1, $48_1 ^ $3_1, 40);
  $7_1 = $16_1 + $44_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $11_1 | 0;
  $28_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $44_1 = __wasm_rotl_i64($14_1 ^ $28_1, $15_1 ^ $7_1, 48);
  $11_1 = $18_1 + $44_1 | 0;
  $48_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $48_1 | 0;
  $3_1 = $11_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $11_1;
  $24_1 = $3_1;
  $11_1 = __wasm_rotl_i64($16_1 ^ $11_1, $5_1 ^ $3_1, 1);
  $14_1 = $40_1 + $11_1 | 0;
  $16_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $16_1 + $9_1 | 0;
  $3_1 = $11_1 >>> 0 > $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $50_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $67_1 + $3_1 | 0;
  $40_1 = $15_1;
  $15_1 = $15_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($10_1 ^ $27_1, $4_1 ^ $17_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $3_1;
  $3_1 = $6_1 + $71_1 | 0;
  $4_1 = $30_1 + $60_1 | 0;
  $3_1 = $4_1 >>> 0 < $60_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $17_1 | 0;
  $3_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $6_1;
  $4_1 = $43_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $73_1 + $3_1 | 0;
  $27_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $43_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $6_1 ^ $37_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $30_1 = $3_1;
  $6_1 = $3_1;
  $56_1 = $14_1;
  $37_1 = $27_1;
  $27_1 = $5_1;
  $3_1 = $20_1 + $46_1 | 0;
  $14_1 = $23_1 + $32_1 | 0;
  $3_1 = $14_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $14_1;
  $23_1 = $5_1 + $10_1 | 0;
  $20_1 = $3_1;
  $3_1 = $3_1 + $6_1 | 0;
  $3_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $17_1;
  $17_1 = $3_1;
  $27_1 = __wasm_rotl_i64($27_1 ^ $23_1, $6_1 ^ $3_1, 40);
  $14_1 = $27_1;
  $6_1 = $37_1 + $14_1 | 0;
  $32_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $32_1 + $4_1 | 0;
  $36_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $36_1, $30_1 ^ $6_1, 48);
  $30_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = __wasm_rotl_i64($56_1 ^ $10_1, $30_1 ^ $9_1, 32);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $37_1 = $9_1;
  $14_1 = $3_1;
  $5_1 = __wasm_rotl_i64($5_1 ^ $31_1, $20_1 ^ $47_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $20_1 = $3_1;
  $3_1 = $8_1 + $75_1 | 0;
  $4_1 = $26_1 + $52_1 | 0;
  $3_1 = $4_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $4_1 + $5_1 | 0;
  $3_1 = $3_1 + $20_1 | 0;
  $3_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $26_1 = $8_1;
  $4_1 = $54_1 + $8_1 | 0;
  $8_1 = $3_1;
  $3_1 = $74_1 + $3_1 | 0;
  $31_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $56_1 = $40_1;
  $46_1 = $11_1;
  $40_1 = $5_1;
  $11_1 = __wasm_rotl_i64($26_1 ^ $35_1, $8_1 ^ $33_1, 32);
  $8_1 = $22_1 + $11_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $8_1;
  $9_1 = $20_1;
  $20_1 = $3_1;
  $26_1 = __wasm_rotl_i64($40_1 ^ $8_1, $9_1 ^ $3_1, 40);
  $12_1 = $26_1;
  $8_1 = $12_1 + $31_1 | 0;
  $3_1 = $4_1;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $4_1 | 0;
  $35_1 = $8_1;
  $8_1 = $8_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = __wasm_rotl_i64($11_1 ^ $35_1, $5_1 ^ $8_1, 48);
  $12_1 = $22_1 + $5_1 | 0;
  $31_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $31_1 | 0;
  $3_1 = $12_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = $12_1;
  $20_1 = $12_1 + $14_1 | 0;
  $9_1 = $3_1;
  $3_1 = $37_1 + $3_1 | 0;
  $3_1 = $20_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $3_1;
  $40_1 = __wasm_rotl_i64($46_1 ^ $20_1, $3_1 ^ $16_1, 40);
  $11_1 = $40_1;
  $12_1 = $56_1 + $11_1 | 0;
  $33_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $33_1 + $15_1 | 0;
  $3_1 = $11_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $46_1 = $12_1;
  $11_1 = $2_1 + $12_1 | 0;
  $12_1 = $3_1;
  $3_1 = $58_1 + $3_1 | 0;
  $15_1 = $11_1;
  $11_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $38_1 = __wasm_rotl_i64($13_1 ^ $38_1, $21_1 ^ $41_1, 48);
  $21_1 = $19_1 + $38_1 | 0;
  $41_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $41_1 | 0;
  $3_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $21_1;
  $25_1 = $3_1;
  $16_1 = __wasm_rotl_i64($49_1 ^ $19_1, $42_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $49_1 = $3_1;
  $21_1 = $3_1;
  $3_1 = $6_1 + $62_1 | 0;
  $13_1 = $51_1 + $36_1 | 0;
  $3_1 = $13_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $13_1 + $16_1 | 0;
  $3_1 = $3_1 + $21_1 | 0;
  $3_1 = $6_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $6_1;
  $21_1 = $45_1 + $6_1 | 0;
  $6_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $42_1 = $21_1;
  $21_1 = $21_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $36_1 = $15_1;
  $13_1 = __wasm_rotl_i64($5_1 ^ $13_1, $6_1 ^ $31_1, 32);
  $6_1 = $18_1 + $13_1 | 0;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $15_1 | 0;
  $3_1 = $6_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $6_1;
  $24_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $6_1, $49_1 ^ $3_1, 40);
  $6_1 = $16_1 + $42_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $21_1 | 0;
  $31_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $49_1 = __wasm_rotl_i64($13_1 ^ $31_1, $15_1 ^ $6_1, 48);
  $21_1 = $18_1 + $49_1 | 0;
  $42_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $42_1 | 0;
  $3_1 = $18_1 >>> 0 > $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $21_1;
  $24_1 = $3_1;
  $21_1 = __wasm_rotl_i64($16_1 ^ $18_1, $5_1 ^ $3_1, 1);
  $16_1 = $36_1 + $21_1 | 0;
  $3_1 = $11_1;
  $11_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $16_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $1_1;
  $15_1 = $16_1 + $13_1 | 0;
  $1_1 = $3_1;
  $3_1 = $55_1 + $3_1 | 0;
  $5_1 = $15_1;
  $15_1 = $13_1 >>> 0 > $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = __wasm_rotl_i64($26_1 ^ $47_1, $4_1 ^ $9_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $9_1 = $3_1;
  $26_1 = $13_1;
  $3_1 = $7_1 + $69_1 | 0;
  $13_1 = $28_1 + $34_1 | 0;
  $3_1 = $13_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $13_1 + $4_1 | 0;
  $3_1 = $3_1 + $9_1 | 0;
  $3_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $7_1;
  $7_1 = $26_1 + $7_1 | 0;
  $26_1 = $55_1;
  $55_1 = $3_1;
  $3_1 = $26_1 + $3_1 | 0;
  $26_1 = $7_1;
  $7_1 = $7_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = __wasm_rotl_i64($13_1 ^ $38_1, $55_1 ^ $41_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $28_1 = $3_1;
  $36_1 = $16_1;
  $3_1 = $17_1 + $30_1 | 0;
  $16_1 = $10_1 + $23_1 | 0;
  $3_1 = $16_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = $16_1 + $13_1 | 0;
  $55_1 = $3_1;
  $3_1 = $28_1 + $3_1 | 0;
  $10_1 = $4_1;
  $4_1 = $17_1;
  $17_1 = $9_1;
  $9_1 = $4_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = __wasm_rotl_i64($10_1 ^ $4_1, $17_1 ^ $9_1, 40);
  $17_1 = $10_1 + $26_1 | 0;
  $26_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $26_1 + $7_1 | 0;
  $30_1 = $17_1;
  $17_1 = $17_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $23_1 = __wasm_rotl_i64($13_1 ^ $30_1, $28_1 ^ $17_1, 48);
  $13_1 = i64toi32_i32$HIGH_BITS;
  $1_1 = __wasm_rotl_i64($36_1 ^ $23_1, $13_1 ^ $1_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $28_1 = $3_1;
  $7_1 = $1_1;
  $1_1 = $3_1;
  $16_1 = __wasm_rotl_i64($16_1 ^ $27_1, $32_1 ^ $55_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $55_1 = $3_1;
  $32_1 = $2_1;
  $3_1 = $8_1 + $68_1 | 0;
  $2_1 = $39_1 + $35_1 | 0;
  $3_1 = $2_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $2_1;
  $2_1 = $8_1 + $16_1 | 0;
  $3_1 = $3_1 + $55_1 | 0;
  $3_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $27_1 = $2_1;
  $8_1 = $32_1 + $2_1 | 0;
  $2_1 = $3_1;
  $3_1 = $3_1 + $58_1 | 0;
  $3_1 = $8_1 >>> 0 < $27_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $58_1 = $3_1;
  $38_1 = $5_1;
  $36_1 = $21_1;
  $32_1 = $8_1;
  $8_1 = __wasm_rotl_i64($27_1 ^ $44_1, $2_1 ^ $48_1, 32);
  $2_1 = $19_1 + $8_1 | 0;
  $21_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $25_1 + $21_1 | 0;
  $3_1 = $2_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $55_1;
  $55_1 = $3_1;
  $16_1 = __wasm_rotl_i64($2_1 ^ $16_1, $5_1 ^ $3_1, 40);
  $19_1 = $32_1 + $16_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $58_1 | 0;
  $27_1 = $19_1;
  $58_1 = $19_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = __wasm_rotl_i64($8_1 ^ $19_1, $21_1 ^ $58_1, 48);
  $19_1 = $2_1 + $21_1 | 0;
  $35_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $55_1 + $35_1 | 0;
  $3_1 = $2_1 >>> 0 > $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $32_1 = $19_1;
  $55_1 = $19_1 + $7_1 | 0;
  $2_1 = $3_1;
  $3_1 = $3_1 + $1_1 | 0;
  $3_1 = $19_1 >>> 0 > $55_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $3_1;
  $11_1 = __wasm_rotl_i64($36_1 ^ $55_1, $3_1 ^ $11_1, 40);
  $8_1 = $11_1;
  $1_1 = $38_1 + $8_1 | 0;
  $3_1 = $15_1;
  $15_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $15_1 | 0;
  $3_1 = $1_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $47_1 = $1_1;
  $1_1 = $45_1 + $1_1 | 0;
  $8_1 = $3_1;
  $3_1 = $65_1 + $3_1 | 0;
  $65_1 = $1_1;
  $1_1 = $1_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $12_1 = __wasm_rotl_i64($14_1 ^ $46_1, $12_1 ^ $37_1, 48);
  $45_1 = $20_1 + $12_1 | 0;
  $14_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $22_1 + $14_1 | 0;
  $3_1 = $20_1 >>> 0 > $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $20_1 = $3_1;
  $25_1 = __wasm_rotl_i64($40_1 ^ $45_1, $33_1 ^ $3_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $22_1 = $3_1;
  $33_1 = $53_1;
  $3_1 = $17_1 + $67_1 | 0;
  $53_1 = $30_1 + $50_1 | 0;
  $3_1 = $53_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $50_1 = $53_1 + $25_1 | 0;
  $3_1 = $3_1 + $22_1 | 0;
  $3_1 = $50_1 >>> 0 < $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = $50_1;
  $53_1 = $33_1 + $17_1 | 0;
  $50_1 = $3_1;
  $3_1 = $3_1 + $63_1 | 0;
  $63_1 = $53_1;
  $53_1 = $17_1 >>> 0 > $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = __wasm_rotl_i64($17_1 ^ $21_1, $50_1 ^ $35_1, 32);
  $50_1 = $18_1 + $17_1 | 0;
  $21_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $21_1 | 0;
  $3_1 = $18_1 >>> 0 > $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $63_1;
  $63_1 = $3_1;
  $24_1 = __wasm_rotl_i64($25_1 ^ $50_1, $22_1 ^ $3_1, 40);
  $18_1 = $18_1 + $24_1 | 0;
  $22_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $22_1 + $53_1 | 0;
  $25_1 = $18_1;
  $53_1 = $18_1 >>> 0 < $24_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = __wasm_rotl_i64($17_1 ^ $18_1, $21_1 ^ $53_1, 48);
  $18_1 = $50_1 + $21_1 | 0;
  $67_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $63_1 + $67_1 | 0;
  $3_1 = $18_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $50_1 = $18_1;
  $63_1 = $3_1;
  $22_1 = __wasm_rotl_i64($24_1 ^ $18_1, $22_1 ^ $3_1, 1);
  $18_1 = $22_1 + $65_1 | 0;
  $65_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $65_1 + $1_1 | 0;
  $3_1 = $18_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $24_1 = $61_1 + $18_1 | 0;
  $1_1 = $3_1;
  $3_1 = $66_1 + $3_1 | 0;
  $66_1 = $24_1;
  $61_1 = $24_1 >>> 0 < $61_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $24_1 = __wasm_rotl_i64($16_1 ^ $32_1, $2_1 ^ $5_1, 1);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $6_1 + $70_1 | 0;
  $17_1 = $29_1 + $31_1 | 0;
  $3_1 = $17_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $29_1 = $17_1 + $24_1 | 0;
  $3_1 = $2_1 + $3_1 | 0;
  $3_1 = $17_1 >>> 0 > $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $6_1 = $29_1;
  $17_1 = $39_1 + $6_1 | 0;
  $29_1 = $3_1;
  $3_1 = $68_1 + $3_1 | 0;
  $16_1 = $17_1;
  $39_1 = $16_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = __wasm_rotl_i64($6_1 ^ $12_1, $14_1 ^ $29_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $3_1;
  $14_1 = $18_1;
  $12_1 = $24_1;
  $3_1 = $9_1 + $13_1 | 0;
  $18_1 = $4_1 + $23_1 | 0;
  $3_1 = $18_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $24_1 = $18_1;
  $9_1 = $18_1 + $17_1 | 0;
  $29_1 = $3_1;
  $3_1 = $6_1 + $3_1 | 0;
  $3_1 = $9_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $2_1;
  $2_1 = $3_1;
  $23_1 = __wasm_rotl_i64($12_1 ^ $9_1, $5_1 ^ $3_1, 40);
  $18_1 = $23_1 + $16_1 | 0;
  $12_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $12_1 + $39_1 | 0;
  $16_1 = $18_1;
  $39_1 = $16_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = __wasm_rotl_i64($17_1 ^ $16_1, $6_1 ^ $39_1, 48);
  $6_1 = i64toi32_i32$HIGH_BITS;
  $1_1 = __wasm_rotl_i64($14_1 ^ $17_1, $6_1 ^ $1_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $18_1 = $3_1;
  $24_1 = __wasm_rotl_i64($10_1 ^ $24_1, $29_1 ^ $26_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $29_1 = $3_1;
  $5_1 = $51_1;
  $3_1 = $58_1 + $69_1 | 0;
  $51_1 = $34_1 + $27_1 | 0;
  $3_1 = $51_1 >>> 0 < $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $34_1 = $51_1 + $24_1 | 0;
  $3_1 = $3_1 + $29_1 | 0;
  $3_1 = $34_1 >>> 0 < $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $58_1 = $34_1;
  $51_1 = $5_1 + $34_1 | 0;
  $34_1 = $3_1;
  $3_1 = $3_1 + $62_1 | 0;
  $62_1 = $51_1;
  $51_1 = $51_1 >>> 0 < $58_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $62_1;
  $58_1 = __wasm_rotl_i64($49_1 ^ $58_1, $34_1 ^ $42_1, 32);
  $34_1 = $45_1 + $58_1 | 0;
  $62_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $20_1 + $62_1 | 0;
  $3_1 = $45_1 >>> 0 > $34_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $45_1 = $34_1;
  $5_1 = $29_1;
  $29_1 = $3_1;
  $20_1 = __wasm_rotl_i64($34_1 ^ $24_1, $5_1 ^ $3_1, 40);
  $34_1 = $10_1 + $20_1 | 0;
  $24_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $24_1 + $51_1 | 0;
  $14_1 = $34_1;
  $34_1 = $20_1 >>> 0 > $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $62_1 = __wasm_rotl_i64($58_1 ^ $14_1, $62_1 ^ $34_1, 48);
  $51_1 = $45_1 + $62_1 | 0;
  $13_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $29_1 + $13_1 | 0;
  $3_1 = $45_1 >>> 0 > $51_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $51_1;
  $29_1 = $4_1 + $1_1 | 0;
  $45_1 = $3_1;
  $3_1 = $3_1 + $18_1 | 0;
  $3_1 = $29_1 >>> 0 < $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $51_1 = $3_1;
  $22_1 = __wasm_rotl_i64($22_1 ^ $29_1, $65_1 ^ $3_1, 40);
  $58_1 = $22_1 + $66_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $5_1 + $61_1 | 0;
  $66_1 = $58_1;
  $70_1 = $94_1 ^ $58_1;
  $61_1 = $22_1 >>> 0 > $58_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $65_1 = $95_1 ^ $61_1;
  $3_1 = $2_1 + $6_1 | 0;
  $58_1 = $9_1 + $17_1 | 0;
  $3_1 = $58_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $17_1 = $58_1;
  $9_1 = $3_1;
  $58_1 = __wasm_rotl_i64($23_1 ^ $17_1, $12_1 ^ $3_1, 1);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $57_1;
  $3_1 = $34_1 + $74_1 | 0;
  $57_1 = $14_1 + $54_1 | 0;
  $3_1 = $57_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $54_1 = $57_1;
  $34_1 = $54_1 + $58_1 | 0;
  $3_1 = $2_1 + $3_1 | 0;
  $3_1 = $34_1 >>> 0 < $54_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $57_1 = $34_1;
  $54_1 = $6_1 + $34_1 | 0;
  $34_1 = $3_1;
  $3_1 = $3_1 + $64_1 | 0;
  $23_1 = $54_1;
  $54_1 = $23_1 >>> 0 < $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $64_1 = __wasm_rotl_i64($21_1 ^ $57_1, $34_1 ^ $67_1, 32);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $3_1;
  $12_1 = $23_1;
  $23_1 = __wasm_rotl_i64($7_1 ^ $47_1, $8_1 ^ $28_1, 48);
  $57_1 = $55_1 + $23_1 | 0;
  $7_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $19_1 + $7_1 | 0;
  $3_1 = $55_1 >>> 0 > $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $55_1 = $57_1;
  $57_1 = $57_1 + $64_1 | 0;
  $34_1 = $3_1;
  $3_1 = $6_1 + $3_1 | 0;
  $3_1 = $55_1 >>> 0 > $57_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $2_1;
  $2_1 = $3_1;
  $19_1 = __wasm_rotl_i64($58_1 ^ $57_1, $8_1 ^ $3_1, 40);
  $58_1 = $12_1 + $19_1 | 0;
  $8_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $8_1 + $54_1 | 0;
  $3_1 = $19_1 >>> 0 > $58_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $54_1 = $3_1;
  $6_1 = __wasm_rotl_i64($64_1 ^ $58_1, $6_1 ^ $3_1, 48);
  $64_1 = $57_1 + $6_1 | 0;
  $12_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $2_1 + $12_1 | 0;
  $3_1 = $57_1 >>> 0 > $64_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$76_1 >> 2] = $64_1 ^ $70_1;
  $57_1 = $3_1;
  HEAP32[$76_1 + 4 >> 2] = $3_1 ^ $65_1;
  $76_1 = __wasm_rotl_i64($1_1 ^ $66_1, $18_1 ^ $61_1, 48);
  $1_1 = $29_1 + $76_1 | 0;
  $18_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $51_1 + $18_1 | 0;
  $51_1 = $1_1;
  HEAP32[$0_1 + 128 >> 2] = $1_1 ^ ($58_1 ^ $98_1);
  $61_1 = $1_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 + 132 >> 2] = $61_1 ^ ($54_1 ^ $99_1);
  $0_1 = $91_1;
  $34_1 = __wasm_rotl_i64($11_1 ^ $55_1, $15_1 ^ $34_1, 1);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $39_1 + $75_1 | 0;
  $2_1 = $16_1 + $52_1 | 0;
  $3_1 = $2_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $29_1 = $2_1;
  $2_1 = $29_1 + $34_1 | 0;
  $3_1 = $1_1 + $3_1 | 0;
  $3_1 = $2_1 >>> 0 < $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $39_1 = $2_1;
  $29_1 = $2_1 + $60_1 | 0;
  $2_1 = $3_1;
  $3_1 = $3_1 + $71_1 | 0;
  $52_1 = $29_1;
  $29_1 = $29_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $10_1 = $52_1;
  $15_1 = $34_1;
  $39_1 = __wasm_rotl_i64($39_1 ^ $62_1, $2_1 ^ $13_1, 32);
  $2_1 = $50_1 + $39_1 | 0;
  $34_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $63_1 + $34_1 | 0;
  $3_1 = $2_1 >>> 0 < $50_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $1_1;
  $1_1 = $3_1;
  $52_1 = __wasm_rotl_i64($15_1 ^ $2_1, $11_1 ^ $3_1, 40);
  $50_1 = $10_1 + $52_1 | 0;
  $60_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $60_1 + $29_1 | 0;
  $54_1 = $50_1;
  $50_1 = $50_1 >>> 0 < $52_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $34_1 = __wasm_rotl_i64($39_1 ^ $54_1, $34_1 ^ $50_1, 48);
  $29_1 = $2_1 + $34_1 | 0;
  $63_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $1_1 + $63_1 | 0;
  $3_1 = $2_1 >>> 0 > $29_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = $29_1;
  $1_1 = $3_1;
  $29_1 = __wasm_rotl_i64($4_1 ^ $20_1, $24_1 ^ $45_1, 1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $71_1 = $3_1;
  $45_1 = $3_1;
  $3_1 = $53_1 + $72_1 | 0;
  $39_1 = $25_1 + $59_1 | 0;
  $3_1 = $39_1 >>> 0 < $59_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $53_1 = $39_1 + $29_1 | 0;
  $3_1 = $3_1 + $45_1 | 0;
  $3_1 = $39_1 >>> 0 > $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $39_1 = $53_1;
  $53_1 = $39_1 + $43_1 | 0;
  $45_1 = $3_1;
  $3_1 = $3_1 + $73_1 | 0;
  $59_1 = $53_1;
  $53_1 = $39_1 >>> 0 > $53_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $11_1 = $59_1;
  $59_1 = __wasm_rotl_i64($23_1 ^ $39_1, $7_1 ^ $45_1, 32);
  $39_1 = $59_1;
  $45_1 = $39_1 + $17_1 | 0;
  $43_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $43_1 + $9_1 | 0;
  $3_1 = $45_1 >>> 0 < $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = $29_1 ^ $45_1;
  $29_1 = $3_1;
  $9_1 = __wasm_rotl_i64($9_1, $71_1 ^ $3_1, 40);
  $39_1 = $11_1 + $9_1 | 0;
  $3_1 = $53_1;
  $53_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $3_1 + $53_1 | 0;
  $3_1 = $9_1 >>> 0 > $39_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 >> 2] = $39_1 ^ $92_1 ^ $2_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1 ^ $93_1 ^ $1_1;
  $39_1 = __wasm_rotl_i64($39_1 ^ $59_1, $3_1 ^ $43_1, 48);
  $0_1 = $45_1 + $39_1 | 0;
  $59_1 = i64toi32_i32$HIGH_BITS;
  $3_1 = $29_1 + $59_1 | 0;
  $3_1 = $0_1 >>> 0 < $45_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$77_1 >> 2] = $0_1 ^ ($54_1 ^ $96_1);
  HEAP32[$77_1 + 4 >> 2] = $50_1 ^ $97_1 ^ $3_1;
  (wasm2js_i32$0 = $78_1, wasm2js_i32$1 = __wasm_rotl_i64($22_1 ^ $51_1, $5_1 ^ $61_1, 1) ^ ($6_1 ^ $79_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$78_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS ^ ($12_1 ^ $80_1);
  (wasm2js_i32$0 = $84_1, wasm2js_i32$1 = __wasm_rotl_i64($19_1 ^ $64_1, $8_1 ^ $57_1, 1) ^ ($76_1 ^ $85_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$84_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS ^ ($18_1 ^ $86_1);
  (wasm2js_i32$0 = $81_1, wasm2js_i32$1 = __wasm_rotl_i64($2_1 ^ $52_1, $1_1 ^ $60_1, 1) ^ ($39_1 ^ $82_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$81_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS ^ ($59_1 ^ $83_1);
  (wasm2js_i32$0 = $87_1, wasm2js_i32$1 = __wasm_rotl_i64($0_1 ^ $9_1, $3_1 ^ $53_1, 1) ^ ($34_1 ^ $88_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$87_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS ^ ($63_1 ^ $89_1);
 }
 
 function $1($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0;
  $9_1 = global$0 - 3824 | 0;
  global$0 = $9_1;
  $288($9_1 + 1320 | 0, $1_1, $2_1);
  $12_1 = HEAP32[$9_1 + 1324 >> 2];
  HEAP32[$9_1 + 1332 >> 2] = $12_1;
  $1_1 = HEAP32[$9_1 + 1320 >> 2];
  HEAP32[$9_1 + 1328 >> 2] = $1_1;
  $288($9_1 + 1312 | 0, $3_1, $4_1);
  $10_1 = HEAP32[$9_1 + 1316 >> 2];
  HEAP32[$9_1 + 1340 >> 2] = $10_1;
  $14_1 = HEAP32[$9_1 + 1312 >> 2];
  HEAP32[$9_1 + 1336 >> 2] = $14_1;
  $288($9_1 + 1304 | 0, $5_1, $6_1);
  $5_1 = HEAP32[$9_1 + 1308 >> 2];
  HEAP32[$9_1 + 1348 >> 2] = $5_1;
  $4_1 = HEAP32[$9_1 + 1304 >> 2];
  HEAP32[$9_1 + 1344 >> 2] = $4_1;
  $288($9_1 + 1296 | 0, $7_1, $8_1);
  $3_1 = HEAP32[$9_1 + 1300 >> 2];
  HEAP32[$9_1 + 1356 >> 2] = $3_1;
  $2_1 = HEAP32[$9_1 + 1296 >> 2];
  HEAP32[$9_1 + 1352 >> 2] = $2_1;
  $114($9_1 + 1360 | 0, $1_1, $12_1);
  if (HEAPU8[$9_1 + 1360 | 0]) {
   abort()
  }
  $70_1 = $9_1 + 1432 | 0;
  $147($70_1, 0, 96);
  $27_1 = $9_1 + 1528 | 0;
  $1_1 = $9_1 + 1360 | 1;
  $91($27_1, $1_1, 64);
  $66_1 = $9_1 + 2072 | 0;
  $350($66_1, $27_1);
  $6_1 = $91($9_1 + 2264 | 0, $1_1, 64);
  $181($27_1, 1105533, 14);
  $277($27_1, 1217612, 0, $14_1, $10_1);
  $67_1 = $9_1 + 2536 | 0;
  $91($67_1, $27_1, 208);
  $1_1 = $9_1 + 2328 | 0;
  $91($1_1, $67_1, 200);
  HEAP8[$9_1 + 2530 | 0] = HEAPU8[$9_1 + 2738 | 0];
  HEAP16[$9_1 + 2528 >> 1] = HEAPU16[$9_1 + 2736 >> 1];
  $277($1_1, 1105547, 10, $4_1, $5_1);
  $68_1 = $9_1 + 2744 | 0;
  $359($68_1, $2_1, $3_1);
  $91($27_1, $1_1, 208);
  $36_1 = $9_1 + 3336 | 0;
  $97($36_1, $66_1, $27_1);
  $62($27_1, $6_1, $36_1);
  $373($9_1 + 3144 | 0, $27_1);
  $65_1 = $9_1 + 2952 | 0;
  $91($65_1, $36_1, 192);
  $91($27_1, $68_1, 208);
  $395($27_1, 1048583, 9);
  $389($27_1, 1048592, 5, $9_1 + 3112 | 0);
  HEAP32[$9_1 + 3336 >> 2] = $9_1 + 2296;
  HEAP32[$9_1 + 3340 >> 2] = 32;
  $55_1 = $9_1 + 3528 | 0;
  $311($55_1, $27_1, 1048603, 9, $36_1);
  $66($36_1, $55_1);
  $1_1 = $9_1 + 3560 | 0;
  $65($1_1, $36_1);
  $389($27_1, 1048612, 9, $1_1);
  $62($36_1, $55_1, $65_1);
  $1_1 = $9_1 + 3592 | 0;
  $65($1_1, $36_1);
  $389($27_1, 1048621, 7, $1_1);
  $389($27_1, 1048597, 6, $9_1 + 2232 | 0);
  $69_1 = $9_1 + 3304 | 0;
  $389($27_1, 1048628, 8, $69_1);
  $1_1 = $9_1 + 3624 | 0;
  $322($1_1, $27_1, 1048636, 5);
  $45_1 = $9_1 + 3688 | 0;
  $272($45_1, $1_1, $6_1);
  $124($36_1, $55_1);
  $5_1 = HEAP32[$9_1 + 3336 >> 2];
  $4_1 = HEAP32[$9_1 + 3340 >> 2];
  $297($9_1 + 880 | 0, $5_1, $4_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 896 | 0, $5_1, $4_1, 0, 0, -1402477478, 244405, 0, 0);
  $8_1 = HEAP32[$9_1 + 3344 >> 2];
  $1_1 = HEAP32[$9_1 + 3348 >> 2];
  $297($9_1 + 960 | 0, $8_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 912 | 0, $5_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
  $3_1 = $1_1;
  $297($9_1 + 976 | 0, $8_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $7_1 = HEAP32[$9_1 + 3352 >> 2];
  $1_1 = HEAP32[$9_1 + 3356 >> 2];
  $297($9_1 + 1040 | 0, $7_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 928 | 0, $5_1, $4_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 992 | 0, $8_1, $3_1, 0, 0, -348789477, 1048575, 0, 0);
  $2_1 = $1_1;
  $297($9_1 + 1056 | 0, $7_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $6_1 = HEAP32[$9_1 + 3360 >> 2];
  $1_1 = HEAP32[$9_1 + 3364 >> 2];
  $297($9_1 + 1120 | 0, $6_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 944 | 0, $5_1, $4_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 1008 | 0, $8_1, $3_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 1072 | 0, $7_1, $2_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 1136 | 0, $6_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $5_1 = HEAP32[$9_1 + 3368 >> 2];
  $4_1 = HEAP32[$9_1 + 3372 >> 2];
  $297($9_1 + 1200 | 0, $5_1, $4_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 1024 | 0, $8_1, $3_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 1088 | 0, $7_1, $2_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 1152 | 0, $6_1, $1_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 1216 | 0, $5_1, $4_1, 0, 0, -1402477478, 244405, 0, 0);
  $297($9_1 + 1104 | 0, $7_1, $2_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 1168 | 0, $6_1, $1_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 1232 | 0, $5_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 1184 | 0, $6_1, $1_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 1248 | 0, $5_1, $4_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 1264 | 0, $5_1, $4_1, 0, 0, -1, 4095, 0, 0);
  $5_1 = HEAP32[$9_1 + 880 >> 2];
  $4_1 = HEAP32[$9_1 + 884 >> 2];
  $37_1 = __wasm_i64_mul($5_1, $4_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $18_1 = $1_1;
  $297($9_1 + 864 | 0, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 848 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $8_1 = $9_1 + 832 | 0;
  $20_1 = HEAP32[$9_1 + 960 >> 2];
  $2_1 = HEAP32[$9_1 + 896 >> 2];
  $3_1 = $20_1 + $2_1 | 0;
  $25_1 = HEAP32[$9_1 + 964 >> 2];
  $1_1 = $25_1 + HEAP32[$9_1 + 900 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $3_1;
  $2_1 = HEAP32[$9_1 + 848 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 852 >> 2] | 0;
  $14_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = HEAP32[$9_1 + 864 >> 2];
  $2_1 = $7_1;
  $5_1 = $2_1 + $5_1 | 0;
  $10_1 = HEAP32[$9_1 + 868 >> 2];
  $1_1 = $10_1 + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $6_1 = $1_1 >>> 20 | 0;
  $5_1 = ($1_1 | 0) == ($10_1 | 0) & $2_1 >>> 0 < $7_1 >>> 0 | $1_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $9_1 + 888 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 872 | 0;
  $7_1 = $2_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $4_1 = $5_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $4_1;
  $2_1 = $4_1 << 12 | $6_1;
  $6_1 = $2_1 + $14_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $3_1 | 0;
  $7_1 = $6_1;
  $11_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $38_1 = __wasm_i64_mul($6_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $31_1 = $1_1;
  $297($8_1, $38_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 784 | 0, $37_1, $18_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 816 | 0, $38_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $28_1 = $9_1 + 768 | 0;
  $39_1 = HEAP32[$9_1 + 976 >> 2];
  $2_1 = HEAP32[$9_1 + 912 >> 2];
  $5_1 = $39_1 + $2_1 | 0;
  $29_1 = HEAP32[$9_1 + 980 >> 2];
  $1_1 = $29_1 + HEAP32[$9_1 + 916 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $30_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 1040 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1044 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 784 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 788 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 816 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 820 >> 2] | 0;
  $8_1 = $5_1;
  $2_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = HEAP32[$9_1 + 836 >> 2];
  $1_1 = $11_1 + $13_1 | 0;
  $17_1 = HEAP32[$9_1 + 832 >> 2];
  $5_1 = $6_1 + $17_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $23_1 = $1_1 >>> 20 | 0;
  $24_1 = ($1_1 | 0) == ($13_1 | 0) & $5_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $13_1 >>> 0;
  $1_1 = $9_1 + 840 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $10_1 = ($3_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 < $14_1 >>> 0 | $3_1 >>> 0 > $11_1 >>> 0;
  $5_1 = $9_1 + 856 | 0;
  $1_1 = HEAP32[$5_1 >> 2];
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = ($3_1 | 0) == ($15_1 | 0) & $14_1 >>> 0 < $21_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
  $6_1 = $1_1;
  $1_1 = $9_1 + 904 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 968 | 0;
  $14_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $14_1;
  $5_1 = $3_1 + (($15_1 | 0) == ($25_1 | 0) & $20_1 >>> 0 > $21_1 >>> 0 | $15_1 >>> 0 < $25_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1 + $10_1 | 0;
  $1_1 = $5_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $13_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $24_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $4_1;
  $3_1 = $4_1 << 12 | $23_1;
  $5_1 = $3_1 + $8_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $2_1 | 0;
  $7_1 = $5_1;
  $11_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = __wasm_i64_mul($5_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $46_1 = $1_1;
  $297($28_1, $40_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 800 | 0, $38_1, $31_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 752 | 0, $40_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $9_1 + 736 | 0;
  $47_1 = HEAP32[$9_1 + 992 >> 2];
  $3_1 = HEAP32[$9_1 + 928 >> 2];
  $5_1 = $47_1 + $3_1 | 0;
  $48_1 = HEAP32[$9_1 + 996 >> 2];
  $1_1 = $48_1 + HEAP32[$9_1 + 932 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $41_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 1056 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1060 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 1120 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $13_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1124 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $50_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 800 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 804 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $51_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 752 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 756 >> 2] | 0;
  $10_1 = $5_1;
  $3_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = HEAP32[$9_1 + 772 >> 2];
  $1_1 = $11_1 + $28_1 | 0;
  $23_1 = HEAP32[$9_1 + 768 >> 2];
  $5_1 = $7_1 + $23_1 | 0;
  $1_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $34_1 = $1_1 >>> 20 | 0;
  $35_1 = ($1_1 | 0) == ($28_1 | 0) & $5_1 >>> 0 < $23_1 >>> 0 | $1_1 >>> 0 < $28_1 >>> 0;
  $1_1 = $9_1 + 776 | 0;
  $25_1 = HEAP32[$1_1 >> 2];
  $21_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($2_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 < $8_1 >>> 0 | $2_1 >>> 0 > $11_1 >>> 0;
  $1_1 = $9_1 + 824 | 0;
  $28_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 792 | 0;
  $11_1 = HEAP32[$1_1 >> 2];
  $14_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $9_1 + 1048 | 0;
  $1_1 = HEAP32[$5_1 >> 2];
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = ($2_1 | 0) == ($16_1 | 0) & $8_1 >>> 0 < $33_1 >>> 0 | $2_1 >>> 0 < $16_1 >>> 0;
  $6_1 = $1_1;
  $1_1 = $9_1 + 920 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 984 | 0;
  $8_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $5_1 = $2_1 + (($22_1 | 0) == ($29_1 | 0) & $30_1 >>> 0 < $39_1 >>> 0 | $22_1 >>> 0 < $29_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($22_1 | 0) == ($19_1 | 0) & $30_1 >>> 0 > $32_1 >>> 0 | $22_1 >>> 0 > $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $11_1 | 0;
  $1_1 = $1_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($16_1 | 0) == ($19_1 | 0) & $32_1 >>> 0 > $33_1 >>> 0 | $16_1 >>> 0 < $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $28_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1 + $20_1 | 0;
  $1_1 = $5_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $2_1 + $25_1 | 0;
  $1_1 = $1_1 + $21_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $2_1 + $35_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $4_1;
  $2_1 = $4_1 << 12 | $34_1;
  $5_1 = $2_1 + $10_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $11_1 >>> 20) + $3_1 | 0;
  $8_1 = $5_1;
  $16_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $42_1 = __wasm_i64_mul($5_1, $16_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $39_1 = $1_1;
  $297($26_1, $42_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 688 | 0, $40_1, $46_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 720 | 0, $42_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $14_1 = $9_1 + 672 | 0;
  $56_1 = HEAP32[$9_1 + 1008 >> 2];
  $2_1 = HEAP32[$9_1 + 944 >> 2];
  $5_1 = $56_1 + $2_1 | 0;
  $52_1 = HEAP32[$9_1 + 1012 >> 2];
  $1_1 = $52_1 + HEAP32[$9_1 + 948 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $57_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 1072 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $34_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1076 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $58_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 1136 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $35_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1140 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $59_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 1200 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $25_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1204 >> 2] | 0;
  $53_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $6_1 = $2_1 + $53_1 | 0;
  $7_1 = $18_1;
  $1_1 = ($37_1 << 12) + $5_1 | 0;
  $60_1 = $6_1;
  $2_1 = HEAP32[$9_1 + 688 >> 2];
  $6_1 = $6_1 + $2_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 692 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $6_1;
  $2_1 = HEAP32[$9_1 + 720 >> 2];
  $6_1 = $6_1 + $2_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 724 >> 2] | 0;
  $18_1 = $6_1;
  $2_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = HEAP32[$9_1 + 740 >> 2];
  $1_1 = $16_1 + $22_1 | 0;
  $19_1 = HEAP32[$9_1 + 736 >> 2];
  $6_1 = $8_1 + $19_1 | 0;
  $1_1 = $6_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $1_1 >>> 20 | 0;
  $30_1 = ($1_1 | 0) == ($22_1 | 0) & $6_1 >>> 0 < $19_1 >>> 0 | $1_1 >>> 0 < $22_1 >>> 0;
  $1_1 = $9_1 + 744 | 0;
  $32_1 = HEAP32[$1_1 >> 2];
  $33_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($3_1 | 0) == ($16_1 | 0) & $8_1 >>> 0 < $10_1 >>> 0 | $3_1 >>> 0 > $16_1 >>> 0;
  $1_1 = $9_1 + 760 | 0;
  $28_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 808 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 1128 | 0;
  $16_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $9_1 + 1064 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $43_1 = ($3_1 | 0) == ($15_1 | 0) & $10_1 >>> 0 < $51_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
  $11_1 = $1_1;
  $1_1 = $9_1 + 936 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $6_1 = $9_1 + 1e3 | 0;
  $10_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $10_1;
  $6_1 = $3_1 + (($24_1 | 0) == ($48_1 | 0) & $41_1 >>> 0 < $47_1 >>> 0 | $24_1 >>> 0 < $48_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $11_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($13_1 | 0) == ($24_1 | 0) & $41_1 >>> 0 > $49_1 >>> 0 | $13_1 >>> 0 < $24_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $16_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($13_1 | 0) == ($17_1 | 0) & $49_1 >>> 0 > $50_1 >>> 0 | $13_1 >>> 0 > $17_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $22_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($15_1 | 0) == ($17_1 | 0) & $50_1 >>> 0 > $51_1 >>> 0 | $15_1 >>> 0 < $17_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $28_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $43_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $6_1 = $4_1 + $6_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $26_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $32_1 | 0;
  $1_1 = $1_1 + $33_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $30_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $17_1 = $4_1;
  $3_1 = $4_1 << 12 | $29_1;
  $4_1 = $3_1 + $18_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $17_1 >>> 20) + $2_1 | 0;
  $11_1 = $4_1;
  $13_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $44_1 = __wasm_i64_mul($4_1, $13_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $28_1 = $1_1;
  $297($14_1, $44_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 704 | 0, $42_1, $39_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 656 | 0, $44_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($9_1 + 640 | 0, $44_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $41_1 = HEAP32[$9_1 + 1088 >> 2];
  $3_1 = HEAP32[$9_1 + 1024 >> 2];
  $4_1 = $41_1 + $3_1 | 0;
  $54_1 = HEAP32[$9_1 + 1092 >> 2];
  $1_1 = $54_1 + HEAP32[$9_1 + 1028 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $62_1 = $4_1;
  $3_1 = HEAP32[$9_1 + 1152 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1156 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $63_1 = $4_1;
  $3_1 = HEAP32[$9_1 + 1216 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1220 >> 2] | 0;
  $43_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $10_1 = $3_1 + $43_1 | 0;
  $6_1 = $31_1;
  $1_1 = ($38_1 << 12) + $4_1 | 0;
  $64_1 = $10_1;
  $3_1 = HEAP32[$9_1 + 704 >> 2];
  $10_1 = $10_1 + $3_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 708 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $48_1 = $10_1;
  $3_1 = HEAP32[$9_1 + 656 >> 2];
  $10_1 = $10_1 + $3_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 660 >> 2] | 0;
  $16_1 = $10_1;
  $3_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$9_1 + 676 >> 2];
  $1_1 = $13_1 + $26_1 | 0;
  $31_1 = HEAP32[$9_1 + 672 >> 2];
  $10_1 = $11_1 + $31_1 | 0;
  $1_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $1_1 >>> 20 | 0;
  $50_1 = ($1_1 | 0) == ($26_1 | 0) & $10_1 >>> 0 < $31_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $9_1 + 680 | 0;
  $51_1 = HEAP32[$1_1 >> 2];
  $47_1 = HEAP32[$1_1 + 4 >> 2];
  $14_1 = ($2_1 | 0) == ($13_1 | 0) & $11_1 >>> 0 < $18_1 >>> 0 | $2_1 >>> 0 > $13_1 >>> 0;
  $29_1 = ($2_1 | 0) == ($20_1 | 0) & $18_1 >>> 0 < $61_1 >>> 0 | $2_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $9_1 + 728 | 0;
  $30_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $33_1 = ($20_1 | 0) == ($21_1 | 0) & $60_1 >>> 0 > $61_1 >>> 0 | $20_1 >>> 0 < $21_1 >>> 0;
  $1_1 = $9_1 + 696 | 0;
  $26_1 = HEAP32[$1_1 >> 2];
  $31_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($5_1 | 0) == ($21_1 | 0) & $53_1 >>> 0 > $60_1 >>> 0 | $5_1 >>> 0 > $21_1 >>> 0;
  $1_1 = $9_1 + 1208 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 1144 | 0;
  $18_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $9_1 + 1080 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$2_1 + 4 >> 2];
  $21_1 = ($5_1 | 0) == ($25_1 | 0) & $53_1 >>> 0 < $59_1 >>> 0 | $5_1 >>> 0 < $25_1 >>> 0;
  $12_1 = $18_1;
  $17_1 = $1_1;
  $1_1 = $9_1 + 952 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 1016 | 0;
  $18_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $18_1;
  $5_1 = $2_1 + (($34_1 | 0) == ($52_1 | 0) & $57_1 >>> 0 < $56_1 >>> 0 | $34_1 >>> 0 < $52_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $17_1 + $5_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($34_1 | 0) == ($35_1 | 0) & $57_1 >>> 0 > $58_1 >>> 0 | $34_1 >>> 0 > $35_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($25_1 | 0) == ($35_1 | 0) & $58_1 >>> 0 > $59_1 >>> 0 | $25_1 >>> 0 < $35_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $13_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $21_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $10_1 = $5_1;
  $5_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
  $7_1 = $10_1 + $5_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $20_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $26_1 | 0;
  $1_1 = $1_1 + $31_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $33_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $30_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $29_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $7_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $51_1 | 0;
  $1_1 = $1_1 + $47_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $50_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $5_1;
  $2_1 = $5_1 << 12 | $49_1;
  $5_1 = $2_1 + $16_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $18_1 >>> 20) + $3_1 | 0;
  $14_1 = $5_1;
  HEAP32[$9_1 + 3336 >> 2] = $5_1;
  $10_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3340 >> 2] = $10_1 & 1048575;
  $26_1 = HEAP32[$9_1 + 1168 >> 2];
  $2_1 = HEAP32[$9_1 + 1104 >> 2];
  $5_1 = $26_1 + $2_1 | 0;
  $30_1 = HEAP32[$9_1 + 1172 >> 2];
  $1_1 = $30_1 + HEAP32[$9_1 + 1108 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 1232 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 1236 >> 2] | 0;
  $29_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $12_1 = $2_1 + $29_1 | 0;
  $7_1 = $46_1;
  $1_1 = ($40_1 << 12) + $5_1 | 0;
  $33_1 = $12_1;
  $2_1 = HEAP32[$9_1 + 640 >> 2];
  $12_1 = $12_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 644 >> 2] | 0;
  $11_1 = $12_1;
  $2_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = ($3_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 > $14_1 >>> 0 | $3_1 >>> 0 > $10_1 >>> 0;
  $46_1 = ($3_1 | 0) == ($24_1 | 0) & $16_1 >>> 0 < $48_1 >>> 0 | $3_1 >>> 0 < $24_1 >>> 0;
  $1_1 = $9_1 + 664 | 0;
  $34_1 = HEAP32[$1_1 >> 2];
  $35_1 = HEAP32[$1_1 + 4 >> 2];
  $25_1 = ($19_1 | 0) == ($24_1 | 0) & $48_1 >>> 0 < $64_1 >>> 0 | $19_1 >>> 0 > $24_1 >>> 0;
  $1_1 = $9_1 + 712 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $24_1 = ($4_1 | 0) == ($19_1 | 0) & $43_1 >>> 0 > $64_1 >>> 0 | $4_1 >>> 0 > $19_1 >>> 0;
  $1_1 = $9_1 + 1224 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $9_1 + 1160 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $12_1 = HEAP32[$3_1 + 4 >> 2];
  $19_1 = ($4_1 | 0) == ($22_1 | 0) & $43_1 >>> 0 < $63_1 >>> 0 | $4_1 >>> 0 < $22_1 >>> 0;
  $18_1 = $13_1;
  $14_1 = $1_1;
  $1_1 = $9_1 + 1032 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 1096 | 0;
  $13_1 = $3_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $13_1;
  $4_1 = $3_1 + (($23_1 | 0) == ($54_1 | 0) & $41_1 >>> 0 > $62_1 >>> 0 | $23_1 >>> 0 < $54_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + (($22_1 | 0) == ($23_1 | 0) & $62_1 >>> 0 > $63_1 >>> 0 | $22_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $18_1 + $3_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $19_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $6_1 >>> 20 | 0;
  $12_1 = $4_1;
  $4_1 = ($6_1 & 1048575) << 12 | $38_1 >>> 20;
  $6_1 = $12_1 + $4_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $24_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $25_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $34_1 | 0;
  $1_1 = $1_1 + $35_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $46_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $8_1 >>> 20 | 0;
  $6_1 = $3_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $31_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $4_1;
  $4_1 = $4_1 << 12 | $10_1 >>> 20;
  $6_1 = $4_1 + $11_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $2_1 | 0;
  $25_1 = $6_1;
  HEAP32[$9_1 + 3344 >> 2] = $6_1;
  $10_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3348 >> 2] = $10_1 & 1048575;
  $20_1 = HEAP32[$9_1 + 1252 >> 2];
  $1_1 = $20_1 + HEAP32[$9_1 + 1188 >> 2] | 0;
  $23_1 = HEAP32[$9_1 + 1248 >> 2];
  $3_1 = HEAP32[$9_1 + 1184 >> 2];
  $4_1 = $23_1 + $3_1 | 0;
  $21_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $12_1 = $3_1 + $21_1 | 0;
  $6_1 = $39_1;
  $1_1 = ($42_1 << 12) + $4_1 | 0;
  $3_1 = $1_1;
  $22_1 = ($2_1 | 0) == ($10_1 | 0) & $11_1 >>> 0 > $25_1 >>> 0 | $2_1 >>> 0 > $10_1 >>> 0;
  $19_1 = ($2_1 | 0) == ($15_1 | 0) & $11_1 >>> 0 < $33_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $9_1 + 648 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $18_1 = ($5_1 | 0) == ($15_1 | 0) & $29_1 >>> 0 > $33_1 >>> 0 | $5_1 >>> 0 > $15_1 >>> 0;
  $2_1 = $9_1 + 1240 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $11_1 = HEAP32[$2_1 + 4 >> 2];
  $14_1 = ($5_1 | 0) == ($17_1 | 0) & $29_1 >>> 0 < $32_1 >>> 0 | $5_1 >>> 0 < $17_1 >>> 0;
  $16_1 = $1_1;
  $1_1 = $9_1 + 1112 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 1176 | 0;
  $15_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $15_1;
  $5_1 = $2_1 + (($17_1 | 0) == ($30_1 | 0) & $26_1 >>> 0 > $32_1 >>> 0 | $17_1 >>> 0 < $30_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $16_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $14_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $15_1 = $5_1;
  $5_1 = ($7_1 & 1048575) << 12 | $40_1 >>> 20;
  $7_1 = $15_1 + $5_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $18_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $24_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $7_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $22_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $5_1;
  $5_1 = $5_1 << 12 | $10_1 >>> 20;
  $8_1 = $5_1 + $12_1 | 0;
  $7_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $3_1 | 0;
  $13_1 = $8_1;
  HEAP32[$9_1 + 3352 >> 2] = $8_1;
  $10_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3356 >> 2] = $10_1 & 1048575;
  $15_1 = 0;
  $2_1 = HEAP32[$9_1 + 1264 >> 2];
  $14_1 = $15_1 + $2_1 | 0;
  $5_1 = $28_1;
  $11_1 = $44_1 << 12;
  $1_1 = $11_1 + HEAP32[$9_1 + 1268 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $18_1 = ($3_1 | 0) == ($10_1 | 0) & $12_1 >>> 0 > $13_1 >>> 0 | $3_1 >>> 0 > $10_1 >>> 0;
  $12_1 = ($3_1 | 0) == ($4_1 | 0) & $12_1 >>> 0 < $21_1 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
  $8_1 = ($4_1 | 0) == ($20_1 | 0) & $21_1 >>> 0 < $23_1 >>> 0 | $4_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $9_1 + 1192 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 1256 | 0;
  $17_1 = $3_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $17_1;
  $4_1 = $8_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $6_1 >>> 20 | 0;
  $8_1 = $4_1;
  $4_1 = ($6_1 & 1048575) << 12 | $42_1 >>> 20;
  $6_1 = $8_1 + $4_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $7_1 >>> 20 | 0;
  $6_1 = $3_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $18_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $4_1;
  $4_1 = $4_1 << 12 | $10_1 >>> 20;
  $10_1 = $4_1 + $14_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $7_1 >>> 20) + $2_1 | 0;
  HEAP32[$9_1 + 3360 >> 2] = $10_1;
  $4_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3364 >> 2] = $4_1 & 1048575;
  $3_1 = ($2_1 | 0) == ($4_1 | 0) & $14_1 >>> 0 > $10_1 >>> 0 | $2_1 >>> 0 > $4_1 >>> 0;
  $7_1 = $2_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $5_1 >>> 20 | 0;
  $2_1 = ($5_1 & 1048575) << 12 | $44_1 >>> 20;
  $8_1 = $9_1 + 1272 | 0;
  $5_1 = $2_1 + HEAP32[$8_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$8_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $7_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $6_1 >>> 20 | 0;
  $6_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $5_1 = $3_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3368 >> 2] = $5_1 << 12 | $4_1 >>> 20;
  HEAP32[$9_1 + 3372 >> 2] = $1_1 << 12 | $5_1 >>> 20;
  $48_1 = $9_1 + 3784 | 0;
  $170($48_1, $36_1, 1065552);
  $124($36_1, $45_1);
  $5_1 = HEAP32[$9_1 + 3336 >> 2];
  $4_1 = HEAP32[$9_1 + 3340 >> 2];
  $297($9_1 + 240 | 0, $5_1, $4_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 256 | 0, $5_1, $4_1, 0, 0, -1402477478, 244405, 0, 0);
  $8_1 = HEAP32[$9_1 + 3344 >> 2];
  $1_1 = HEAP32[$9_1 + 3348 >> 2];
  $297($9_1 + 320 | 0, $8_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 272 | 0, $5_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
  $3_1 = $1_1;
  $297($9_1 + 336 | 0, $8_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $7_1 = HEAP32[$9_1 + 3352 >> 2];
  $1_1 = HEAP32[$9_1 + 3356 >> 2];
  $297($9_1 + 400 | 0, $7_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 288 | 0, $5_1, $4_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 352 | 0, $8_1, $3_1, 0, 0, -348789477, 1048575, 0, 0);
  $2_1 = $1_1;
  $297($9_1 + 416 | 0, $7_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $6_1 = HEAP32[$9_1 + 3360 >> 2];
  $1_1 = HEAP32[$9_1 + 3364 >> 2];
  $297($9_1 + 480 | 0, $6_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 304 | 0, $5_1, $4_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 368 | 0, $8_1, $3_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 432 | 0, $7_1, $2_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 496 | 0, $6_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $5_1 = HEAP32[$9_1 + 3368 >> 2];
  $4_1 = HEAP32[$9_1 + 3372 >> 2];
  $297($9_1 + 560 | 0, $5_1, $4_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($9_1 + 384 | 0, $8_1, $3_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 448 | 0, $7_1, $2_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 512 | 0, $6_1, $1_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 576 | 0, $5_1, $4_1, 0, 0, -1402477478, 244405, 0, 0);
  $297($9_1 + 464 | 0, $7_1, $2_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 528 | 0, $6_1, $1_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 592 | 0, $5_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($9_1 + 544 | 0, $6_1, $1_1, 0, 0, -1, 4095, 0, 0);
  $297($9_1 + 608 | 0, $5_1, $4_1, 0, 0, -1, 1048575, 0, 0);
  $297($9_1 + 624 | 0, $5_1, $4_1, 0, 0, -1, 4095, 0, 0);
  $5_1 = HEAP32[$9_1 + 240 >> 2];
  $4_1 = HEAP32[$9_1 + 244 >> 2];
  $37_1 = __wasm_i64_mul($5_1, $4_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $18_1 = $1_1;
  $297($9_1 + 224 | 0, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 208 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $8_1 = $9_1 + 192 | 0;
  $20_1 = HEAP32[$9_1 + 320 >> 2];
  $2_1 = HEAP32[$9_1 + 256 >> 2];
  $3_1 = $20_1 + $2_1 | 0;
  $25_1 = HEAP32[$9_1 + 324 >> 2];
  $1_1 = $25_1 + HEAP32[$9_1 + 260 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $3_1;
  $2_1 = HEAP32[$9_1 + 208 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 212 >> 2] | 0;
  $14_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = HEAP32[$9_1 + 224 >> 2];
  $2_1 = $7_1;
  $5_1 = $2_1 + $5_1 | 0;
  $10_1 = HEAP32[$9_1 + 228 >> 2];
  $1_1 = $10_1 + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $6_1 = $1_1 >>> 20 | 0;
  $5_1 = ($1_1 | 0) == ($10_1 | 0) & $2_1 >>> 0 < $7_1 >>> 0 | $1_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $9_1 + 248 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 232 | 0;
  $7_1 = $2_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $4_1 = $5_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $4_1;
  $2_1 = $4_1 << 12 | $6_1;
  $6_1 = $2_1 + $14_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $3_1 | 0;
  $7_1 = $6_1;
  $11_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $38_1 = __wasm_i64_mul($6_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $31_1 = $1_1;
  $297($8_1, $38_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 144 | 0, $37_1, $18_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 176 | 0, $38_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $28_1 = $9_1 + 128 | 0;
  $39_1 = HEAP32[$9_1 + 336 >> 2];
  $2_1 = HEAP32[$9_1 + 272 >> 2];
  $5_1 = $39_1 + $2_1 | 0;
  $29_1 = HEAP32[$9_1 + 340 >> 2];
  $1_1 = $29_1 + HEAP32[$9_1 + 276 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $30_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 400 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 404 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 144 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 148 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 176 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 180 >> 2] | 0;
  $8_1 = $5_1;
  $2_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = HEAP32[$9_1 + 196 >> 2];
  $1_1 = $11_1 + $13_1 | 0;
  $17_1 = HEAP32[$9_1 + 192 >> 2];
  $5_1 = $6_1 + $17_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $23_1 = $1_1 >>> 20 | 0;
  $24_1 = ($1_1 | 0) == ($13_1 | 0) & $5_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $13_1 >>> 0;
  $1_1 = $9_1 + 200 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $10_1 = ($3_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 < $14_1 >>> 0 | $3_1 >>> 0 > $11_1 >>> 0;
  $5_1 = $9_1 + 216 | 0;
  $1_1 = HEAP32[$5_1 >> 2];
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = ($3_1 | 0) == ($15_1 | 0) & $14_1 >>> 0 < $21_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
  $6_1 = $1_1;
  $1_1 = $9_1 + 264 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 328 | 0;
  $14_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $14_1;
  $5_1 = $3_1 + (($15_1 | 0) == ($25_1 | 0) & $20_1 >>> 0 > $21_1 >>> 0 | $15_1 >>> 0 < $25_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1 + $10_1 | 0;
  $1_1 = $5_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $13_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $24_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $4_1;
  $3_1 = $4_1 << 12 | $23_1;
  $5_1 = $3_1 + $8_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $2_1 | 0;
  $7_1 = $5_1;
  $11_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = __wasm_i64_mul($5_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $46_1 = $1_1;
  $297($28_1, $40_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 160 | 0, $38_1, $31_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 112 | 0, $40_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $9_1 + 96 | 0;
  $47_1 = HEAP32[$9_1 + 352 >> 2];
  $3_1 = HEAP32[$9_1 + 288 >> 2];
  $5_1 = $47_1 + $3_1 | 0;
  $45_1 = HEAP32[$9_1 + 356 >> 2];
  $1_1 = $45_1 + HEAP32[$9_1 + 292 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $41_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 416 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 420 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 480 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $13_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 484 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $50_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 160 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 164 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $51_1 = $5_1;
  $3_1 = HEAP32[$9_1 + 112 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 116 >> 2] | 0;
  $10_1 = $5_1;
  $3_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = HEAP32[$9_1 + 132 >> 2];
  $1_1 = $11_1 + $28_1 | 0;
  $23_1 = HEAP32[$9_1 + 128 >> 2];
  $5_1 = $7_1 + $23_1 | 0;
  $1_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $34_1 = $1_1 >>> 20 | 0;
  $35_1 = ($1_1 | 0) == ($28_1 | 0) & $5_1 >>> 0 < $23_1 >>> 0 | $1_1 >>> 0 < $28_1 >>> 0;
  $1_1 = $9_1 + 136 | 0;
  $25_1 = HEAP32[$1_1 >> 2];
  $21_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($2_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 < $8_1 >>> 0 | $2_1 >>> 0 > $11_1 >>> 0;
  $1_1 = $9_1 + 184 | 0;
  $28_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 152 | 0;
  $11_1 = HEAP32[$1_1 >> 2];
  $14_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $9_1 + 408 | 0;
  $1_1 = HEAP32[$5_1 >> 2];
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = ($2_1 | 0) == ($16_1 | 0) & $8_1 >>> 0 < $33_1 >>> 0 | $2_1 >>> 0 < $16_1 >>> 0;
  $6_1 = $1_1;
  $1_1 = $9_1 + 280 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 344 | 0;
  $8_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $5_1 = $2_1 + (($22_1 | 0) == ($29_1 | 0) & $30_1 >>> 0 < $39_1 >>> 0 | $22_1 >>> 0 < $29_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($22_1 | 0) == ($19_1 | 0) & $30_1 >>> 0 > $32_1 >>> 0 | $22_1 >>> 0 > $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $11_1 | 0;
  $1_1 = $1_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($16_1 | 0) == ($19_1 | 0) & $32_1 >>> 0 > $33_1 >>> 0 | $16_1 >>> 0 < $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $28_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1 + $20_1 | 0;
  $1_1 = $5_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $2_1 + $25_1 | 0;
  $1_1 = $1_1 + $21_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $2_1 + $35_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $4_1;
  $2_1 = $4_1 << 12 | $34_1;
  $5_1 = $2_1 + $10_1 | 0;
  $4_1 = $1_1;
  $1_1 = ($1_1 << 12 | $11_1 >>> 20) + $3_1 | 0;
  $8_1 = $5_1;
  $16_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $42_1 = __wasm_i64_mul($5_1, $16_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $39_1 = $1_1;
  $297($26_1, $42_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 + 48 | 0, $40_1, $46_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 80 | 0, $42_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $14_1 = $9_1 + 32 | 0;
  $56_1 = HEAP32[$9_1 + 368 >> 2];
  $2_1 = HEAP32[$9_1 + 304 >> 2];
  $5_1 = $56_1 + $2_1 | 0;
  $52_1 = HEAP32[$9_1 + 372 >> 2];
  $1_1 = $52_1 + HEAP32[$9_1 + 308 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $57_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 432 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $34_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 436 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $58_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 496 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $35_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 500 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $59_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 560 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $25_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 564 >> 2] | 0;
  $53_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $6_1 = $2_1 + $53_1 | 0;
  $7_1 = $18_1;
  $1_1 = ($37_1 << 12) + $5_1 | 0;
  $60_1 = $6_1;
  $2_1 = HEAP32[$9_1 + 48 >> 2];
  $6_1 = $6_1 + $2_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 52 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $6_1;
  $2_1 = HEAP32[$9_1 + 80 >> 2];
  $6_1 = $6_1 + $2_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 84 >> 2] | 0;
  $18_1 = $6_1;
  $2_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = HEAP32[$9_1 + 100 >> 2];
  $1_1 = $16_1 + $22_1 | 0;
  $19_1 = HEAP32[$9_1 + 96 >> 2];
  $6_1 = $8_1 + $19_1 | 0;
  $1_1 = $6_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $1_1 >>> 20 | 0;
  $30_1 = ($1_1 | 0) == ($22_1 | 0) & $6_1 >>> 0 < $19_1 >>> 0 | $1_1 >>> 0 < $22_1 >>> 0;
  $1_1 = $9_1 + 104 | 0;
  $32_1 = HEAP32[$1_1 >> 2];
  $33_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($3_1 | 0) == ($16_1 | 0) & $8_1 >>> 0 < $10_1 >>> 0 | $3_1 >>> 0 > $16_1 >>> 0;
  $1_1 = $9_1 + 120 | 0;
  $28_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 168 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 488 | 0;
  $16_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $9_1 + 424 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $43_1 = ($3_1 | 0) == ($15_1 | 0) & $10_1 >>> 0 < $51_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
  $11_1 = $1_1;
  $1_1 = $9_1 + 296 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $6_1 = $9_1 + 360 | 0;
  $10_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $10_1;
  $6_1 = $3_1 + (($24_1 | 0) == ($45_1 | 0) & $41_1 >>> 0 < $47_1 >>> 0 | $24_1 >>> 0 < $45_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $11_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($13_1 | 0) == ($24_1 | 0) & $41_1 >>> 0 > $49_1 >>> 0 | $13_1 >>> 0 < $24_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $16_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($13_1 | 0) == ($17_1 | 0) & $49_1 >>> 0 > $50_1 >>> 0 | $13_1 >>> 0 > $17_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $22_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + (($15_1 | 0) == ($17_1 | 0) & $50_1 >>> 0 > $51_1 >>> 0 | $15_1 >>> 0 < $17_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $28_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $43_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $6_1 = $4_1 + $6_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $26_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $32_1 | 0;
  $1_1 = $1_1 + $33_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $30_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $17_1 = $4_1;
  $3_1 = $4_1 << 12 | $29_1;
  $4_1 = $3_1 + $18_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $17_1 >>> 20) + $2_1 | 0;
  $11_1 = $4_1;
  $13_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $44_1 = __wasm_i64_mul($4_1, $13_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $28_1 = $1_1;
  $297($14_1, $44_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($9_1 - -64 | 0, $42_1, $39_1, 0, 0, 1367801, 0, 0, 0);
  $297($9_1 + 16 | 0, $44_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($9_1, $44_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $41_1 = HEAP32[$9_1 + 448 >> 2];
  $3_1 = HEAP32[$9_1 + 384 >> 2];
  $4_1 = $41_1 + $3_1 | 0;
  $54_1 = HEAP32[$9_1 + 452 >> 2];
  $1_1 = $54_1 + HEAP32[$9_1 + 388 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $62_1 = $4_1;
  $3_1 = HEAP32[$9_1 + 512 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 516 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $63_1 = $4_1;
  $3_1 = HEAP32[$9_1 + 576 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 580 >> 2] | 0;
  $43_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $10_1 = $3_1 + $43_1 | 0;
  $6_1 = $31_1;
  $1_1 = ($38_1 << 12) + $4_1 | 0;
  $64_1 = $10_1;
  $3_1 = HEAP32[$9_1 + 64 >> 2];
  $10_1 = $10_1 + $3_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 68 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $45_1 = $10_1;
  $3_1 = HEAP32[$9_1 + 16 >> 2];
  $10_1 = $10_1 + $3_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 20 >> 2] | 0;
  $16_1 = $10_1;
  $3_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$9_1 + 36 >> 2];
  $1_1 = $13_1 + $26_1 | 0;
  $31_1 = HEAP32[$9_1 + 32 >> 2];
  $10_1 = $11_1 + $31_1 | 0;
  $1_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $1_1 >>> 20 | 0;
  $50_1 = ($1_1 | 0) == ($26_1 | 0) & $10_1 >>> 0 < $31_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $9_1 + 40 | 0;
  $51_1 = HEAP32[$1_1 >> 2];
  $47_1 = HEAP32[$1_1 + 4 >> 2];
  $14_1 = ($2_1 | 0) == ($13_1 | 0) & $11_1 >>> 0 < $18_1 >>> 0 | $2_1 >>> 0 > $13_1 >>> 0;
  $29_1 = ($2_1 | 0) == ($20_1 | 0) & $18_1 >>> 0 < $61_1 >>> 0 | $2_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $9_1 + 88 | 0;
  $30_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $33_1 = ($20_1 | 0) == ($21_1 | 0) & $60_1 >>> 0 > $61_1 >>> 0 | $20_1 >>> 0 < $21_1 >>> 0;
  $1_1 = $9_1 + 56 | 0;
  $26_1 = HEAP32[$1_1 >> 2];
  $31_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($5_1 | 0) == ($21_1 | 0) & $53_1 >>> 0 > $60_1 >>> 0 | $5_1 >>> 0 > $21_1 >>> 0;
  $1_1 = $9_1 + 568 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $9_1 + 504 | 0;
  $18_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $9_1 + 440 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$2_1 + 4 >> 2];
  $21_1 = ($5_1 | 0) == ($25_1 | 0) & $53_1 >>> 0 < $59_1 >>> 0 | $5_1 >>> 0 < $25_1 >>> 0;
  $12_1 = $18_1;
  $17_1 = $1_1;
  $1_1 = $9_1 + 312 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 376 | 0;
  $18_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $18_1;
  $5_1 = $2_1 + (($34_1 | 0) == ($52_1 | 0) & $57_1 >>> 0 < $56_1 >>> 0 | $34_1 >>> 0 < $52_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $17_1 + $5_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($34_1 | 0) == ($35_1 | 0) & $57_1 >>> 0 > $58_1 >>> 0 | $34_1 >>> 0 > $35_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $12_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + (($25_1 | 0) == ($35_1 | 0) & $58_1 >>> 0 > $59_1 >>> 0 | $25_1 >>> 0 < $35_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $13_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $21_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $10_1 = $5_1;
  $5_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
  $7_1 = $10_1 + $5_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $20_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $26_1 | 0;
  $1_1 = $1_1 + $31_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $33_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $30_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $29_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $7_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $51_1 | 0;
  $1_1 = $1_1 + $47_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $50_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $5_1;
  $2_1 = $5_1 << 12 | $49_1;
  $5_1 = $2_1 + $16_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $18_1 >>> 20) + $3_1 | 0;
  $14_1 = $5_1;
  HEAP32[$9_1 + 3336 >> 2] = $5_1;
  $10_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3340 >> 2] = $10_1 & 1048575;
  $26_1 = HEAP32[$9_1 + 528 >> 2];
  $2_1 = HEAP32[$9_1 + 464 >> 2];
  $5_1 = $26_1 + $2_1 | 0;
  $30_1 = HEAP32[$9_1 + 532 >> 2];
  $1_1 = $30_1 + HEAP32[$9_1 + 468 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $2_1 = HEAP32[$9_1 + 592 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 596 >> 2] | 0;
  $29_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $12_1 = $2_1 + $29_1 | 0;
  $7_1 = $46_1;
  $1_1 = ($40_1 << 12) + $5_1 | 0;
  $33_1 = $12_1;
  $2_1 = HEAP32[$9_1 >> 2];
  $12_1 = $12_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$9_1 + 4 >> 2] | 0;
  $11_1 = $12_1;
  $2_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = ($3_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 > $14_1 >>> 0 | $3_1 >>> 0 > $10_1 >>> 0;
  $46_1 = ($3_1 | 0) == ($24_1 | 0) & $16_1 >>> 0 < $45_1 >>> 0 | $3_1 >>> 0 < $24_1 >>> 0;
  $1_1 = $9_1 + 24 | 0;
  $34_1 = HEAP32[$1_1 >> 2];
  $35_1 = HEAP32[$1_1 + 4 >> 2];
  $25_1 = ($19_1 | 0) == ($24_1 | 0) & $45_1 >>> 0 < $64_1 >>> 0 | $19_1 >>> 0 > $24_1 >>> 0;
  $1_1 = $9_1 + 72 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $24_1 = ($4_1 | 0) == ($19_1 | 0) & $43_1 >>> 0 > $64_1 >>> 0 | $4_1 >>> 0 > $19_1 >>> 0;
  $1_1 = $9_1 + 584 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $9_1 + 520 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $12_1 = HEAP32[$3_1 + 4 >> 2];
  $19_1 = ($4_1 | 0) == ($22_1 | 0) & $43_1 >>> 0 < $63_1 >>> 0 | $4_1 >>> 0 < $22_1 >>> 0;
  $18_1 = $13_1;
  $14_1 = $1_1;
  $1_1 = $9_1 + 392 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 456 | 0;
  $13_1 = $3_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $13_1;
  $4_1 = $3_1 + (($23_1 | 0) == ($54_1 | 0) & $41_1 >>> 0 > $62_1 >>> 0 | $23_1 >>> 0 < $54_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + (($22_1 | 0) == ($23_1 | 0) & $62_1 >>> 0 > $63_1 >>> 0 | $22_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $18_1 + $3_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $19_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $6_1 >>> 20 | 0;
  $12_1 = $4_1;
  $4_1 = ($6_1 & 1048575) << 12 | $38_1 >>> 20;
  $6_1 = $12_1 + $4_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $24_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $25_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $34_1 | 0;
  $1_1 = $1_1 + $35_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $3_1 + $46_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $8_1 >>> 20 | 0;
  $6_1 = $3_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $31_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $4_1;
  $4_1 = $4_1 << 12 | $10_1 >>> 20;
  $6_1 = $4_1 + $11_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $2_1 | 0;
  $25_1 = $6_1;
  HEAP32[$9_1 + 3344 >> 2] = $6_1;
  $10_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3348 >> 2] = $10_1 & 1048575;
  $20_1 = HEAP32[$9_1 + 612 >> 2];
  $1_1 = $20_1 + HEAP32[$9_1 + 548 >> 2] | 0;
  $23_1 = HEAP32[$9_1 + 608 >> 2];
  $3_1 = HEAP32[$9_1 + 544 >> 2];
  $4_1 = $23_1 + $3_1 | 0;
  $21_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $12_1 = $3_1 + $21_1 | 0;
  $6_1 = $39_1;
  $1_1 = ($42_1 << 12) + $4_1 | 0;
  $3_1 = $1_1;
  $22_1 = ($2_1 | 0) == ($10_1 | 0) & $11_1 >>> 0 > $25_1 >>> 0 | $2_1 >>> 0 > $10_1 >>> 0;
  $19_1 = ($2_1 | 0) == ($15_1 | 0) & $11_1 >>> 0 < $33_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $9_1 + 8 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $18_1 = ($5_1 | 0) == ($15_1 | 0) & $29_1 >>> 0 > $33_1 >>> 0 | $5_1 >>> 0 > $15_1 >>> 0;
  $2_1 = $9_1 + 600 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $11_1 = HEAP32[$2_1 + 4 >> 2];
  $14_1 = ($5_1 | 0) == ($17_1 | 0) & $29_1 >>> 0 < $32_1 >>> 0 | $5_1 >>> 0 < $17_1 >>> 0;
  $16_1 = $1_1;
  $1_1 = $9_1 + 472 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + 536 | 0;
  $15_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $15_1;
  $5_1 = $2_1 + (($17_1 | 0) == ($30_1 | 0) & $26_1 >>> 0 > $32_1 >>> 0 | $17_1 >>> 0 < $30_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $16_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $14_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $15_1 = $5_1;
  $5_1 = ($7_1 & 1048575) << 12 | $40_1 >>> 20;
  $7_1 = $15_1 + $5_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $18_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $24_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $5_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $7_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $2_1 + $22_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $5_1;
  $5_1 = $5_1 << 12 | $10_1 >>> 20;
  $8_1 = $5_1 + $12_1 | 0;
  $7_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $3_1 | 0;
  $13_1 = $8_1;
  HEAP32[$9_1 + 3352 >> 2] = $8_1;
  $10_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3356 >> 2] = $10_1 & 1048575;
  $15_1 = 0;
  $2_1 = HEAP32[$9_1 + 624 >> 2];
  $14_1 = $15_1 + $2_1 | 0;
  $5_1 = $28_1;
  $11_1 = $44_1 << 12;
  $1_1 = $11_1 + HEAP32[$9_1 + 628 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $18_1 = ($3_1 | 0) == ($10_1 | 0) & $12_1 >>> 0 > $13_1 >>> 0 | $3_1 >>> 0 > $10_1 >>> 0;
  $12_1 = ($3_1 | 0) == ($4_1 | 0) & $12_1 >>> 0 < $21_1 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
  $8_1 = ($4_1 | 0) == ($20_1 | 0) & $21_1 >>> 0 < $23_1 >>> 0 | $4_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $9_1 + 552 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $4_1 = $9_1 + 616 | 0;
  $17_1 = $3_1 + HEAP32[$4_1 >> 2] | 0;
  $1_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $17_1;
  $4_1 = $8_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $6_1 >>> 20 | 0;
  $8_1 = $4_1;
  $4_1 = ($6_1 & 1048575) << 12 | $42_1 >>> 20;
  $6_1 = $8_1 + $4_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $7_1 >>> 20 | 0;
  $6_1 = $3_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $4_1 = $3_1 + $18_1 | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $4_1;
  $4_1 = $4_1 << 12 | $10_1 >>> 20;
  $10_1 = $4_1 + $14_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $7_1 >>> 20) + $2_1 | 0;
  HEAP32[$9_1 + 3360 >> 2] = $10_1;
  $4_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3364 >> 2] = $4_1 & 1048575;
  $3_1 = ($2_1 | 0) == ($4_1 | 0) & $14_1 >>> 0 > $10_1 >>> 0 | $2_1 >>> 0 > $4_1 >>> 0;
  $7_1 = $2_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $5_1 >>> 20 | 0;
  $2_1 = ($5_1 & 1048575) << 12 | $44_1 >>> 20;
  $8_1 = $9_1 + 632 | 0;
  $5_1 = $2_1 + HEAP32[$8_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$8_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $7_1 + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $6_1 >>> 20 | 0;
  $6_1 = $2_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $5_1 = $3_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$9_1 + 3368 >> 2] = $5_1 << 12 | $4_1 >>> 20;
  HEAP32[$9_1 + 3372 >> 2] = $1_1 << 12 | $5_1 >>> 20;
  $4_1 = $9_1 + 3720 | 0;
  $170($4_1, $36_1, 1065552);
  $170($36_1, $48_1, $4_1);
  $92($9_1 + 3656 | 0, $36_1);
  $338($55_1);
  $2_1 = $9_1 + 3648 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3744 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3640 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3736 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3632 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3728 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3664 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3760 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3672 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3768 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3680 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 3776 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$9_1 + 3628 >> 2];
  HEAP32[$9_1 + 3720 >> 2] = HEAP32[$9_1 + 3624 >> 2];
  HEAP32[$9_1 + 3724 >> 2] = $1_1;
  $1_1 = HEAP32[$9_1 + 3660 >> 2];
  HEAP32[$9_1 + 3752 >> 2] = HEAP32[$9_1 + 3656 >> 2];
  HEAP32[$9_1 + 3756 >> 2] = $1_1;
  $91($36_1, $4_1, 64);
  $336($27_1);
  $1_1 = $91($9_1 + 1912 | 0, $36_1, 64);
  $91($27_1, $65_1, 384);
  $91($65_1, $27_1, 384);
  $91($68_1, $1_1, 64);
  $336($67_1);
  $383($66_1);
  $2_1 = $9_1 + 3312 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1440 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3320 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1448 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 3328 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1456 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$69_1 + 4 >> 2];
  HEAP32[$9_1 + 1432 >> 2] = HEAP32[$69_1 >> 2];
  HEAP32[$9_1 + 1436 >> 2] = $1_1;
  $2_1 = $9_1 + 2768 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1552 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 2760 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1544 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 2752 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1536 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$9_1 + 2748 >> 2];
  HEAP32[$9_1 + 1528 >> 2] = HEAP32[$9_1 + 2744 >> 2];
  HEAP32[$9_1 + 1532 >> 2] = $1_1;
  $2_1 = $9_1 + 2784 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1568 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 2792 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1576 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 2800 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $9_1 + 1584 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$9_1 + 2780 >> 2];
  HEAP32[$9_1 + 1560 >> 2] = HEAP32[$9_1 + 2776 >> 2];
  HEAP32[$9_1 + 1564 >> 2] = $1_1;
  $91($9_1 + 1464 | 0, $27_1, 64);
  $201($9_1 + 1288 | 0, 96, 0);
  $2_1 = HEAP32[$9_1 + 1292 >> 2];
  $1_1 = $91(HEAP32[$9_1 + 1288 >> 2], $70_1, 96);
  $392($9_1 + 1352 | 0);
  $392($9_1 + 1344 | 0);
  $392($9_1 + 1336 | 0);
  $392($9_1 + 1328 | 0);
  HEAP32[$9_1 + 1536 >> 2] = 96;
  HEAP32[$9_1 + 1532 >> 2] = $2_1;
  HEAP32[$9_1 + 1528 >> 2] = $1_1;
  $271($9_1 + 1280 | 0, $27_1);
  $1_1 = HEAP32[$9_1 + 1284 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$9_1 + 1280 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $9_1 + 3824 | 0;
 }
 
 function $2($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0;
  $3_1 = global$0 - 384 | 0;
  global$0 = $3_1;
  $77_1 = $0_1 + 32 | 0;
  $63_1 = 1797285236;
  $68_1 = 2036477234;
  $45_1 = 857760878;
  $37_1 = 1634760805;
  $46_1 = 10;
  $27_1 = 1634760805;
  $58_1 = 857760878;
  $69_1 = 2036477234;
  $70_1 = 1797285236;
  $38_1 = 1634760805;
  $47_1 = 857760878;
  $56_1 = 2036477234;
  $71_1 = 1797285236;
  $39_1 = 1634760805;
  $48_1 = 857760878;
  $33_1 = 2036477234;
  $57_1 = 1797285236;
  $81_1 = HEAP32[$0_1 + 32 >> 2];
  $49_1 = $81_1;
  $2_1 = $0_1 + 40 | 0;
  $75_1 = HEAP32[$2_1 + 4 >> 2];
  $73_1 = HEAP32[$2_1 >> 2];
  $76_1 = $73_1;
  $22_1 = $75_1;
  $28_1 = HEAP32[$0_1 + 36 >> 2];
  $72_1 = $28_1;
  $2_1 = $28_1;
  $4_1 = $49_1 + 1 | 0;
  $2_1 = $4_1 ? $2_1 : $2_1 + 1 | 0;
  $83_1 = $4_1;
  $50_1 = $4_1;
  $78_1 = $2_1;
  $17_1 = $2_1;
  $2_1 = $28_1;
  $4_1 = $49_1 + 2 | 0;
  $2_1 = $4_1 >>> 0 < 2 ? $2_1 + 1 | 0 : $2_1;
  $84_1 = $4_1;
  $7_1 = $4_1;
  $79_1 = $2_1;
  $51_1 = $2_1;
  $2_1 = $28_1;
  $4_1 = $49_1 + 3 | 0;
  $2_1 = $4_1 >>> 0 < 3 ? $2_1 + 1 | 0 : $2_1;
  $85_1 = $4_1;
  $5_1 = $4_1;
  $80_1 = $2_1;
  $52_1 = $2_1;
  $10_1 = $22_1;
  $34_1 = $10_1;
  $12_1 = $73_1;
  $53_1 = $12_1;
  $8_1 = $12_1;
  $54_1 = $10_1;
  $29_1 = HEAP32[$0_1 + 16 >> 2];
  $40_1 = $29_1;
  $2_1 = $0_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $18_1 = HEAP32[$2_1 >> 2];
  $41_1 = $18_1;
  $35_1 = HEAP32[$0_1 + 20 >> 2];
  $30_1 = $35_1;
  $64_1 = $35_1;
  $59_1 = $29_1;
  $60_1 = $29_1;
  $65_1 = $35_1;
  $11_1 = $4_1;
  $14_1 = $4_1;
  $42_1 = $18_1;
  $43_1 = $18_1;
  $13_1 = $4_1;
  $23_1 = HEAP32[$0_1 >> 2];
  $61_1 = $23_1;
  $2_1 = $0_1 + 8 | 0;
  $24_1 = HEAP32[$2_1 + 4 >> 2];
  $31_1 = HEAP32[$2_1 >> 2];
  $62_1 = $31_1;
  $16_1 = HEAP32[$0_1 + 4 >> 2];
  $25_1 = $16_1;
  $19_1 = $16_1;
  $36_1 = $23_1;
  $55_1 = $23_1;
  $20_1 = $16_1;
  $15_1 = $24_1;
  $26_1 = $15_1;
  $32_1 = $31_1;
  $44_1 = $31_1;
  $21_1 = $15_1;
  while (1) {
   if ($46_1) {
    $6_1 = $44_1;
    $33_1 = $6_1 + $33_1 | 0;
    $44_1 = $8_1 ^ $33_1;
    $9_1 = $6_1;
    $57_1 = $21_1 + $57_1 | 0;
    $54_1 = __wasm_rotl_i32($54_1 ^ $57_1, 16);
    $6_1 = $13_1 + $54_1 | 0;
    $2_1 = $6_1;
    $8_1 = __wasm_rotl_i32($44_1, 16);
    $43_1 = $8_1 + $43_1 | 0;
    $13_1 = $9_1 ^ $43_1;
    $21_1 = __wasm_rotl_i32($2_1 ^ $21_1, 12);
    $2_1 = $21_1 + $57_1 | 0;
    $9_1 = $33_1;
    $33_1 = __wasm_rotl_i32($13_1, 12);
    $57_1 = $9_1 + $33_1 | 0;
    $13_1 = $57_1;
    $44_1 = $2_1;
    $66_1 = __wasm_rotl_i32($54_1 ^ $2_1, 8);
    $2_1 = $66_1 + $6_1 | 0;
    $6_1 = __wasm_rotl_i32($8_1 ^ $13_1, 8);
    $43_1 = $6_1 + $43_1 | 0;
    $8_1 = $33_1 ^ $43_1;
    $54_1 = $2_1;
    $33_1 = __wasm_rotl_i32($21_1 ^ $2_1, 7);
    $74_1 = $33_1 + $13_1 | 0;
    $57_1 = $74_1;
    $39_1 = $55_1 + $39_1 | 0;
    $21_1 = $5_1 ^ $39_1;
    $48_1 = $20_1 + $48_1 | 0;
    $13_1 = __wasm_rotl_i32($52_1 ^ $48_1, 16);
    $52_1 = $65_1 + $13_1 | 0;
    $2_1 = $52_1;
    $9_1 = $55_1;
    $55_1 = __wasm_rotl_i32($21_1, 16);
    $5_1 = $55_1 + $60_1 | 0;
    $65_1 = $9_1 ^ $5_1;
    $20_1 = __wasm_rotl_i32($2_1 ^ $20_1, 12);
    $48_1 = $20_1 + $48_1 | 0;
    $2_1 = $48_1;
    $60_1 = __wasm_rotl_i32($65_1, 12);
    $39_1 = $60_1 + $39_1 | 0;
    $65_1 = $55_1 ^ $39_1;
    $55_1 = __wasm_rotl_i32($2_1 ^ $13_1, 8);
    $9_1 = $55_1 + $52_1 | 0;
    $2_1 = $9_1;
    $13_1 = __wasm_rotl_i32($65_1, 8);
    $67_1 = $13_1 + $5_1 | 0;
    $21_1 = $67_1;
    $20_1 = $2_1 ^ $20_1;
    $21_1 = __wasm_rotl_i32($21_1 ^ $60_1, 7);
    $44_1 = $21_1 + $44_1 | 0;
    $52_1 = __wasm_rotl_i32($6_1 ^ $44_1, 16);
    $6_1 = $52_1 + $2_1 | 0;
    $2_1 = $6_1;
    $60_1 = __wasm_rotl_i32($55_1 ^ $57_1, 16);
    $9_1 = $60_1 + $67_1 | 0;
    $21_1 = __wasm_rotl_i32($2_1 ^ $21_1, 12);
    $57_1 = $21_1 + $44_1 | 0;
    $2_1 = $57_1;
    $44_1 = __wasm_rotl_i32($9_1 ^ $33_1, 12);
    $33_1 = $44_1 + $74_1 | 0;
    $74_1 = __wasm_rotl_i32($2_1 ^ $52_1, 8);
    $2_1 = $74_1 + $6_1 | 0;
    $52_1 = __wasm_rotl_i32($33_1 ^ $60_1, 8);
    $60_1 = $9_1 + $52_1 | 0;
    $65_1 = $2_1;
    $55_1 = $21_1 ^ $2_1;
    $21_1 = __wasm_rotl_i32($44_1 ^ $60_1, 7);
    $5_1 = __wasm_rotl_i32($20_1, 7);
    $39_1 = $5_1 + $39_1 | 0;
    $20_1 = __wasm_rotl_i32($8_1, 7);
    $8_1 = $20_1 + $48_1 | 0;
    $2_1 = $8_1;
    $48_1 = $39_1 | 0;
    $2_1 = $13_1;
    $13_1 = $48_1 ^ $66_1;
    $6_1 = $54_1;
    $54_1 = __wasm_rotl_i32($2_1 ^ $8_1, 16);
    $66_1 = $6_1 + $54_1 | 0;
    $2_1 = $66_1;
    $6_1 = $43_1;
    $43_1 = __wasm_rotl_i32($13_1, 16);
    $67_1 = $6_1 + $43_1 | 0;
    $13_1 = $67_1;
    $20_1 = __wasm_rotl_i32($2_1 ^ $20_1, 12);
    $48_1 = $20_1 + $8_1 | 0;
    $2_1 = $48_1;
    $8_1 = __wasm_rotl_i32($5_1 ^ $13_1, 12);
    $39_1 = $8_1 + $39_1 | 0;
    $13_1 = $39_1;
    $6_1 = $66_1;
    $66_1 = __wasm_rotl_i32($2_1 ^ $54_1, 8);
    $2_1 = $6_1 + $66_1 | 0;
    $54_1 = __wasm_rotl_i32($13_1 ^ $43_1, 8);
    $43_1 = $67_1 + $54_1 | 0;
    $13_1 = $2_1;
    $2_1 = $20_1;
    $20_1 = $8_1 ^ $43_1;
    $44_1 = __wasm_rotl_i32($2_1 ^ $13_1, 7);
    $55_1 = __wasm_rotl_i32($55_1, 7);
    $20_1 = __wasm_rotl_i32($20_1, 7);
    $6_1 = $32_1;
    $8_1 = $6_1 + $56_1 | 0;
    $32_1 = $53_1 ^ $8_1;
    $5_1 = $26_1 + $71_1 | 0;
    $2_1 = $34_1 ^ $5_1;
    $9_1 = $6_1;
    $34_1 = $32_1;
    $32_1 = __wasm_rotl_i32($2_1, 16);
    $6_1 = $14_1 + $32_1 | 0;
    $2_1 = $6_1;
    $14_1 = $42_1;
    $42_1 = __wasm_rotl_i32($34_1, 16);
    $56_1 = $14_1 + $42_1 | 0;
    $14_1 = $9_1 ^ $56_1;
    $26_1 = __wasm_rotl_i32($2_1 ^ $26_1, 12);
    $2_1 = $26_1 + $5_1 | 0;
    $5_1 = $8_1;
    $8_1 = __wasm_rotl_i32($14_1, 12);
    $5_1 = $5_1 + $8_1 | 0;
    $14_1 = $42_1 ^ $5_1;
    $34_1 = $2_1;
    $42_1 = __wasm_rotl_i32($32_1 ^ $2_1, 8);
    $2_1 = $42_1 + $6_1 | 0;
    $6_1 = __wasm_rotl_i32($14_1, 8);
    $53_1 = $6_1 + $56_1 | 0;
    $8_1 = $8_1 ^ $53_1;
    $9_1 = $5_1;
    $32_1 = $2_1;
    $5_1 = __wasm_rotl_i32($26_1 ^ $2_1, 7);
    $56_1 = $9_1 + $5_1 | 0;
    $9_1 = $36_1;
    $38_1 = $36_1 + $38_1 | 0;
    $26_1 = $7_1 ^ $38_1;
    $47_1 = $19_1 + $47_1 | 0;
    $14_1 = __wasm_rotl_i32($51_1 ^ $47_1, 16);
    $36_1 = $64_1 + $14_1 | 0;
    $2_1 = $36_1;
    $51_1 = __wasm_rotl_i32($26_1, 16);
    $7_1 = $51_1 + $59_1 | 0;
    $64_1 = $9_1 ^ $7_1;
    $19_1 = __wasm_rotl_i32($2_1 ^ $19_1, 12);
    $47_1 = $19_1 + $47_1 | 0;
    $2_1 = $47_1;
    $59_1 = __wasm_rotl_i32($64_1, 12);
    $38_1 = $59_1 + $38_1 | 0;
    $64_1 = $51_1 ^ $38_1;
    $51_1 = __wasm_rotl_i32($2_1 ^ $14_1, 8);
    $71_1 = $51_1 + $36_1 | 0;
    $2_1 = $71_1;
    $14_1 = __wasm_rotl_i32($64_1, 8);
    $9_1 = $14_1 + $7_1 | 0;
    $19_1 = $2_1 ^ $19_1;
    $26_1 = __wasm_rotl_i32($9_1 ^ $59_1, 7);
    $34_1 = $26_1 + $34_1 | 0;
    $36_1 = __wasm_rotl_i32($6_1 ^ $34_1, 16);
    $6_1 = $36_1 + $2_1 | 0;
    $2_1 = $6_1;
    $59_1 = __wasm_rotl_i32($51_1 ^ $56_1, 16);
    $9_1 = $59_1 + $9_1 | 0;
    $26_1 = __wasm_rotl_i32($2_1 ^ $26_1, 12);
    $71_1 = $26_1 + $34_1 | 0;
    $2_1 = $71_1;
    $34_1 = __wasm_rotl_i32($5_1 ^ $9_1, 12);
    $56_1 = $34_1 + $56_1 | 0;
    $67_1 = __wasm_rotl_i32($2_1 ^ $36_1, 8);
    $2_1 = $67_1 + $6_1 | 0;
    $51_1 = __wasm_rotl_i32($56_1 ^ $59_1, 8);
    $59_1 = $9_1 + $51_1 | 0;
    $64_1 = $2_1;
    $36_1 = $26_1 ^ $2_1;
    $26_1 = __wasm_rotl_i32($34_1 ^ $59_1, 7);
    $7_1 = __wasm_rotl_i32($19_1, 7);
    $38_1 = $7_1 + $38_1 | 0;
    $19_1 = __wasm_rotl_i32($8_1, 7);
    $8_1 = $19_1 + $47_1 | 0;
    $2_1 = $8_1;
    $47_1 = $38_1 | 0;
    $2_1 = $14_1;
    $14_1 = $42_1 ^ $47_1;
    $6_1 = $32_1;
    $32_1 = __wasm_rotl_i32($2_1 ^ $8_1, 16);
    $42_1 = $6_1 + $32_1 | 0;
    $2_1 = $42_1;
    $6_1 = $53_1;
    $53_1 = __wasm_rotl_i32($14_1, 16);
    $9_1 = $6_1 + $53_1 | 0;
    $19_1 = __wasm_rotl_i32($2_1 ^ $19_1, 12);
    $47_1 = $19_1 + $8_1 | 0;
    $2_1 = $47_1;
    $8_1 = __wasm_rotl_i32($7_1 ^ $9_1, 12);
    $38_1 = $8_1 + $38_1 | 0;
    $14_1 = $38_1;
    $82_1 = __wasm_rotl_i32($2_1 ^ $32_1, 8);
    $2_1 = $82_1 + $42_1 | 0;
    $34_1 = __wasm_rotl_i32($14_1 ^ $53_1, 8);
    $42_1 = $9_1 + $34_1 | 0;
    $14_1 = $2_1;
    $2_1 = $19_1;
    $19_1 = $8_1 ^ $42_1;
    $32_1 = __wasm_rotl_i32($2_1 ^ $14_1, 7);
    $36_1 = __wasm_rotl_i32($36_1, 7);
    $19_1 = __wasm_rotl_i32($19_1, 7);
    $6_1 = $24_1;
    $7_1 = $6_1 + $70_1 | 0;
    $2_1 = $7_1;
    $8_1 = $62_1 + $69_1 | 0;
    $24_1 = $12_1 ^ $8_1;
    $2_1 = $2_1 ^ $10_1;
    $10_1 = $24_1;
    $24_1 = __wasm_rotl_i32($2_1, 16);
    $5_1 = $4_1 + $24_1 | 0;
    $2_1 = $5_1;
    $12_1 = __wasm_rotl_i32($10_1, 16);
    $41_1 = $12_1 + $41_1 | 0;
    $4_1 = $62_1 ^ $41_1;
    $10_1 = __wasm_rotl_i32($2_1 ^ $6_1, 12);
    $2_1 = $10_1 + $7_1 | 0;
    $7_1 = __wasm_rotl_i32($4_1, 12);
    $62_1 = $7_1 + $8_1 | 0;
    $4_1 = $12_1 ^ $62_1;
    $6_1 = $2_1;
    $12_1 = __wasm_rotl_i32($24_1 ^ $2_1, 8);
    $2_1 = $12_1 + $5_1 | 0;
    $24_1 = __wasm_rotl_i32($4_1, 8);
    $41_1 = $24_1 + $41_1 | 0;
    $7_1 = $7_1 ^ $41_1;
    $8_1 = $2_1;
    $5_1 = __wasm_rotl_i32($10_1 ^ $2_1, 7);
    $62_1 = $5_1 + $62_1 | 0;
    $58_1 = $16_1 + $58_1 | 0;
    $10_1 = __wasm_rotl_i32($17_1 ^ $58_1, 16);
    $17_1 = $35_1 + $10_1 | 0;
    $2_1 = $17_1;
    $27_1 = $27_1 + $61_1 | 0;
    $50_1 = __wasm_rotl_i32($50_1 ^ $27_1, 16);
    $40_1 = $50_1 + $40_1 | 0;
    $4_1 = $61_1 ^ $40_1;
    $35_1 = __wasm_rotl_i32($2_1 ^ $16_1, 12);
    $61_1 = $35_1 + $58_1 | 0;
    $2_1 = $61_1;
    $9_1 = $27_1;
    $27_1 = __wasm_rotl_i32($4_1, 12);
    $58_1 = $9_1 + $27_1 | 0;
    $4_1 = $58_1;
    $69_1 = __wasm_rotl_i32($2_1 ^ $10_1, 8);
    $70_1 = $69_1 + $17_1 | 0;
    $2_1 = $70_1;
    $16_1 = __wasm_rotl_i32($4_1 ^ $50_1, 8);
    $40_1 = $16_1 + $40_1 | 0;
    $50_1 = $27_1 ^ $40_1;
    $10_1 = $2_1 ^ $35_1;
    $35_1 = __wasm_rotl_i32($50_1, 7);
    $6_1 = $35_1 + $6_1 | 0;
    $24_1 = __wasm_rotl_i32($24_1 ^ $6_1, 16);
    $27_1 = $24_1 + $2_1 | 0;
    $2_1 = $27_1;
    $4_1 = $40_1;
    $40_1 = __wasm_rotl_i32($62_1 ^ $69_1, 16);
    $53_1 = $4_1 + $40_1 | 0;
    $4_1 = $53_1;
    $17_1 = __wasm_rotl_i32($2_1 ^ $35_1, 12);
    $70_1 = $17_1 + $6_1 | 0;
    $2_1 = $70_1;
    $5_1 = __wasm_rotl_i32($4_1 ^ $5_1, 12);
    $69_1 = $5_1 + $62_1 | 0;
    $4_1 = $69_1;
    $9_1 = __wasm_rotl_i32($2_1 ^ $24_1, 8);
    $2_1 = $9_1 + $27_1 | 0;
    $6_1 = __wasm_rotl_i32($4_1 ^ $40_1, 8);
    $40_1 = $53_1 + $6_1 | 0;
    $35_1 = $2_1;
    $17_1 = $17_1 ^ $2_1;
    $24_1 = __wasm_rotl_i32($5_1 ^ $40_1, 7);
    $50_1 = __wasm_rotl_i32($10_1, 7);
    $27_1 = $50_1 + $58_1 | 0;
    $4_1 = $12_1 ^ $27_1;
    $10_1 = __wasm_rotl_i32($7_1, 7);
    $7_1 = $10_1 + $61_1 | 0;
    $16_1 = __wasm_rotl_i32($16_1 ^ $7_1, 16);
    $12_1 = $16_1 + $8_1 | 0;
    $2_1 = $12_1;
    $5_1 = $41_1;
    $41_1 = __wasm_rotl_i32($4_1, 16);
    $61_1 = $5_1 + $41_1 | 0;
    $4_1 = $61_1;
    $10_1 = __wasm_rotl_i32($2_1 ^ $10_1, 12);
    $58_1 = $10_1 + $7_1 | 0;
    $2_1 = $58_1;
    $7_1 = __wasm_rotl_i32($4_1 ^ $50_1, 12);
    $27_1 = $7_1 + $27_1 | 0;
    $4_1 = $27_1;
    $50_1 = __wasm_rotl_i32($2_1 ^ $16_1, 8);
    $2_1 = $50_1 + $12_1 | 0;
    $8_1 = __wasm_rotl_i32($4_1 ^ $41_1, 8);
    $41_1 = $61_1 + $8_1 | 0;
    $4_1 = $2_1;
    $62_1 = __wasm_rotl_i32($10_1 ^ $2_1, 7);
    $61_1 = __wasm_rotl_i32($17_1, 7);
    $16_1 = __wasm_rotl_i32($7_1 ^ $41_1, 7);
    $7_1 = $31_1 + $68_1 | 0;
    $17_1 = $76_1 ^ $7_1;
    $5_1 = $15_1 + $63_1 | 0;
    $10_1 = __wasm_rotl_i32($22_1 ^ $5_1, 16);
    $22_1 = $11_1 + $10_1 | 0;
    $2_1 = $22_1;
    $11_1 = $18_1;
    $18_1 = __wasm_rotl_i32($17_1, 16);
    $12_1 = $11_1 + $18_1 | 0;
    $11_1 = $31_1 ^ $12_1;
    $15_1 = __wasm_rotl_i32($2_1 ^ $15_1, 12);
    $2_1 = $15_1 + $5_1 | 0;
    $5_1 = $7_1;
    $7_1 = __wasm_rotl_i32($11_1, 12);
    $31_1 = $5_1 + $7_1 | 0;
    $11_1 = $31_1;
    $17_1 = $2_1;
    $5_1 = __wasm_rotl_i32($10_1 ^ $2_1, 8);
    $2_1 = $5_1 + $22_1 | 0;
    $22_1 = __wasm_rotl_i32($11_1 ^ $18_1, 8);
    $12_1 = $22_1 + $12_1 | 0;
    $7_1 = $7_1 ^ $12_1;
    $10_1 = $2_1;
    $31_1 = __wasm_rotl_i32($15_1 ^ $2_1, 7);
    $68_1 = $11_1 + $31_1 | 0;
    $63_1 = $68_1;
    $18_1 = $23_1 + $37_1 | 0;
    $15_1 = $49_1 ^ $18_1;
    $45_1 = $25_1 + $45_1 | 0;
    $11_1 = __wasm_rotl_i32($28_1 ^ $45_1, 16);
    $28_1 = $30_1 + $11_1 | 0;
    $2_1 = $28_1;
    $30_1 = $29_1;
    $29_1 = __wasm_rotl_i32($15_1, 16);
    $37_1 = $30_1 + $29_1 | 0;
    $30_1 = $23_1 ^ $37_1;
    $25_1 = __wasm_rotl_i32($2_1 ^ $25_1, 12);
    $45_1 = $25_1 + $45_1 | 0;
    $2_1 = $45_1;
    $23_1 = $18_1;
    $18_1 = __wasm_rotl_i32($30_1, 12);
    $49_1 = $23_1 + $18_1 | 0;
    $30_1 = $29_1 ^ $49_1;
    $29_1 = __wasm_rotl_i32($2_1 ^ $11_1, 8);
    $23_1 = $29_1 + $28_1 | 0;
    $2_1 = $23_1;
    $11_1 = __wasm_rotl_i32($30_1, 8);
    $37_1 = $11_1 + $37_1 | 0;
    $15_1 = $37_1;
    $25_1 = $2_1 ^ $25_1;
    $30_1 = $63_1;
    $15_1 = __wasm_rotl_i32($15_1 ^ $18_1, 7);
    $63_1 = $15_1 + $17_1 | 0;
    $28_1 = __wasm_rotl_i32($22_1 ^ $63_1, 16);
    $22_1 = $28_1 + $2_1 | 0;
    $2_1 = $22_1;
    $29_1 = __wasm_rotl_i32($30_1 ^ $29_1, 16);
    $23_1 = $29_1 + $37_1 | 0;
    $15_1 = __wasm_rotl_i32($2_1 ^ $15_1, 12);
    $63_1 = $63_1 + $15_1 | 0;
    $2_1 = $63_1;
    $31_1 = __wasm_rotl_i32($23_1 ^ $31_1, 12);
    $68_1 = $31_1 + $68_1 | 0;
    $30_1 = $68_1;
    $76_1 = __wasm_rotl_i32($2_1 ^ $28_1, 8);
    $2_1 = $76_1 + $22_1 | 0;
    $28_1 = __wasm_rotl_i32($30_1 ^ $29_1, 8);
    $29_1 = $23_1 + $28_1 | 0;
    $23_1 = $31_1 ^ $29_1;
    $30_1 = $2_1;
    $17_1 = $15_1 ^ $2_1;
    $15_1 = __wasm_rotl_i32($23_1, 7);
    $18_1 = __wasm_rotl_i32($25_1, 7);
    $37_1 = $18_1 + $49_1 | 0;
    $25_1 = __wasm_rotl_i32($7_1, 7);
    $7_1 = $25_1 + $45_1 | 0;
    $2_1 = $7_1;
    $45_1 = $37_1 | 0;
    $2_1 = $11_1;
    $11_1 = $5_1 ^ $45_1;
    $5_1 = $10_1;
    $10_1 = __wasm_rotl_i32($2_1 ^ $7_1, 16);
    $5_1 = $5_1 + $10_1 | 0;
    $2_1 = $5_1;
    $22_1 = $12_1;
    $12_1 = __wasm_rotl_i32($11_1, 16);
    $49_1 = $22_1 + $12_1 | 0;
    $11_1 = $49_1;
    $25_1 = __wasm_rotl_i32($2_1 ^ $25_1, 12);
    $45_1 = $25_1 + $7_1 | 0;
    $2_1 = $45_1;
    $7_1 = __wasm_rotl_i32($11_1 ^ $18_1, 12);
    $37_1 = $7_1 + $37_1 | 0;
    $11_1 = $37_1;
    $22_1 = $5_1;
    $5_1 = __wasm_rotl_i32($2_1 ^ $10_1, 8);
    $2_1 = $22_1 + $5_1 | 0;
    $22_1 = __wasm_rotl_i32($11_1 ^ $12_1, 8);
    $18_1 = $49_1 + $22_1 | 0;
    $11_1 = $2_1;
    $31_1 = __wasm_rotl_i32($25_1 ^ $2_1, 7);
    $23_1 = __wasm_rotl_i32($17_1, 7);
    $25_1 = __wasm_rotl_i32($7_1 ^ $18_1, 7);
    $53_1 = $67_1;
    $7_1 = $82_1;
    $12_1 = $9_1;
    $10_1 = $8_1;
    $17_1 = $6_1;
    $49_1 = $5_1;
    $8_1 = $74_1;
    $5_1 = $66_1;
    $46_1 = $46_1 - 1 | 0;
    continue;
   } else {
    label$4 : {
     HEAP32[$3_1 + 100 >> 2] = $57_1;
     HEAP32[$3_1 + 96 >> 2] = $33_1;
     HEAP32[$3_1 + 92 >> 2] = $48_1;
     HEAP32[$3_1 + 84 >> 2] = $71_1;
     HEAP32[$3_1 + 80 >> 2] = $56_1;
     HEAP32[$3_1 + 76 >> 2] = $47_1;
     HEAP32[$3_1 + 68 >> 2] = $70_1;
     HEAP32[$3_1 - -64 >> 2] = $69_1;
     HEAP32[$3_1 + 60 >> 2] = $58_1;
     HEAP32[$3_1 + 88 >> 2] = $39_1;
     HEAP32[$3_1 + 72 >> 2] = $38_1;
     HEAP32[$3_1 + 56 >> 2] = $27_1;
     HEAP32[$3_1 + 52 >> 2] = $63_1;
     HEAP32[$3_1 + 48 >> 2] = $68_1;
     HEAP32[$3_1 + 44 >> 2] = $45_1;
     HEAP32[$3_1 + 40 >> 2] = $37_1;
     $2_1 = $3_1 + 160 | 0;
     HEAP32[$2_1 >> 2] = $44_1;
     HEAP32[$2_1 + 4 >> 2] = $21_1;
     $2_1 = $3_1 + 144 | 0;
     HEAP32[$2_1 >> 2] = $32_1;
     HEAP32[$2_1 + 4 >> 2] = $26_1;
     $2_1 = $3_1 + 128 | 0;
     HEAP32[$2_1 >> 2] = $62_1;
     HEAP32[$2_1 + 4 >> 2] = $24_1;
     HEAP32[$3_1 + 152 >> 2] = $55_1;
     HEAP32[$3_1 + 156 >> 2] = $20_1;
     HEAP32[$3_1 + 136 >> 2] = $36_1;
     HEAP32[$3_1 + 140 >> 2] = $19_1;
     HEAP32[$3_1 + 120 >> 2] = $61_1;
     HEAP32[$3_1 + 124 >> 2] = $16_1;
     HEAP32[$3_1 + 112 >> 2] = $31_1;
     HEAP32[$3_1 + 116 >> 2] = $15_1;
     HEAP32[$3_1 + 104 >> 2] = $23_1;
     HEAP32[$3_1 + 108 >> 2] = $25_1;
     $2_1 = $3_1 + 224 | 0;
     HEAP32[$2_1 >> 2] = $43_1;
     HEAP32[$2_1 + 4 >> 2] = $13_1;
     $2_1 = $3_1 + 208 | 0;
     HEAP32[$2_1 >> 2] = $42_1;
     HEAP32[$2_1 + 4 >> 2] = $14_1;
     $2_1 = $3_1 + 192 | 0;
     HEAP32[$2_1 >> 2] = $41_1;
     HEAP32[$2_1 + 4 >> 2] = $4_1;
     HEAP32[$3_1 + 216 >> 2] = $60_1;
     HEAP32[$3_1 + 220 >> 2] = $65_1;
     HEAP32[$3_1 + 200 >> 2] = $59_1;
     HEAP32[$3_1 + 204 >> 2] = $64_1;
     HEAP32[$3_1 + 184 >> 2] = $40_1;
     HEAP32[$3_1 + 188 >> 2] = $35_1;
     HEAP32[$3_1 + 176 >> 2] = $18_1;
     HEAP32[$3_1 + 180 >> 2] = $11_1;
     HEAP32[$3_1 + 168 >> 2] = $29_1;
     HEAP32[$3_1 + 172 >> 2] = $30_1;
     $2_1 = $3_1 + 288 | 0;
     HEAP32[$2_1 >> 2] = $8_1;
     HEAP32[$2_1 + 4 >> 2] = $54_1;
     $2_1 = $3_1 + 272 | 0;
     HEAP32[$2_1 >> 2] = $53_1;
     HEAP32[$2_1 + 4 >> 2] = $34_1;
     $2_1 = $3_1 + 256 | 0;
     HEAP32[$2_1 >> 2] = $12_1;
     HEAP32[$2_1 + 4 >> 2] = $10_1;
     HEAP32[$3_1 + 280 >> 2] = $5_1;
     HEAP32[$3_1 + 284 >> 2] = $52_1;
     HEAP32[$3_1 + 264 >> 2] = $7_1;
     HEAP32[$3_1 + 268 >> 2] = $51_1;
     HEAP32[$3_1 + 248 >> 2] = $50_1;
     HEAP32[$3_1 + 252 >> 2] = $17_1;
     HEAP32[$3_1 + 240 >> 2] = $76_1;
     HEAP32[$3_1 + 244 >> 2] = $22_1;
     HEAP32[$3_1 + 232 >> 2] = $49_1;
     HEAP32[$3_1 + 236 >> 2] = $28_1;
     $35_1 = HEAP32[$0_1 + 24 >> 2];
     $65_1 = HEAP32[$0_1 >> 2];
     $13_1 = HEAP32[$0_1 + 4 >> 2];
     $24_1 = HEAP32[$0_1 + 8 >> 2];
     $30_1 = HEAP32[$0_1 + 12 >> 2];
     $64_1 = HEAP32[$0_1 + 16 >> 2];
     $11_1 = HEAP32[$0_1 + 20 >> 2];
     $14_1 = HEAP32[$0_1 + 28 >> 2];
     $2_1 = $3_1 + 352 | 0;
     HEAP32[$2_1 >> 2] = $73_1;
     HEAP32[$2_1 + 4 >> 2] = $75_1;
     $2_1 = $3_1 + 336 | 0;
     HEAP32[$2_1 >> 2] = $73_1;
     HEAP32[$2_1 + 4 >> 2] = $75_1;
     $2_1 = $3_1 + 320 | 0;
     HEAP32[$2_1 >> 2] = $73_1;
     HEAP32[$2_1 + 4 >> 2] = $75_1;
     $4_1 = $77_1 + 8 | 0;
     $16_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $3_1 + 304 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $16_1;
     $2_1 = HEAP32[$77_1 >> 2];
     $4_1 = HEAP32[$77_1 + 4 >> 2];
     $16_1 = $81_1 + 4 | 0;
     $72_1 = $16_1 >>> 0 < 4 ? $72_1 + 1 | 0 : $72_1;
     HEAP32[$0_1 + 36 >> 2] = $72_1;
     HEAP32[$0_1 + 32 >> 2] = $16_1;
     HEAP32[$3_1 + 344 >> 2] = $85_1;
     HEAP32[$3_1 + 348 >> 2] = $80_1;
     HEAP32[$3_1 + 328 >> 2] = $84_1;
     HEAP32[$3_1 + 332 >> 2] = $79_1;
     HEAP32[$3_1 + 312 >> 2] = $83_1;
     HEAP32[$3_1 + 316 >> 2] = $78_1;
     HEAP32[$3_1 + 296 >> 2] = $2_1;
     HEAP32[$3_1 + 300 >> 2] = $4_1;
     $0_1 = $3_1 + 372 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 16;
     HEAP32[$3_1 + 360 >> 2] = $1_1;
     HEAP32[$3_1 + 364 >> 2] = 256;
     HEAP32[$3_1 + 368 >> 2] = $1_1 + 256;
     $46_1 = 0;
     while (1) {
      if (($46_1 | 0) != 64) {
       $0_1 = ($3_1 + 40 | 0) + $46_1 | 0;
       $16_1 = HEAP32[$0_1 >> 2];
       $72_1 = HEAP32[$0_1 + 12 >> 2];
       $20_1 = HEAP32[$0_1 + 8 >> 2];
       $21_1 = HEAP32[$0_1 + 4 >> 2];
       $0_1 = ($3_1 + 296 | 0) + $46_1 | 0;
       $10_1 = HEAP32[$0_1 + 12 >> 2];
       $25_1 = HEAP32[$0_1 + 8 >> 2];
       $19_1 = HEAP32[$0_1 + 4 >> 2];
       $1_1 = ($3_1 + 232 | 0) + $46_1 | 0;
       $15_1 = HEAP32[$1_1 + 12 >> 2];
       $26_1 = HEAP32[$1_1 + 8 >> 2];
       $78_1 = HEAP32[$1_1 + 4 >> 2];
       $2_1 = ($3_1 + 168 | 0) + $46_1 | 0;
       $79_1 = HEAP32[$2_1 + 12 >> 2];
       $80_1 = HEAP32[$2_1 + 8 >> 2];
       $36_1 = HEAP32[$2_1 + 4 >> 2];
       $4_1 = ($3_1 + 104 | 0) + $46_1 | 0;
       $32_1 = HEAP32[$4_1 + 12 >> 2];
       $28_1 = HEAP32[$4_1 + 8 >> 2];
       $17_1 = HEAP32[$4_1 + 4 >> 2];
       $51_1 = HEAP32[$0_1 >> 2];
       $52_1 = HEAP32[$1_1 >> 2];
       $2_1 = HEAP32[$2_1 >> 2];
       $4_1 = HEAP32[$4_1 >> 2];
       $289($3_1 + 32 | 0, $3_1 + 360 | 0);
       $0_1 = HEAP32[$3_1 + 32 >> 2];
       if (!$0_1 | HEAP32[$3_1 + 36 >> 2] != 16) {
        break label$4
       }
       $1_1 = $72_1 + 1797285236 | 0;
       HEAP8[$0_1 + 12 | 0] = $1_1;
       HEAP8[$0_1 + 13 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 14 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 15 | 0] = $1_1 >>> 24;
       $1_1 = $20_1 + 2036477234 | 0;
       HEAP8[$0_1 + 8 | 0] = $1_1;
       HEAP8[$0_1 + 9 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 10 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 11 | 0] = $1_1 >>> 24;
       $1_1 = $21_1 + 857760878 | 0;
       HEAP8[$0_1 + 4 | 0] = $1_1;
       HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
       $1_1 = $16_1 + 1634760805 | 0;
       HEAP8[$0_1 | 0] = $1_1;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
       $289($3_1 + 24 | 0, $3_1 + 360 | 0);
       $0_1 = HEAP32[$3_1 + 24 >> 2];
       if (!$0_1 | HEAP32[$3_1 + 28 >> 2] != 16) {
        break label$4
       }
       $1_1 = $30_1 + $32_1 | 0;
       HEAP8[$0_1 + 12 | 0] = $1_1;
       HEAP8[$0_1 + 13 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 14 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 15 | 0] = $1_1 >>> 24;
       $1_1 = $24_1 + $28_1 | 0;
       HEAP8[$0_1 + 8 | 0] = $1_1;
       HEAP8[$0_1 + 9 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 10 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 11 | 0] = $1_1 >>> 24;
       $1_1 = $13_1 + $17_1 | 0;
       HEAP8[$0_1 + 4 | 0] = $1_1;
       HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
       $1_1 = $4_1 + $65_1 | 0;
       HEAP8[$0_1 | 0] = $1_1;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
       $289($3_1 + 16 | 0, $3_1 + 360 | 0);
       $0_1 = HEAP32[$3_1 + 16 >> 2];
       if (!$0_1 | HEAP32[$3_1 + 20 >> 2] != 16) {
        break label$4
       }
       $1_1 = $14_1 + $79_1 | 0;
       HEAP8[$0_1 + 12 | 0] = $1_1;
       HEAP8[$0_1 + 13 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 14 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 15 | 0] = $1_1 >>> 24;
       $1_1 = $35_1 + $80_1 | 0;
       HEAP8[$0_1 + 8 | 0] = $1_1;
       HEAP8[$0_1 + 9 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 10 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 11 | 0] = $1_1 >>> 24;
       $1_1 = $11_1 + $36_1 | 0;
       HEAP8[$0_1 + 4 | 0] = $1_1;
       HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
       $1_1 = $2_1 + $64_1 | 0;
       HEAP8[$0_1 | 0] = $1_1;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
       $289($3_1 + 8 | 0, $3_1 + 360 | 0);
       $0_1 = HEAP32[$3_1 + 8 >> 2];
       if (!$0_1 | HEAP32[$3_1 + 12 >> 2] != 16) {
        break label$4
       }
       $1_1 = $10_1 + $15_1 | 0;
       HEAP8[$0_1 + 12 | 0] = $1_1;
       HEAP8[$0_1 + 13 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 14 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 15 | 0] = $1_1 >>> 24;
       $1_1 = $26_1 + $25_1 | 0;
       HEAP8[$0_1 + 8 | 0] = $1_1;
       HEAP8[$0_1 + 9 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 10 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 11 | 0] = $1_1 >>> 24;
       $1_1 = $19_1 + $78_1 | 0;
       HEAP8[$0_1 + 4 | 0] = $1_1;
       HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
       $1_1 = $52_1 + $51_1 | 0;
       HEAP8[$0_1 | 0] = $1_1;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
       HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
       HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
       $46_1 = $46_1 + 16 | 0;
       continue;
      }
      break;
     };
     global$0 = $3_1 + 384 | 0;
     return;
    }
   }
   break;
  };
  abort();
 }
 
 function $3($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $10_1 = global$0 - 4608 | 0;
  global$0 = $10_1;
  $288($10_1 + 72 | 0, $0_1, $1_1);
  $1_1 = HEAP32[$10_1 + 76 >> 2];
  HEAP32[$10_1 + 84 >> 2] = $1_1;
  $0_1 = HEAP32[$10_1 + 72 >> 2];
  HEAP32[$10_1 + 80 >> 2] = $0_1;
  $288($10_1 - -64 | 0, $2_1, $3_1);
  $22_1 = HEAP32[$10_1 + 68 >> 2];
  HEAP32[$10_1 + 92 >> 2] = $22_1;
  $23_1 = HEAP32[$10_1 + 64 >> 2];
  HEAP32[$10_1 + 88 >> 2] = $23_1;
  $288($10_1 + 56 | 0, $4_1, $5_1);
  $24_1 = HEAP32[$10_1 + 60 >> 2];
  HEAP32[$10_1 + 100 >> 2] = $24_1;
  $25_1 = HEAP32[$10_1 + 56 >> 2];
  HEAP32[$10_1 + 96 >> 2] = $25_1;
  $288($10_1 + 48 | 0, $6_1, $7_1);
  $26_1 = HEAP32[$10_1 + 52 >> 2];
  HEAP32[$10_1 + 108 >> 2] = $26_1;
  $27_1 = HEAP32[$10_1 + 48 >> 2];
  HEAP32[$10_1 + 104 >> 2] = $27_1;
  $288($10_1 + 40 | 0, $8_1, $9_1);
  $2_1 = HEAP32[$10_1 + 44 >> 2];
  HEAP32[$10_1 + 116 >> 2] = $2_1;
  $6_1 = HEAP32[$10_1 + 40 >> 2];
  HEAP32[$10_1 + 112 >> 2] = $6_1;
  $159($10_1 + 3280 | 0, $0_1, $1_1);
  $5_1 = 32;
  $302($10_1 + 32 | 0, $6_1, $2_1, 32);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $1_1 = HEAP32[$10_1 + 36 >> 2];
          label$9 : {
           if (($1_1 | 0) != 32) {
            $18_1 = 9;
            $19_1 = 1048650;
            $14_1 = 82;
            $15_1 = 3;
            $9_1 = 1048641;
            break label$9;
           }
           $0_1 = HEAP32[$10_1 + 32 >> 2];
           HEAP8[$10_1 + 1698 | 0] = 0;
           HEAP16[$10_1 + 1696 >> 1] = 0;
           $302($10_1 + 24 | 0, $0_1, 32, 32);
           if (HEAP32[$10_1 + 28 >> 2] != 32) {
            break label$8
           }
           $3_1 = HEAP32[$10_1 + 24 >> 2];
           $0_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8;
           HEAP8[$10_1 + 3154 | 0] = HEAPU8[$3_1 + 2 | 0];
           HEAP8[$10_1 + 3058 | 0] = HEAPU8[$3_1 + 6 | 0];
           HEAP16[$10_1 + 3152 >> 1] = $0_1;
           HEAP16[$10_1 + 3056 >> 1] = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8;
           $16_1 = HEAPU8[$3_1 + 31 | 0];
           $20_1 = HEAPU8[$3_1 + 27 | 0] | HEAPU8[$3_1 + 28 | 0] << 8 | (HEAPU8[$3_1 + 29 | 0] << 16 | HEAPU8[$3_1 + 30 | 0] << 24);
           $18_1 = HEAPU8[$3_1 + 11 | 0] | HEAPU8[$3_1 + 12 | 0] << 8 | (HEAPU8[$3_1 + 13 | 0] << 16 | HEAPU8[$3_1 + 14 | 0] << 24);
           $19_1 = HEAPU8[$3_1 + 15 | 0] | HEAPU8[$3_1 + 16 | 0] << 8 | (HEAPU8[$3_1 + 17 | 0] << 16 | HEAPU8[$3_1 + 18 | 0] << 24);
           $14_1 = HEAPU8[$3_1 + 19 | 0] | HEAPU8[$3_1 + 20 | 0] << 8 | (HEAPU8[$3_1 + 21 | 0] << 16 | HEAPU8[$3_1 + 22 | 0] << 24);
           $5_1 = HEAPU8[$3_1 + 23 | 0] | HEAPU8[$3_1 + 24 | 0] << 8 | (HEAPU8[$3_1 + 25 | 0] << 16 | HEAPU8[$3_1 + 26 | 0] << 24);
           $15_1 = HEAPU8[$3_1 + 3 | 0];
           $9_1 = HEAPU8[$3_1 + 7 | 0] | HEAPU8[$3_1 + 8 | 0] << 8 | (HEAPU8[$3_1 + 9 | 0] << 16 | HEAPU8[$3_1 + 10 | 0] << 24);
          }
          if ($2_1 >>> 0 > 95) {
           $17_1 = $10_1 + 1128 | 0;
           $0_1 = $17_1;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           $13_1 = $10_1 + 1120 | 0;
           $0_1 = $13_1;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           $4_1 = $10_1 + 1112 | 0;
           $0_1 = $4_1;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           HEAP32[$10_1 + 1104 >> 2] = 0;
           HEAP32[$10_1 + 1108 >> 2] = 0;
           $11_1 = $10_1 + 1336 | 0;
           $0_1 = $11_1;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           $3_1 = $10_1 + 1328 | 0;
           $0_1 = $3_1;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           $0_1 = $10_1 + 1320 | 0;
           HEAP32[$0_1 >> 2] = 0;
           HEAP32[$0_1 + 4 >> 2] = 0;
           HEAP32[$10_1 + 1312 >> 2] = 0;
           HEAP32[$10_1 + 1316 >> 2] = 0;
           $302($10_1 + 16 | 0, $6_1 + 32 | 0, 64, 32);
           if (HEAP32[$10_1 + 20 >> 2] != 32) {
            break label$8
           }
           $2_1 = HEAP32[$10_1 + 16 >> 2];
           $8_1 = $2_1 + 24 | 0;
           $7_1 = HEAPU8[$8_1 + 4 | 0] | HEAPU8[$8_1 + 5 | 0] << 8 | (HEAPU8[$8_1 + 6 | 0] << 16 | HEAPU8[$8_1 + 7 | 0] << 24);
           HEAP32[$17_1 >> 2] = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
           HEAP32[$17_1 + 4 >> 2] = $7_1;
           $8_1 = $2_1 + 16 | 0;
           $7_1 = HEAPU8[$8_1 + 4 | 0] | HEAPU8[$8_1 + 5 | 0] << 8 | (HEAPU8[$8_1 + 6 | 0] << 16 | HEAPU8[$8_1 + 7 | 0] << 24);
           HEAP32[$13_1 >> 2] = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
           HEAP32[$13_1 + 4 >> 2] = $7_1;
           $8_1 = $2_1 + 8 | 0;
           $7_1 = HEAPU8[$8_1 + 4 | 0] | HEAPU8[$8_1 + 5 | 0] << 8 | (HEAPU8[$8_1 + 6 | 0] << 16 | HEAPU8[$8_1 + 7 | 0] << 24);
           HEAP32[$4_1 >> 2] = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
           HEAP32[$4_1 + 4 >> 2] = $7_1;
           $8_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           $7_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $12_1 = $6_1 + 72 | 0;
           $2_1 = HEAPU8[$12_1 + 4 | 0] | HEAPU8[$12_1 + 5 | 0] << 8 | (HEAPU8[$12_1 + 6 | 0] << 16 | HEAPU8[$12_1 + 7 | 0] << 24);
           HEAP32[$0_1 >> 2] = HEAPU8[$12_1 | 0] | HEAPU8[$12_1 + 1 | 0] << 8 | (HEAPU8[$12_1 + 2 | 0] << 16 | HEAPU8[$12_1 + 3 | 0] << 24);
           HEAP32[$0_1 + 4 >> 2] = $2_1;
           $12_1 = $6_1 + 80 | 0;
           $2_1 = HEAPU8[$12_1 + 4 | 0] | HEAPU8[$12_1 + 5 | 0] << 8 | (HEAPU8[$12_1 + 6 | 0] << 16 | HEAPU8[$12_1 + 7 | 0] << 24);
           HEAP32[$3_1 >> 2] = HEAPU8[$12_1 | 0] | HEAPU8[$12_1 + 1 | 0] << 8 | (HEAPU8[$12_1 + 2 | 0] << 16 | HEAPU8[$12_1 + 3 | 0] << 24);
           HEAP32[$3_1 + 4 >> 2] = $2_1;
           $12_1 = $6_1 + 88 | 0;
           $2_1 = HEAPU8[$12_1 + 4 | 0] | HEAPU8[$12_1 + 5 | 0] << 8 | (HEAPU8[$12_1 + 6 | 0] << 16 | HEAPU8[$12_1 + 7 | 0] << 24);
           HEAP32[$11_1 >> 2] = HEAPU8[$12_1 | 0] | HEAPU8[$12_1 + 1 | 0] << 8 | (HEAPU8[$12_1 + 2 | 0] << 16 | HEAPU8[$12_1 + 3 | 0] << 24);
           HEAP32[$11_1 + 4 >> 2] = $2_1;
           HEAP32[$10_1 + 1104 >> 2] = $8_1;
           HEAP32[$10_1 + 1108 >> 2] = $7_1;
           $2_1 = HEAPU8[$6_1 + 68 | 0] | HEAPU8[$6_1 + 69 | 0] << 8 | (HEAPU8[$6_1 + 70 | 0] << 16 | HEAPU8[$6_1 + 71 | 0] << 24);
           HEAP32[$10_1 + 1312 >> 2] = HEAPU8[$6_1 + 64 | 0] | HEAPU8[$6_1 + 65 | 0] << 8 | (HEAPU8[$6_1 + 66 | 0] << 16 | HEAPU8[$6_1 + 67 | 0] << 24);
           HEAP32[$10_1 + 1316 >> 2] = $2_1;
           $2_1 = HEAP32[$17_1 + 4 >> 2];
           $6_1 = $10_1 + 2696 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$17_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $2_1;
           $2_1 = HEAP32[$13_1 + 4 >> 2];
           $6_1 = $10_1 + 2688 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $2_1;
           $2_1 = HEAP32[$4_1 + 4 >> 2];
           $6_1 = $10_1 + 2680 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $2_1;
           $2_1 = HEAP32[$10_1 + 1108 >> 2];
           HEAP32[$10_1 + 2672 >> 2] = HEAP32[$10_1 + 1104 >> 2];
           HEAP32[$10_1 + 2676 >> 2] = $2_1;
           $4($10_1 + 1696 | 0, $10_1 + 2672 | 0);
           label$12 : {
            label$13 : {
             if (HEAPU8[$10_1 + 1696 | 0] != 1) {
              break label$13
             }
             $12_1 = $10_1 + 206 | 0;
             HEAP8[$12_1 | 0] = HEAPU8[$10_1 + 1699 | 0];
             $7_1 = $10_1 + 1709 | 0;
             $3_1 = $7_1;
             $0_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
             $21_1 = $10_1 + 904 | 0;
             $2_1 = $21_1;
             HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
             HEAP32[$2_1 + 4 >> 2] = $0_1;
             $4_1 = $10_1 + 1716 | 0;
             $0_1 = $4_1;
             $3_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
             $2_1 = $10_1 + 911 | 0;
             $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
             HEAP8[$2_1 | 0] = $0_1;
             HEAP8[$2_1 + 1 | 0] = $0_1 >>> 8;
             HEAP8[$2_1 + 2 | 0] = $0_1 >>> 16;
             HEAP8[$2_1 + 3 | 0] = $0_1 >>> 24;
             HEAP8[$2_1 + 4 | 0] = $3_1;
             HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
             HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
             HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
             $3_1 = $10_1 + 692 | 0;
             $0_1 = $10_1 + 1728 | 0;
             HEAP8[$3_1 | 0] = HEAPU8[$0_1 | 0];
             HEAP16[$10_1 + 204 >> 1] = HEAPU8[$10_1 + 1697 | 0] | HEAPU8[$10_1 + 1698 | 0] << 8;
             $6_1 = HEAPU8[$10_1 + 1705 | 0] | HEAPU8[$10_1 + 1706 | 0] << 8 | (HEAPU8[$10_1 + 1707 | 0] << 16 | HEAPU8[$10_1 + 1708 | 0] << 24);
             HEAP32[$10_1 + 896 >> 2] = HEAPU8[$10_1 + 1701 | 0] | HEAPU8[$10_1 + 1702 | 0] << 8 | (HEAPU8[$10_1 + 1703 | 0] << 16 | HEAPU8[$10_1 + 1704 | 0] << 24);
             HEAP32[$10_1 + 900 >> 2] = $6_1;
             $17_1 = $10_1 + 1724 | 0;
             HEAP32[$10_1 + 688 >> 2] = HEAP32[$17_1 >> 2];
             $6_1 = HEAPU8[$10_1 + 1700 | 0];
             $11_1 = $10_1 + 1336 | 0;
             $8_1 = HEAP32[$11_1 + 4 >> 2];
             $13_1 = $10_1 + 2696 | 0;
             HEAP32[$13_1 >> 2] = HEAP32[$11_1 >> 2];
             HEAP32[$13_1 + 4 >> 2] = $8_1;
             $11_1 = $10_1 + 1328 | 0;
             $8_1 = HEAP32[$11_1 + 4 >> 2];
             $13_1 = $10_1 + 2688 | 0;
             HEAP32[$13_1 >> 2] = HEAP32[$11_1 >> 2];
             HEAP32[$13_1 + 4 >> 2] = $8_1;
             $11_1 = $10_1 + 1320 | 0;
             $8_1 = HEAP32[$11_1 + 4 >> 2];
             $13_1 = $10_1 + 2680 | 0;
             HEAP32[$13_1 >> 2] = HEAP32[$11_1 >> 2];
             HEAP32[$13_1 + 4 >> 2] = $8_1;
             $8_1 = HEAP32[$10_1 + 1316 >> 2];
             HEAP32[$10_1 + 2672 >> 2] = HEAP32[$10_1 + 1312 >> 2];
             HEAP32[$10_1 + 2676 >> 2] = $8_1;
             $4($10_1 + 1696 | 0, $10_1 + 2672 | 0);
             if (HEAPU8[$10_1 + 1696 | 0] != 1) {
              break label$13
             }
             HEAP8[$10_1 + 402 | 0] = HEAPU8[$10_1 + 1699 | 0];
             $8_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
             HEAP32[$13_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
             HEAP32[$13_1 + 4 >> 2] = $8_1;
             $7_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
             $8_1 = $10_1 + 2687 | 0;
             $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
             HEAP8[$8_1 | 0] = $4_1;
             HEAP8[$8_1 + 1 | 0] = $4_1 >>> 8;
             HEAP8[$8_1 + 2 | 0] = $4_1 >>> 16;
             HEAP8[$8_1 + 3 | 0] = $4_1 >>> 24;
             HEAP8[$8_1 + 4 | 0] = $7_1;
             HEAP8[$8_1 + 5 | 0] = $7_1 >>> 8;
             HEAP8[$8_1 + 6 | 0] = $7_1 >>> 16;
             HEAP8[$8_1 + 7 | 0] = $7_1 >>> 24;
             HEAP8[$10_1 + 2284 | 0] = HEAPU8[$0_1 | 0];
             HEAP8[$10_1 + 2090 | 0] = HEAPU8[$12_1 | 0];
             HEAP16[$10_1 + 400 >> 1] = HEAPU8[$10_1 + 1697 | 0] | HEAPU8[$10_1 + 1698 | 0] << 8;
             $4_1 = HEAPU8[$10_1 + 1705 | 0] | HEAPU8[$10_1 + 1706 | 0] << 8 | (HEAPU8[$10_1 + 1707 | 0] << 16 | HEAPU8[$10_1 + 1708 | 0] << 24);
             HEAP32[$10_1 + 2672 >> 2] = HEAPU8[$10_1 + 1701 | 0] | HEAPU8[$10_1 + 1702 | 0] << 8 | (HEAPU8[$10_1 + 1703 | 0] << 16 | HEAPU8[$10_1 + 1704 | 0] << 24);
             HEAP32[$10_1 + 2676 >> 2] = $4_1;
             HEAP32[$10_1 + 2280 >> 2] = HEAP32[$17_1 >> 2];
             HEAP16[$10_1 + 2088 >> 1] = HEAPU16[$10_1 + 204 >> 1];
             $4_1 = HEAPU8[$10_1 + 1700 | 0];
             $7_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
             $8_1 = $10_1 + 1711 | 0;
             $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
             HEAP8[$8_1 | 0] = $2_1;
             HEAP8[$8_1 + 1 | 0] = $2_1 >>> 8;
             HEAP8[$8_1 + 2 | 0] = $2_1 >>> 16;
             HEAP8[$8_1 + 3 | 0] = $2_1 >>> 24;
             HEAP8[$8_1 + 4 | 0] = $7_1;
             HEAP8[$8_1 + 5 | 0] = $7_1 >>> 8;
             HEAP8[$8_1 + 6 | 0] = $7_1 >>> 16;
             HEAP8[$8_1 + 7 | 0] = $7_1 >>> 24;
             $2_1 = HEAP32[$21_1 + 4 >> 2];
             $7_1 = $10_1 + 1704 | 0;
             HEAP32[$7_1 >> 2] = HEAP32[$21_1 >> 2];
             HEAP32[$7_1 + 4 >> 2] = $2_1;
             $2_1 = HEAP32[$10_1 + 900 >> 2];
             HEAP32[$10_1 + 1696 >> 2] = HEAP32[$10_1 + 896 >> 2];
             HEAP32[$10_1 + 1700 >> 2] = $2_1;
             HEAP8[$10_1 + 2476 | 0] = HEAPU8[$3_1 | 0];
             HEAP32[$10_1 + 2472 >> 2] = HEAP32[$10_1 + 688 >> 2];
             $7_1 = 1;
             break label$12;
            }
            $6_1 = 2;
            $7_1 = 0;
           }
           $13_1 = HEAP32[$10_1 + 3280 >> 2];
           $91($10_1 + 204 | 0, $10_1 + 3280 | 4, 196);
           HEAP8[$10_1 + 202 | 0] = HEAPU8[$10_1 + 3154 | 0];
           HEAP8[$10_1 + 198 | 0] = HEAPU8[$10_1 + 3058 | 0];
           HEAP8[$10_1 + 194 | 0] = HEAPU8[$10_1 + 2090 | 0];
           $8_1 = $10_1 + 1704 | 0;
           $2_1 = HEAP32[$8_1 + 4 >> 2];
           $11_1 = $10_1 + 176 | 0;
           HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
           HEAP32[$11_1 + 4 >> 2] = $2_1;
           $2_1 = $10_1 + 1711 | 0;
           $8_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $11_1 = $10_1 + 183 | 0;
           $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP8[$11_1 | 0] = $2_1;
           HEAP8[$11_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$11_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$11_1 + 3 | 0] = $2_1 >>> 24;
           HEAP8[$11_1 + 4 | 0] = $8_1;
           HEAP8[$11_1 + 5 | 0] = $8_1 >>> 8;
           HEAP8[$11_1 + 6 | 0] = $8_1 >>> 16;
           HEAP8[$11_1 + 7 | 0] = $8_1 >>> 24;
           HEAP16[$10_1 + 200 >> 1] = HEAPU16[$10_1 + 3152 >> 1];
           HEAP16[$10_1 + 196 >> 1] = HEAPU16[$10_1 + 3056 >> 1];
           HEAP16[$10_1 + 192 >> 1] = HEAPU16[$10_1 + 2088 >> 1];
           $2_1 = HEAP32[$10_1 + 1700 >> 2];
           HEAP32[$10_1 + 168 >> 2] = HEAP32[$10_1 + 1696 >> 2];
           HEAP32[$10_1 + 172 >> 2] = $2_1;
           HEAP8[$10_1 + 164 | 0] = HEAPU8[$10_1 + 2476 | 0];
           HEAP8[$10_1 + 158 | 0] = HEAPU8[$10_1 + 402 | 0];
           $8_1 = $10_1 + 2680 | 0;
           $2_1 = HEAP32[$8_1 + 4 >> 2];
           $11_1 = $10_1 + 136 | 0;
           HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
           HEAP32[$11_1 + 4 >> 2] = $2_1;
           $2_1 = $10_1 + 2687 | 0;
           $8_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $11_1 = $10_1 + 143 | 0;
           $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP8[$11_1 | 0] = $2_1;
           HEAP8[$11_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$11_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$11_1 + 3 | 0] = $2_1 >>> 24;
           HEAP8[$11_1 + 4 | 0] = $8_1;
           HEAP8[$11_1 + 5 | 0] = $8_1 >>> 8;
           HEAP8[$11_1 + 6 | 0] = $8_1 >>> 16;
           HEAP8[$11_1 + 7 | 0] = $8_1 >>> 24;
           HEAP8[$10_1 + 124 | 0] = HEAPU8[$10_1 + 2284 | 0];
           HEAP32[$10_1 + 160 >> 2] = HEAP32[$10_1 + 2472 >> 2];
           HEAP16[$10_1 + 156 >> 1] = HEAPU16[$10_1 + 400 >> 1];
           $2_1 = HEAP32[$10_1 + 2676 >> 2];
           HEAP32[$10_1 + 128 >> 2] = HEAP32[$10_1 + 2672 >> 2];
           HEAP32[$10_1 + 132 >> 2] = $2_1;
           HEAP32[$10_1 + 120 >> 2] = HEAP32[$10_1 + 2280 >> 2];
           $8_1 = 0;
           if (!$7_1 | ($13_1 | ($1_1 | 0) != 32)) {
            break label$1
           }
           $8_1 = $10_1 + 400 | 0;
           $91($8_1, $10_1 + 208 | 0, 192);
           $2_1 = $20_1;
           HEAP8[$10_1 + 619 | 0] = $2_1;
           HEAP8[$10_1 + 620 | 0] = $2_1 >>> 8;
           HEAP8[$10_1 + 621 | 0] = $2_1 >>> 16;
           HEAP8[$10_1 + 622 | 0] = $2_1 >>> 24;
           HEAP8[$10_1 + 623 | 0] = $16_1;
           HEAP8[$10_1 + 594 | 0] = HEAPU8[$10_1 + 202 | 0];
           HEAP16[$10_1 + 592 >> 1] = HEAPU16[$10_1 + 200 >> 1];
           HEAP8[$10_1 + 595 | 0] = $15_1;
           HEAP16[$10_1 + 596 >> 1] = HEAPU16[$10_1 + 196 >> 1];
           HEAP8[$10_1 + 598 | 0] = HEAPU8[$10_1 + 198 | 0];
           HEAP8[$10_1 + 615 | 0] = $5_1;
           HEAP8[$10_1 + 616 | 0] = $5_1 >>> 8;
           HEAP8[$10_1 + 617 | 0] = $5_1 >>> 16;
           HEAP8[$10_1 + 618 | 0] = $5_1 >>> 24;
           HEAP8[$10_1 + 611 | 0] = $14_1;
           HEAP8[$10_1 + 612 | 0] = $14_1 >>> 8;
           HEAP8[$10_1 + 613 | 0] = $14_1 >>> 16;
           HEAP8[$10_1 + 614 | 0] = $14_1 >>> 24;
           HEAP8[$10_1 + 607 | 0] = $19_1;
           HEAP8[$10_1 + 608 | 0] = $19_1 >>> 8;
           HEAP8[$10_1 + 609 | 0] = $19_1 >>> 16;
           HEAP8[$10_1 + 610 | 0] = $19_1 >>> 24;
           HEAP8[$10_1 + 603 | 0] = $18_1;
           HEAP8[$10_1 + 604 | 0] = $18_1 >>> 8;
           HEAP8[$10_1 + 605 | 0] = $18_1 >>> 16;
           HEAP8[$10_1 + 606 | 0] = $18_1 >>> 24;
           HEAP8[$10_1 + 599 | 0] = $9_1;
           HEAP8[$10_1 + 600 | 0] = $9_1 >>> 8;
           HEAP8[$10_1 + 601 | 0] = $9_1 >>> 16;
           HEAP8[$10_1 + 602 | 0] = $9_1 >>> 24;
           HEAP8[$10_1 + 626 | 0] = HEAPU8[$10_1 + 194 | 0];
           HEAP16[$10_1 + 624 >> 1] = HEAPU16[$10_1 + 192 >> 1];
           HEAP8[$10_1 + 627 | 0] = $6_1;
           $5_1 = $10_1 + 176 | 0;
           $2_1 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $10_1 + 636 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $2_1;
           $2_1 = $10_1 + 183 | 0;
           $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $6_1 = $10_1 + 643 | 0;
           $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP8[$6_1 | 0] = $2_1;
           HEAP8[$6_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$6_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$6_1 + 3 | 0] = $2_1 >>> 24;
           HEAP8[$6_1 + 4 | 0] = $5_1;
           HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
           HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
           HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
           $2_1 = HEAP32[$10_1 + 172 >> 2];
           HEAP32[$10_1 + 628 >> 2] = HEAP32[$10_1 + 168 >> 2];
           HEAP32[$10_1 + 632 >> 2] = $2_1;
           HEAP8[$10_1 + 655 | 0] = HEAPU8[$10_1 + 164 | 0];
           $2_1 = HEAP32[$10_1 + 160 >> 2];
           HEAP8[$10_1 + 651 | 0] = $2_1;
           HEAP8[$10_1 + 652 | 0] = $2_1 >>> 8;
           HEAP8[$10_1 + 653 | 0] = $2_1 >>> 16;
           HEAP8[$10_1 + 654 | 0] = $2_1 >>> 24;
           HEAP8[$10_1 + 658 | 0] = HEAPU8[$10_1 + 158 | 0];
           HEAP16[$10_1 + 656 >> 1] = HEAPU16[$10_1 + 156 >> 1];
           HEAP8[$10_1 + 659 | 0] = $4_1;
           $2_1 = $10_1 + 143 | 0;
           $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $5_1 = $10_1 + 675 | 0;
           $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP8[$5_1 | 0] = $2_1;
           HEAP8[$5_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$5_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$5_1 + 3 | 0] = $2_1 >>> 24;
           HEAP8[$5_1 + 4 | 0] = $4_1;
           HEAP8[$5_1 + 5 | 0] = $4_1 >>> 8;
           HEAP8[$5_1 + 6 | 0] = $4_1 >>> 16;
           HEAP8[$5_1 + 7 | 0] = $4_1 >>> 24;
           $4_1 = $10_1 + 136 | 0;
           $2_1 = HEAP32[$4_1 + 4 >> 2];
           $5_1 = $10_1 + 668 | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $2_1;
           $2_1 = HEAP32[$10_1 + 132 >> 2];
           $4_1 = $10_1 + 660 | 0;
           HEAP32[$4_1 >> 2] = HEAP32[$10_1 + 128 >> 2];
           HEAP32[$4_1 + 4 >> 2] = $2_1;
           HEAP8[$10_1 + 687 | 0] = HEAPU8[$10_1 + 124 | 0];
           $4_1 = $10_1 + 683 | 0;
           $2_1 = HEAP32[$10_1 + 120 >> 2];
           HEAP8[$4_1 | 0] = $2_1;
           HEAP8[$4_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$4_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$4_1 + 3 | 0] = $2_1 >>> 24;
           $4_1 = $10_1 + 3280 | 0;
           $181($4_1, 1105533, 14);
           $277($4_1, 1217612, 0, $23_1, $22_1);
           $2_1 = $10_1 + 896 | 0;
           $91($2_1, $4_1, 208);
           $4_1 = $10_1 + 688 | 0;
           $91($4_1, $2_1, 200);
           HEAP8[$10_1 + 890 | 0] = HEAPU8[$10_1 + 1098 | 0];
           HEAP16[$10_1 + 888 >> 1] = HEAPU16[$10_1 + 1096 >> 1];
           $277($4_1, 1105547, 10, $25_1, $24_1);
           $359($10_1 + 1104 | 0, $27_1, $26_1);
           $2_1 = $10_1 + 2672 | 0;
           $91($2_1, $4_1, 208);
           $97($10_1 + 2088 | 0, $8_1, $2_1);
           $113($2_1, 1048641, 1048650, $10_1 + 592 | 0, 32);
           if (HEAP32[$10_1 + 2672 >> 2] == 1) {
            break label$7
           }
           $14_1 = $10_1 + 2280 | 0;
           $91($14_1, $91($10_1 + 2476 | 0, $10_1 + 2680 | 0, 192), 192);
           $15_1 = $10_1 + 2672 | 0;
           $147($15_1, 0, 40);
           $2_1 = $10_1 + 2744 | 0;
           HEAP32[$2_1 >> 2] = 0;
           HEAP32[$2_1 + 4 >> 2] = 0;
           $2_1 = $10_1 + 2736 | 0;
           HEAP32[$2_1 >> 2] = 0;
           HEAP32[$2_1 + 4 >> 2] = 0;
           $2_1 = $10_1 + 2728 | 0;
           HEAP32[$2_1 >> 2] = 0;
           HEAP32[$2_1 + 4 >> 2] = 0;
           $2_1 = $10_1 + 2720 | 0;
           HEAP32[$2_1 >> 2] = 0;
           HEAP32[$2_1 + 4 >> 2] = 0;
           $147($10_1 + 2760 | 0, 0, 72);
           HEAP32[$10_1 + 2752 >> 2] = 1;
           HEAP32[$10_1 + 2756 >> 2] = 0;
           HEAP32[$10_1 + 2712 >> 2] = 1;
           HEAP32[$10_1 + 2716 >> 2] = 0;
           $9_1 = $10_1 + 4568 | 0;
           $8_1 = $10_1 + 2712 | 0;
           $15($9_1, $14_1, $8_1);
           $6_1 = $10_1 + 3056 | 0;
           $5_1 = $10_1 + 2320 | 0;
           $15($6_1, $5_1, $15_1);
           $4_1 = $10_1 + 3152 | 0;
           $15($4_1, $14_1, $15_1);
           $2_1 = $10_1 + 2472 | 0;
           $15($2_1, $5_1, $8_1);
           if (($380($312($9_1, $6_1) | $312($4_1, $2_1)) & 255) == 1) {
            break label$6
           }
           $6_1 = $10_1 + 2672 | 0;
           $91($6_1, $10_1 + 2088 | 0, 192);
           $91($10_1 + 2864 | 0, $10_1 + 2280 | 0, 192);
           $8_1 = $10_1 + 1312 | 0;
           $91($8_1, $91($10_1 + 1699 | 0, $91($10_1 + 3288 | 0, $6_1, 384), 384), 384);
           $91($6_1, $10_1 + 1104 | 0, 208);
           $395($6_1, 1048583, 9);
           $389($6_1, 1048592, 5, $10_1 + 1472 | 0);
           $5_1 = $10_1 + 3280 | 0;
           $2_1 = $10_1 + 656 | 0;
           $27($5_1, $10_1 + 624 | 0, $10_1 + 400 | 0, $2_1);
           $4_1 = $10_1 + 4568 | 0;
           $65($4_1, $5_1);
           $389($6_1, 1048612, 9, $4_1);
           $5_1 = $10_1 + 648 | 0;
           $4_1 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $10_1 + 3080 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $4_1;
           $5_1 = $10_1 + 640 | 0;
           $4_1 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $10_1 + 3072 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $4_1;
           $5_1 = $10_1 + 632 | 0;
           $4_1 = HEAP32[$5_1 + 4 >> 2];
           $6_1 = $10_1 + 3064 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
           HEAP32[$6_1 + 4 >> 2] = $4_1;
           $6_1 = $2_1 + 8 | 0;
           $4_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
           $5_1 = $10_1 + 3096 | 0;
           HEAP32[$5_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
           HEAP32[$5_1 + 4 >> 2] = $4_1;
           $6_1 = $2_1 + 16 | 0;
           $4_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
           $5_1 = $10_1 + 3104 | 0;
           HEAP32[$5_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
           HEAP32[$5_1 + 4 >> 2] = $4_1;
           $6_1 = $2_1 + 24 | 0;
           $4_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
           $5_1 = $10_1 + 3112 | 0;
           HEAP32[$5_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
           HEAP32[$5_1 + 4 >> 2] = $4_1;
           $4_1 = HEAP32[$10_1 + 628 >> 2];
           HEAP32[$10_1 + 3056 >> 2] = HEAP32[$10_1 + 624 >> 2];
           HEAP32[$10_1 + 3060 >> 2] = $4_1;
           $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           HEAP32[$10_1 + 3088 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP32[$10_1 + 3092 >> 2] = $4_1;
           $91($10_1 + 1696 | 0, $10_1 + 1504 | 0, 160);
           $91($10_1 + 1856 | 0, $8_1, 160);
           $346($10_1 + 8 | 0, 512, 1);
           $5_1 = HEAP32[$10_1 + 8 >> 2];
           if (!$5_1) {
            $0_1 = HEAP32[305241];
            FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](512, 1);
            break label$4;
           }
           $8_1 = HEAP32[$10_1 + 12 >> 2];
           HEAP32[$10_1 + 3120 >> 2] = $5_1;
           $2_1 = $8_1 >>> 8 | 0;
           HEAP32[$10_1 + 3124 >> 2] = $2_1;
           if (!($8_1 >>> 0 > 511)) {
            $6_1 = 0;
            $2_1 = $2_1 << 1;
            $2_1 = $2_1 >>> 0 > 4 ? $2_1 : 4;
            $156($10_1 + 3280 | 0, $2_1 << 8, ($2_1 | 0) == ($2_1 & 16777214), $8_1 >>> 0 < 256 ? 0 : $5_1, $8_1 & -256);
            label$17 : {
             if (HEAP32[$10_1 + 3280 >> 2] != 1) {
              $5_1 = HEAP32[$10_1 + 3284 >> 2];
              HEAP32[$10_1 + 3120 >> 2] = $5_1;
              HEAP32[$10_1 + 3124 >> 2] = HEAP32[$10_1 + 3288 >> 2] >>> 8;
              break label$17;
             }
             $7_1 = HEAP32[$10_1 + 3288 >> 2];
             $8_1 = HEAP32[$10_1 + 3284 >> 2];
             $6_1 = 1;
            }
            $331($6_1, $8_1, $7_1);
           }
           $9_1 = $5_1;
           $8_1 = 0;
           while (1) {
            if (($8_1 | 0) != 64) {
             $2_1 = $10_1 + 3280 | 0;
             $89($2_1, ($10_1 + 3056 | 0) + $8_1 | 0, 5);
             $8_1 = $8_1 + 32 | 0;
             $9_1 = $91($9_1, $2_1, 256) + 256 | 0;
             continue;
            }
            break;
           };
           HEAP32[$10_1 + 3128 >> 2] = 2;
           $9_1 = 0;
           HEAP8[$10_1 + 3279 | 0] = 0;
           HEAP32[$10_1 + 3156 >> 2] = $10_1 + 2016;
           HEAP32[$10_1 + 3160 >> 2] = $10_1 + 3279;
           HEAP32[$10_1 + 3152 >> 2] = $10_1 + 1696;
           $163($10_1 + 3280 | 0, $10_1 + 3152 | 0);
           if (HEAP32[$10_1 + 3280 >> 2] != 1 | HEAP32[$10_1 + 3284 >> 2]) {
            $2_1 = HEAP32[262243];
            $8_1 = 0;
            break label$5;
           }
           $346($10_1, 1280, 8);
           $2_1 = HEAP32[$10_1 >> 2];
           if (!$2_1) {
            $0_1 = HEAP32[305241];
            FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](1280, 8);
            break label$4;
           }
           $6_1 = HEAP32[$10_1 + 4 >> 2];
           $15_1 = $10_1 + 3288 | 0;
           $42($2_1, $15_1, 1280);
           HEAP32[$10_1 + 2096 >> 2] = HEAP32[$10_1 + 3160 >> 2];
           $4_1 = HEAP32[$10_1 + 3156 >> 2];
           HEAP32[$10_1 + 2088 >> 2] = HEAP32[$10_1 + 3152 >> 2];
           HEAP32[$10_1 + 2092 >> 2] = $4_1;
           $8_1 = ($6_1 >>> 0) / 1280 | 0;
           $6_1 = 1280;
           $9_1 = 1;
           while (1) {
            $163($10_1 + 3280 | 0, $10_1 + 2088 | 0);
            if (HEAP32[$10_1 + 3280 >> 2] != 1 | HEAP32[$10_1 + 3284 >> 2]) {
             break label$5
            }
            if (($8_1 | 0) == ($9_1 | 0)) {
             $4_1 = 1;
             $7_1 = $8_1 + 1 | 0;
             label$25 : {
              if ($7_1 >>> 0 < $8_1 >>> 0) {
               $3_1 = $7_1;
               $0_1 = 0;
               break label$25;
              }
              $16_1 = $8_1 << 1;
              $7_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $16_1 : $7_1;
              $20_1 = __wasm_i64_mul($7_1 >>> 0 > 1 ? $7_1 : 1, 0, 1280, 0);
              $16_1 = i64toi32_i32$HIGH_BITS;
              $1_1 = $8_1 ? Math_imul($8_1, 1280) : $1_1;
              $156($10_1 + 2280 | 0, $20_1, !$16_1 << 3, $8_1 ? $2_1 : 0, $1_1);
              if (HEAP32[$10_1 + 2280 >> 2] != 1) {
               $8_1 = HEAPU32[$10_1 + 2288 >> 2] / 1280 | 0;
               $2_1 = HEAP32[$10_1 + 2284 >> 2];
               $4_1 = 0;
               break label$25;
              }
              $0_1 = HEAP32[$10_1 + 2288 >> 2];
              $3_1 = HEAP32[$10_1 + 2284 >> 2];
             }
             $331($4_1, $3_1, $0_1);
            }
            $91($2_1 + $6_1 | 0, $15_1, 1280);
            $6_1 = $6_1 + 1280 | 0;
            $9_1 = $9_1 + 1 | 0;
            continue;
           };
          }
          abort();
         }
         abort();
        }
        $1_1 = $10_1 + 2684 | 0;
        $0_1 = HEAP32[$1_1 + 4 >> 2];
        $2_1 = $10_1 + 3292 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$2_1 + 4 >> 2] = $0_1;
        $1_1 = $10_1 + 2692 | 0;
        $0_1 = HEAP32[$1_1 + 4 >> 2];
        $2_1 = $10_1 + 3300 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$2_1 + 4 >> 2] = $0_1;
        $0_1 = HEAP32[$10_1 + 2680 >> 2];
        HEAP32[$10_1 + 3284 >> 2] = HEAP32[$10_1 + 2676 >> 2];
        HEAP32[$10_1 + 3288 >> 2] = $0_1;
       }
       $336($10_1 + 1104 | 0);
       $8_1 = 0;
       break label$2;
      }
      $0_1 = HEAPU8[$10_1 + 3279 | 0];
      HEAP32[$10_1 + 3288 >> 2] = $9_1;
      HEAP32[$10_1 + 3284 >> 2] = $8_1;
      HEAP32[$10_1 + 3280 >> 2] = $2_1;
      label$28 : {
       if (!$0_1) {
        $20_1 = HEAP32[$10_1 + 3284 >> 2];
        $16_1 = HEAP32[$10_1 + 3288 >> 2];
        break label$28;
       }
       $363($10_1 + 3280 | 0);
       $2_1 = 0;
      }
      if ($2_1) {
       HEAP32[$10_1 + 3136 >> 2] = $2_1;
       HEAP32[$10_1 + 3140 >> 2] = $20_1;
       HEAP32[$10_1 + 3144 >> 2] = $16_1;
       $147($10_1 + 3152 | 0, 0, 40);
       $0_1 = $10_1 + 3224 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3216 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3208 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3200 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3240 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3248 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3256 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $0_1 = $10_1 + 3264 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP32[$10_1 + 3232 >> 2] = 1;
       HEAP32[$10_1 + 3236 >> 2] = 0;
       HEAP32[$10_1 + 3192 >> 2] = 1;
       HEAP32[$10_1 + 3196 >> 2] = 0;
       $0_1 = $16_1;
       $0_1 = $0_1 >>> 0 < 2 ? $0_1 : 2;
       $5_1 = $5_1 + 255 | 0;
       $4_1 = 256;
       label$31 : while (1) {
        if (!$4_1) {
         break label$3
        }
        $4_1 = $4_1 - 1 | 0;
        $120($10_1 + 2088 | 0, $10_1 + 3152 | 0);
        $6_1 = $2_1;
        $9_1 = $0_1;
        $8_1 = $5_1;
        while (1) {
         if (!$9_1) {
          $5_1 = $5_1 - 1 | 0;
          $313($10_1 + 3152 | 0, $10_1 + 2088 | 0);
          continue label$31;
         }
         if ($4_1 >>> 0 > 255) {
          break label$4
         }
         $1_1 = HEAP8[$8_1 | 0];
         label$34 : {
          if (($1_1 | 0) > 0) {
           $281($10_1 + 2280 | 0, $10_1 + 2088 | 0);
           $3_1 = HEAP8[$8_1 | 0];
           if ($3_1 >>> 0 >= 16) {
            break label$4
           }
           $1_1 = $10_1 + 3280 | 0;
           $91($1_1, Math_imul($3_1 >>> 1 | 0, 160) + $6_1 | 0, 160);
           $108($10_1 + 2088 | 0, $10_1 + 2280 | 0, $1_1);
           break label$34;
          }
          if (($1_1 | 0) >= 0) {
           break label$34
          }
          $281($10_1 + 2280 | 0, $10_1 + 2088 | 0);
          $3_1 = 0 - HEAPU8[$8_1 | 0] | 0;
          if (($3_1 & 255) >>> 0 >= 16) {
           break label$4
          }
          $1_1 = $10_1 + 3280 | 0;
          $91($1_1, Math_imul($3_1 << 24 >> 24 >>> 1 | 0, 160) + $6_1 | 0, 160);
          $109($10_1 + 2088 | 0, $10_1 + 2280 | 0, $1_1);
         }
         $6_1 = $6_1 + 1280 | 0;
         $9_1 = $9_1 - 1 | 0;
         $8_1 = $8_1 + 256 | 0;
         continue;
        };
       };
      }
      $364($10_1 + 3120 | 0);
     }
     abort();
    }
    $3_1 = $10_1 + 2480 | 0;
    $296($3_1, $10_1 + 3152 | 0);
    $363($10_1 + 3136 | 0);
    $364($10_1 + 3120 | 0);
    $1_1 = $10_1 + 3280 | 0;
    $91($1_1, $3_1, 160);
    $0_1 = $10_1 + 2280 | 0;
    $65($0_1, $1_1);
    $4_1 = $10_1 + 2672 | 0;
    $389($4_1, 1048621, 7, $0_1);
    $389($4_1, 1048597, 6, $10_1 + 560 | 0);
    $389($4_1, 1048628, 8, $10_1 + 1664 | 0);
    $1_1 = $10_1 + 648 | 0;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $10_1 + 2496 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $0_1;
    $1_1 = $10_1 + 640 | 0;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $10_1 + 2488 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $0_1;
    $1_1 = $10_1 + 632 | 0;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    $0_1 = HEAP32[$10_1 + 628 >> 2];
    HEAP32[$10_1 + 2472 >> 2] = HEAP32[$10_1 + 624 >> 2];
    HEAP32[$10_1 + 2476 >> 2] = $0_1;
    $0_1 = $10_1 + 1696 | 0;
    $322($0_1, $4_1, 1048636, 5);
    $8_1 = $385($10_1 + 2472 | 0, $0_1);
    $336($4_1);
   }
   $336($10_1 + 896 | 0);
  }
  $392($10_1 + 112 | 0);
  $392($10_1 + 104 | 0);
  $392($10_1 + 96 | 0);
  $392($10_1 + 88 | 0);
  $392($10_1 + 80 | 0);
  global$0 = $10_1 + 4608 | 0;
  return $8_1 | 0;
 }
 
 function $4($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0;
  $5_1 = global$0 - 800 | 0;
  global$0 = $5_1;
  label$1 : {
   if (HEAP8[$1_1 + 31 | 0] < 0) {
    break label$1
   }
   $6_1 = $1_1 + 24 | 0;
   $3_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
   $49_1 = $5_1 + 672 | 0;
   $4_1 = $49_1;
   HEAP32[$4_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
   HEAP32[$4_1 + 4 >> 2] = $3_1;
   $6_1 = $1_1 + 16 | 0;
   $3_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
   $50_1 = $5_1 + 664 | 0;
   $4_1 = $50_1;
   HEAP32[$4_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
   HEAP32[$4_1 + 4 >> 2] = $3_1;
   $6_1 = $1_1 + 8 | 0;
   $3_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
   $51_1 = $5_1 + 656 | 0;
   $4_1 = $51_1;
   HEAP32[$4_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
   HEAP32[$4_1 + 4 >> 2] = $3_1;
   $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   HEAP32[$5_1 + 648 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 652 >> 2] = $3_1;
   HEAP8[$5_1 + 679 | 0] = HEAPU8[$5_1 + 679 | 0] & 127;
   $56_1 = $5_1 + 648 | 0;
   $124($5_1 + 680 | 0, $56_1);
   $1_1 = HEAP32[$5_1 + 684 >> 2];
   $6_1 = $1_1;
   $2_1 = HEAP32[$5_1 + 680 >> 2];
   $297($5_1 + 248 | 0, $2_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
   $297($5_1 + 264 | 0, $2_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
   $10_1 = HEAP32[$5_1 + 688 >> 2];
   $1_1 = HEAP32[$5_1 + 692 >> 2];
   $297($5_1 + 328 | 0, $10_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
   $297($5_1 + 280 | 0, $2_1, $6_1, 0, 0, -348789477, 1048575, 0, 0);
   $4_1 = $1_1;
   $297($5_1 + 344 | 0, $10_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
   $8_1 = HEAP32[$5_1 + 696 >> 2];
   $1_1 = HEAP32[$5_1 + 700 >> 2];
   $297($5_1 + 408 | 0, $8_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
   $297($5_1 + 296 | 0, $2_1, $6_1, 0, 0, -1, 1048575, 0, 0);
   $297($5_1 + 360 | 0, $10_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
   $3_1 = $1_1;
   $297($5_1 + 424 | 0, $8_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
   $7_1 = HEAP32[$5_1 + 704 >> 2];
   $1_1 = HEAP32[$5_1 + 708 >> 2];
   $297($5_1 + 488 | 0, $7_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
   $297($5_1 + 312 | 0, $2_1, $6_1, 0, 0, -1, 4095, 0, 0);
   $297($5_1 + 376 | 0, $10_1, $4_1, 0, 0, -1, 1048575, 0, 0);
   $297($5_1 + 440 | 0, $8_1, $3_1, 0, 0, -348789477, 1048575, 0, 0);
   $297($5_1 + 504 | 0, $7_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
   $2_1 = HEAP32[$5_1 + 712 >> 2];
   $6_1 = HEAP32[$5_1 + 716 >> 2];
   $297($5_1 + 568 | 0, $2_1, $6_1, 0, 0, 1730275053, 1001661, 0, 0);
   $297($5_1 + 392 | 0, $10_1, $4_1, 0, 0, -1, 4095, 0, 0);
   $297($5_1 + 456 | 0, $8_1, $3_1, 0, 0, -1, 1048575, 0, 0);
   $297($5_1 + 520 | 0, $7_1, $1_1, 0, 0, -348789477, 1048575, 0, 0);
   $297($5_1 + 584 | 0, $2_1, $6_1, 0, 0, -1402477478, 244405, 0, 0);
   $297($5_1 + 472 | 0, $8_1, $3_1, 0, 0, -1, 4095, 0, 0);
   $297($5_1 + 536 | 0, $7_1, $1_1, 0, 0, -1, 1048575, 0, 0);
   $297($5_1 + 600 | 0, $2_1, $6_1, 0, 0, -348789477, 1048575, 0, 0);
   $297($5_1 + 552 | 0, $7_1, $1_1, 0, 0, -1, 4095, 0, 0);
   $297($5_1 + 616 | 0, $2_1, $6_1, 0, 0, -1, 1048575, 0, 0);
   $297($5_1 + 632 | 0, $2_1, $6_1, 0, 0, -1, 4095, 0, 0);
   $2_1 = HEAP32[$5_1 + 248 >> 2];
   $6_1 = HEAP32[$5_1 + 252 >> 2];
   $36_1 = __wasm_i64_mul($2_1, $6_1, 307527195, 335267);
   $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
   $14_1 = $1_1;
   $297($5_1 + 232 | 0, $36_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
   $297($5_1 + 216 | 0, $36_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
   $10_1 = $5_1 + 200 | 0;
   $20_1 = HEAP32[$5_1 + 328 >> 2];
   $3_1 = HEAP32[$5_1 + 264 >> 2];
   $4_1 = $20_1 + $3_1 | 0;
   $25_1 = HEAP32[$5_1 + 332 >> 2];
   $1_1 = $25_1 + HEAP32[$5_1 + 268 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $23_1 = $4_1;
   $3_1 = HEAP32[$5_1 + 216 >> 2];
   $4_1 = $4_1 + $3_1 | 0;
   $15_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 220 >> 2] | 0;
   $18_1 = $4_1;
   $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $8_1 = HEAP32[$5_1 + 232 >> 2];
   $3_1 = $8_1;
   $2_1 = $3_1 + $2_1 | 0;
   $9_1 = HEAP32[$5_1 + 236 >> 2];
   $1_1 = $9_1 + $6_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $7_1 = $1_1 >>> 20 | 0;
   $2_1 = ($1_1 | 0) == ($9_1 | 0) & $3_1 >>> 0 < $8_1 >>> 0 | $1_1 >>> 0 < $9_1 >>> 0;
   $1_1 = $5_1 + 256 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $6_1 = $5_1 + 240 | 0;
   $8_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
   $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $6_1 = $2_1 + $3_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $13_1 = $6_1;
   $3_1 = $6_1 << 12 | $7_1;
   $7_1 = $3_1 + $18_1 | 0;
   $6_1 = $1_1;
   $1_1 = ($1_1 << 12 | $13_1 >>> 20) + $4_1 | 0;
   $8_1 = $7_1;
   $11_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $37_1 = __wasm_i64_mul($7_1, $11_1, 307527195, 335267);
   $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
   $30_1 = $1_1;
   $297($10_1, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
   $297($5_1 + 152 | 0, $36_1, $14_1, 0, 0, 1367801, 0, 0, 0);
   $297($5_1 + 184 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
   $27_1 = $5_1 + 136 | 0;
   $38_1 = HEAP32[$5_1 + 344 >> 2];
   $3_1 = HEAP32[$5_1 + 280 >> 2];
   $2_1 = $38_1 + $3_1 | 0;
   $28_1 = HEAP32[$5_1 + 348 >> 2];
   $1_1 = $28_1 + HEAP32[$5_1 + 284 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $29_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 408 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $21_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 412 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $31_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 152 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $19_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 156 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $32_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 184 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $16_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 188 >> 2] | 0;
   $10_1 = $2_1;
   $3_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $12_1 = HEAP32[$5_1 + 204 >> 2];
   $1_1 = $11_1 + $12_1 | 0;
   $17_1 = HEAP32[$5_1 + 200 >> 2];
   $2_1 = $7_1 + $17_1 | 0;
   $1_1 = $2_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $22_1 = $1_1 >>> 20 | 0;
   $24_1 = ($1_1 | 0) == ($12_1 | 0) & $2_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $12_1 >>> 0;
   $1_1 = $5_1 + 208 | 0;
   $12_1 = HEAP32[$1_1 >> 2];
   $17_1 = HEAP32[$1_1 + 4 >> 2];
   $9_1 = ($4_1 | 0) == ($11_1 | 0) & $18_1 >>> 0 > $8_1 >>> 0 | $4_1 >>> 0 > $11_1 >>> 0;
   $2_1 = $5_1 + 224 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   $8_1 = HEAP32[$2_1 + 4 >> 2];
   $13_1 = ($4_1 | 0) == ($15_1 | 0) & $18_1 >>> 0 < $23_1 >>> 0 | $4_1 >>> 0 < $15_1 >>> 0;
   $7_1 = $1_1;
   $1_1 = $5_1 + 272 | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $2_1 = $5_1 + 336 | 0;
   $18_1 = $4_1 + HEAP32[$2_1 >> 2] | 0;
   $1_1 = HEAP32[$2_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $18_1;
   $2_1 = $4_1 + (($15_1 | 0) == ($25_1 | 0) & $20_1 >>> 0 > $23_1 >>> 0 | $15_1 >>> 0 < $25_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $2_1;
   $2_1 = $7_1 + $2_1 | 0;
   $1_1 = $1_1 + $8_1 | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $2_1;
   $2_1 = $13_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $6_1 >>> 20 | 0;
   $2_1 = $6_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $2_1 + $9_1 | 0;
   $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $12_1 | 0;
   $1_1 = $1_1 + $17_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $24_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $13_1 = $6_1;
   $4_1 = $6_1 << 12 | $22_1;
   $2_1 = $4_1 + $10_1 | 0;
   $6_1 = $1_1;
   $1_1 = ($1_1 << 12 | $13_1 >>> 20) + $3_1 | 0;
   $8_1 = $2_1;
   $11_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $39_1 = __wasm_i64_mul($2_1, $11_1, 307527195, 335267);
   $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
   $44_1 = $1_1;
   $297($27_1, $39_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
   $297($5_1 + 168 | 0, $37_1, $30_1, 0, 0, 1367801, 0, 0, 0);
   $297($5_1 + 120 | 0, $39_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
   $26_1 = $5_1 + 104 | 0;
   $45_1 = HEAP32[$5_1 + 360 >> 2];
   $4_1 = HEAP32[$5_1 + 296 >> 2];
   $2_1 = $45_1 + $4_1 | 0;
   $35_1 = HEAP32[$5_1 + 364 >> 2];
   $1_1 = $35_1 + HEAP32[$5_1 + 300 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $40_1 = $2_1;
   $4_1 = HEAP32[$5_1 + 424 >> 2];
   $2_1 = $2_1 + $4_1 | 0;
   $24_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 428 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $46_1 = $2_1;
   $4_1 = HEAP32[$5_1 + 488 >> 2];
   $2_1 = $2_1 + $4_1 | 0;
   $12_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 492 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $47_1 = $2_1;
   $4_1 = HEAP32[$5_1 + 168 >> 2];
   $2_1 = $2_1 + $4_1 | 0;
   $17_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 172 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $48_1 = $2_1;
   $4_1 = HEAP32[$5_1 + 120 >> 2];
   $2_1 = $2_1 + $4_1 | 0;
   $15_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 124 >> 2] | 0;
   $9_1 = $2_1;
   $4_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $27_1 = HEAP32[$5_1 + 140 >> 2];
   $1_1 = $11_1 + $27_1 | 0;
   $22_1 = HEAP32[$5_1 + 136 >> 2];
   $2_1 = $8_1 + $22_1 | 0;
   $1_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $33_1 = $1_1 >>> 20 | 0;
   $34_1 = ($1_1 | 0) == ($27_1 | 0) & $2_1 >>> 0 < $22_1 >>> 0 | $1_1 >>> 0 < $27_1 >>> 0;
   $1_1 = $5_1 + 144 | 0;
   $25_1 = HEAP32[$1_1 >> 2];
   $23_1 = HEAP32[$1_1 + 4 >> 2];
   $20_1 = ($3_1 | 0) == ($11_1 | 0) & $8_1 >>> 0 < $10_1 >>> 0 | $3_1 >>> 0 > $11_1 >>> 0;
   $1_1 = $5_1 + 192 | 0;
   $27_1 = HEAP32[$1_1 >> 2];
   $22_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $5_1 + 160 | 0;
   $11_1 = HEAP32[$1_1 >> 2];
   $18_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 416 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   $8_1 = HEAP32[$2_1 + 4 >> 2];
   $13_1 = ($3_1 | 0) == ($16_1 | 0) & $10_1 >>> 0 < $32_1 >>> 0 | $3_1 >>> 0 < $16_1 >>> 0;
   $7_1 = $1_1;
   $1_1 = $5_1 + 288 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $2_1 = $5_1 + 352 | 0;
   $10_1 = $3_1 + HEAP32[$2_1 >> 2] | 0;
   $1_1 = HEAP32[$2_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $10_1;
   $2_1 = $3_1 + (($21_1 | 0) == ($28_1 | 0) & $29_1 >>> 0 < $38_1 >>> 0 | $21_1 >>> 0 < $28_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $7_1 + $3_1 | 0;
   $1_1 = $1_1 + $8_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $3_1 + (($21_1 | 0) == ($19_1 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $21_1 >>> 0 > $19_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $3_1 + $11_1 | 0;
   $1_1 = $1_1 + $18_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $3_1 + (($16_1 | 0) == ($19_1 | 0) & $31_1 >>> 0 > $32_1 >>> 0 | $16_1 >>> 0 < $19_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $3_1 + $27_1 | 0;
   $1_1 = $1_1 + $22_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $13_1 + $3_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $6_1 >>> 20 | 0;
   $2_1 = $6_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $6_1 = $3_1 + $20_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   $6_1 = $3_1 + $25_1 | 0;
   $1_1 = $1_1 + $23_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   $6_1 = $3_1 + $34_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $11_1 = $6_1;
   $3_1 = $6_1 << 12 | $33_1;
   $2_1 = $3_1 + $9_1 | 0;
   $6_1 = $1_1;
   $1_1 = ($1_1 << 12 | $11_1 >>> 20) + $4_1 | 0;
   $10_1 = $2_1;
   $16_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $41_1 = __wasm_i64_mul($2_1, $16_1, 307527195, 335267);
   $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
   $38_1 = $1_1;
   $297($26_1, $41_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
   $297($5_1 + 56 | 0, $39_1, $44_1, 0, 0, 1367801, 0, 0, 0);
   $297($5_1 + 88 | 0, $41_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
   $42_1 = $5_1 + 40 | 0;
   $57_1 = HEAP32[$5_1 + 376 >> 2];
   $3_1 = HEAP32[$5_1 + 312 >> 2];
   $2_1 = $57_1 + $3_1 | 0;
   $52_1 = HEAP32[$5_1 + 380 >> 2];
   $1_1 = $52_1 + HEAP32[$5_1 + 316 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $58_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 440 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $33_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 444 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $59_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 504 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $34_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 508 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $60_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 568 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $25_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 572 >> 2] | 0;
   $53_1 = $2_1;
   $2_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = 0;
   $7_1 = $3_1 + $53_1 | 0;
   $8_1 = $14_1;
   $1_1 = ($36_1 << 12) + $2_1 | 0;
   $61_1 = $7_1;
   $3_1 = HEAP32[$5_1 + 56 >> 2];
   $7_1 = $7_1 + $3_1 | 0;
   $23_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 60 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $62_1 = $7_1;
   $3_1 = HEAP32[$5_1 + 88 >> 2];
   $7_1 = $7_1 + $3_1 | 0;
   $20_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 92 >> 2] | 0;
   $14_1 = $7_1;
   $3_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $21_1 = HEAP32[$5_1 + 108 >> 2];
   $1_1 = $16_1 + $21_1 | 0;
   $19_1 = HEAP32[$5_1 + 104 >> 2];
   $7_1 = $10_1 + $19_1 | 0;
   $1_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $28_1 = $1_1 >>> 20 | 0;
   $29_1 = ($1_1 | 0) == ($21_1 | 0) & $7_1 >>> 0 < $19_1 >>> 0 | $1_1 >>> 0 < $21_1 >>> 0;
   $1_1 = $5_1 + 112 | 0;
   $31_1 = HEAP32[$1_1 >> 2];
   $32_1 = HEAP32[$1_1 + 4 >> 2];
   $26_1 = ($4_1 | 0) == ($16_1 | 0) & $9_1 >>> 0 > $10_1 >>> 0 | $4_1 >>> 0 > $16_1 >>> 0;
   $1_1 = $5_1 + 128 | 0;
   $27_1 = HEAP32[$1_1 >> 2];
   $22_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $5_1 + 176 | 0;
   $21_1 = HEAP32[$1_1 >> 2];
   $19_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $5_1 + 496 | 0;
   $16_1 = HEAP32[$1_1 >> 2];
   $13_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = $5_1 + 432 | 0;
   $1_1 = HEAP32[$7_1 >> 2];
   $10_1 = HEAP32[$7_1 + 4 >> 2];
   $11_1 = ($4_1 | 0) == ($15_1 | 0) & $9_1 >>> 0 < $48_1 >>> 0 | $4_1 >>> 0 < $15_1 >>> 0;
   $18_1 = $1_1;
   $1_1 = $5_1 + 304 | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $7_1 = $5_1 + 368 | 0;
   $9_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
   $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $9_1;
   $7_1 = $4_1 + (($24_1 | 0) == ($35_1 | 0) & $40_1 >>> 0 < $45_1 >>> 0 | $24_1 >>> 0 < $35_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $18_1 + $4_1 | 0;
   $1_1 = $1_1 + $10_1 | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + (($12_1 | 0) == ($24_1 | 0) & $40_1 >>> 0 > $46_1 >>> 0 | $12_1 >>> 0 < $24_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + $16_1 | 0;
   $1_1 = $1_1 + $13_1 | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + (($12_1 | 0) == ($17_1 | 0) & $46_1 >>> 0 > $47_1 >>> 0 | $12_1 >>> 0 > $17_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + $21_1 | 0;
   $1_1 = $1_1 + $19_1 | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + (($15_1 | 0) == ($17_1 | 0) & $47_1 >>> 0 > $48_1 >>> 0 | $15_1 >>> 0 < $17_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $4_1 + $27_1 | 0;
   $1_1 = $1_1 + $22_1 | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $7_1 = $11_1 + $4_1 | 0;
   $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $6_1 >>> 20 | 0;
   $7_1 = $6_1 + $7_1 | 0;
   $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $6_1 = $4_1 + $26_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $31_1 | 0;
   $1_1 = $1_1 + $32_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $29_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $17_1 = $6_1;
   $4_1 = $6_1 << 12 | $28_1;
   $6_1 = $4_1 + $14_1 | 0;
   $10_1 = $1_1;
   $1_1 = ($1_1 << 12 | $17_1 >>> 20) + $3_1 | 0;
   $11_1 = $6_1;
   $12_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $43_1 = __wasm_i64_mul($6_1, $12_1, 307527195, 335267);
   $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
   $27_1 = $1_1;
   $297($42_1, $43_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
   $297($5_1 + 72 | 0, $41_1, $38_1, 0, 0, 1367801, 0, 0, 0);
   $297($5_1 + 24 | 0, $43_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
   $297($5_1 + 8 | 0, $43_1, $1_1, 0, 0, 1367801, 0, 0, 0);
   $40_1 = HEAP32[$5_1 + 456 >> 2];
   $4_1 = HEAP32[$5_1 + 392 >> 2];
   $6_1 = $40_1 + $4_1 | 0;
   $54_1 = HEAP32[$5_1 + 460 >> 2];
   $1_1 = $54_1 + HEAP32[$5_1 + 396 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $63_1 = $6_1;
   $4_1 = HEAP32[$5_1 + 520 >> 2];
   $6_1 = $6_1 + $4_1 | 0;
   $22_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 524 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $64_1 = $6_1;
   $4_1 = HEAP32[$5_1 + 584 >> 2];
   $6_1 = $6_1 + $4_1 | 0;
   $21_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 588 >> 2] | 0;
   $55_1 = $6_1;
   $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = 0;
   $9_1 = $4_1 + $55_1 | 0;
   $7_1 = $30_1;
   $1_1 = ($37_1 << 12) + $6_1 | 0;
   $65_1 = $9_1;
   $4_1 = HEAP32[$5_1 + 72 >> 2];
   $9_1 = $9_1 + $4_1 | 0;
   $19_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 76 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $35_1 = $9_1;
   $4_1 = HEAP32[$5_1 + 24 >> 2];
   $9_1 = $9_1 + $4_1 | 0;
   $24_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 28 >> 2] | 0;
   $16_1 = $9_1;
   $4_1 = $4_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $26_1 = HEAP32[$5_1 + 44 >> 2];
   $1_1 = $12_1 + $26_1 | 0;
   $30_1 = HEAP32[$5_1 + 40 >> 2];
   $9_1 = $11_1 + $30_1 | 0;
   $1_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $46_1 = $1_1 >>> 20 | 0;
   $47_1 = ($1_1 | 0) == ($26_1 | 0) & $9_1 >>> 0 < $30_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
   $1_1 = $5_1 + 48 | 0;
   $48_1 = HEAP32[$1_1 >> 2];
   $45_1 = HEAP32[$1_1 + 4 >> 2];
   $42_1 = ($3_1 | 0) == ($12_1 | 0) & $11_1 >>> 0 < $14_1 >>> 0 | $3_1 >>> 0 > $12_1 >>> 0;
   $28_1 = ($3_1 | 0) == ($20_1 | 0) & $14_1 >>> 0 < $62_1 >>> 0 | $3_1 >>> 0 < $20_1 >>> 0;
   $1_1 = $5_1 + 96 | 0;
   $29_1 = HEAP32[$1_1 >> 2];
   $31_1 = HEAP32[$1_1 + 4 >> 2];
   $32_1 = ($20_1 | 0) == ($23_1 | 0) & $61_1 >>> 0 > $62_1 >>> 0 | $20_1 >>> 0 < $23_1 >>> 0;
   $1_1 = $5_1 - -64 | 0;
   $26_1 = HEAP32[$1_1 >> 2];
   $30_1 = HEAP32[$1_1 + 4 >> 2];
   $20_1 = ($2_1 | 0) == ($23_1 | 0) & $53_1 >>> 0 > $61_1 >>> 0 | $2_1 >>> 0 > $23_1 >>> 0;
   $1_1 = $5_1 + 576 | 0;
   $12_1 = HEAP32[$1_1 >> 2];
   $15_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $5_1 + 512 | 0;
   $14_1 = HEAP32[$1_1 >> 2];
   $11_1 = HEAP32[$1_1 + 4 >> 2];
   $3_1 = $5_1 + 448 | 0;
   $1_1 = HEAP32[$3_1 >> 2];
   $9_1 = HEAP32[$3_1 + 4 >> 2];
   $17_1 = ($2_1 | 0) == ($25_1 | 0) & $53_1 >>> 0 < $60_1 >>> 0 | $2_1 >>> 0 < $25_1 >>> 0;
   $18_1 = $14_1;
   $13_1 = $1_1;
   $1_1 = $5_1 + 320 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $2_1 = $5_1 + 384 | 0;
   $14_1 = $3_1 + HEAP32[$2_1 >> 2] | 0;
   $1_1 = HEAP32[$2_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $14_1;
   $2_1 = $3_1 + (($33_1 | 0) == ($52_1 | 0) & $58_1 >>> 0 < $57_1 >>> 0 | $33_1 >>> 0 < $52_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $13_1 + $2_1 | 0;
   $1_1 = $1_1 + $9_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + (($33_1 | 0) == ($34_1 | 0) & $58_1 >>> 0 > $59_1 >>> 0 | $33_1 >>> 0 > $34_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $18_1 + $2_1 | 0;
   $1_1 = $1_1 + $11_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + (($25_1 | 0) == ($34_1 | 0) & $59_1 >>> 0 > $60_1 >>> 0 | $25_1 >>> 0 < $34_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $12_1 | 0;
   $1_1 = $1_1 + $15_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $17_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $1_1;
   $1_1 = $8_1 >>> 20 | 0;
   $14_1 = $2_1;
   $2_1 = ($8_1 & 1048575) << 12 | $36_1 >>> 20;
   $8_1 = $14_1 + $2_1 | 0;
   $1_1 = $1_1 + $3_1 | 0;
   $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $2_1 = $3_1 + $20_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $26_1 | 0;
   $1_1 = $1_1 + $30_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $32_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $29_1 | 0;
   $1_1 = $1_1 + $31_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $28_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $10_1 >>> 20 | 0;
   $8_1 = $3_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $2_1 = $3_1 + $42_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $48_1 | 0;
   $1_1 = $1_1 + $45_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $47_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $14_1 = $2_1;
   $3_1 = $2_1 << 12 | $46_1;
   $2_1 = $3_1 + $16_1 | 0;
   $10_1 = $1_1;
   $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $4_1 | 0;
   $42_1 = $2_1;
   HEAP32[$5_1 + 760 >> 2] = $2_1;
   $9_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$5_1 + 764 >> 2] = $9_1 & 1048575;
   $26_1 = HEAP32[$5_1 + 536 >> 2];
   $3_1 = HEAP32[$5_1 + 472 >> 2];
   $2_1 = $26_1 + $3_1 | 0;
   $29_1 = HEAP32[$5_1 + 540 >> 2];
   $1_1 = $29_1 + HEAP32[$5_1 + 476 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $31_1 = $2_1;
   $3_1 = HEAP32[$5_1 + 600 >> 2];
   $2_1 = $2_1 + $3_1 | 0;
   $17_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 604 >> 2] | 0;
   $28_1 = $2_1;
   $2_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = 0;
   $13_1 = $3_1 + $28_1 | 0;
   $8_1 = $44_1;
   $1_1 = ($39_1 << 12) + $2_1 | 0;
   $32_1 = $13_1;
   $3_1 = HEAP32[$5_1 + 8 >> 2];
   $13_1 = $13_1 + $3_1 | 0;
   $15_1 = $1_1;
   $1_1 = $1_1 + HEAP32[$5_1 + 12 >> 2] | 0;
   $11_1 = $13_1;
   $3_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $30_1 = ($4_1 | 0) == ($9_1 | 0) & $16_1 >>> 0 > $42_1 >>> 0 | $4_1 >>> 0 > $9_1 >>> 0;
   $44_1 = ($4_1 | 0) == ($24_1 | 0) & $16_1 >>> 0 < $35_1 >>> 0 | $4_1 >>> 0 < $24_1 >>> 0;
   $1_1 = $5_1 + 32 | 0;
   $33_1 = HEAP32[$1_1 >> 2];
   $34_1 = HEAP32[$1_1 + 4 >> 2];
   $25_1 = ($19_1 | 0) == ($24_1 | 0) & $35_1 >>> 0 < $65_1 >>> 0 | $19_1 >>> 0 > $24_1 >>> 0;
   $1_1 = $5_1 + 80 | 0;
   $23_1 = HEAP32[$1_1 >> 2];
   $20_1 = HEAP32[$1_1 + 4 >> 2];
   $24_1 = ($6_1 | 0) == ($19_1 | 0) & $55_1 >>> 0 > $65_1 >>> 0 | $6_1 >>> 0 > $19_1 >>> 0;
   $1_1 = $5_1 + 592 | 0;
   $12_1 = HEAP32[$1_1 >> 2];
   $16_1 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $5_1 + 528 | 0;
   $1_1 = HEAP32[$4_1 >> 2];
   $13_1 = HEAP32[$4_1 + 4 >> 2];
   $19_1 = ($6_1 | 0) == ($21_1 | 0) & $55_1 >>> 0 < $64_1 >>> 0 | $6_1 >>> 0 < $21_1 >>> 0;
   $18_1 = $12_1;
   $14_1 = $1_1;
   $1_1 = $5_1 + 400 | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $6_1 = $5_1 + 464 | 0;
   $12_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
   $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $12_1;
   $6_1 = $4_1 + (($22_1 | 0) == ($54_1 | 0) & $40_1 >>> 0 > $63_1 >>> 0 | $22_1 >>> 0 < $54_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $14_1 + $4_1 | 0;
   $1_1 = $1_1 + $13_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + (($21_1 | 0) == ($22_1 | 0) & $63_1 >>> 0 > $64_1 >>> 0 | $21_1 >>> 0 < $22_1 >>> 0) | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $18_1 + $4_1 | 0;
   $1_1 = $1_1 + $16_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $19_1 + $4_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $1_1;
   $1_1 = $7_1 >>> 20 | 0;
   $14_1 = $6_1;
   $6_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
   $7_1 = $14_1 + $6_1 | 0;
   $1_1 = $1_1 + $4_1 | 0;
   $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $6_1 = $4_1 + $24_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $23_1 | 0;
   $1_1 = $1_1 + $20_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $25_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $33_1 | 0;
   $1_1 = $1_1 + $34_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $4_1 + $44_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $10_1 >>> 20 | 0;
   $7_1 = $4_1 + $6_1 | 0;
   $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $6_1 = $4_1 + $30_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $16_1 = $6_1;
   $6_1 = $6_1 << 12 | $9_1 >>> 20;
   $7_1 = $6_1 + $11_1 | 0;
   $10_1 = $1_1;
   $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $3_1 | 0;
   $25_1 = $7_1;
   HEAP32[$5_1 + 768 >> 2] = $7_1;
   $9_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$5_1 + 772 >> 2] = $9_1 & 1048575;
   $20_1 = HEAP32[$5_1 + 620 >> 2];
   $1_1 = $20_1 + HEAP32[$5_1 + 556 >> 2] | 0;
   $22_1 = HEAP32[$5_1 + 616 >> 2];
   $4_1 = HEAP32[$5_1 + 552 >> 2];
   $6_1 = $22_1 + $4_1 | 0;
   $23_1 = $6_1;
   $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = 0;
   $13_1 = $4_1 + $23_1 | 0;
   $7_1 = $38_1;
   $1_1 = ($41_1 << 12) + $6_1 | 0;
   $4_1 = $1_1;
   $21_1 = ($3_1 | 0) == ($9_1 | 0) & $11_1 >>> 0 > $25_1 >>> 0 | $3_1 >>> 0 > $9_1 >>> 0;
   $19_1 = ($3_1 | 0) == ($15_1 | 0) & $11_1 >>> 0 < $32_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
   $1_1 = $5_1 + 16 | 0;
   $24_1 = HEAP32[$1_1 >> 2];
   $12_1 = HEAP32[$1_1 + 4 >> 2];
   $14_1 = ($2_1 | 0) == ($15_1 | 0) & $28_1 >>> 0 > $32_1 >>> 0 | $2_1 >>> 0 > $15_1 >>> 0;
   $3_1 = $5_1 + 608 | 0;
   $1_1 = HEAP32[$3_1 >> 2];
   $11_1 = HEAP32[$3_1 + 4 >> 2];
   $16_1 = ($2_1 | 0) == ($17_1 | 0) & $28_1 >>> 0 < $31_1 >>> 0 | $2_1 >>> 0 < $17_1 >>> 0;
   $18_1 = $1_1;
   $1_1 = $5_1 + 480 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $2_1 = $5_1 + 544 | 0;
   $15_1 = $3_1 + HEAP32[$2_1 >> 2] | 0;
   $1_1 = HEAP32[$2_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $15_1;
   $2_1 = $3_1 + (($17_1 | 0) == ($29_1 | 0) & $26_1 >>> 0 > $31_1 >>> 0 | $17_1 >>> 0 < $29_1 >>> 0) | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $18_1 + $2_1 | 0;
   $1_1 = $1_1 + $11_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $16_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $1_1;
   $1_1 = $8_1 >>> 20 | 0;
   $15_1 = $2_1;
   $2_1 = ($8_1 & 1048575) << 12 | $39_1 >>> 20;
   $8_1 = $15_1 + $2_1 | 0;
   $1_1 = $1_1 + $3_1 | 0;
   $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $2_1 = $3_1 + $14_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $24_1 | 0;
   $1_1 = $1_1 + $12_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $2_1 + $19_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $10_1 >>> 20 | 0;
   $8_1 = $3_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $2_1 = $3_1 + $21_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $16_1 = $2_1;
   $2_1 = $2_1 << 12 | $9_1 >>> 20;
   $10_1 = $2_1 + $13_1 | 0;
   $8_1 = $1_1;
   $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $4_1 | 0;
   $12_1 = $10_1;
   HEAP32[$5_1 + 776 >> 2] = $10_1;
   $9_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$5_1 + 780 >> 2] = $9_1 & 1048575;
   $15_1 = 0;
   $3_1 = HEAP32[$5_1 + 632 >> 2];
   $18_1 = $15_1 + $3_1 | 0;
   $2_1 = $27_1;
   $11_1 = $43_1 << 12;
   $1_1 = $11_1 + HEAP32[$5_1 + 636 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $1_1;
   $14_1 = ($4_1 | 0) == ($9_1 | 0) & $13_1 >>> 0 > $12_1 >>> 0 | $4_1 >>> 0 > $9_1 >>> 0;
   $13_1 = ($4_1 | 0) == ($6_1 | 0) & $13_1 >>> 0 < $23_1 >>> 0 | $4_1 >>> 0 < $6_1 >>> 0;
   $10_1 = ($6_1 | 0) == ($20_1 | 0) & $23_1 >>> 0 < $22_1 >>> 0 | $6_1 >>> 0 < $20_1 >>> 0;
   $1_1 = $5_1 + 560 | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $6_1 = $5_1 + 624 | 0;
   $17_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
   $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $4_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $17_1;
   $6_1 = $10_1 + $4_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $1_1;
   $1_1 = $7_1 >>> 20 | 0;
   $10_1 = $6_1;
   $6_1 = ($7_1 & 1048575) << 12 | $41_1 >>> 20;
   $7_1 = $10_1 + $6_1 | 0;
   $1_1 = $1_1 + $4_1 | 0;
   $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $6_1 = $4_1 + $13_1 | 0;
   $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $6_1;
   $6_1 = $8_1 >>> 20 | 0;
   $7_1 = $4_1 + $6_1 | 0;
   $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = $7_1;
   $6_1 = $4_1 + $14_1 | 0;
   $7_1 = $6_1;
   $8_1 = $6_1 << 12 | $9_1 >>> 20;
   $9_1 = $8_1 + $18_1 | 0;
   $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $1_1 = ($6_1 << 12 | $7_1 >>> 20) + $3_1 | 0;
   $1_1 = $9_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$5_1 + 784 >> 2] = $9_1;
   $4_1 = $1_1;
   HEAP32[$5_1 + 788 >> 2] = $1_1 & 1048575;
   $10_1 = ($1_1 | 0) == ($3_1 | 0) & $18_1 >>> 0 > $9_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0;
   $7_1 = $3_1 >>> 0 < $11_1 >>> 0;
   $1_1 = $2_1 >>> 20 | 0;
   $3_1 = ($2_1 & 1048575) << 12 | $43_1 >>> 20;
   $8_1 = $5_1 + 640 | 0;
   $2_1 = $3_1 + HEAP32[$8_1 >> 2] | 0;
   $1_1 = $1_1 + HEAP32[$8_1 + 4 >> 2] | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $2_1;
   $2_1 = $7_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $6_1 >>> 20 | 0;
   $2_1 = $6_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $10_1 + $2_1 | 0;
   $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   HEAP32[$5_1 + 792 >> 2] = $3_1 << 12 | $4_1 >>> 20;
   HEAP32[$5_1 + 796 >> 2] = $1_1 << 12 | $3_1 >>> 20;
   $1_1 = $5_1 + 720 | 0;
   $3_1 = $5_1 + 760 | 0;
   $170($1_1, $3_1, 1065552);
   $92($3_1, $1_1);
   if (!$385($56_1, $3_1)) {
    break label$1
   }
   $3_1 = HEAP32[$5_1 + 652 >> 2];
   $1_1 = HEAP32[$5_1 + 648 >> 2];
   HEAP8[$0_1 + 1 | 0] = $1_1;
   HEAP8[$0_1 + 2 | 0] = $1_1 >>> 8;
   HEAP8[$0_1 + 3 | 0] = $1_1 >>> 16;
   HEAP8[$0_1 + 4 | 0] = $1_1 >>> 24;
   HEAP8[$0_1 + 5 | 0] = $3_1;
   HEAP8[$0_1 + 6 | 0] = $3_1 >>> 8;
   HEAP8[$0_1 + 7 | 0] = $3_1 >>> 16;
   HEAP8[$0_1 + 8 | 0] = $3_1 >>> 24;
   $3_1 = HEAP32[$49_1 + 4 >> 2];
   $4_1 = $0_1 + 25 | 0;
   $1_1 = HEAP32[$49_1 >> 2];
   HEAP8[$4_1 | 0] = $1_1;
   HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$4_1 + 4 | 0] = $3_1;
   HEAP8[$4_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$4_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$4_1 + 7 | 0] = $3_1 >>> 24;
   $3_1 = HEAP32[$50_1 + 4 >> 2];
   $4_1 = $0_1 + 17 | 0;
   $1_1 = HEAP32[$50_1 >> 2];
   HEAP8[$4_1 | 0] = $1_1;
   HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$4_1 + 4 | 0] = $3_1;
   HEAP8[$4_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$4_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$4_1 + 7 | 0] = $3_1 >>> 24;
   $3_1 = HEAP32[$51_1 + 4 >> 2];
   $4_1 = $0_1 + 9 | 0;
   $1_1 = HEAP32[$51_1 >> 2];
   HEAP8[$4_1 | 0] = $1_1;
   HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$4_1 + 4 | 0] = $3_1;
   HEAP8[$4_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$4_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$4_1 + 7 | 0] = $3_1 >>> 24;
   $66_1 = 1;
  }
  HEAP8[$0_1 | 0] = $66_1;
  global$0 = $5_1 + 800 | 0;
 }
 
 function $5($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0;
  $5_1 = global$0 - 768 | 0;
  global$0 = $5_1;
  $44_1 = $5_1 + 688 | 0;
  $124($44_1, $1_1);
  $50_1 = $5_1 + 728 | 0;
  $124($50_1, $2_1);
  $204($5_1 + 648 | 0, $44_1, $50_1);
  $3_1 = HEAP32[$5_1 + 648 >> 2];
  $6_1 = HEAP32[$5_1 + 652 >> 2];
  $297($5_1 + 312 | 0, $3_1, $6_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($5_1 + 296 | 0, $3_1, $6_1, 0, 0, -1402477478, 244405, 0, 0);
  $10_1 = HEAP32[$5_1 + 656 >> 2];
  $1_1 = HEAP32[$5_1 + 660 >> 2];
  $297($5_1 + 392 | 0, $10_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($5_1 + 280 | 0, $3_1, $6_1, 0, 0, -348789477, 1048575, 0, 0);
  $4_1 = $1_1;
  $297($5_1 + 376 | 0, $10_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $9_1 = HEAP32[$5_1 + 664 >> 2];
  $1_1 = HEAP32[$5_1 + 668 >> 2];
  $297($5_1 + 472 | 0, $9_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($5_1 + 264 | 0, $3_1, $6_1, 0, 0, -1, 1048575, 0, 0);
  $297($5_1 + 360 | 0, $10_1, $4_1, 0, 0, -348789477, 1048575, 0, 0);
  $2_1 = $1_1;
  $297($5_1 + 456 | 0, $9_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $7_1 = HEAP32[$5_1 + 672 >> 2];
  $1_1 = HEAP32[$5_1 + 676 >> 2];
  $297($5_1 + 552 | 0, $7_1, $1_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($5_1 + 248 | 0, $3_1, $6_1, 0, 0, -1, 4095, 0, 0);
  $297($5_1 + 344 | 0, $10_1, $4_1, 0, 0, -1, 1048575, 0, 0);
  $297($5_1 + 440 | 0, $9_1, $2_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($5_1 + 536 | 0, $7_1, $1_1, 0, 0, -1402477478, 244405, 0, 0);
  $3_1 = HEAP32[$5_1 + 680 >> 2];
  $6_1 = HEAP32[$5_1 + 684 >> 2];
  $297($5_1 + 632 | 0, $3_1, $6_1, 0, 0, 1730275053, 1001661, 0, 0);
  $297($5_1 + 328 | 0, $10_1, $4_1, 0, 0, -1, 4095, 0, 0);
  $297($5_1 + 424 | 0, $9_1, $2_1, 0, 0, -1, 1048575, 0, 0);
  $297($5_1 + 520 | 0, $7_1, $1_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($5_1 + 616 | 0, $3_1, $6_1, 0, 0, -1402477478, 244405, 0, 0);
  $297($5_1 + 408 | 0, $9_1, $2_1, 0, 0, -1, 4095, 0, 0);
  $297($5_1 + 504 | 0, $7_1, $1_1, 0, 0, -1, 1048575, 0, 0);
  $297($5_1 + 600 | 0, $3_1, $6_1, 0, 0, -348789477, 1048575, 0, 0);
  $297($5_1 + 488 | 0, $7_1, $1_1, 0, 0, -1, 4095, 0, 0);
  $297($5_1 + 584 | 0, $3_1, $6_1, 0, 0, -1, 1048575, 0, 0);
  $297($5_1 + 568 | 0, $3_1, $6_1, 0, 0, -1, 4095, 0, 0);
  $3_1 = HEAP32[$5_1 + 312 >> 2];
  $6_1 = HEAP32[$5_1 + 316 >> 2];
  $36_1 = __wasm_i64_mul($3_1, $6_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $16_1 = $1_1;
  $297($5_1 + 232 | 0, $36_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 216 | 0, $36_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $10_1 = $5_1 + 184 | 0;
  $20_1 = HEAP32[$5_1 + 392 >> 2];
  $2_1 = HEAP32[$5_1 + 296 >> 2];
  $4_1 = $20_1 + $2_1 | 0;
  $25_1 = HEAP32[$5_1 + 396 >> 2];
  $1_1 = $25_1 + HEAP32[$5_1 + 300 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $23_1 = $4_1;
  $2_1 = HEAP32[$5_1 + 216 >> 2];
  $4_1 = $4_1 + $2_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 220 >> 2] | 0;
  $18_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = HEAP32[$5_1 + 232 >> 2];
  $2_1 = $9_1;
  $3_1 = $2_1 + $3_1 | 0;
  $8_1 = HEAP32[$5_1 + 236 >> 2];
  $1_1 = $8_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $7_1 = $1_1 >>> 20 | 0;
  $3_1 = ($1_1 | 0) == ($8_1 | 0) & $2_1 >>> 0 < $9_1 >>> 0 | $1_1 >>> 0 < $8_1 >>> 0;
  $1_1 = $5_1 + 320 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 240 | 0;
  $9_1 = $2_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $6_1 = $3_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = $6_1;
  $2_1 = $6_1 << 12 | $7_1;
  $7_1 = $2_1 + $18_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $13_1 >>> 20) + $4_1 | 0;
  $9_1 = $7_1;
  $11_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $37_1 = __wasm_i64_mul($7_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $30_1 = $1_1;
  $297($10_1, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 200 | 0, $36_1, $16_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 168 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $27_1 = $5_1 + 136 | 0;
  $38_1 = HEAP32[$5_1 + 376 >> 2];
  $2_1 = HEAP32[$5_1 + 280 >> 2];
  $3_1 = $38_1 + $2_1 | 0;
  $28_1 = HEAP32[$5_1 + 380 >> 2];
  $1_1 = $28_1 + HEAP32[$5_1 + 284 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 472 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 476 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 200 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 204 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 168 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 172 >> 2] | 0;
  $10_1 = $3_1;
  $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = HEAP32[$5_1 + 188 >> 2];
  $1_1 = $11_1 + $12_1 | 0;
  $17_1 = HEAP32[$5_1 + 184 >> 2];
  $3_1 = $7_1 + $17_1 | 0;
  $1_1 = $3_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = $1_1 >>> 20 | 0;
  $24_1 = ($1_1 | 0) == ($12_1 | 0) & $3_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $12_1 >>> 0;
  $1_1 = $5_1 + 192 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = ($4_1 | 0) == ($11_1 | 0) & $18_1 >>> 0 > $9_1 >>> 0 | $4_1 >>> 0 > $11_1 >>> 0;
  $3_1 = $5_1 + 224 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $13_1 = ($4_1 | 0) == ($14_1 | 0) & $18_1 >>> 0 < $23_1 >>> 0 | $4_1 >>> 0 < $14_1 >>> 0;
  $7_1 = $1_1;
  $1_1 = $5_1 + 304 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 400 | 0;
  $18_1 = $4_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $18_1;
  $3_1 = $4_1 + (($14_1 | 0) == ($25_1 | 0) & $20_1 >>> 0 > $23_1 >>> 0 | $14_1 >>> 0 < $25_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $3_1;
  $3_1 = $7_1 + $3_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $3_1;
  $3_1 = $13_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $3_1 = $6_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $3_1 + $8_1 | 0;
  $1_1 = $6_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $12_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = $6_1;
  $4_1 = $6_1 << 12 | $22_1;
  $3_1 = $4_1 + $10_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $13_1 >>> 20) + $2_1 | 0;
  $9_1 = $3_1;
  $11_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $39_1 = __wasm_i64_mul($3_1, $11_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $45_1 = $1_1;
  $297($27_1, $39_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 152 | 0, $37_1, $30_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 120 | 0, $39_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $5_1 + 88 | 0;
  $46_1 = HEAP32[$5_1 + 360 >> 2];
  $4_1 = HEAP32[$5_1 + 264 >> 2];
  $3_1 = $46_1 + $4_1 | 0;
  $35_1 = HEAP32[$5_1 + 364 >> 2];
  $1_1 = $35_1 + HEAP32[$5_1 + 268 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 456 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 460 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $47_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 552 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $12_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 556 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $48_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 152 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 156 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 120 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 124 >> 2] | 0;
  $8_1 = $3_1;
  $4_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = HEAP32[$5_1 + 140 >> 2];
  $1_1 = $11_1 + $27_1 | 0;
  $22_1 = HEAP32[$5_1 + 136 >> 2];
  $3_1 = $9_1 + $22_1 | 0;
  $1_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $1_1 >>> 20 | 0;
  $34_1 = ($1_1 | 0) == ($27_1 | 0) & $3_1 >>> 0 < $22_1 >>> 0 | $1_1 >>> 0 < $27_1 >>> 0;
  $1_1 = $5_1 + 144 | 0;
  $25_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($2_1 | 0) == ($11_1 | 0) & $9_1 >>> 0 < $10_1 >>> 0 | $2_1 >>> 0 > $11_1 >>> 0;
  $1_1 = $5_1 + 176 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $22_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 208 | 0;
  $11_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $5_1 + 480 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $13_1 = ($2_1 | 0) == ($15_1 | 0) & $10_1 >>> 0 < $32_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $7_1 = $1_1;
  $1_1 = $5_1 + 288 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 384 | 0;
  $10_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $10_1;
  $3_1 = $2_1 + (($21_1 | 0) == ($28_1 | 0) & $29_1 >>> 0 < $38_1 >>> 0 | $21_1 >>> 0 < $28_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $7_1 + $3_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($21_1 | 0) == ($19_1 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $21_1 >>> 0 > $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $11_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($15_1 | 0) == ($19_1 | 0) & $31_1 >>> 0 > $32_1 >>> 0 | $15_1 >>> 0 < $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $27_1 | 0;
  $1_1 = $1_1 + $22_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $13_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $3_1 = $6_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $3_1 + $20_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $2_1 + $25_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $2_1 + $34_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $6_1;
  $2_1 = $6_1 << 12 | $33_1;
  $3_1 = $2_1 + $8_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $11_1 >>> 20) + $4_1 | 0;
  $10_1 = $3_1;
  $15_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $41_1 = __wasm_i64_mul($3_1, $15_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $38_1 = $1_1;
  $297($26_1, $41_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 104 | 0, $39_1, $45_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 72 | 0, $41_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $42_1 = $5_1 + 40 | 0;
  $55_1 = HEAP32[$5_1 + 344 >> 2];
  $2_1 = HEAP32[$5_1 + 248 >> 2];
  $3_1 = $55_1 + $2_1 | 0;
  $51_1 = HEAP32[$5_1 + 348 >> 2];
  $1_1 = $51_1 + HEAP32[$5_1 + 252 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $56_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 440 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $33_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 444 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $57_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 536 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $34_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 540 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $58_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 632 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $25_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 636 >> 2] | 0;
  $52_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $7_1 = $2_1 + $52_1 | 0;
  $9_1 = $16_1;
  $1_1 = ($36_1 << 12) + $3_1 | 0;
  $59_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 104 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 108 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $60_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 72 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 76 >> 2] | 0;
  $16_1 = $7_1;
  $2_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = HEAP32[$5_1 + 92 >> 2];
  $1_1 = $15_1 + $21_1 | 0;
  $19_1 = HEAP32[$5_1 + 88 >> 2];
  $7_1 = $10_1 + $19_1 | 0;
  $1_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $1_1 >>> 20 | 0;
  $29_1 = ($1_1 | 0) == ($21_1 | 0) & $7_1 >>> 0 < $19_1 >>> 0 | $1_1 >>> 0 < $21_1 >>> 0;
  $1_1 = $5_1 + 96 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($4_1 | 0) == ($15_1 | 0) & $8_1 >>> 0 > $10_1 >>> 0 | $4_1 >>> 0 > $15_1 >>> 0;
  $1_1 = $5_1 + 128 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $22_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 160 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 560 | 0;
  $15_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $5_1 + 464 | 0;
  $1_1 = HEAP32[$7_1 >> 2];
  $10_1 = HEAP32[$7_1 + 4 >> 2];
  $11_1 = ($4_1 | 0) == ($14_1 | 0) & $8_1 >>> 0 < $49_1 >>> 0 | $4_1 >>> 0 < $14_1 >>> 0;
  $18_1 = $1_1;
  $1_1 = $5_1 + 272 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $5_1 + 368 | 0;
  $8_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $8_1;
  $7_1 = $4_1 + (($24_1 | 0) == ($35_1 | 0) & $40_1 >>> 0 < $46_1 >>> 0 | $24_1 >>> 0 < $35_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $18_1 + $4_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($12_1 | 0) == ($24_1 | 0) & $40_1 >>> 0 > $47_1 >>> 0 | $12_1 >>> 0 < $24_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $15_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($12_1 | 0) == ($17_1 | 0) & $47_1 >>> 0 > $48_1 >>> 0 | $12_1 >>> 0 > $17_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $21_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($14_1 | 0) == ($17_1 | 0) & $48_1 >>> 0 > $49_1 >>> 0 | $14_1 >>> 0 < $17_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $27_1 | 0;
  $1_1 = $1_1 + $22_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $11_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $26_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $29_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $17_1 = $6_1;
  $4_1 = $6_1 << 12 | $28_1;
  $6_1 = $4_1 + $16_1 | 0;
  $10_1 = $1_1;
  $1_1 = ($1_1 << 12 | $17_1 >>> 20) + $2_1 | 0;
  $11_1 = $6_1;
  $12_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $43_1 = __wasm_i64_mul($6_1, $12_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $27_1 = $1_1;
  $297($42_1, $43_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 56 | 0, $41_1, $38_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 24 | 0, $43_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($5_1 + 8 | 0, $43_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $40_1 = HEAP32[$5_1 + 424 >> 2];
  $4_1 = HEAP32[$5_1 + 328 >> 2];
  $6_1 = $40_1 + $4_1 | 0;
  $53_1 = HEAP32[$5_1 + 428 >> 2];
  $1_1 = $53_1 + HEAP32[$5_1 + 332 >> 2] | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $6_1;
  $4_1 = HEAP32[$5_1 + 520 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 524 >> 2] | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $62_1 = $6_1;
  $4_1 = HEAP32[$5_1 + 616 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 620 >> 2] | 0;
  $54_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $8_1 = $4_1 + $54_1 | 0;
  $7_1 = $30_1;
  $1_1 = ($37_1 << 12) + $6_1 | 0;
  $63_1 = $8_1;
  $4_1 = HEAP32[$5_1 + 56 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 60 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $35_1 = $8_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 28 >> 2] | 0;
  $15_1 = $8_1;
  $4_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$5_1 + 44 >> 2];
  $1_1 = $12_1 + $26_1 | 0;
  $30_1 = HEAP32[$5_1 + 40 >> 2];
  $8_1 = $11_1 + $30_1 | 0;
  $1_1 = $8_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $47_1 = $1_1 >>> 20 | 0;
  $48_1 = ($1_1 | 0) == ($26_1 | 0) & $8_1 >>> 0 < $30_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $5_1 + 48 | 0;
  $49_1 = HEAP32[$1_1 >> 2];
  $46_1 = HEAP32[$1_1 + 4 >> 2];
  $42_1 = ($2_1 | 0) == ($12_1 | 0) & $11_1 >>> 0 < $16_1 >>> 0 | $2_1 >>> 0 > $12_1 >>> 0;
  $28_1 = ($2_1 | 0) == ($20_1 | 0) & $16_1 >>> 0 < $60_1 >>> 0 | $2_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $5_1 + 80 | 0;
  $29_1 = HEAP32[$1_1 >> 2];
  $31_1 = HEAP32[$1_1 + 4 >> 2];
  $32_1 = ($20_1 | 0) == ($23_1 | 0) & $59_1 >>> 0 > $60_1 >>> 0 | $20_1 >>> 0 < $23_1 >>> 0;
  $1_1 = $5_1 + 112 | 0;
  $26_1 = HEAP32[$1_1 >> 2];
  $30_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($3_1 | 0) == ($23_1 | 0) & $52_1 >>> 0 > $59_1 >>> 0 | $3_1 >>> 0 > $23_1 >>> 0;
  $1_1 = $5_1 + 640 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $14_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 544 | 0;
  $16_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $5_1 + 448 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $8_1 = HEAP32[$2_1 + 4 >> 2];
  $17_1 = ($3_1 | 0) == ($25_1 | 0) & $52_1 >>> 0 < $58_1 >>> 0 | $3_1 >>> 0 < $25_1 >>> 0;
  $18_1 = $16_1;
  $13_1 = $1_1;
  $1_1 = $5_1 + 256 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 352 | 0;
  $16_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $16_1;
  $3_1 = $2_1 + (($33_1 | 0) == ($51_1 | 0) & $56_1 >>> 0 < $55_1 >>> 0 | $33_1 >>> 0 < $51_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $13_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($33_1 | 0) == ($34_1 | 0) & $56_1 >>> 0 > $57_1 >>> 0 | $33_1 >>> 0 > $34_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $18_1 + $3_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($25_1 | 0) == ($34_1 | 0) & $57_1 >>> 0 > $58_1 >>> 0 | $25_1 >>> 0 < $34_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $12_1 | 0;
  $1_1 = $1_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $17_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $8_1 = $3_1;
  $3_1 = ($9_1 & 1048575) << 12 | $36_1 >>> 20;
  $9_1 = $8_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $20_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $26_1 | 0;
  $1_1 = $1_1 + $30_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $32_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $29_1 | 0;
  $1_1 = $1_1 + $31_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $28_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $10_1 >>> 20 | 0;
  $9_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $42_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $49_1 | 0;
  $1_1 = $1_1 + $46_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $48_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $3_1;
  $2_1 = $3_1 << 12 | $47_1;
  $3_1 = $2_1 + $15_1 | 0;
  $10_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $4_1 | 0;
  $42_1 = $3_1;
  HEAP32[$5_1 + 728 >> 2] = $3_1;
  $8_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 732 >> 2] = $8_1 & 1048575;
  $26_1 = HEAP32[$5_1 + 504 >> 2];
  $2_1 = HEAP32[$5_1 + 408 >> 2];
  $3_1 = $26_1 + $2_1 | 0;
  $29_1 = HEAP32[$5_1 + 508 >> 2];
  $1_1 = $29_1 + HEAP32[$5_1 + 412 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 600 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 604 >> 2] | 0;
  $28_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $13_1 = $2_1 + $28_1 | 0;
  $9_1 = $45_1;
  $1_1 = ($39_1 << 12) + $3_1 | 0;
  $32_1 = $13_1;
  $2_1 = HEAP32[$5_1 + 8 >> 2];
  $13_1 = $13_1 + $2_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 12 >> 2] | 0;
  $11_1 = $13_1;
  $2_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $30_1 = ($4_1 | 0) == ($8_1 | 0) & $15_1 >>> 0 > $42_1 >>> 0 | $4_1 >>> 0 > $8_1 >>> 0;
  $45_1 = ($4_1 | 0) == ($24_1 | 0) & $15_1 >>> 0 < $35_1 >>> 0 | $4_1 >>> 0 < $24_1 >>> 0;
  $1_1 = $5_1 + 32 | 0;
  $33_1 = HEAP32[$1_1 >> 2];
  $34_1 = HEAP32[$1_1 + 4 >> 2];
  $25_1 = ($19_1 | 0) == ($24_1 | 0) & $35_1 >>> 0 < $63_1 >>> 0 | $19_1 >>> 0 > $24_1 >>> 0;
  $1_1 = $5_1 - -64 | 0;
  $23_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $24_1 = ($6_1 | 0) == ($19_1 | 0) & $54_1 >>> 0 > $63_1 >>> 0 | $6_1 >>> 0 > $19_1 >>> 0;
  $1_1 = $5_1 + 624 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $5_1 + 528 | 0;
  $1_1 = HEAP32[$4_1 >> 2];
  $13_1 = HEAP32[$4_1 + 4 >> 2];
  $19_1 = ($6_1 | 0) == ($21_1 | 0) & $54_1 >>> 0 < $62_1 >>> 0 | $6_1 >>> 0 < $21_1 >>> 0;
  $18_1 = $12_1;
  $16_1 = $1_1;
  $1_1 = $5_1 + 336 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 432 | 0;
  $12_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $12_1;
  $6_1 = $4_1 + (($22_1 | 0) == ($53_1 | 0) & $40_1 >>> 0 > $61_1 >>> 0 | $22_1 >>> 0 < $53_1 >>> 0) | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $16_1 + $4_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + (($21_1 | 0) == ($22_1 | 0) & $61_1 >>> 0 > $62_1 >>> 0 | $21_1 >>> 0 < $22_1 >>> 0) | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $18_1 + $4_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $19_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $16_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
  $7_1 = $16_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $23_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $25_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $33_1 | 0;
  $1_1 = $1_1 + $34_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $45_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $10_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $30_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $6_1;
  $6_1 = $6_1 << 12 | $8_1 >>> 20;
  $7_1 = $6_1 + $11_1 | 0;
  $10_1 = $1_1;
  $1_1 = ($1_1 << 12 | $15_1 >>> 20) + $2_1 | 0;
  $25_1 = $7_1;
  HEAP32[$5_1 + 736 >> 2] = $7_1;
  $8_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 740 >> 2] = $8_1 & 1048575;
  $20_1 = HEAP32[$5_1 + 588 >> 2];
  $1_1 = $20_1 + HEAP32[$5_1 + 492 >> 2] | 0;
  $22_1 = HEAP32[$5_1 + 584 >> 2];
  $4_1 = HEAP32[$5_1 + 488 >> 2];
  $6_1 = $22_1 + $4_1 | 0;
  $23_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $13_1 = $4_1 + $23_1 | 0;
  $7_1 = $38_1;
  $1_1 = ($41_1 << 12) + $6_1 | 0;
  $4_1 = $1_1;
  $21_1 = ($2_1 | 0) == ($8_1 | 0) & $11_1 >>> 0 > $25_1 >>> 0 | $2_1 >>> 0 > $8_1 >>> 0;
  $19_1 = ($2_1 | 0) == ($14_1 | 0) & $11_1 >>> 0 < $32_1 >>> 0 | $2_1 >>> 0 < $14_1 >>> 0;
  $1_1 = $5_1 + 16 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $16_1 = ($3_1 | 0) == ($14_1 | 0) & $28_1 >>> 0 > $32_1 >>> 0 | $3_1 >>> 0 > $14_1 >>> 0;
  $2_1 = $5_1 + 608 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $11_1 = HEAP32[$2_1 + 4 >> 2];
  $15_1 = ($3_1 | 0) == ($17_1 | 0) & $28_1 >>> 0 < $31_1 >>> 0 | $3_1 >>> 0 < $17_1 >>> 0;
  $18_1 = $1_1;
  $1_1 = $5_1 + 416 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 512 | 0;
  $14_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $14_1;
  $3_1 = $2_1 + (($17_1 | 0) == ($29_1 | 0) & $26_1 >>> 0 > $31_1 >>> 0 | $17_1 >>> 0 < $29_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $18_1 + $3_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $15_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $14_1 = $3_1;
  $3_1 = ($9_1 & 1048575) << 12 | $39_1 >>> 20;
  $9_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $16_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $24_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $10_1 >>> 20 | 0;
  $9_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $21_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $3_1;
  $3_1 = $3_1 << 12 | $8_1 >>> 20;
  $10_1 = $3_1 + $13_1 | 0;
  $9_1 = $1_1;
  $1_1 = ($1_1 << 12 | $15_1 >>> 20) + $4_1 | 0;
  $12_1 = $10_1;
  HEAP32[$5_1 + 744 >> 2] = $10_1;
  $8_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 748 >> 2] = $8_1 & 1048575;
  $14_1 = 0;
  $2_1 = HEAP32[$5_1 + 568 >> 2];
  $18_1 = $14_1 + $2_1 | 0;
  $3_1 = $27_1;
  $11_1 = $43_1 << 12;
  $1_1 = $11_1 + HEAP32[$5_1 + 572 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $16_1 = ($4_1 | 0) == ($8_1 | 0) & $13_1 >>> 0 > $12_1 >>> 0 | $4_1 >>> 0 > $8_1 >>> 0;
  $13_1 = ($6_1 | 0) == ($4_1 | 0) & $13_1 >>> 0 < $23_1 >>> 0 | $6_1 >>> 0 > $4_1 >>> 0;
  $10_1 = ($6_1 | 0) == ($20_1 | 0) & $23_1 >>> 0 < $22_1 >>> 0 | $6_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $5_1 + 496 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 592 | 0;
  $17_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $17_1;
  $6_1 = $10_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $10_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $41_1 >>> 20;
  $7_1 = $10_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $13_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $9_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $16_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = $6_1;
  $6_1 = $6_1 << 12 | $8_1 >>> 20;
  $8_1 = $6_1 + $18_1 | 0;
  $7_1 = $1_1;
  $1_1 = ($1_1 << 12 | $9_1 >>> 20) + $2_1 | 0;
  HEAP32[$5_1 + 752 >> 2] = $8_1;
  $6_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 756 >> 2] = $6_1 & 1048575;
  $9_1 = ($2_1 | 0) == ($6_1 | 0) & $18_1 >>> 0 > $8_1 >>> 0 | $2_1 >>> 0 > $6_1 >>> 0;
  $4_1 = $2_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $3_1 >>> 20 | 0;
  $2_1 = ($3_1 & 1048575) << 12 | $43_1 >>> 20;
  $10_1 = $5_1 + 576 | 0;
  $3_1 = $2_1 + HEAP32[$10_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$10_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $4_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $7_1 >>> 20 | 0;
  $7_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $3_1 = $9_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 760 >> 2] = $3_1 << 12 | $6_1 >>> 20;
  HEAP32[$5_1 + 764 >> 2] = $1_1 << 12 | $3_1 >>> 20;
  $170($44_1, $50_1, 1065552);
  $92($0_1, $44_1);
  global$0 = $5_1 + 768 | 0;
 }
 
 function $6($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0;
  $5_1 = global$0 - 688 | 0;
  global$0 = $5_1;
  $19_1 = HEAP32[$2_1 >> 2];
  $18_1 = HEAP32[$2_1 + 4 >> 2];
  $21_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $297($5_1 + 248 | 0, $19_1, $18_1, 0, 0, $21_1, $13_1, 0, 0);
  $16_1 = HEAP32[$2_1 + 8 >> 2];
  $14_1 = HEAP32[$2_1 + 12 >> 2];
  $297($5_1 + 264 | 0, $16_1, $14_1, 0, 0, $21_1, $13_1, 0, 0);
  $20_1 = HEAP32[$1_1 + 8 >> 2];
  $15_1 = HEAP32[$1_1 + 12 >> 2];
  $297($5_1 + 328 | 0, $20_1, $15_1, 0, 0, $19_1, $18_1, 0, 0);
  $10_1 = HEAP32[$2_1 + 16 >> 2];
  $12_1 = HEAP32[$2_1 + 20 >> 2];
  $297($5_1 + 280 | 0, $10_1, $12_1, 0, 0, $21_1, $13_1, 0, 0);
  $297($5_1 + 392 | 0, $20_1, $15_1, 0, 0, $16_1, $14_1, 0, 0);
  $8_1 = HEAP32[$1_1 + 16 >> 2];
  $17_1 = HEAP32[$1_1 + 20 >> 2];
  $297($5_1 + 344 | 0, $8_1, $17_1, 0, 0, $19_1, $18_1, 0, 0);
  $11_1 = HEAP32[$2_1 + 24 >> 2];
  $9_1 = HEAP32[$2_1 + 28 >> 2];
  $297($5_1 + 296 | 0, $11_1, $9_1, 0, 0, $21_1, $13_1, 0, 0);
  $297($5_1 + 456 | 0, $10_1, $12_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($5_1 + 408 | 0, $8_1, $17_1, 0, 0, $16_1, $14_1, 0, 0);
  $7_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 + 28 >> 2];
  $297($5_1 + 360 | 0, $7_1, $3_1, 0, 0, $19_1, $18_1, 0, 0);
  $6_1 = HEAP32[$2_1 + 32 >> 2];
  $4_1 = HEAP32[$2_1 + 36 >> 2];
  $297($5_1 + 312 | 0, $6_1, $4_1, 0, 0, $21_1, $13_1, 0, 0);
  $297($5_1 + 472 | 0, $11_1, $9_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($5_1 + 504 | 0, $8_1, $17_1, 0, 0, $10_1, $12_1, 0, 0);
  $297($5_1 + 424 | 0, $7_1, $3_1, 0, 0, $16_1, $14_1, 0, 0);
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $1_1 = HEAP32[$1_1 + 36 >> 2];
  $297($5_1 + 376 | 0, $2_1, $1_1, 0, 0, $19_1, $18_1, 0, 0);
  $297($5_1 + 488 | 0, $6_1, $4_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($5_1 + 552 | 0, $11_1, $9_1, 0, 0, $8_1, $17_1, 0, 0);
  $297($5_1 + 520 | 0, $7_1, $3_1, 0, 0, $10_1, $12_1, 0, 0);
  $297($5_1 + 440 | 0, $2_1, $1_1, 0, 0, $16_1, $14_1, 0, 0);
  $297($5_1 + 568 | 0, $6_1, $4_1, 0, 0, $8_1, $17_1, 0, 0);
  $297($5_1 + 584 | 0, $7_1, $3_1, 0, 0, $11_1, $9_1, 0, 0);
  $297($5_1 + 536 | 0, $2_1, $1_1, 0, 0, $10_1, $12_1, 0, 0);
  $297($5_1 + 616 | 0, $6_1, $4_1, 0, 0, $7_1, $3_1, 0, 0);
  $297($5_1 + 600 | 0, $2_1, $1_1, 0, 0, $11_1, $9_1, 0, 0);
  $297($5_1 + 632 | 0, $2_1, $1_1, 0, 0, $6_1, $4_1, 0, 0);
  $3_1 = HEAP32[$5_1 + 248 >> 2];
  $6_1 = HEAP32[$5_1 + 252 >> 2];
  $35_1 = __wasm_i64_mul($3_1, $6_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $20_1 = $1_1;
  $297($5_1 + 232 | 0, $35_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 216 | 0, $35_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $11_1 = $5_1 + 200 | 0;
  $22_1 = HEAP32[$5_1 + 328 >> 2];
  $2_1 = HEAP32[$5_1 + 264 >> 2];
  $4_1 = $22_1 + $2_1 | 0;
  $23_1 = HEAP32[$5_1 + 332 >> 2];
  $1_1 = $23_1 + HEAP32[$5_1 + 268 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $24_1 = $4_1;
  $2_1 = HEAP32[$5_1 + 216 >> 2];
  $4_1 = $4_1 + $2_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 220 >> 2] | 0;
  $17_1 = $4_1;
  $4_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = HEAP32[$5_1 + 232 >> 2];
  $2_1 = $9_1;
  $3_1 = $2_1 + $3_1 | 0;
  $8_1 = HEAP32[$5_1 + 236 >> 2];
  $1_1 = $8_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $7_1 = $1_1 >>> 20 | 0;
  $3_1 = ($1_1 | 0) == ($8_1 | 0) & $2_1 >>> 0 < $9_1 >>> 0 | $1_1 >>> 0 < $8_1 >>> 0;
  $1_1 = $5_1 + 256 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 240 | 0;
  $9_1 = $2_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $6_1 = $3_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $6_1;
  $2_1 = $6_1 << 12 | $7_1;
  $7_1 = $2_1 + $17_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $4_1 | 0;
  $9_1 = $7_1;
  $10_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $36_1 = __wasm_i64_mul($7_1, $10_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $30_1 = $1_1;
  $297($11_1, $36_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 152 | 0, $35_1, $20_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 184 | 0, $36_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $27_1 = $5_1 + 136 | 0;
  $37_1 = HEAP32[$5_1 + 280 >> 2];
  $2_1 = HEAP32[$5_1 + 392 >> 2];
  $3_1 = $37_1 + $2_1 | 0;
  $28_1 = HEAP32[$5_1 + 284 >> 2];
  $1_1 = $28_1 + HEAP32[$5_1 + 396 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 344 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 348 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 152 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $18_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 156 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 184 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 188 >> 2] | 0;
  $11_1 = $3_1;
  $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = HEAP32[$5_1 + 204 >> 2];
  $1_1 = $10_1 + $13_1 | 0;
  $16_1 = HEAP32[$5_1 + 200 >> 2];
  $3_1 = $7_1 + $16_1 | 0;
  $1_1 = $3_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $25_1 = $1_1 >>> 20 | 0;
  $21_1 = ($1_1 | 0) == ($13_1 | 0) & $3_1 >>> 0 < $16_1 >>> 0 | $1_1 >>> 0 < $13_1 >>> 0;
  $1_1 = $5_1 + 208 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = ($4_1 | 0) == ($10_1 | 0) & $17_1 >>> 0 > $9_1 >>> 0 | $4_1 >>> 0 > $10_1 >>> 0;
  $3_1 = $5_1 + 224 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $12_1 = ($4_1 | 0) == ($14_1 | 0) & $17_1 >>> 0 < $24_1 >>> 0 | $4_1 >>> 0 < $14_1 >>> 0;
  $7_1 = $1_1;
  $1_1 = $5_1 + 272 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 336 | 0;
  $17_1 = $4_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $17_1;
  $3_1 = $4_1 + (($14_1 | 0) == ($23_1 | 0) & $24_1 >>> 0 < $22_1 >>> 0 | $14_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $3_1;
  $3_1 = $7_1 + $3_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $3_1;
  $3_1 = $12_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $3_1 = $6_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $3_1 + $8_1 | 0;
  $1_1 = $6_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $13_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $21_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $6_1;
  $4_1 = $6_1 << 12 | $25_1;
  $3_1 = $4_1 + $11_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $2_1 | 0;
  $9_1 = $3_1;
  $10_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $38_1 = __wasm_i64_mul($3_1, $10_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $43_1 = $1_1;
  $297($27_1, $38_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 168 | 0, $36_1, $30_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 120 | 0, $38_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $5_1 + 104 | 0;
  $44_1 = HEAP32[$5_1 + 408 >> 2];
  $4_1 = HEAP32[$5_1 + 456 >> 2];
  $3_1 = $44_1 + $4_1 | 0;
  $39_1 = HEAP32[$5_1 + 412 >> 2];
  $1_1 = $39_1 + HEAP32[$5_1 + 460 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $45_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 296 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 300 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $46_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 360 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $13_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 364 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $47_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 168 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 172 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $48_1 = $3_1;
  $4_1 = HEAP32[$5_1 + 120 >> 2];
  $3_1 = $3_1 + $4_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 124 >> 2] | 0;
  $8_1 = $3_1;
  $4_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = HEAP32[$5_1 + 140 >> 2];
  $1_1 = $10_1 + $27_1 | 0;
  $25_1 = HEAP32[$5_1 + 136 >> 2];
  $3_1 = $9_1 + $25_1 | 0;
  $1_1 = $3_1 >>> 0 < $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $1_1 >>> 20 | 0;
  $34_1 = ($1_1 | 0) == ($27_1 | 0) & $3_1 >>> 0 < $25_1 >>> 0 | $1_1 >>> 0 < $27_1 >>> 0;
  $1_1 = $5_1 + 144 | 0;
  $23_1 = HEAP32[$1_1 >> 2];
  $24_1 = HEAP32[$1_1 + 4 >> 2];
  $22_1 = ($2_1 | 0) == ($10_1 | 0) & $9_1 >>> 0 < $11_1 >>> 0 | $2_1 >>> 0 > $10_1 >>> 0;
  $1_1 = $5_1 + 192 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 160 | 0;
  $10_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $5_1 + 352 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  $12_1 = ($2_1 | 0) == ($15_1 | 0) & $11_1 >>> 0 < $32_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $7_1 = $1_1;
  $1_1 = $5_1 + 400 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 288 | 0;
  $11_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $11_1;
  $3_1 = $2_1 + (($19_1 | 0) == ($28_1 | 0) & $29_1 >>> 0 < $37_1 >>> 0 | $19_1 >>> 0 < $28_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $7_1 + $3_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($19_1 | 0) == ($18_1 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $19_1 >>> 0 > $18_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $10_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($15_1 | 0) == ($18_1 | 0) & $31_1 >>> 0 > $32_1 >>> 0 | $15_1 >>> 0 < $18_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $27_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $12_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $3_1 = $6_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $3_1 + $22_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $2_1 + $23_1 | 0;
  $1_1 = $1_1 + $24_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $2_1 + $34_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = $6_1;
  $2_1 = $6_1 << 12 | $33_1;
  $3_1 = $2_1 + $8_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $10_1 >>> 20) + $4_1 | 0;
  $11_1 = $3_1;
  $15_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = __wasm_i64_mul($3_1, $15_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $37_1 = $1_1;
  $297($26_1, $40_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 56 | 0, $38_1, $43_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 88 | 0, $40_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $41_1 = $5_1 + 40 | 0;
  $49_1 = HEAP32[$5_1 + 476 >> 2];
  $1_1 = $49_1 + HEAP32[$5_1 + 508 >> 2] | 0;
  $53_1 = HEAP32[$5_1 + 472 >> 2];
  $2_1 = HEAP32[$5_1 + 504 >> 2];
  $3_1 = $53_1 + $2_1 | 0;
  $50_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $7_1 = $2_1 + $50_1 | 0;
  $9_1 = $20_1;
  $1_1 = ($35_1 << 12) + $3_1 | 0;
  $54_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 424 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $33_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 428 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $55_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 312 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $34_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 316 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $56_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 376 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 380 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $57_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 56 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 60 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $58_1 = $7_1;
  $2_1 = HEAP32[$5_1 + 88 >> 2];
  $7_1 = $7_1 + $2_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 92 >> 2] | 0;
  $20_1 = $7_1;
  $2_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $19_1 = HEAP32[$5_1 + 108 >> 2];
  $1_1 = $15_1 + $19_1 | 0;
  $18_1 = HEAP32[$5_1 + 104 >> 2];
  $7_1 = $11_1 + $18_1 | 0;
  $1_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $1_1 >>> 20 | 0;
  $29_1 = ($1_1 | 0) == ($19_1 | 0) & $7_1 >>> 0 < $18_1 >>> 0 | $1_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $5_1 + 112 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($4_1 | 0) == ($15_1 | 0) & $8_1 >>> 0 > $11_1 >>> 0 | $4_1 >>> 0 > $15_1 >>> 0;
  $1_1 = $5_1 + 128 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 176 | 0;
  $19_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 368 | 0;
  $15_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $5_1 + 304 | 0;
  $1_1 = HEAP32[$7_1 >> 2];
  $11_1 = HEAP32[$7_1 + 4 >> 2];
  $10_1 = ($4_1 | 0) == ($14_1 | 0) & $8_1 >>> 0 < $48_1 >>> 0 | $4_1 >>> 0 < $14_1 >>> 0;
  $17_1 = $1_1;
  $1_1 = $5_1 + 464 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $5_1 + 416 | 0;
  $8_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $8_1;
  $7_1 = $4_1 + (($21_1 | 0) == ($39_1 | 0) & $45_1 >>> 0 < $44_1 >>> 0 | $21_1 >>> 0 < $39_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $17_1 + $4_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($13_1 | 0) == ($21_1 | 0) & $45_1 >>> 0 > $46_1 >>> 0 | $13_1 >>> 0 < $21_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $15_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($13_1 | 0) == ($16_1 | 0) & $46_1 >>> 0 > $47_1 >>> 0 | $13_1 >>> 0 > $16_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $19_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($14_1 | 0) == ($16_1 | 0) & $47_1 >>> 0 > $48_1 >>> 0 | $14_1 >>> 0 < $16_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $27_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $10_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $26_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $29_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $6_1;
  $4_1 = $6_1 << 12 | $28_1;
  $6_1 = $4_1 + $20_1 | 0;
  $11_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $2_1 | 0;
  $10_1 = $6_1;
  $13_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $42_1 = __wasm_i64_mul($6_1, $13_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $27_1 = $1_1;
  $297($41_1, $42_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($5_1 + 72 | 0, $40_1, $37_1, 0, 0, 1367801, 0, 0, 0);
  $297($5_1 + 24 | 0, $42_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($5_1 + 8 | 0, $42_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $59_1 = HEAP32[$5_1 + 520 >> 2];
  $4_1 = HEAP32[$5_1 + 552 >> 2];
  $6_1 = $59_1 + $4_1 | 0;
  $51_1 = HEAP32[$5_1 + 524 >> 2];
  $1_1 = $51_1 + HEAP32[$5_1 + 556 >> 2] | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $60_1 = $6_1;
  $4_1 = HEAP32[$5_1 + 488 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $25_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 492 >> 2] | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $6_1;
  $4_1 = HEAP32[$5_1 + 440 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 444 >> 2] | 0;
  $52_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $8_1 = $4_1 + $52_1 | 0;
  $7_1 = $30_1;
  $1_1 = ($36_1 << 12) + $6_1 | 0;
  $62_1 = $8_1;
  $4_1 = HEAP32[$5_1 + 72 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $18_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 76 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $17_1 = $8_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 28 >> 2] | 0;
  $15_1 = $8_1;
  $4_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$5_1 + 44 >> 2];
  $1_1 = $13_1 + $26_1 | 0;
  $30_1 = HEAP32[$5_1 + 40 >> 2];
  $8_1 = $10_1 + $30_1 | 0;
  $1_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $1_1 >>> 20 | 0;
  $39_1 = ($1_1 | 0) == ($26_1 | 0) & $8_1 >>> 0 < $30_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $5_1 + 48 | 0;
  $45_1 = HEAP32[$1_1 >> 2];
  $46_1 = HEAP32[$1_1 + 4 >> 2];
  $47_1 = ($2_1 | 0) == ($13_1 | 0) & $10_1 >>> 0 < $20_1 >>> 0 | $2_1 >>> 0 > $13_1 >>> 0;
  $48_1 = ($2_1 | 0) == ($22_1 | 0) & $20_1 >>> 0 < $58_1 >>> 0 | $2_1 >>> 0 < $22_1 >>> 0;
  $1_1 = $5_1 + 96 | 0;
  $44_1 = HEAP32[$1_1 >> 2];
  $41_1 = HEAP32[$1_1 + 4 >> 2];
  $28_1 = ($24_1 | 0) == ($22_1 | 0) & $57_1 >>> 0 > $58_1 >>> 0 | $24_1 >>> 0 > $22_1 >>> 0;
  $1_1 = $5_1 - -64 | 0;
  $29_1 = HEAP32[$1_1 >> 2];
  $31_1 = HEAP32[$1_1 + 4 >> 2];
  $32_1 = ($24_1 | 0) == ($23_1 | 0) & $56_1 >>> 0 > $57_1 >>> 0 | $24_1 >>> 0 < $23_1 >>> 0;
  $1_1 = $5_1 + 384 | 0;
  $26_1 = HEAP32[$1_1 >> 2];
  $30_1 = HEAP32[$1_1 + 4 >> 2];
  $24_1 = ($23_1 | 0) == ($34_1 | 0) & $55_1 >>> 0 > $56_1 >>> 0 | $23_1 >>> 0 < $34_1 >>> 0;
  $1_1 = $5_1 + 320 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $14_1 = ($33_1 | 0) == ($34_1 | 0) & $54_1 >>> 0 > $55_1 >>> 0 | $33_1 >>> 0 > $34_1 >>> 0;
  $1_1 = $5_1 + 432 | 0;
  $20_1 = HEAP32[$1_1 >> 2];
  $10_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = ($3_1 | 0) == ($33_1 | 0) & $50_1 >>> 0 > $54_1 >>> 0 | $3_1 >>> 0 > $33_1 >>> 0;
  $12_1 = ($3_1 | 0) == ($49_1 | 0) & $50_1 >>> 0 < $53_1 >>> 0 | $3_1 >>> 0 < $49_1 >>> 0;
  $1_1 = $5_1 + 512 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 480 | 0;
  $23_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $23_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $23_1;
  $3_1 = $12_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $12_1 = $3_1;
  $3_1 = ($9_1 & 1048575) << 12 | $35_1 >>> 20;
  $9_1 = $12_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $8_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $20_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $14_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $22_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $24_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $26_1 | 0;
  $1_1 = $1_1 + $30_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $32_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $29_1 | 0;
  $1_1 = $1_1 + $31_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $28_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $44_1 | 0;
  $1_1 = $1_1 + $41_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $48_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $11_1 >>> 20 | 0;
  $9_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $47_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $45_1 | 0;
  $1_1 = $1_1 + $46_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $39_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $20_1 = $3_1;
  $2_1 = $3_1 << 12 | $16_1;
  $3_1 = $2_1 + $15_1 | 0;
  $11_1 = $1_1;
  $1_1 = ($1_1 << 12 | $20_1 >>> 20) + $4_1 | 0;
  $41_1 = $3_1;
  HEAP32[$5_1 + 648 >> 2] = $3_1;
  $8_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 652 >> 2] = $8_1 & 1048575;
  $26_1 = HEAP32[$5_1 + 568 >> 2];
  $2_1 = HEAP32[$5_1 + 584 >> 2];
  $3_1 = $26_1 + $2_1 | 0;
  $29_1 = HEAP32[$5_1 + 572 >> 2];
  $1_1 = $29_1 + HEAP32[$5_1 + 588 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $3_1;
  $2_1 = HEAP32[$5_1 + 536 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 540 >> 2] | 0;
  $28_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = 0;
  $12_1 = $2_1 + $28_1 | 0;
  $9_1 = $43_1;
  $1_1 = ($38_1 << 12) + $3_1 | 0;
  $32_1 = $12_1;
  $2_1 = HEAP32[$5_1 + 8 >> 2];
  $12_1 = $12_1 + $2_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$5_1 + 12 >> 2] | 0;
  $10_1 = $12_1;
  $2_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $30_1 = ($4_1 | 0) == ($8_1 | 0) & $15_1 >>> 0 > $41_1 >>> 0 | $4_1 >>> 0 > $8_1 >>> 0;
  $43_1 = ($4_1 | 0) == ($21_1 | 0) & $15_1 >>> 0 < $17_1 >>> 0 | $4_1 >>> 0 < $21_1 >>> 0;
  $1_1 = $5_1 + 32 | 0;
  $33_1 = HEAP32[$1_1 >> 2];
  $34_1 = HEAP32[$1_1 + 4 >> 2];
  $23_1 = ($18_1 | 0) == ($21_1 | 0) & $62_1 >>> 0 > $17_1 >>> 0 | $18_1 >>> 0 > $21_1 >>> 0;
  $1_1 = $5_1 + 80 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $22_1 = HEAP32[$1_1 + 4 >> 2];
  $21_1 = ($6_1 | 0) == ($18_1 | 0) & $52_1 >>> 0 > $62_1 >>> 0 | $6_1 >>> 0 > $18_1 >>> 0;
  $1_1 = $5_1 + 448 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $5_1 + 496 | 0;
  $1_1 = HEAP32[$4_1 >> 2];
  $12_1 = HEAP32[$4_1 + 4 >> 2];
  $18_1 = ($6_1 | 0) == ($19_1 | 0) & $52_1 >>> 0 < $61_1 >>> 0 | $6_1 >>> 0 < $19_1 >>> 0;
  $17_1 = $13_1;
  $20_1 = $1_1;
  $1_1 = $5_1 + 560 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 528 | 0;
  $13_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $13_1;
  $6_1 = $4_1 + (($25_1 | 0) == ($51_1 | 0) & $60_1 >>> 0 < $59_1 >>> 0 | $25_1 >>> 0 < $51_1 >>> 0) | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $20_1 + $4_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + (($19_1 | 0) == ($25_1 | 0) & $60_1 >>> 0 > $61_1 >>> 0 | $19_1 >>> 0 < $25_1 >>> 0) | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $17_1 + $4_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $18_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $12_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $36_1 >>> 20;
  $7_1 = $12_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $21_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $1_1 + $22_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $23_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $33_1 | 0;
  $1_1 = $1_1 + $34_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $43_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $11_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $30_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $6_1;
  $6_1 = $6_1 << 12 | $8_1 >>> 20;
  $7_1 = $6_1 + $10_1 | 0;
  $11_1 = $1_1;
  $1_1 = ($1_1 << 12 | $15_1 >>> 20) + $2_1 | 0;
  $23_1 = $7_1;
  HEAP32[$5_1 + 656 >> 2] = $7_1;
  $8_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 660 >> 2] = $8_1 & 1048575;
  $22_1 = HEAP32[$5_1 + 604 >> 2];
  $1_1 = $22_1 + HEAP32[$5_1 + 620 >> 2] | 0;
  $25_1 = HEAP32[$5_1 + 600 >> 2];
  $4_1 = HEAP32[$5_1 + 616 >> 2];
  $6_1 = $25_1 + $4_1 | 0;
  $24_1 = $6_1;
  $6_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $12_1 = $4_1 + $24_1 | 0;
  $7_1 = $37_1;
  $1_1 = ($40_1 << 12) + $6_1 | 0;
  $4_1 = $1_1;
  $19_1 = ($2_1 | 0) == ($8_1 | 0) & $10_1 >>> 0 > $23_1 >>> 0 | $2_1 >>> 0 > $8_1 >>> 0;
  $18_1 = ($2_1 | 0) == ($14_1 | 0) & $10_1 >>> 0 < $32_1 >>> 0 | $2_1 >>> 0 < $14_1 >>> 0;
  $1_1 = $5_1 + 16 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($3_1 | 0) == ($14_1 | 0) & $28_1 >>> 0 > $32_1 >>> 0 | $3_1 >>> 0 > $14_1 >>> 0;
  $2_1 = $5_1 + 544 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$2_1 + 4 >> 2];
  $15_1 = ($3_1 | 0) == ($16_1 | 0) & $28_1 >>> 0 < $31_1 >>> 0 | $3_1 >>> 0 < $16_1 >>> 0;
  $17_1 = $1_1;
  $1_1 = $5_1 + 592 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $5_1 + 576 | 0;
  $14_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $14_1;
  $3_1 = $2_1 + (($16_1 | 0) == ($29_1 | 0) & $26_1 >>> 0 > $31_1 >>> 0 | $16_1 >>> 0 < $29_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $17_1 + $3_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $15_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $14_1 = $3_1;
  $3_1 = ($9_1 & 1048575) << 12 | $38_1 >>> 20;
  $9_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $20_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $18_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $11_1 >>> 20 | 0;
  $9_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $3_1;
  $3_1 = $3_1 << 12 | $8_1 >>> 20;
  $11_1 = $3_1 + $12_1 | 0;
  $9_1 = $1_1;
  $1_1 = ($1_1 << 12 | $15_1 >>> 20) + $4_1 | 0;
  $13_1 = $11_1;
  HEAP32[$5_1 + 664 >> 2] = $11_1;
  $8_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 668 >> 2] = $8_1 & 1048575;
  $14_1 = 0;
  $2_1 = HEAP32[$5_1 + 632 >> 2];
  $17_1 = $14_1 + $2_1 | 0;
  $3_1 = $27_1;
  $10_1 = $42_1 << 12;
  $1_1 = $10_1 + HEAP32[$5_1 + 636 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $20_1 = ($4_1 | 0) == ($8_1 | 0) & $12_1 >>> 0 > $13_1 >>> 0 | $4_1 >>> 0 > $8_1 >>> 0;
  $12_1 = ($6_1 | 0) == ($4_1 | 0) & $12_1 >>> 0 < $24_1 >>> 0 | $6_1 >>> 0 > $4_1 >>> 0;
  $11_1 = ($6_1 | 0) == ($22_1 | 0) & $24_1 >>> 0 < $25_1 >>> 0 | $6_1 >>> 0 < $22_1 >>> 0;
  $1_1 = $5_1 + 624 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $5_1 + 608 | 0;
  $16_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $16_1;
  $6_1 = $11_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $11_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $40_1 >>> 20;
  $7_1 = $11_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $12_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $9_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $20_1 | 0;
  $1_1 = $6_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = $6_1;
  $6_1 = $6_1 << 12 | $8_1 >>> 20;
  $8_1 = $6_1 + $17_1 | 0;
  $7_1 = $1_1;
  $1_1 = ($1_1 << 12 | $9_1 >>> 20) + $2_1 | 0;
  HEAP32[$5_1 + 672 >> 2] = $8_1;
  $6_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 676 >> 2] = $6_1 & 1048575;
  $9_1 = ($2_1 | 0) == ($6_1 | 0) & $17_1 >>> 0 > $8_1 >>> 0 | $2_1 >>> 0 > $6_1 >>> 0;
  $4_1 = $2_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $3_1 >>> 20 | 0;
  $2_1 = ($3_1 & 1048575) << 12 | $42_1 >>> 20;
  $11_1 = $5_1 + 640 | 0;
  $3_1 = $2_1 + HEAP32[$11_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$11_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $4_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $7_1 >>> 20 | 0;
  $7_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $3_1 = $9_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 680 >> 2] = $3_1 << 12 | $6_1 >>> 20;
  HEAP32[$5_1 + 684 >> 2] = $1_1 << 12 | $3_1 >>> 20;
  $170($0_1, $5_1 + 648 | 0, 1065552);
  global$0 = $5_1 + 688 | 0;
 }
 
 function $7($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0;
  $5_1 = global$0 - 480 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $34_1 = $6_1;
  $4_1 = $6_1 >> 31;
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $18_1 = $8_1;
  $31_1 = HEAP32[$2_1 >> 2];
  $25_1 = $4_1;
  $9_1 = HEAP32[$0_1 >> 2];
  $4_1 = $8_1 >> 31;
  $8_1 = $4_1;
  $297($5_1 + 160 | 0, $31_1, $6_1, $25_1, $25_1, $9_1, $18_1, $4_1, $4_1);
  $6_1 = HEAP32[$2_1 + 12 >> 2];
  $26_1 = $6_1;
  $4_1 = $6_1 >> 31;
  $47_1 = $6_1 >> 31;
  $32_1 = HEAP32[$2_1 + 8 >> 2];
  $48_1 = $4_1;
  $6_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $11_1 >> 31;
  $7_1 = $4_1;
  $297($5_1 + 192 | 0, $32_1, $26_1, $47_1, $48_1, $6_1, $11_1, $4_1, $4_1);
  $33_1 = HEAP32[$2_1 + 16 >> 2];
  $12_1 = HEAP32[$2_1 + 20 >> 2];
  $49_1 = $12_1;
  $4_1 = $12_1 >> 31;
  $35_1 = $4_1;
  $297($5_1 + 176 | 0, $33_1, $12_1, $4_1, $4_1, $9_1, $18_1, $8_1, $8_1);
  $24_1 = HEAP32[$2_1 + 24 >> 2];
  $2_1 = HEAP32[$2_1 + 28 >> 2];
  $42_1 = $2_1;
  $2_1 = $2_1 >> 31;
  $36_1 = $2_1;
  $297($5_1 + 208 | 0, $24_1, $42_1, $2_1, $2_1, $6_1, $11_1, $7_1, $7_1);
  $7_1 = $5_1 + 112 | 0;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  $62_1 = $2_1;
  $63_1 = HEAP32[$1_1 + 32 >> 2];
  $4_1 = $2_1 >> 31;
  $54_1 = $2_1 >> 31;
  $2_1 = $54_1 & $32_1;
  $59_1 = $4_1;
  $6_1 = $4_1 & $26_1;
  $4_1 = HEAP32[$0_1 + 36 >> 2];
  $64_1 = $4_1;
  $8_1 = $2_1;
  $65_1 = HEAP32[$0_1 + 32 >> 2];
  $2_1 = $4_1 >> 31;
  $4_1 = $2_1 & $31_1;
  $9_1 = $8_1 + $4_1 | 0;
  $43_1 = $2_1;
  $2_1 = ($2_1 & $34_1) + $6_1 | 0;
  $6_1 = $9_1;
  $4_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = HEAP32[$3_1 + 44 >> 2];
  $19_1 = $2_1;
  $12_1 = HEAP32[$3_1 + 40 >> 2];
  $27_1 = HEAP32[$5_1 + 196 >> 2];
  $2_1 = $27_1 + HEAP32[$5_1 + 164 >> 2] | 0;
  $22_1 = HEAP32[$5_1 + 192 >> 2];
  $9_1 = HEAP32[$5_1 + 160 >> 2];
  $8_1 = $22_1 + $9_1 | 0;
  $11_1 = $8_1;
  $16_1 = $8_1 >>> 0 < $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $9_1 = __wasm_i64_mul($12_1, $19_1, $8_1, $16_1);
  $8_1 = $9_1 + $6_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
  $2_1 = $8_1 >>> 0 < $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $10_1 = $2_1 & 1073741823;
  $2_1 = $6_1;
  $4_1 = $4_1 - ($10_1 + ($8_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  $39_1 = $2_1 - $8_1 | 0;
  $6_1 = $39_1;
  $8_1 = HEAP32[$3_1 + 4 >> 2];
  $18_1 = $8_1;
  $2_1 = $4_1 >> 31;
  $55_1 = $4_1;
  $28_1 = $2_1;
  $9_1 = HEAP32[$3_1 >> 2];
  $2_1 = $8_1 >> 31;
  $8_1 = $2_1;
  $297($7_1, $6_1, $4_1, $28_1, $28_1, $9_1, $18_1, $2_1, $2_1);
  $10_1 = $5_1 + 144 | 0;
  $2_1 = $33_1 & $43_1;
  $6_1 = $2_1 + ($24_1 & $54_1) | 0;
  $4_1 = ($42_1 & $59_1) + ($49_1 & $43_1) | 0;
  $4_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $2_1 = $6_1;
  $7_1 = $2_1;
  $6_1 = $4_1;
  $13_1 = $10_1;
  $44_1 = HEAP32[$5_1 + 208 >> 2];
  $4_1 = HEAP32[$5_1 + 176 >> 2];
  $10_1 = $44_1 + $4_1 | 0;
  $40_1 = HEAP32[$5_1 + 212 >> 2];
  $2_1 = $40_1 + HEAP32[$5_1 + 180 >> 2] | 0;
  $2_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $12_1;
  $12_1 = $2_1;
  $2_1 = __wasm_i64_mul($4_1, $19_1, $10_1, $2_1);
  $19_1 = $7_1 + $2_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
  $4_1 = $2_1 >>> 0 > $19_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $2_1 = $7_1;
  $4_1 = $6_1 - (($4_1 & 1073741823) + ($19_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  $19_1 = $2_1 - $19_1 | 0;
  $50_1 = $4_1;
  $2_1 = $4_1 >> 31;
  $37_1 = $2_1;
  $297($13_1, $19_1, $50_1, $2_1, $2_1, $9_1, $18_1, $8_1, $8_1);
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  $18_1 = $4_1;
  $2_1 = $4_1 >> 31;
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  $9_1 = $2_1;
  $297($5_1 + 224 | 0, $31_1, $34_1, $25_1, $25_1, $6_1, $4_1, $2_1, $2_1);
  $7_1 = HEAP32[$1_1 + 12 >> 2];
  $8_1 = $7_1;
  $4_1 = $7_1 >> 31;
  $2_1 = HEAP32[$1_1 + 8 >> 2];
  $297($5_1 + 256 | 0, $32_1, $26_1, $47_1, $48_1, $2_1, $8_1, $4_1, $4_1);
  $297($5_1 + 240 | 0, $33_1, $49_1, $35_1, $35_1, $6_1, $18_1, $9_1, $9_1);
  $297($5_1 + 272 | 0, $24_1, $42_1, $36_1, $36_1, $2_1, $8_1, $4_1, $4_1);
  $6_1 = HEAP32[$3_1 + 12 >> 2];
  $8_1 = $6_1;
  $2_1 = $6_1 >> 31;
  $4_1 = HEAP32[$3_1 + 8 >> 2];
  $6_1 = $2_1;
  $297($5_1 + 96 | 0, $39_1, $55_1, $28_1, $28_1, $4_1, $8_1, $2_1, $2_1);
  $297($5_1 + 128 | 0, $19_1, $50_1, $37_1, $37_1, $4_1, $8_1, $2_1, $2_1);
  $51_1 = HEAP32[$1_1 + 24 >> 2];
  $56_1 = HEAP32[$1_1 + 28 >> 2];
  $45_1 = HEAP32[$0_1 + 24 >> 2];
  $38_1 = HEAP32[$0_1 + 28 >> 2];
  $52_1 = HEAP32[$1_1 + 16 >> 2];
  $20_1 = HEAP32[$1_1 + 20 >> 2];
  $21_1 = HEAP32[$0_1 + 16 >> 2];
  $17_1 = HEAP32[$0_1 + 20 >> 2];
  $18_1 = $0_1;
  $53_1 = HEAP32[$5_1 + 256 >> 2];
  $0_1 = HEAP32[$5_1 + 224 >> 2];
  $9_1 = $53_1 + $0_1 | 0;
  $60_1 = HEAP32[$5_1 + 260 >> 2];
  $2_1 = $60_1 + HEAP32[$5_1 + 228 >> 2] | 0;
  $2_1 = $0_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $57_1 = $9_1;
  $41_1 = !($4_1 | $6_1 | ($6_1 | $8_1));
  $4_1 = $41_1;
  $0_1 = $4_1 ? 0 : HEAP32[$5_1 + 96 >> 2];
  $6_1 = $9_1 + $0_1 | 0;
  $13_1 = $2_1;
  $2_1 = $2_1 + ($4_1 ? 0 : HEAP32[$5_1 + 100 >> 2]) | 0;
  $23_1 = $6_1;
  $9_1 = $0_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $14_1 = HEAP32[$5_1 + 112 >> 2];
  $4_1 = $11_1;
  $0_1 = $14_1 + $4_1 | 0;
  $11_1 = HEAP32[$5_1 + 116 >> 2];
  $2_1 = $16_1 + $11_1 | 0;
  $2_1 = $0_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $7_1 = $2_1;
  $15_1 = $2_1 >>> 30 | 0;
  $8_1 = $5_1 + 120 | 0;
  $2_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $11_1 = ($7_1 | 0) == ($11_1 | 0) & $0_1 >>> 0 < $14_1 >>> 0 | $7_1 >>> 0 < $11_1 >>> 0;
  $6_1 = $2_1;
  $14_1 = ($16_1 | 0) == ($27_1 | 0) & $4_1 >>> 0 < $22_1 >>> 0 | $16_1 >>> 0 < $27_1 >>> 0;
  $2_1 = $5_1 + 168 | 0;
  $0_1 = HEAP32[$2_1 >> 2];
  $4_1 = $5_1 + 200 | 0;
  $7_1 = $0_1 + HEAP32[$4_1 >> 2] | 0;
  $4_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $4_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $0_1 = $7_1;
  $7_1 = $14_1 + $0_1 | 0;
  $2_1 = $4_1;
  $2_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $7_1;
  $4_1 = $6_1 + $0_1 | 0;
  $2_1 = $2_1 + $8_1 | 0;
  $2_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $4_1;
  $7_1 = $11_1 + $4_1 | 0;
  $11_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $11_1 << 2 | $7_1 >>> 30;
  $0_1 = $7_1 << 2 | $15_1;
  $4_1 = $0_1 + $23_1 | 0;
  $2_1 = $2_1 + $9_1 | 0;
  $22_1 = $4_1;
  HEAP32[$18_1 >> 2] = $4_1;
  $16_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$18_1 + 4 >> 2] = $16_1 & 1073741823;
  $58_1 = HEAP32[$5_1 + 272 >> 2];
  $0_1 = HEAP32[$5_1 + 240 >> 2];
  $2_1 = $58_1 + $0_1 | 0;
  $61_1 = HEAP32[$5_1 + 276 >> 2];
  $4_1 = $61_1 + HEAP32[$5_1 + 244 >> 2] | 0;
  $4_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $29_1 = $2_1;
  $0_1 = $41_1 ? 0 : HEAP32[$5_1 + 128 >> 2];
  $2_1 = $2_1 + $0_1 | 0;
  $8_1 = $4_1;
  $4_1 = $4_1 + ($41_1 ? 0 : HEAP32[$5_1 + 132 >> 2]) | 0;
  $15_1 = $2_1;
  $0_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $30_1 = HEAP32[$5_1 + 144 >> 2];
  $7_1 = $10_1;
  $4_1 = $30_1 + $7_1 | 0;
  $46_1 = HEAP32[$5_1 + 148 >> 2];
  $2_1 = $12_1 + $46_1 | 0;
  $2_1 = $4_1 >>> 0 < $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $10_1 = $2_1;
  $27_1 = $2_1 >>> 30 | 0;
  $14_1 = $5_1 + 152 | 0;
  $2_1 = HEAP32[$14_1 >> 2];
  $14_1 = HEAP32[$14_1 + 4 >> 2];
  $30_1 = ($10_1 | 0) == ($46_1 | 0) & $4_1 >>> 0 < $30_1 >>> 0 | $10_1 >>> 0 < $46_1 >>> 0;
  $6_1 = $2_1;
  $12_1 = ($12_1 | 0) == ($40_1 | 0) & $7_1 >>> 0 < $44_1 >>> 0 | $12_1 >>> 0 < $40_1 >>> 0;
  $2_1 = $5_1 + 184 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  $7_1 = $5_1 + 216 | 0;
  $10_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $2_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $7_1 = $10_1;
  $10_1 = $12_1 + $7_1 | 0;
  $4_1 = $7_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $7_1 = $10_1;
  $10_1 = $6_1 + $7_1 | 0;
  $2_1 = $4_1 + $14_1 | 0;
  $2_1 = $7_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $10_1;
  $7_1 = $30_1 + $4_1 | 0;
  $14_1 = $7_1;
  $7_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $7_1 << 2 | $14_1 >>> 30;
  $2_1 = $14_1 << 2 | $27_1;
  $10_1 = $2_1 + $15_1 | 0;
  $4_1 = $0_1 + $4_1 | 0;
  $30_1 = $10_1;
  HEAP32[$1_1 >> 2] = $10_1;
  $12_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  HEAP32[$1_1 + 4 >> 2] = $12_1 & 1073741823;
  $6_1 = $21_1;
  $2_1 = $17_1 >> 31;
  $297($5_1 + 288 | 0, $31_1, $34_1, $25_1, $25_1, $6_1, $17_1, $2_1, $2_1);
  $4_1 = $20_1 >> 31;
  $297($5_1 + 320 | 0, $32_1, $26_1, $47_1, $48_1, $52_1, $20_1, $4_1, $4_1);
  $297($5_1 + 304 | 0, $33_1, $49_1, $35_1, $35_1, $6_1, $17_1, $2_1, $2_1);
  $297($5_1 + 336 | 0, $24_1, $42_1, $36_1, $36_1, $52_1, $20_1, $4_1, $4_1);
  $6_1 = HEAP32[$3_1 + 20 >> 2];
  $21_1 = $6_1;
  $2_1 = $6_1 >> 31;
  $4_1 = HEAP32[$3_1 + 16 >> 2];
  $6_1 = $2_1;
  $297($5_1 - -64 | 0, $4_1, $21_1, $2_1, $2_1, $39_1, $55_1, $28_1, $28_1);
  $297($5_1 + 80 | 0, $19_1, $50_1, $37_1, $37_1, $4_1, $21_1, $2_1, $2_1);
  $27_1 = HEAP32[$5_1 + 320 >> 2];
  $10_1 = HEAP32[$5_1 + 288 >> 2];
  $20_1 = $27_1 + $10_1 | 0;
  $40_1 = HEAP32[$5_1 + 324 >> 2];
  $2_1 = $40_1 + HEAP32[$5_1 + 292 >> 2] | 0;
  $2_1 = $10_1 >>> 0 > $20_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $46_1 = $20_1;
  $14_1 = !($4_1 | $6_1 | ($6_1 | $21_1));
  $6_1 = $14_1;
  $4_1 = $6_1 ? 0 : HEAP32[$5_1 + 64 >> 2];
  $20_1 = $20_1 + $4_1 | 0;
  $10_1 = $2_1;
  $2_1 = $2_1 + ($6_1 ? 0 : HEAP32[$5_1 + 68 >> 2]) | 0;
  $2_1 = $4_1 >>> 0 > $20_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $2_1;
  $17_1 = ($9_1 | 0) == ($16_1 | 0) & $23_1 >>> 0 > $22_1 >>> 0 | $9_1 >>> 0 > $16_1 >>> 0;
  $21_1 = ($9_1 | 0) == ($13_1 | 0) & $23_1 >>> 0 < $57_1 >>> 0 | $9_1 >>> 0 < $13_1 >>> 0;
  $22_1 = ($13_1 | 0) == ($60_1 | 0) & $53_1 >>> 0 > $57_1 >>> 0 | $13_1 >>> 0 < $60_1 >>> 0;
  $2_1 = $5_1 + 232 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  $9_1 = $5_1 + 264 | 0;
  $13_1 = $4_1 + HEAP32[$9_1 >> 2] | 0;
  $2_1 = HEAP32[$9_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $4_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $9_1 = $13_1;
  $13_1 = $22_1 + $9_1 | 0;
  $4_1 = $9_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $5_1 + 104 | 0;
  $9_1 = $41_1 ? 0 : HEAP32[$2_1 >> 2];
  $13_1 = $9_1 + $13_1 | 0;
  $2_1 = ($41_1 ? 0 : HEAP32[$2_1 + 4 >> 2]) + $4_1 | 0;
  $2_1 = $9_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $9_1 = $13_1;
  $13_1 = $21_1 + $9_1 | 0;
  $4_1 = $9_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $11_1 >> 31;
  $9_1 = $11_1 >> 30;
  $11_1 = $9_1 + $13_1 | 0;
  $2_1 = $2_1 + $4_1 | 0;
  $2_1 = $9_1 >>> 0 > $11_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $11_1;
  $9_1 = $17_1 + $4_1 | 0;
  $22_1 = $9_1;
  $11_1 = $9_1 << 2 | $16_1 >>> 30;
  $13_1 = $11_1 + $20_1 | 0;
  $9_1 = $4_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = ($9_1 << 2 | $22_1 >>> 30) + $6_1 | 0;
  $57_1 = $13_1;
  HEAP32[$18_1 + 8 >> 2] = $13_1;
  $16_1 = $11_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$18_1 + 12 >> 2] = $16_1 & 1073741823;
  $13_1 = $1_1;
  $52_1 = HEAP32[$5_1 + 336 >> 2];
  $1_1 = HEAP32[$5_1 + 304 >> 2];
  $2_1 = $52_1 + $1_1 | 0;
  $44_1 = HEAP32[$5_1 + 340 >> 2];
  $4_1 = $44_1 + HEAP32[$5_1 + 308 >> 2] | 0;
  $4_1 = $1_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $53_1 = $2_1;
  $1_1 = $14_1 ? 0 : HEAP32[$5_1 + 80 >> 2];
  $23_1 = $2_1 + $1_1 | 0;
  $11_1 = $4_1;
  $2_1 = $4_1 + ($14_1 ? 0 : HEAP32[$5_1 + 84 >> 2]) | 0;
  $2_1 = $1_1 >>> 0 > $23_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $2_1;
  $17_1 = ($0_1 | 0) == ($12_1 | 0) & $15_1 >>> 0 > $30_1 >>> 0 | $0_1 >>> 0 > $12_1 >>> 0;
  $21_1 = ($0_1 | 0) == ($8_1 | 0) & $15_1 >>> 0 < $29_1 >>> 0 | $0_1 >>> 0 < $8_1 >>> 0;
  $15_1 = ($8_1 | 0) == ($61_1 | 0) & $29_1 >>> 0 < $58_1 >>> 0 | $8_1 >>> 0 < $61_1 >>> 0;
  $2_1 = $5_1 + 248 | 0;
  $0_1 = HEAP32[$2_1 >> 2];
  $4_1 = $5_1 + 280 | 0;
  $8_1 = $0_1 + HEAP32[$4_1 >> 2] | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $0_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $8_1;
  $8_1 = $15_1 + $0_1 | 0;
  $4_1 = $0_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $5_1 + 136 | 0;
  $0_1 = $41_1 ? 0 : HEAP32[$2_1 >> 2];
  $8_1 = $0_1 + $8_1 | 0;
  $4_1 = ($41_1 ? 0 : HEAP32[$2_1 + 4 >> 2]) + $4_1 | 0;
  $4_1 = $0_1 >>> 0 > $8_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $0_1 = $8_1;
  $8_1 = $21_1 + $0_1 | 0;
  $2_1 = $4_1;
  $4_1 = $8_1;
  $0_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $7_1 >> 31;
  $4_1 = $7_1 >> 30;
  $7_1 = $8_1 + $4_1 | 0;
  $2_1 = $0_1 + $2_1 | 0;
  $2_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $7_1;
  $4_1 = $0_1 + $17_1 | 0;
  $2_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $7_1 = $4_1 << 2 | $12_1 >>> 30;
  $12_1 = $7_1 + $23_1 | 0;
  $8_1 = $2_1;
  $4_1 = ($2_1 << 2 | $4_1 >>> 30) + $1_1 | 0;
  $58_1 = $12_1;
  HEAP32[$13_1 + 8 >> 2] = $12_1;
  $12_1 = $7_1 >>> 0 > $12_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  HEAP32[$13_1 + 12 >> 2] = $12_1 & 1073741823;
  $17_1 = $38_1;
  $0_1 = $17_1 >> 31;
  $2_1 = $0_1;
  $7_1 = $2_1;
  $297($5_1 + 352 | 0, $31_1, $34_1, $25_1, $25_1, $45_1, $17_1, $2_1, $2_1);
  $15_1 = $56_1;
  $0_1 = $15_1 >> 31;
  $2_1 = $0_1;
  $297($5_1 + 384 | 0, $32_1, $26_1, $47_1, $48_1, $51_1, $15_1, $2_1, $2_1);
  $297($5_1 + 368 | 0, $33_1, $49_1, $35_1, $35_1, $45_1, $17_1, $7_1, $7_1);
  $297($5_1 + 400 | 0, $24_1, $42_1, $36_1, $36_1, $51_1, $15_1, $2_1, $2_1);
  $4_1 = HEAP32[$3_1 + 28 >> 2];
  $38_1 = $4_1;
  $2_1 = $4_1 >> 31;
  $0_1 = HEAP32[$3_1 + 24 >> 2];
  $4_1 = $2_1;
  $297($5_1 + 32 | 0, $0_1, $38_1, $2_1, $2_1, $39_1, $55_1, $28_1, $28_1);
  $297($5_1 + 48 | 0, $0_1, $38_1, $2_1, $2_1, $19_1, $50_1, $37_1, $37_1);
  $56_1 = HEAP32[$5_1 + 384 >> 2];
  $7_1 = HEAP32[$5_1 + 352 >> 2];
  $15_1 = $56_1 + $7_1 | 0;
  $30_1 = HEAP32[$5_1 + 388 >> 2];
  $2_1 = $30_1 + HEAP32[$5_1 + 356 >> 2] | 0;
  $2_1 = $7_1 >>> 0 > $15_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $51_1 = $15_1;
  $29_1 = !($0_1 | $4_1 | ($4_1 | $38_1));
  $4_1 = $29_1;
  $0_1 = $4_1 ? 0 : HEAP32[$5_1 + 32 >> 2];
  $15_1 = $15_1 + $0_1 | 0;
  $7_1 = $2_1;
  $2_1 = $2_1 + ($4_1 ? 0 : HEAP32[$5_1 + 36 >> 2]) | 0;
  $2_1 = $0_1 >>> 0 > $15_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $2_1;
  $17_1 = ($6_1 | 0) == ($16_1 | 0) & $20_1 >>> 0 > $57_1 >>> 0 | $6_1 >>> 0 > $16_1 >>> 0;
  $21_1 = ($6_1 | 0) == ($10_1 | 0) & $20_1 >>> 0 < $46_1 >>> 0 | $6_1 >>> 0 < $10_1 >>> 0;
  $22_1 = ($10_1 | 0) == ($40_1 | 0) & $27_1 >>> 0 > $46_1 >>> 0 | $10_1 >>> 0 < $40_1 >>> 0;
  $2_1 = $5_1 + 296 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  $6_1 = $5_1 + 328 | 0;
  $10_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $2_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $10_1;
  $6_1 = $22_1 + $4_1 | 0;
  $2_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $10_1 = $6_1;
  $6_1 = $5_1 + 72 | 0;
  $4_1 = $14_1 ? 0 : HEAP32[$6_1 >> 2];
  $10_1 = $10_1 + $4_1 | 0;
  $2_1 = ($14_1 ? 0 : HEAP32[$6_1 + 4 >> 2]) + $2_1 | 0;
  $2_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $10_1;
  $10_1 = $21_1 + $6_1 | 0;
  $4_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $9_1 >> 31;
  $6_1 = $9_1 >> 30;
  $9_1 = $6_1 + $10_1 | 0;
  $4_1 = $2_1 + $4_1 | 0;
  $4_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = $9_1;
  $9_1 = $17_1 + $6_1 | 0;
  $2_1 = $4_1;
  $2_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $17_1 = $9_1;
  $6_1 = $9_1 << 2 | $16_1 >>> 30;
  $10_1 = $6_1 + $15_1 | 0;
  $9_1 = $2_1;
  $2_1 = ($2_1 << 2 | $17_1 >>> 30) + $0_1 | 0;
  $27_1 = $10_1;
  HEAP32[$18_1 + 16 >> 2] = $10_1;
  $16_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$18_1 + 20 >> 2] = $16_1 & 1073741823;
  $38_1 = HEAP32[$5_1 + 400 >> 2];
  $2_1 = HEAP32[$5_1 + 368 >> 2];
  $6_1 = $38_1 + $2_1 | 0;
  $45_1 = HEAP32[$5_1 + 404 >> 2];
  $4_1 = $45_1 + HEAP32[$5_1 + 372 >> 2] | 0;
  $4_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $21_1 = $6_1;
  $6_1 = $29_1 ? 0 : HEAP32[$5_1 + 48 >> 2];
  $20_1 = $21_1 + $6_1 | 0;
  $10_1 = $4_1;
  $2_1 = $4_1 + ($29_1 ? 0 : HEAP32[$5_1 + 52 >> 2]) | 0;
  $2_1 = $6_1 >>> 0 > $20_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $2_1;
  $22_1 = ($1_1 | 0) == ($12_1 | 0) & $23_1 >>> 0 > $58_1 >>> 0 | $1_1 >>> 0 > $12_1 >>> 0;
  $17_1 = ($1_1 | 0) == ($11_1 | 0) & $23_1 >>> 0 < $53_1 >>> 0 | $1_1 >>> 0 < $11_1 >>> 0;
  $23_1 = ($11_1 | 0) == ($44_1 | 0) & $52_1 >>> 0 > $53_1 >>> 0 | $11_1 >>> 0 < $44_1 >>> 0;
  $2_1 = $5_1 + 312 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $4_1 = $5_1 + 344 | 0;
  $11_1 = $1_1 + HEAP32[$4_1 >> 2] | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $1_1 >>> 0 > $11_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $11_1;
  $4_1 = $23_1 + $1_1 | 0;
  $2_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $11_1 = $4_1;
  $4_1 = $5_1 + 88 | 0;
  $1_1 = $14_1 ? 0 : HEAP32[$4_1 >> 2];
  $11_1 = $11_1 + $1_1 | 0;
  $4_1 = ($14_1 ? 0 : HEAP32[$4_1 + 4 >> 2]) + $2_1 | 0;
  $4_1 = $1_1 >>> 0 > $11_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $1_1 = $11_1;
  $11_1 = $17_1 + $1_1 | 0;
  $2_1 = $4_1;
  $4_1 = $11_1;
  $1_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $8_1 >> 31;
  $8_1 = $8_1 >> 30;
  $11_1 = $8_1 + $4_1 | 0;
  $4_1 = $1_1 + $2_1 | 0;
  $4_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $1_1 = $11_1;
  $8_1 = $1_1 + $22_1 | 0;
  $2_1 = $4_1;
  $2_1 = $1_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $23_1 = $8_1;
  $1_1 = $8_1 << 2 | $12_1 >>> 30;
  $11_1 = $1_1 + $20_1 | 0;
  $8_1 = $2_1;
  $4_1 = ($2_1 << 2 | $23_1 >>> 30) + $6_1 | 0;
  $14_1 = $11_1;
  HEAP32[$13_1 + 16 >> 2] = $11_1;
  $12_1 = $1_1 >>> 0 > $11_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  HEAP32[$13_1 + 20 >> 2] = $12_1 & 1073741823;
  $297($5_1 + 464 | 0, $31_1, $34_1, $25_1, $25_1, $65_1, $64_1, $43_1, $43_1);
  $297($5_1 + 448 | 0, $32_1, $26_1, $47_1, $48_1, $63_1, $62_1, $54_1, $59_1);
  $297($5_1 + 432 | 0, $33_1, $49_1, $35_1, $35_1, $65_1, $64_1, $43_1, $43_1);
  $297($5_1 + 416 | 0, $24_1, $42_1, $36_1, $36_1, $63_1, $62_1, $54_1, $59_1);
  $2_1 = HEAP32[$3_1 + 36 >> 2];
  $11_1 = $2_1;
  $1_1 = HEAP32[$3_1 + 32 >> 2];
  $2_1 = $2_1 >> 31;
  $297($5_1, $1_1, $11_1, $2_1, $2_1, $39_1, $55_1, $28_1, $28_1);
  $297($5_1 + 16 | 0, $1_1, $11_1, $2_1, $2_1, $19_1, $50_1, $37_1, $37_1);
  $3_1 = $18_1;
  $32_1 = HEAP32[$5_1 + 448 >> 2];
  $1_1 = HEAP32[$5_1 + 464 >> 2];
  $4_1 = $32_1 + $1_1 | 0;
  $26_1 = HEAP32[$5_1 + 452 >> 2];
  $2_1 = $26_1 + HEAP32[$5_1 + 468 >> 2] | 0;
  $2_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $34_1 = $4_1;
  $1_1 = HEAP32[$5_1 >> 2];
  $4_1 = $4_1 + $1_1 | 0;
  $24_1 = $2_1;
  $2_1 = $2_1 + HEAP32[$5_1 + 4 >> 2] | 0;
  $19_1 = $4_1;
  $1_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $11_1 = ($0_1 | 0) == ($16_1 | 0) & $15_1 >>> 0 > $27_1 >>> 0 | $0_1 >>> 0 > $16_1 >>> 0;
  $18_1 = ($0_1 | 0) == ($7_1 | 0) & $15_1 >>> 0 < $51_1 >>> 0 | $0_1 >>> 0 < $7_1 >>> 0;
  $17_1 = ($7_1 | 0) == ($30_1 | 0) & $51_1 >>> 0 < $56_1 >>> 0 | $7_1 >>> 0 < $30_1 >>> 0;
  $2_1 = $5_1 + 360 | 0;
  $0_1 = HEAP32[$2_1 >> 2];
  $4_1 = $5_1 + 392 | 0;
  $7_1 = $0_1 + HEAP32[$4_1 >> 2] | 0;
  $4_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $4_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $0_1 = $7_1;
  $7_1 = $17_1 + $0_1 | 0;
  $2_1 = $4_1;
  $2_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $5_1 + 40 | 0;
  $0_1 = $29_1 ? 0 : HEAP32[$4_1 >> 2];
  $7_1 = $0_1 + $7_1 | 0;
  $2_1 = ($29_1 ? 0 : HEAP32[$4_1 + 4 >> 2]) + $2_1 | 0;
  $2_1 = $0_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $7_1;
  $7_1 = $18_1 + $0_1 | 0;
  $4_1 = $2_1;
  $2_1 = $7_1;
  $0_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $4_1 = $9_1 >> 31;
  $9_1 = $9_1 >> 30;
  $7_1 = $9_1 + $2_1 | 0;
  $2_1 = $0_1 + $4_1 | 0;
  $2_1 = $7_1 >>> 0 < $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $7_1;
  $4_1 = $0_1 + $11_1 | 0;
  $39_1 = $4_1;
  $7_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $7_1 << 2 | $4_1 >>> 30;
  $0_1 = $39_1 << 2 | $16_1 >>> 30;
  $9_1 = $0_1 + $19_1 | 0;
  $2_1 = $1_1 + $4_1 | 0;
  $17_1 = $9_1;
  HEAP32[$3_1 + 24 >> 2] = $9_1;
  $18_1 = $0_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$3_1 + 28 >> 2] = $18_1 & 1073741823;
  $11_1 = $13_1;
  $33_1 = HEAP32[$5_1 + 416 >> 2];
  $0_1 = HEAP32[$5_1 + 432 >> 2];
  $2_1 = $33_1 + $0_1 | 0;
  $15_1 = HEAP32[$5_1 + 420 >> 2];
  $4_1 = $15_1 + HEAP32[$5_1 + 436 >> 2] | 0;
  $4_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $31_1 = $2_1;
  $0_1 = HEAP32[$5_1 + 16 >> 2];
  $2_1 = $2_1 + $0_1 | 0;
  $9_1 = $4_1;
  $4_1 = $4_1 + HEAP32[$5_1 + 20 >> 2] | 0;
  $13_1 = $2_1;
  $0_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $16_1 = ($6_1 | 0) == ($12_1 | 0) & $20_1 >>> 0 > $14_1 >>> 0 | $6_1 >>> 0 > $12_1 >>> 0;
  $14_1 = ($6_1 | 0) == ($10_1 | 0) & $20_1 >>> 0 < $21_1 >>> 0 | $6_1 >>> 0 < $10_1 >>> 0;
  $21_1 = ($10_1 | 0) == ($45_1 | 0) & $21_1 >>> 0 < $38_1 >>> 0 | $10_1 >>> 0 < $45_1 >>> 0;
  $2_1 = $5_1 + 376 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  $6_1 = $5_1 + 408 | 0;
  $10_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $2_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $10_1;
  $10_1 = $21_1 + $6_1 | 0;
  $4_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $5_1 + 56 | 0;
  $6_1 = $29_1 ? 0 : HEAP32[$2_1 >> 2];
  $10_1 = $6_1 + $10_1 | 0;
  $2_1 = ($29_1 ? 0 : HEAP32[$2_1 + 4 >> 2]) + $4_1 | 0;
  $2_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $10_1;
  $6_1 = $14_1 + $4_1 | 0;
  $2_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $4_1 = $2_1;
  $2_1 = $8_1 >> 31;
  $10_1 = $6_1;
  $6_1 = $8_1 >> 30;
  $8_1 = $10_1 + $6_1 | 0;
  $2_1 = $2_1 + $4_1 | 0;
  $2_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $8_1;
  $8_1 = $6_1 + $16_1 | 0;
  $4_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $10_1 = $8_1;
  $8_1 = $8_1 << 2 | $12_1 >>> 30;
  $12_1 = $8_1 + $13_1 | 0;
  $6_1 = $4_1;
  $2_1 = ($4_1 << 2 | $10_1 >>> 30) + $0_1 | 0;
  $20_1 = $12_1;
  HEAP32[$11_1 + 24 >> 2] = $12_1;
  $8_1 = $8_1 >>> 0 > $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$11_1 + 28 >> 2] = $8_1 & 1073741823;
  $16_1 = ($1_1 | 0) == ($18_1 | 0) & $19_1 >>> 0 > $17_1 >>> 0 | $1_1 >>> 0 > $18_1 >>> 0;
  $4_1 = $5_1 + 8 | 0;
  $2_1 = HEAP32[$4_1 >> 2];
  $12_1 = HEAP32[$4_1 + 4 >> 2];
  $17_1 = ($1_1 | 0) == ($24_1 | 0) & $19_1 >>> 0 < $34_1 >>> 0 | $1_1 >>> 0 < $24_1 >>> 0;
  $10_1 = $2_1;
  $2_1 = $5_1 + 472 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $4_1 = $5_1 + 456 | 0;
  $19_1 = $1_1 + HEAP32[$4_1 >> 2] | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $1_1 >>> 0 > $19_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $19_1;
  $4_1 = $1_1 + (($24_1 | 0) == ($26_1 | 0) & $34_1 >>> 0 < $32_1 >>> 0 | $24_1 >>> 0 < $26_1 >>> 0) | 0;
  $2_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $4_1;
  $4_1 = $10_1 + $4_1 | 0;
  $2_1 = $2_1 + $12_1 | 0;
  $2_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $4_1;
  $4_1 = $17_1 + $4_1 | 0;
  $2_1 = $1_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $2_1;
  $2_1 = $7_1 >> 31;
  $7_1 = $7_1 >> 30;
  $12_1 = $7_1 + $4_1 | 0;
  $4_1 = $1_1 + $2_1 | 0;
  $4_1 = $7_1 >>> 0 > $12_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $1_1 = $12_1;
  $7_1 = $1_1 + $16_1 | 0;
  $2_1 = $4_1;
  $2_1 = $1_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = $2_1 << 2 | $7_1 >>> 30;
  HEAP32[$3_1 + 32 >> 2] = $7_1 << 2 | $18_1 >>> 30;
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  $3_1 = $5_1 + 24 | 0;
  $2_1 = HEAP32[$3_1 >> 2];
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $7_1 = ($0_1 | 0) == ($8_1 | 0) & $13_1 >>> 0 > $20_1 >>> 0 | $0_1 >>> 0 > $8_1 >>> 0;
  $10_1 = ($0_1 | 0) == ($9_1 | 0) & $13_1 >>> 0 < $31_1 >>> 0 | $0_1 >>> 0 < $9_1 >>> 0;
  $1_1 = $2_1;
  $13_1 = ($9_1 | 0) == ($15_1 | 0) & $31_1 >>> 0 < $33_1 >>> 0 | $9_1 >>> 0 < $15_1 >>> 0;
  $2_1 = $5_1 + 440 | 0;
  $0_1 = HEAP32[$2_1 >> 2];
  $3_1 = $5_1 + 424 | 0;
  $9_1 = $0_1 + HEAP32[$3_1 >> 2] | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $0_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $9_1;
  $3_1 = $13_1 + $0_1 | 0;
  $2_1 = $0_1 >>> 0 > $3_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $3_1;
  $3_1 = $1_1 + $0_1 | 0;
  $4_1 = $2_1 + $4_1 | 0;
  $4_1 = $0_1 >>> 0 > $3_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $0_1 = $3_1;
  $3_1 = $10_1 + $0_1 | 0;
  $2_1 = $4_1;
  $2_1 = $0_1 >>> 0 > $3_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $0_1 = $3_1;
  $3_1 = $6_1 >> 30;
  $4_1 = $0_1 + $3_1 | 0;
  $2_1 = ($6_1 >> 31) + $2_1 | 0;
  $2_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $3_1 = $7_1 + $4_1 | 0;
  $2_1 = $4_1 >>> 0 > $3_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = $11_1;
  $0_1 = $3_1;
  HEAP32[$1_1 + 32 >> 2] = $0_1 << 2 | $8_1 >>> 30;
  HEAP32[$1_1 + 36 >> 2] = $2_1 << 2 | $0_1 >>> 30;
  global$0 = $5_1 + 480 | 0;
 }
 
 function $8($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0;
  $4_1 = global$0 - 496 | 0;
  global$0 = $4_1;
  $34_1 = HEAP32[$2_1 + 24 >> 2];
  $35_1 = HEAP32[$2_1 + 28 >> 2];
  $36_1 = HEAP32[$1_1 >> 2];
  $37_1 = HEAP32[$1_1 + 4 >> 2];
  $297($4_1 - -64 | 0, $34_1, $35_1, 0, 0, $36_1, $37_1, 0, 0);
  $38_1 = HEAP32[$2_1 + 16 >> 2];
  $39_1 = HEAP32[$2_1 + 20 >> 2];
  $40_1 = HEAP32[$1_1 + 8 >> 2];
  $41_1 = HEAP32[$1_1 + 12 >> 2];
  $297($4_1 + 208 | 0, $38_1, $39_1, 0, 0, $40_1, $41_1, 0, 0);
  $42_1 = HEAP32[$2_1 + 8 >> 2];
  $43_1 = HEAP32[$2_1 + 12 >> 2];
  $44_1 = HEAP32[$1_1 + 16 >> 2];
  $45_1 = HEAP32[$1_1 + 20 >> 2];
  $297($4_1 + 320 | 0, $42_1, $43_1, 0, 0, $44_1, $45_1, 0, 0);
  $46_1 = HEAP32[$2_1 >> 2];
  $47_1 = HEAP32[$2_1 + 4 >> 2];
  $48_1 = HEAP32[$1_1 + 24 >> 2];
  $49_1 = HEAP32[$1_1 + 28 >> 2];
  $297($4_1 + 400 | 0, $46_1, $47_1, 0, 0, $48_1, $49_1, 0, 0);
  $50_1 = HEAP32[$2_1 + 32 >> 2];
  $51_1 = HEAP32[$2_1 + 36 >> 2];
  $52_1 = HEAP32[$1_1 + 32 >> 2];
  $53_1 = HEAP32[$1_1 + 36 >> 2];
  $297($4_1 + 480 | 0, $50_1, $51_1, 0, 0, $52_1, $53_1, 0, 0);
  $1_1 = HEAP32[$4_1 + 484 >> 2];
  $5_1 = $1_1;
  $297($4_1 + 464 | 0, HEAP32[$4_1 + 480 >> 2], $1_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $297($4_1 + 80 | 0, $50_1, $51_1, 0, 0, $36_1, $37_1, 0, 0);
  $297($4_1 + 144 | 0, $34_1, $35_1, 0, 0, $40_1, $41_1, 0, 0);
  $297($4_1 + 272 | 0, $38_1, $39_1, 0, 0, $44_1, $45_1, 0, 0);
  $297($4_1 + 368 | 0, $42_1, $43_1, 0, 0, $48_1, $49_1, 0, 0);
  $297($4_1 + 432 | 0, $46_1, $47_1, 0, 0, $52_1, $53_1, 0, 0);
  $1_1 = $4_1 + 488 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $14_1 = HEAP32[$1_1 >> 2];
  $297($4_1 + 448 | 0, $14_1 << 12 | $5_1 >>> 20, $2_1 << 12 | $14_1 >>> 20, $2_1 >>> 20 | 0, 0, 15632, 16, 0, 0);
  $297($4_1 + 96 | 0, $46_1, $47_1, 0, 0, $36_1, $37_1, 0, 0);
  $297($4_1 + 224 | 0, $50_1, $51_1, 0, 0, $40_1, $41_1, 0, 0);
  $297($4_1 + 160 | 0, $34_1, $35_1, 0, 0, $44_1, $45_1, 0, 0);
  $297($4_1 + 288 | 0, $38_1, $39_1, 0, 0, $48_1, $49_1, 0, 0);
  $297($4_1 + 384 | 0, $42_1, $43_1, 0, 0, $52_1, $53_1, 0, 0);
  $29_1 = HEAP32[$4_1 + 288 >> 2];
  $2_1 = HEAP32[$4_1 + 160 >> 2];
  $5_1 = $29_1 + $2_1 | 0;
  $55_1 = HEAP32[$4_1 + 292 >> 2];
  $1_1 = $55_1 + HEAP32[$4_1 + 164 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $58_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 384 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 388 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $59_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 224 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 228 >> 2] | 0;
  $13_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = HEAP32[$4_1 + 272 >> 2];
  $2_1 = HEAP32[$4_1 + 144 >> 2];
  $3_1 = $27_1 + $2_1 | 0;
  $56_1 = HEAP32[$4_1 + 276 >> 2];
  $1_1 = $56_1 + HEAP32[$4_1 + 148 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $54_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 368 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $31_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 372 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 432 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $10_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 436 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 80 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $12_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 84 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $23_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 448 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $7_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 452 >> 2] | 0;
  $9_1 = $3_1;
  $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $25_1 = HEAP32[$4_1 + 208 >> 2];
  $3_1 = HEAP32[$4_1 + 64 >> 2];
  $14_1 = $25_1 + $3_1 | 0;
  $24_1 = HEAP32[$4_1 + 212 >> 2];
  $1_1 = $24_1 + HEAP32[$4_1 + 68 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $14_1;
  $3_1 = HEAP32[$4_1 + 320 >> 2];
  $14_1 = $14_1 + $3_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 324 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $14_1;
  $3_1 = HEAP32[$4_1 + 400 >> 2];
  $14_1 = $14_1 + $3_1 | 0;
  $6_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 404 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = $14_1;
  $14_1 = HEAP32[$4_1 + 464 >> 2];
  $18_1 = $22_1 + $14_1 | 0;
  $3_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 468 >> 2] | 0;
  $1_1 = $18_1 >>> 0 < $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $57_1 = $1_1;
  $30_1 = $1_1 >>> 20 | 0;
  $1_1 = $4_1 + 472 | 0;
  $26_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 408 | 0;
  $19_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $4_1 + 328 | 0;
  $1_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $60_1 = ($3_1 | 0) == ($57_1 | 0) & $18_1 >>> 0 < $22_1 >>> 0 | $3_1 >>> 0 > $57_1 >>> 0;
  $22_1 = ($3_1 | 0) == ($6_1 | 0) & $22_1 >>> 0 < $28_1 >>> 0 | $3_1 >>> 0 < $6_1 >>> 0;
  $28_1 = ($6_1 | 0) == ($11_1 | 0) & $21_1 >>> 0 > $28_1 >>> 0 | $6_1 >>> 0 < $11_1 >>> 0;
  $14_1 = $1_1;
  $21_1 = ($11_1 | 0) == ($24_1 | 0) & $21_1 >>> 0 < $25_1 >>> 0 | $11_1 >>> 0 < $24_1 >>> 0;
  $1_1 = $4_1 + 72 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $6_1 = $4_1 + 216 | 0;
  $11_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $11_1;
  $6_1 = $21_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $28_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $19_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $22_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $26_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $60_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $6_1;
  $6_1 = $6_1 << 12 | $30_1;
  $11_1 = $6_1 + $9_1 | 0;
  $3_1 = $1_1;
  $1_1 = ($1_1 << 12 | $8_1 >>> 20) + $2_1 | 0;
  $14_1 = $11_1;
  $6_1 = $6_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $6_1 >>> 20 | 0;
  $1_1 = $4_1 + 456 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 88 | 0;
  $30_1 = HEAP32[$1_1 >> 2];
  $26_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 440 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $15_1 = $4_1 + 376 | 0;
  $1_1 = HEAP32[$15_1 >> 2];
  $15_1 = HEAP32[$15_1 + 4 >> 2];
  $11_1 = ($2_1 | 0) == ($6_1 | 0) & $9_1 >>> 0 > $14_1 >>> 0 | $2_1 >>> 0 > $6_1 >>> 0;
  $28_1 = ($2_1 | 0) == ($7_1 | 0) & $9_1 >>> 0 < $23_1 >>> 0 | $2_1 >>> 0 < $7_1 >>> 0;
  $23_1 = ($7_1 | 0) == ($12_1 | 0) & $33_1 >>> 0 > $23_1 >>> 0 | $7_1 >>> 0 < $12_1 >>> 0;
  $8_1 = $1_1;
  $1_1 = $4_1 + 152 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $7_1 = $4_1 + 280 | 0;
  $9_1 = $2_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $7_1 = $2_1 + (($31_1 | 0) == ($56_1 | 0) & $27_1 >>> 0 > $54_1 >>> 0 | $31_1 >>> 0 < $56_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $8_1 + $2_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $2_1 + (($10_1 | 0) == ($31_1 | 0) & $32_1 >>> 0 < $54_1 >>> 0 | $10_1 >>> 0 < $31_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $2_1 + $17_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $2_1 + (($10_1 | 0) == ($12_1 | 0) & $32_1 >>> 0 > $33_1 >>> 0 | $10_1 >>> 0 > $12_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $2_1 + $30_1 | 0;
  $1_1 = $1_1 + $26_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $23_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $2_1 + $22_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $28_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $3_1 >>> 20 | 0;
  $7_1 = $3_1 + $7_1 | 0;
  $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $3_1 = $11_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $3_1;
  $2_1 = $3_1 << 12 | $21_1;
  $7_1 = $2_1 + $13_1 | 0;
  $3_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $5_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $7_1;
  $31_1 = $6_1;
  $7_1 = $1_1;
  $297($4_1, $11_1 << 4 & -16 | $6_1 >>> 16 & 15, ($1_1 << 4 | $11_1 >>> 28) & 16777215, 0, 0, 977, 1, 0, 0);
  $24_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $24_1 + HEAP32[$4_1 + 100 >> 2] | 0;
  $22_1 = HEAP32[$4_1 >> 2];
  $2_1 = HEAP32[$4_1 + 96 >> 2];
  $6_1 = $22_1 + $2_1 | 0;
  $32_1 = $6_1;
  HEAP32[$0_1 >> 2] = $6_1;
  $9_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 4 >> 2] = $9_1 & 1048575;
  $297($4_1 + 112 | 0, $42_1, $43_1, 0, 0, $36_1, $37_1, 0, 0);
  $297($4_1 + 240 | 0, $46_1, $47_1, 0, 0, $40_1, $41_1, 0, 0);
  $297($4_1 + 336 | 0, $50_1, $51_1, 0, 0, $44_1, $45_1, 0, 0);
  $297($4_1 + 176 | 0, $34_1, $35_1, 0, 0, $48_1, $49_1, 0, 0);
  $297($4_1 + 304 | 0, $38_1, $39_1, 0, 0, $52_1, $53_1, 0, 0);
  $30_1 = $4_1 + 48 | 0;
  $25_1 = HEAP32[$4_1 + 304 >> 2];
  $2_1 = HEAP32[$4_1 + 176 >> 2];
  $6_1 = $25_1 + $2_1 | 0;
  $27_1 = HEAP32[$4_1 + 308 >> 2];
  $1_1 = $27_1 + HEAP32[$4_1 + 180 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $6_1;
  $2_1 = HEAP32[$4_1 + 336 >> 2];
  $6_1 = $6_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 340 >> 2] | 0;
  $8_1 = $6_1;
  $2_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = $4_1 + 232 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $4_1 + 392 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  $12_1 = ($5_1 | 0) == ($7_1 | 0) & $11_1 >>> 0 < $13_1 >>> 0 | $5_1 >>> 0 > $7_1 >>> 0;
  $23_1 = ($5_1 | 0) == ($20_1 | 0) & $13_1 >>> 0 < $59_1 >>> 0 | $5_1 >>> 0 < $20_1 >>> 0;
  $11_1 = $1_1;
  $1_1 = $4_1 + 168 | 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $6_1 = $4_1 + 296 | 0;
  $13_1 = $5_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $13_1;
  $6_1 = $5_1 + (($16_1 | 0) == ($55_1 | 0) & $29_1 >>> 0 > $58_1 >>> 0 | $16_1 >>> 0 < $55_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $6_1 = $11_1 + $5_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $6_1 = $5_1 + (($16_1 | 0) == ($20_1 | 0) & $58_1 >>> 0 > $59_1 >>> 0 | $16_1 >>> 0 > $20_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $6_1 = $5_1 + $17_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $6_1 = $23_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $3_1 >>> 20 | 0;
  $6_1 = $3_1 + $6_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $3_1 = $12_1 + $5_1 | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $20_1 = $3_1;
  $3_1 = $3_1 << 12 | $7_1 >>> 20;
  $7_1 = $3_1 + $8_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $20_1 >>> 20) + $2_1 | 0;
  $29_1 = $7_1;
  $13_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($30_1, $7_1, $13_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $11_1 = $0_1;
  $28_1 = HEAP32[$4_1 + 240 >> 2];
  $5_1 = HEAP32[$4_1 + 112 >> 2];
  $3_1 = $28_1 + $5_1 | 0;
  $33_1 = HEAP32[$4_1 + 244 >> 2];
  $1_1 = $33_1 + HEAP32[$4_1 + 116 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $23_1 = $3_1;
  $5_1 = HEAP32[$4_1 + 48 >> 2];
  $3_1 = $3_1 + $5_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 52 >> 2] | 0;
  $10_1 = $3_1;
  $3_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = $4_1 + 104 | 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $7_1 = $4_1 + 8 | 0;
  $12_1 = $5_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $12_1;
  $7_1 = $5_1 + (($9_1 | 0) == ($24_1 | 0) & $22_1 >>> 0 > $32_1 >>> 0 | $9_1 >>> 0 < $24_1 >>> 0) | 0;
  $16_1 = $7_1;
  $9_1 = $7_1 << 12 | $9_1 >>> 20;
  $12_1 = $9_1 + $10_1 | 0;
  $7_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($7_1 << 12 | $16_1 >>> 20) + $3_1 | 0;
  $54_1 = $12_1;
  HEAP32[$11_1 + 8 >> 2] = $12_1;
  $9_1 = $9_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$11_1 + 12 >> 2] = $9_1 & 1048575;
  $297($4_1 + 128 | 0, $38_1, $39_1, 0, 0, $36_1, $37_1, 0, 0);
  $297($4_1 + 256 | 0, $42_1, $43_1, 0, 0, $40_1, $41_1, 0, 0);
  $297($4_1 + 352 | 0, $46_1, $47_1, 0, 0, $44_1, $45_1, 0, 0);
  $297($4_1 + 416 | 0, $50_1, $51_1, 0, 0, $48_1, $49_1, 0, 0);
  $297($4_1 + 192 | 0, $34_1, $35_1, 0, 0, $52_1, $53_1, 0, 0);
  $30_1 = $4_1 + 32 | 0;
  $22_1 = HEAP32[$4_1 + 416 >> 2];
  $5_1 = HEAP32[$4_1 + 192 >> 2];
  $12_1 = $22_1 + $5_1 | 0;
  $24_1 = HEAP32[$4_1 + 420 >> 2];
  $1_1 = $24_1 + HEAP32[$4_1 + 196 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $1_1;
  $19_1 = $4_1 + 344 | 0;
  $1_1 = HEAP32[$19_1 >> 2];
  $19_1 = HEAP32[$19_1 + 4 >> 2];
  $16_1 = ($2_1 | 0) == ($13_1 | 0) & $8_1 >>> 0 > $29_1 >>> 0 | $2_1 >>> 0 > $13_1 >>> 0;
  $20_1 = ($2_1 | 0) == ($15_1 | 0) & $8_1 >>> 0 < $21_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $0_1 = $1_1;
  $21_1 = ($15_1 | 0) == ($27_1 | 0) & $21_1 >>> 0 < $25_1 >>> 0 | $15_1 >>> 0 < $27_1 >>> 0;
  $1_1 = $4_1 + 184 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $8_1 = $4_1 + 312 | 0;
  $15_1 = $2_1 + HEAP32[$8_1 >> 2] | 0;
  $1_1 = HEAP32[$8_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $15_1;
  $8_1 = $21_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $8_1 = $0_1 + $2_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $8_1 = $20_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $8_1 = $6_1 + $8_1 | 0;
  $1_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $6_1 = $16_1 + $2_1 | 0;
  $20_1 = $6_1;
  $13_1 = $6_1 << 12 | $13_1 >>> 20;
  $8_1 = $13_1 + $12_1 | 0;
  $6_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($6_1 << 12 | $20_1 >>> 20) + $5_1 | 0;
  $32_1 = $8_1;
  $13_1 = $8_1 >>> 0 < $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($30_1, $8_1, $13_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $25_1 = HEAP32[$4_1 + 256 >> 2];
  $2_1 = HEAP32[$4_1 + 128 >> 2];
  $8_1 = $25_1 + $2_1 | 0;
  $29_1 = HEAP32[$4_1 + 260 >> 2];
  $1_1 = $29_1 + HEAP32[$4_1 + 132 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = $8_1;
  $2_1 = HEAP32[$4_1 + 352 >> 2];
  $8_1 = $8_1 + $2_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 356 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $8_1;
  $2_1 = HEAP32[$4_1 + 32 >> 2];
  $8_1 = $8_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 36 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $26_1 = $4_1 + 56 | 0;
  $1_1 = HEAP32[$26_1 >> 2];
  $26_1 = HEAP32[$26_1 + 4 >> 2];
  $16_1 = ($3_1 | 0) == ($9_1 | 0) & $10_1 >>> 0 > $54_1 >>> 0 | $3_1 >>> 0 > $9_1 >>> 0;
  $20_1 = ($3_1 | 0) == ($17_1 | 0) & $10_1 >>> 0 < $23_1 >>> 0 | $3_1 >>> 0 < $17_1 >>> 0;
  $0_1 = $1_1;
  $23_1 = ($17_1 | 0) == ($33_1 | 0) & $23_1 >>> 0 < $28_1 >>> 0 | $17_1 >>> 0 < $33_1 >>> 0;
  $1_1 = $4_1 + 120 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $10_1 = $4_1 + 248 | 0;
  $17_1 = $3_1 + HEAP32[$10_1 >> 2] | 0;
  $1_1 = HEAP32[$10_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $17_1;
  $10_1 = $23_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $10_1;
  $10_1 = $0_1 + $3_1 | 0;
  $1_1 = $1_1 + $26_1 | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $10_1;
  $10_1 = $20_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $7_1 >>> 20 | 0;
  $10_1 = $7_1 + $10_1 | 0;
  $1_1 = $7_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $10_1;
  $7_1 = $16_1 + $3_1 | 0;
  $10_1 = $7_1;
  $9_1 = $7_1 << 12 | $9_1 >>> 20;
  $16_1 = $9_1 + $8_1 | 0;
  $7_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($7_1 << 12 | $10_1 >>> 20) + $2_1 | 0;
  $26_1 = $16_1;
  HEAP32[$11_1 + 16 >> 2] = $16_1;
  $9_1 = $9_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$11_1 + 20 >> 2] = $9_1 & 1048575;
  $10_1 = ($5_1 | 0) == ($13_1 | 0) & $12_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 > $13_1 >>> 0;
  $0_1 = ($5_1 | 0) == ($24_1 | 0) & $12_1 >>> 0 < $22_1 >>> 0 | $5_1 >>> 0 < $24_1 >>> 0;
  $1_1 = $4_1 + 200 | 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 424 | 0;
  $12_1 = $5_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $12_1;
  $3_1 = $0_1 + $5_1 | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $0_1 = $3_1;
  $3_1 = $6_1 >>> 20 | 0;
  $6_1 = $0_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $3_1 = $10_1 + $5_1 | 0;
  $5_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($4_1 + 16 | 0, $3_1 << 12 | $13_1 >>> 20, $5_1 << 12 | $3_1 >>> 20, $5_1 >>> 20 | 0, 0, 15632, 16, 0, 0);
  $3_1 = $11_1;
  $17_1 = HEAP32[$4_1 + 20 >> 2];
  $1_1 = $17_1 + ($57_1 & 1048575) | 0;
  $16_1 = HEAP32[$4_1 + 16 >> 2];
  $5_1 = $18_1 + $16_1 | 0;
  $1_1 = $5_1 >>> 0 < $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $5_1;
  $18_1 = $1_1;
  $1_1 = $4_1 + 40 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $4_1 + 360 | 0;
  $1_1 = HEAP32[$5_1 >> 2];
  $11_1 = HEAP32[$5_1 + 4 >> 2];
  $10_1 = ($2_1 | 0) == ($9_1 | 0) & $8_1 >>> 0 > $26_1 >>> 0 | $2_1 >>> 0 > $9_1 >>> 0;
  $20_1 = ($2_1 | 0) == ($15_1 | 0) & $8_1 >>> 0 < $21_1 >>> 0 | $2_1 >>> 0 < $15_1 >>> 0;
  $0_1 = $1_1;
  $1_1 = $4_1 + 136 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $4_1 + 264 | 0;
  $8_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $5_1 = $2_1 + (($19_1 | 0) == ($29_1 | 0) & $27_1 >>> 0 < $25_1 >>> 0 | $19_1 >>> 0 < $29_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $0_1 + $2_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $2_1 + (($15_1 | 0) == ($19_1 | 0) & $21_1 >>> 0 < $27_1 >>> 0 | $15_1 >>> 0 < $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $2_1 + $12_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $20_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $0_1 = $5_1;
  $5_1 = $7_1 >>> 20 | 0;
  $7_1 = $0_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $5_1 = $10_1 + $2_1 | 0;
  $7_1 = $5_1;
  $11_1 = $5_1 << 12 | $9_1 >>> 20;
  $9_1 = $11_1 + $6_1 | 0;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($5_1 << 12 | $7_1 >>> 20) + $18_1 | 0;
  $13_1 = $9_1;
  HEAP32[$3_1 + 24 >> 2] = $9_1;
  $1_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$3_1 + 28 >> 2] = $1_1 & 1048575;
  $9_1 = $31_1 & 65535;
  $2_1 = $3_1;
  $0_1 = $1_1;
  $7_1 = ($1_1 | 0) == ($18_1 | 0) & $6_1 >>> 0 > $13_1 >>> 0 | $1_1 >>> 0 < $18_1 >>> 0;
  $3_1 = ($18_1 | 0) == ($17_1 | 0) & $6_1 >>> 0 < $16_1 >>> 0 | $18_1 >>> 0 < $17_1 >>> 0;
  $1_1 = $4_1 + 24 | 0;
  $18_1 = $3_1 + HEAP32[$1_1 >> 2] | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $3_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $5_1 >>> 20 | 0;
  $18_1 = $5_1 + $18_1 | 0;
  $1_1 = $5_1 >>> 0 > $18_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $18_1;
  $3_1 = $7_1 + $5_1 | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $3_1;
  $0_1 = $3_1 << 12 | $0_1 >>> 20;
  $3_1 = $0_1 + $14_1 | 0;
  $1_1 = ($1_1 << 12 | $5_1 >>> 20) + $9_1 | 0;
  HEAP32[$2_1 + 32 >> 2] = $3_1;
  HEAP32[$2_1 + 36 >> 2] = $0_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  global$0 = $4_1 + 496 | 0;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $6_1 = global$0 - 1280 | 0;
  global$0 = $6_1;
  $288($6_1 + 40 | 0, $0_1, $1_1);
  $0_1 = HEAP32[$6_1 + 44 >> 2];
  HEAP32[$6_1 + 52 >> 2] = $0_1;
  $7_1 = HEAP32[$6_1 + 40 >> 2];
  HEAP32[$6_1 + 48 >> 2] = $7_1;
  $288($6_1 + 32 | 0, $2_1, $3_1);
  $12_1 = HEAP32[$6_1 + 36 >> 2];
  HEAP32[$6_1 + 60 >> 2] = $12_1;
  $13_1 = HEAP32[$6_1 + 32 >> 2];
  HEAP32[$6_1 + 56 >> 2] = $13_1;
  $288($6_1 + 24 | 0, $4_1, $5_1);
  $1_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 68 >> 2] = $1_1;
  $2_1 = HEAP32[$6_1 + 24 >> 2];
  HEAP32[$6_1 + 64 >> 2] = $2_1;
  $5_1 = 1;
  $4_1 = 0;
  $10_1 = 0;
  label$1 : {
   if (($0_1 | 0) != 64) {
    break label$1
   }
   $10_1 = 0;
   if (HEAPU8[$7_1 + 63 | 0] > 31) {
    break label$1
   }
   $5_1 = 0;
   $0_1 = $6_1 + 74 | 0;
   HEAP8[$0_1 | 0] = 0;
   HEAP16[$6_1 + 72 >> 1] = 0;
   $3_1 = $0_1;
   $0_1 = HEAPU8[$7_1 + 2 | 0];
   HEAP8[$3_1 | 0] = $0_1;
   $3_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8;
   HEAP8[$6_1 + 1242 | 0] = $0_1;
   HEAP16[$6_1 + 72 >> 1] = $3_1;
   HEAP16[$6_1 + 1240 >> 1] = $3_1;
   $4_1 = HEAPU8[$7_1 + 3 | 0] | HEAPU8[$7_1 + 4 | 0] << 8 | (HEAPU8[$7_1 + 5 | 0] << 16 | HEAPU8[$7_1 + 6 | 0] << 24);
   $42($6_1 + 344 | 0, $7_1 + 7 | 0, 57);
   $10_1 = 1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1_1 | 0) == 32) {
       $7_1 = $6_1 + 576 | 0;
       $0_1 = $7_1;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $3_1 = $6_1 + 568 | 0;
       $0_1 = $3_1;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       $1_1 = $6_1 + 560 | 0;
       $0_1 = $1_1;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP32[$6_1 + 552 >> 2] = 0;
       HEAP32[$6_1 + 556 >> 2] = 0;
       $302($6_1 + 16 | 0, $2_1, 32, 32);
       if (HEAP32[$6_1 + 20 >> 2] != 32) {
        break label$2
       }
       $0_1 = HEAP32[$6_1 + 16 >> 2];
       $9_1 = $0_1 + 24 | 0;
       $14_1 = HEAPU8[$9_1 + 4 | 0] | HEAPU8[$9_1 + 5 | 0] << 8 | (HEAPU8[$9_1 + 6 | 0] << 16 | HEAPU8[$9_1 + 7 | 0] << 24);
       $9_1 = HEAPU8[$9_1 | 0] | HEAPU8[$9_1 + 1 | 0] << 8 | (HEAPU8[$9_1 + 2 | 0] << 16 | HEAPU8[$9_1 + 3 | 0] << 24);
       HEAP32[$7_1 >> 2] = $9_1;
       HEAP32[$7_1 + 4 >> 2] = $14_1;
       $7_1 = $0_1 + 16 | 0;
       $15_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
       $7_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
       HEAP32[$3_1 >> 2] = $7_1;
       HEAP32[$3_1 + 4 >> 2] = $15_1;
       $3_1 = $0_1 + 8 | 0;
       $8_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
       $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
       HEAP32[$1_1 >> 2] = $3_1;
       HEAP32[$1_1 + 4 >> 2] = $8_1;
       $11_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
       $1_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
       HEAP32[$6_1 + 552 >> 2] = $1_1;
       HEAP32[$6_1 + 556 >> 2] = $11_1;
       $0_1 = $6_1 + 888 | 0;
       HEAP32[$0_1 >> 2] = $9_1;
       HEAP32[$0_1 + 4 >> 2] = $14_1;
       $0_1 = $6_1 + 880 | 0;
       HEAP32[$0_1 >> 2] = $7_1;
       HEAP32[$0_1 + 4 >> 2] = $15_1;
       $0_1 = $6_1 + 872 | 0;
       HEAP32[$0_1 >> 2] = $3_1;
       HEAP32[$0_1 + 4 >> 2] = $8_1;
       HEAP32[$6_1 + 864 >> 2] = $1_1;
       HEAP32[$6_1 + 868 >> 2] = $11_1;
       $107($6_1 + 72 | 0, $6_1 + 864 | 0);
       if (HEAP32[$6_1 + 72 >> 2] != 1 | HEAP32[$6_1 + 76 >> 2]) {
        break label$5
       }
       $0_1 = HEAP32[$6_1 + 80 >> 2];
       $9_1 = $6_1 + 616 | 0;
       $91($9_1, $6_1 + 84 | 0, 156);
       $3_1 = $6_1 + 576 | 0;
       $1_1 = HEAP32[$3_1 + 4 >> 2];
       $7_1 = $6_1 + 252 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $1_1;
       $3_1 = $6_1 + 568 | 0;
       $1_1 = HEAP32[$3_1 + 4 >> 2];
       $7_1 = $6_1 + 244 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $1_1;
       $3_1 = $6_1 + 560 | 0;
       $1_1 = HEAP32[$3_1 + 4 >> 2];
       $7_1 = $6_1 + 236 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $1_1;
       $1_1 = HEAP32[$6_1 + 556 >> 2];
       HEAP32[$6_1 + 228 >> 2] = HEAP32[$6_1 + 552 >> 2];
       HEAP32[$6_1 + 232 >> 2] = $1_1;
       $1_1 = $6_1 + 72 | 0;
       $91($1_1, $9_1, 156);
       $91($6_1 + 1024 | 0, $1_1, 188);
       $3_1 = 0;
       $1_1 = 1;
       break label$3;
      }
      $0_1 = $6_1 + 80 | 0;
      HEAP32[$0_1 >> 2] = 9;
      HEAP32[$0_1 + 4 >> 2] = 32;
      HEAP32[$6_1 + 76 >> 2] = 1048732;
      HEAP32[$6_1 + 72 >> 2] = 2;
      $3_1 = 1;
      $2_1 = $303($6_1 + 72 | 0);
      break label$4;
     }
     HEAP32[$6_1 + 72 >> 2] = 0;
     $295($6_1 + 8 | 0, $6_1 + 72 | 0);
     $3_1 = 1;
     $2_1 = HEAP32[$6_1 + 8 >> 2];
    }
    $0_1 = 1073288;
    $1_1 = 0;
   }
   HEAP8[$6_1 + 72 | 0] = $5_1;
   $5_1 = HEAPU16[$6_1 + 1240 >> 1];
   HEAP8[$6_1 + 73 | 0] = $5_1;
   HEAP8[$6_1 + 74 | 0] = $5_1 >>> 8;
   HEAP32[$6_1 + 76 >> 2] = $4_1;
   HEAP8[$6_1 + 75 | 0] = HEAPU8[$6_1 + 1242 | 0];
   $91($6_1 + 80 | 0, $6_1 + 344 | 0, 60);
   $9_1 = $6_1 + 152 | 0;
   HEAP32[$9_1 >> 2] = $0_1;
   $0_1 = $6_1 + 148 | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[$6_1 + 144 >> 2] = $3_1;
   $91($6_1 + 156 | 0, $6_1 + 1024 | 0, 188);
   label$7 : {
    label$8 : {
     if ($10_1) {
      if (!$1_1) {
       break label$8
      }
      $2_1 = HEAPU8[$6_1 + 136 | 0];
      $11_1 = HEAP32[$6_1 + 80 >> 2];
      $91($6_1 + 344 | 0, $9_1, 192);
      $5_1 = $6_1 + 105 | 0;
      label$10 : {
       label$11 : {
        label$12 : {
         label$13 : {
          label$14 : {
           label$15 : {
            if ($2_1 >>> 0 <= 15) {
             $0_1 = $5_1 + 23 | 0;
             $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
             $3_1 = $6_1 + 1264 | 0;
             $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
             HEAP8[$3_1 | 0] = $0_1;
             HEAP8[$3_1 + 1 | 0] = $0_1 >>> 8;
             HEAP8[$3_1 + 2 | 0] = $0_1 >>> 16;
             HEAP8[$3_1 + 3 | 0] = $0_1 >>> 24;
             HEAP8[$3_1 + 4 | 0] = $1_1;
             HEAP8[$3_1 + 5 | 0] = $1_1 >>> 8;
             HEAP8[$3_1 + 6 | 0] = $1_1 >>> 16;
             HEAP8[$3_1 + 7 | 0] = $1_1 >>> 24;
             $0_1 = $5_1 + 16 | 0;
             $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
             $3_1 = $6_1 + 1257 | 0;
             $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
             HEAP8[$3_1 | 0] = $0_1;
             HEAP8[$3_1 + 1 | 0] = $0_1 >>> 8;
             HEAP8[$3_1 + 2 | 0] = $0_1 >>> 16;
             HEAP8[$3_1 + 3 | 0] = $0_1 >>> 24;
             HEAP8[$3_1 + 4 | 0] = $1_1;
             HEAP8[$3_1 + 5 | 0] = $1_1 >>> 8;
             HEAP8[$3_1 + 6 | 0] = $1_1 >>> 16;
             HEAP8[$3_1 + 7 | 0] = $1_1 >>> 24;
             $0_1 = $5_1 + 8 | 0;
             $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
             $3_1 = $6_1 + 1249 | 0;
             $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
             HEAP8[$3_1 | 0] = $0_1;
             HEAP8[$3_1 + 1 | 0] = $0_1 >>> 8;
             HEAP8[$3_1 + 2 | 0] = $0_1 >>> 16;
             HEAP8[$3_1 + 3 | 0] = $0_1 >>> 24;
             HEAP8[$3_1 + 4 | 0] = $1_1;
             HEAP8[$3_1 + 5 | 0] = $1_1 >>> 8;
             HEAP8[$3_1 + 6 | 0] = $1_1 >>> 16;
             HEAP8[$3_1 + 7 | 0] = $1_1 >>> 24;
             $1_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
             $0_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
             HEAP8[$6_1 + 1241 | 0] = $0_1;
             HEAP8[$6_1 + 1242 | 0] = $0_1 >>> 8;
             HEAP8[$6_1 + 1243 | 0] = $0_1 >>> 16;
             HEAP8[$6_1 + 1244 | 0] = $0_1 >>> 24;
             HEAP8[$6_1 + 1245 | 0] = $1_1;
             HEAP8[$6_1 + 1246 | 0] = $1_1 >>> 8;
             HEAP8[$6_1 + 1247 | 0] = $1_1 >>> 16;
             HEAP8[$6_1 + 1248 | 0] = $1_1 >>> 24;
             $7_1 = $2_1 & 127;
             break label$15;
            }
            $0_1 = $5_1 + 23 | 0;
            $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
            $3_1 = $6_1 + 1047 | 0;
            $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
            HEAP8[$3_1 | 0] = $0_1;
            HEAP8[$3_1 + 1 | 0] = $0_1 >>> 8;
            HEAP8[$3_1 + 2 | 0] = $0_1 >>> 16;
            HEAP8[$3_1 + 3 | 0] = $0_1 >>> 24;
            HEAP8[$3_1 + 4 | 0] = $1_1;
            HEAP8[$3_1 + 5 | 0] = $1_1 >>> 8;
            HEAP8[$3_1 + 6 | 0] = $1_1 >>> 16;
            HEAP8[$3_1 + 7 | 0] = $1_1 >>> 24;
            $3_1 = $5_1 + 16 | 0;
            $0_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
            $1_1 = $6_1 + 1040 | 0;
            HEAP32[$1_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
            HEAP32[$1_1 + 4 >> 2] = $0_1;
            $3_1 = $5_1 + 8 | 0;
            $0_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
            $1_1 = $6_1 + 1032 | 0;
            HEAP32[$1_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
            HEAP32[$1_1 + 4 >> 2] = $0_1;
            HEAP8[$6_1 + 1055 | 0] = $2_1;
            $0_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
            HEAP32[$6_1 + 1024 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
            HEAP32[$6_1 + 1028 >> 2] = $0_1;
            $4($6_1 + 864 | 0, $6_1 + 1024 | 0);
            $0_1 = 1;
            if (HEAPU8[$6_1 + 864 | 0] != 1) {
             break label$14
            }
            $0_1 = $6_1 + 888 | 0;
            $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
            $2_1 = $6_1 + 1264 | 0;
            $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
            HEAP8[$2_1 | 0] = $0_1;
            HEAP8[$2_1 + 1 | 0] = $0_1 >>> 8;
            HEAP8[$2_1 + 2 | 0] = $0_1 >>> 16;
            HEAP8[$2_1 + 3 | 0] = $0_1 >>> 24;
            HEAP8[$2_1 + 4 | 0] = $1_1;
            HEAP8[$2_1 + 5 | 0] = $1_1 >>> 8;
            HEAP8[$2_1 + 6 | 0] = $1_1 >>> 16;
            HEAP8[$2_1 + 7 | 0] = $1_1 >>> 24;
            $0_1 = $6_1 + 881 | 0;
            $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
            $2_1 = $6_1 + 1257 | 0;
            $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
            HEAP8[$2_1 | 0] = $0_1;
            HEAP8[$2_1 + 1 | 0] = $0_1 >>> 8;
            HEAP8[$2_1 + 2 | 0] = $0_1 >>> 16;
            HEAP8[$2_1 + 3 | 0] = $0_1 >>> 24;
            HEAP8[$2_1 + 4 | 0] = $1_1;
            HEAP8[$2_1 + 5 | 0] = $1_1 >>> 8;
            HEAP8[$2_1 + 6 | 0] = $1_1 >>> 16;
            HEAP8[$2_1 + 7 | 0] = $1_1 >>> 24;
            $0_1 = $6_1 + 873 | 0;
            $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
            $2_1 = $6_1 + 1249 | 0;
            $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
            HEAP8[$2_1 | 0] = $0_1;
            HEAP8[$2_1 + 1 | 0] = $0_1 >>> 8;
            HEAP8[$2_1 + 2 | 0] = $0_1 >>> 16;
            HEAP8[$2_1 + 3 | 0] = $0_1 >>> 24;
            HEAP8[$2_1 + 4 | 0] = $1_1;
            HEAP8[$2_1 + 5 | 0] = $1_1 >>> 8;
            HEAP8[$2_1 + 6 | 0] = $1_1 >>> 16;
            HEAP8[$2_1 + 7 | 0] = $1_1 >>> 24;
            $1_1 = HEAPU8[$6_1 + 869 | 0] | HEAPU8[$6_1 + 870 | 0] << 8 | (HEAPU8[$6_1 + 871 | 0] << 16 | HEAPU8[$6_1 + 872 | 0] << 24);
            $0_1 = HEAPU8[$6_1 + 865 | 0] | HEAPU8[$6_1 + 866 | 0] << 8 | (HEAPU8[$6_1 + 867 | 0] << 16 | HEAPU8[$6_1 + 868 | 0] << 24);
            HEAP8[$6_1 + 1241 | 0] = $0_1;
            HEAP8[$6_1 + 1242 | 0] = $0_1 >>> 8;
            HEAP8[$6_1 + 1243 | 0] = $0_1 >>> 16;
            HEAP8[$6_1 + 1244 | 0] = $0_1 >>> 24;
            HEAP8[$6_1 + 1245 | 0] = $1_1;
            HEAP8[$6_1 + 1246 | 0] = $1_1 >>> 8;
            HEAP8[$6_1 + 1247 | 0] = $1_1 >>> 16;
            HEAP8[$6_1 + 1248 | 0] = $1_1 >>> 24;
            $7_1 = HEAPU8[$6_1 + 896 | 0];
           }
           $1_1 = $6_1 + 1264 | 0;
           $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
           $0_1 = $6_1 + 855 | 0;
           $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
           HEAP8[$0_1 | 0] = $1_1;
           HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
           HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
           HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
           HEAP8[$0_1 + 4 | 0] = $2_1;
           HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
           HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
           HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
           $3_1 = $6_1 + 1257 | 0;
           $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
           $10_1 = $6_1 + 848 | 0;
           $2_1 = $10_1;
           HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
           HEAP32[$2_1 + 4 >> 2] = $1_1;
           $3_1 = $6_1 + 1249 | 0;
           $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
           $5_1 = $6_1 + 840 | 0;
           $2_1 = $5_1;
           HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
           HEAP32[$2_1 + 4 >> 2] = $1_1;
           $1_1 = HEAPU8[$6_1 + 1245 | 0] | HEAPU8[$6_1 + 1246 | 0] << 8 | (HEAPU8[$6_1 + 1247 | 0] << 16 | HEAPU8[$6_1 + 1248 | 0] << 24);
           HEAP32[$6_1 + 832 >> 2] = HEAPU8[$6_1 + 1241 | 0] | HEAPU8[$6_1 + 1242 | 0] << 8 | (HEAPU8[$6_1 + 1243 | 0] << 16 | HEAPU8[$6_1 + 1244 | 0] << 24);
           HEAP32[$6_1 + 836 >> 2] = $1_1;
           $1_1 = $6_1 + 84 | 0;
           $8_1 = $1_1 + 8 | 0;
           $2_1 = HEAPU8[$8_1 + 4 | 0] | HEAPU8[$8_1 + 5 | 0] << 8 | (HEAPU8[$8_1 + 6 | 0] << 16 | HEAPU8[$8_1 + 7 | 0] << 24);
           $3_1 = $6_1 + 1032 | 0;
           HEAP32[$3_1 >> 2] = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
           HEAP32[$3_1 + 4 >> 2] = $2_1;
           $2_1 = $1_1 + 13 | 0;
           $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
           $8_1 = $6_1 + 1037 | 0;
           $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
           HEAP8[$8_1 | 0] = $2_1;
           HEAP8[$8_1 + 1 | 0] = $2_1 >>> 8;
           HEAP8[$8_1 + 2 | 0] = $2_1 >>> 16;
           HEAP8[$8_1 + 3 | 0] = $2_1 >>> 24;
           HEAP8[$8_1 + 4 | 0] = $3_1;
           HEAP8[$8_1 + 5 | 0] = $3_1 >>> 8;
           HEAP8[$8_1 + 6 | 0] = $3_1 >>> 16;
           HEAP8[$8_1 + 7 | 0] = $3_1 >>> 24;
           $2_1 = $6_1 + 72 | 1;
           HEAP16[$6_1 + 552 >> 1] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8;
           HEAP8[$6_1 + 554 | 0] = HEAPU8[$2_1 + 2 | 0];
           $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
           HEAP32[$6_1 + 1024 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
           HEAP32[$6_1 + 1028 >> 2] = $2_1;
           $2_1 = HEAP32[$5_1 + 4 >> 2];
           $3_1 = $6_1 + 1053 | 0;
           $1_1 = HEAP32[$5_1 >> 2];
           HEAP8[$3_1 | 0] = $1_1;
           HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
           HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
           HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
           HEAP8[$3_1 + 4 | 0] = $2_1;
           HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
           HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
           HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
           $2_1 = HEAP32[$10_1 + 4 >> 2];
           $3_1 = $6_1 + 1061 | 0;
           $1_1 = HEAP32[$10_1 >> 2];
           HEAP8[$3_1 | 0] = $1_1;
           HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
           HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
           HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
           HEAP8[$3_1 + 4 | 0] = $2_1;
           HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
           HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
           HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
           $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
           $2_1 = $6_1 + 1068 | 0;
           $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
           HEAP8[$2_1 | 0] = $0_1;
           HEAP8[$2_1 + 1 | 0] = $0_1 >>> 8;
           HEAP8[$2_1 + 2 | 0] = $0_1 >>> 16;
           HEAP8[$2_1 + 3 | 0] = $0_1 >>> 24;
           HEAP8[$2_1 + 4 | 0] = $1_1;
           HEAP8[$2_1 + 5 | 0] = $1_1 >>> 8;
           HEAP8[$2_1 + 6 | 0] = $1_1 >>> 16;
           HEAP8[$2_1 + 7 | 0] = $1_1 >>> 24;
           $1_1 = HEAP32[$6_1 + 836 >> 2];
           $0_1 = HEAP32[$6_1 + 832 >> 2];
           HEAP8[$6_1 + 1045 | 0] = $0_1;
           HEAP8[$6_1 + 1046 | 0] = $0_1 >>> 8;
           HEAP8[$6_1 + 1047 | 0] = $0_1 >>> 16;
           HEAP8[$6_1 + 1048 | 0] = $0_1 >>> 24;
           HEAP8[$6_1 + 1049 | 0] = $1_1;
           HEAP8[$6_1 + 1050 | 0] = $1_1 >>> 8;
           HEAP8[$6_1 + 1051 | 0] = $1_1 >>> 16;
           HEAP8[$6_1 + 1052 | 0] = $1_1 >>> 24;
           $0_1 = $6_1 + 616 | 0;
           $3_1 = $6_1 + 1024 | 0;
           $91($0_1, $3_1, 52);
           $91($6_1 + 563 | 0, $0_1, 52);
           HEAP8[$6_1 + 615 | 0] = $7_1;
           HEAP8[$6_1 + 559 | 0] = $11_1;
           HEAP8[$6_1 + 560 | 0] = $11_1 >>> 8;
           HEAP8[$6_1 + 561 | 0] = $11_1 >>> 16;
           HEAP8[$6_1 + 562 | 0] = $11_1 >>> 24;
           HEAP8[$6_1 + 555 | 0] = $4_1;
           HEAP8[$6_1 + 556 | 0] = $4_1 >>> 8;
           HEAP8[$6_1 + 557 | 0] = $4_1 >>> 16;
           HEAP8[$6_1 + 558 | 0] = $4_1 >>> 24;
           $175($0_1);
           $91($3_1, $9_1, 160);
           $2_1 = $6_1 + 864 | 0;
           $206($2_1, $3_1);
           $1_1 = $6_1 + 552 | 0;
           $412($0_1, $1_1);
           $412($0_1, $6_1 + 504 | 0);
           $409($0_1, $13_1, $12_1);
           $91($3_1, $0_1, 216);
           $0_1 = $6_1 + 832 | 0;
           $291($0_1, $3_1);
           $27($3_1, $0_1, $2_1, $6_1 + 584 | 0);
           $0_1 = $6_1 + 1240 | 0;
           $130($0_1, $3_1);
           if ($285($0_1, $1_1, 32)) {
            break label$13
           }
           $0_1 = 0;
           break label$12;
          }
          HEAP32[$6_1 + 1024 >> 2] = 1;
          $1_1 = $303($6_1 + 1024 | 0);
          HEAP32[$6_1 + 544 >> 2] = 1073288;
          HEAP32[$6_1 + 540 >> 2] = $1_1;
          HEAP32[$6_1 + 536 >> 2] = 1;
          break label$11;
         }
         HEAP32[$6_1 + 1240 >> 2] = 3;
         $0_1 = $303($6_1 + 1240 | 0);
         HEAP32[$6_1 + 544 >> 2] = 1073288;
         HEAP32[$6_1 + 540 >> 2] = $0_1;
         $0_1 = 1;
        }
        HEAP32[$6_1 + 536 >> 2] = $0_1;
        if (!$0_1) {
         break label$10
        }
       }
       $328($6_1 + 536 | 4);
      }
      $2_1 = $0_1 ^ 1;
      break label$7;
     }
     $328($6_1 + 72 | 4);
     $2_1 = 0;
     if ($1_1) {
      break label$7
     }
    }
    $328($0_1);
    $2_1 = 0;
   }
   $392($6_1 - -64 | 0);
   $392($6_1 + 56 | 0);
   $392($6_1 + 48 | 0);
   global$0 = $6_1 + 1280 | 0;
   return $2_1 | 0;
  }
  abort();
 }
 
 function $10($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0;
  $3_1 = global$0 - 432 | 0;
  global$0 = $3_1;
  $147($3_1 + 392 | 0, 0, 40);
  $5_1 = $3_1 + 384 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 376 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 368 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 360 >> 2] = 0;
  HEAP32[$3_1 + 364 >> 2] = 0;
  HEAP32[$3_1 + 352 >> 2] = 1;
  HEAP32[$3_1 + 356 >> 2] = 0;
  $44_1 = $0_1;
  $39_1 = HEAP32[$0_1 + 32 >> 2];
  $37_1 = HEAP32[$0_1 + 36 >> 2];
  $4_1 = HEAP32[$0_1 + 24 >> 2];
  $26_1 = HEAP32[$0_1 + 28 >> 2];
  $9_1 = HEAP32[$0_1 + 16 >> 2];
  $32_1 = HEAP32[$0_1 + 20 >> 2];
  $17_1 = HEAP32[$0_1 + 8 >> 2];
  $33_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP32[$0_1 + 4 >> 2];
  $40_1 = $1_1;
  $27_1 = HEAP32[$1_1 + 32 >> 2];
  $24_1 = HEAP32[$1_1 + 36 >> 2];
  $18_1 = HEAP32[$1_1 + 24 >> 2];
  $34_1 = HEAP32[$1_1 + 28 >> 2];
  $6_1 = HEAP32[$1_1 + 16 >> 2];
  $28_1 = HEAP32[$1_1 + 20 >> 2];
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  $30_1 = HEAP32[$1_1 + 12 >> 2];
  $1_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$40_1 + 4 >> 2];
  $42_1 = -1;
  $21_1 = -1;
  while (1) {
   if (($43_1 | 0) != 10) {
    $22_1 = 0;
    $12_1 = 0;
    $19_1 = 8;
    $10_1 = 0;
    $41_1 = 59;
    $16_1 = $1_1;
    $25_1 = $11_1;
    $23_1 = $5_1;
    $0_1 = $15_1;
    $8_1 = 0;
    $20_1 = 0;
    $14_1 = 8;
    $2_1 = 0;
    while (1) {
     if ($41_1) {
      $29_1 = $0_1;
      $0_1 = $23_1 & 1;
      $31_1 = 0 - $0_1 | 0;
      $35_1 = 0 - $0_1 | 0;
      $38_1 = $21_1;
      $0_1 = $21_1 >> 31;
      $13_1 = $0_1;
      $36_1 = $16_1 ^ $0_1;
      $21_1 = $35_1 & $36_1 - $0_1;
      $23_1 = $21_1 + $23_1 | 0;
      $0_1 = (($25_1 ^ $0_1) - (($0_1 >>> 0 > $36_1 >>> 0) + $0_1 | 0) & $31_1) + $29_1 | 0;
      $0_1 = $23_1 >>> 0 < $21_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $45_1 = $23_1;
      $29_1 = $13_1 & $35_1;
      $21_1 = $16_1 + ($23_1 & $29_1) | 0;
      $23_1 = $0_1;
      $36_1 = $13_1 & $31_1;
      $0_1 = $25_1 + ($0_1 & $36_1) | 0;
      $0_1 = $16_1 >>> 0 > $21_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $16_1 = $21_1;
      $25_1 = $0_1;
      $0_1 = $8_1 ^ $13_1;
      $21_1 = $19_1 + ($35_1 & $0_1 - $13_1) | 0;
      $0_1 = $10_1 + ($31_1 & ($13_1 ^ $20_1) - (($0_1 >>> 0 < $13_1 >>> 0) + $13_1 | 0)) | 0;
      $0_1 = $19_1 >>> 0 > $21_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $19_1 = $21_1;
      $21_1 = $8_1 + ($29_1 & $19_1) | 0;
      $10_1 = $0_1;
      $0_1 = $20_1 + ($36_1 & $0_1) | 0;
      $0_1 = $8_1 >>> 0 > $21_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $8_1 = $21_1;
      $0_1 = $0_1 << 1 | $8_1 >>> 31;
      $8_1 = $8_1 << 1;
      $20_1 = $0_1;
      $0_1 = $14_1 ^ $13_1;
      $35_1 = $22_1 + ($35_1 & $0_1 - $13_1) | 0;
      $0_1 = $12_1 + ($31_1 & ($2_1 ^ $13_1) - (($0_1 >>> 0 < $13_1 >>> 0) + $13_1 | 0)) | 0;
      $0_1 = $22_1 >>> 0 > $35_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $22_1 = $35_1;
      $21_1 = $14_1 + ($29_1 & $22_1) | 0;
      $12_1 = $0_1;
      $0_1 = $2_1 + ($36_1 & $0_1) | 0;
      $0_1 = $14_1 >>> 0 > $21_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $2_1 = $21_1;
      $14_1 = $2_1 << 1;
      $2_1 = $0_1 << 1 | $2_1 >>> 31;
      $0_1 = $29_1 ^ $42_1;
      $42_1 = $0_1 - 1 | 0;
      $21_1 = ($36_1 ^ $38_1) - !$0_1 | 0;
      $0_1 = $23_1 >>> 1 | 0;
      $23_1 = ($23_1 & 1) << 31 | $45_1 >>> 1;
      $41_1 = $41_1 - 1 | 0;
      continue;
     }
     break;
    };
    HEAP32[$3_1 + 344 >> 2] = $19_1;
    HEAP32[$3_1 + 348 >> 2] = $10_1;
    HEAP32[$3_1 + 336 >> 2] = $22_1;
    HEAP32[$3_1 + 340 >> 2] = $12_1;
    HEAP32[$3_1 + 328 >> 2] = $8_1;
    HEAP32[$3_1 + 332 >> 2] = $20_1;
    HEAP32[$3_1 + 320 >> 2] = $14_1;
    HEAP32[$3_1 + 324 >> 2] = $2_1;
    $7($3_1 + 392 | 0, $3_1 + 352 | 0, $3_1 + 320 | 0, $40_1);
    $0_1 = $2_1 >> 31;
    $16_1 = $2_1;
    $38_1 = $0_1;
    $2_1 = $0_1;
    $25_1 = $1_1;
    $0_1 = $11_1 >> 31;
    $23_1 = $0_1;
    $297($3_1 + 304 | 0, $14_1, $16_1, $2_1, $2_1, $1_1, $11_1, $0_1, $0_1);
    $13_1 = $8_1;
    $0_1 = $20_1 >> 31;
    $29_1 = $0_1;
    $1_1 = $0_1;
    $31_1 = $5_1;
    $0_1 = $15_1 >> 31;
    $8_1 = $0_1;
    $297($3_1 + 272 | 0, $13_1, $20_1, $1_1, $1_1, $5_1, $15_1, $0_1, $0_1);
    $0_1 = $12_1 >> 31;
    $5_1 = $0_1;
    $297($3_1 + 288 | 0, $22_1, $12_1, $0_1, $0_1, $25_1, $11_1, $23_1, $23_1);
    $0_1 = $10_1 >> 31;
    $11_1 = $0_1;
    $297($3_1 + 256 | 0, $19_1, $10_1, $0_1, $0_1, $31_1, $15_1, $8_1, $8_1);
    $8_1 = $7_1;
    $0_1 = $30_1 >> 31;
    $7_1 = $0_1;
    $297($3_1 + 240 | 0, $14_1, $16_1, $2_1, $2_1, $8_1, $30_1, $0_1, $0_1);
    $0_1 = $33_1 >> 31;
    $297($3_1 + 208 | 0, $13_1, $20_1, $1_1, $1_1, $17_1, $33_1, $0_1, $0_1);
    $297($3_1 + 224 | 0, $22_1, $12_1, $5_1, $5_1, $8_1, $30_1, $7_1, $7_1);
    $297($3_1 + 192 | 0, $19_1, $10_1, $11_1, $11_1, $17_1, $33_1, $0_1, $0_1);
    $0_1 = $28_1 >> 31;
    $7_1 = $0_1;
    $297($3_1 + 176 | 0, $14_1, $16_1, $2_1, $2_1, $6_1, $28_1, $0_1, $0_1);
    $0_1 = $32_1 >> 31;
    $297($3_1 + 144 | 0, $13_1, $20_1, $1_1, $1_1, $9_1, $32_1, $0_1, $0_1);
    $297($3_1 + 160 | 0, $22_1, $12_1, $5_1, $5_1, $6_1, $28_1, $7_1, $7_1);
    $297($3_1 + 128 | 0, $19_1, $10_1, $11_1, $11_1, $9_1, $32_1, $0_1, $0_1);
    $0_1 = $34_1 >> 31;
    $9_1 = $0_1;
    $297($3_1 + 112 | 0, $14_1, $16_1, $2_1, $2_1, $18_1, $34_1, $0_1, $0_1);
    $0_1 = $26_1 >> 31;
    $297($3_1 + 80 | 0, $13_1, $20_1, $1_1, $1_1, $4_1, $26_1, $0_1, $0_1);
    $297($3_1 + 96 | 0, $22_1, $12_1, $5_1, $5_1, $18_1, $34_1, $9_1, $9_1);
    $297($3_1 - -64 | 0, $19_1, $10_1, $11_1, $11_1, $4_1, $26_1, $0_1, $0_1);
    $0_1 = $24_1 >> 31;
    $2_1 = $0_1;
    $297($3_1 + 48 | 0, $14_1, $16_1, $38_1, $38_1, $27_1, $24_1, $0_1, $0_1);
    $0_1 = $37_1 >> 31;
    $297($3_1 + 16 | 0, $13_1, $20_1, $29_1, $29_1, $39_1, $37_1, $0_1, $0_1);
    $297($3_1 + 32 | 0, $22_1, $12_1, $5_1, $5_1, $27_1, $24_1, $2_1, $2_1);
    $297($3_1, $19_1, $10_1, $11_1, $11_1, $39_1, $37_1, $0_1, $0_1);
    $15_1 = HEAP32[$3_1 + 32 >> 2];
    $5_1 = HEAP32[$3_1 >> 2];
    $1_1 = $15_1 + $5_1 | 0;
    $12_1 = HEAP32[$3_1 + 36 >> 2];
    $0_1 = $12_1 + HEAP32[$3_1 + 4 >> 2] | 0;
    $0_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $5_1 = $1_1;
    $1_1 = $0_1;
    $6_1 = $5_1;
    $11_1 = HEAP32[$3_1 + 96 >> 2];
    $2_1 = HEAP32[$3_1 + 64 >> 2];
    $5_1 = $11_1 + $2_1 | 0;
    $20_1 = HEAP32[$3_1 + 100 >> 2];
    $0_1 = $20_1 + HEAP32[$3_1 + 68 >> 2] | 0;
    $0_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $5_1;
    $5_1 = $0_1;
    $18_1 = $2_1;
    $16_1 = HEAP32[$3_1 + 160 >> 2];
    $4_1 = HEAP32[$3_1 + 128 >> 2];
    $2_1 = $16_1 + $4_1 | 0;
    $19_1 = HEAP32[$3_1 + 164 >> 2];
    $0_1 = $19_1 + HEAP32[$3_1 + 132 >> 2] | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $2_1;
    $2_1 = $0_1;
    $7_1 = $4_1;
    $25_1 = HEAP32[$3_1 + 224 >> 2];
    $9_1 = HEAP32[$3_1 + 192 >> 2];
    $4_1 = $25_1 + $9_1 | 0;
    $10_1 = HEAP32[$3_1 + 228 >> 2];
    $0_1 = $10_1 + HEAP32[$3_1 + 196 >> 2] | 0;
    $0_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $9_1 = $4_1;
    $4_1 = $0_1;
    $8_1 = $9_1;
    $22_1 = HEAP32[$3_1 + 288 >> 2];
    $17_1 = HEAP32[$3_1 + 256 >> 2];
    $9_1 = $22_1 + $17_1 | 0;
    $14_1 = HEAP32[$3_1 + 292 >> 2];
    $0_1 = $14_1 + HEAP32[$3_1 + 260 >> 2] | 0;
    $0_1 = $9_1 >>> 0 < $17_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $27_1 = $0_1 >>> 30 | 0;
    $23_1 = ($0_1 | 0) == ($14_1 | 0) & $9_1 >>> 0 < $22_1 >>> 0 | $0_1 >>> 0 < $14_1 >>> 0;
    $17_1 = $3_1 + 264 | 0;
    $14_1 = HEAP32[$17_1 >> 2];
    $0_1 = $3_1 + 296 | 0;
    $9_1 = $14_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$17_1 + 4 >> 2] | 0;
    $0_1 = $9_1 >>> 0 < $14_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $17_1 = $9_1;
    $9_1 = $23_1 + $9_1 | 0;
    $0_1 = $9_1 >>> 0 < $17_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $17_1 = $9_1;
    $22_1 = $9_1 << 2 | $27_1;
    $14_1 = $22_1 + $8_1 | 0;
    $9_1 = $0_1;
    $0_1 = ($0_1 << 2 | $17_1 >>> 30) + $4_1 | 0;
    $23_1 = $14_1;
    $14_1 = $14_1 >>> 0 < $22_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $27_1 = $14_1 >>> 30 | 0;
    $13_1 = ($4_1 | 0) == ($14_1 | 0) & $8_1 >>> 0 > $23_1 >>> 0 | $4_1 >>> 0 > $14_1 >>> 0;
    $17_1 = ($4_1 | 0) == ($10_1 | 0) & $8_1 >>> 0 < $25_1 >>> 0 | $4_1 >>> 0 < $10_1 >>> 0;
    $8_1 = $3_1 + 200 | 0;
    $10_1 = HEAP32[$8_1 >> 2];
    $0_1 = $3_1 + 232 | 0;
    $4_1 = $10_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$8_1 + 4 >> 2] | 0;
    $0_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $8_1 = $4_1;
    $4_1 = $17_1 + $4_1 | 0;
    $0_1 = $4_1 >>> 0 < $8_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $8_1 = $4_1;
    $4_1 = $0_1;
    $0_1 = $9_1 >> 31;
    $17_1 = $9_1 >> 30;
    $9_1 = $17_1 + $8_1 | 0;
    $0_1 = $0_1 + $4_1 | 0;
    $0_1 = $9_1 >>> 0 < $17_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $9_1 + $13_1 | 0;
    $0_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $9_1 = $4_1;
    $8_1 = $4_1 << 2 | $27_1;
    $17_1 = $8_1 + $7_1 | 0;
    $4_1 = $0_1;
    $0_1 = ($0_1 << 2 | $9_1 >>> 30) + $2_1 | 0;
    $0_1 = $8_1 >>> 0 > $17_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $22_1 = $0_1;
    $10_1 = $0_1 >>> 30 | 0;
    $25_1 = ($2_1 | 0) == ($0_1 | 0) & $7_1 >>> 0 > $17_1 >>> 0 | $2_1 >>> 0 > $0_1 >>> 0;
    $8_1 = ($2_1 | 0) == ($19_1 | 0) & $7_1 >>> 0 < $16_1 >>> 0 | $2_1 >>> 0 < $19_1 >>> 0;
    $7_1 = $3_1 + 136 | 0;
    $19_1 = HEAP32[$7_1 >> 2];
    $0_1 = $3_1 + 168 | 0;
    $2_1 = $19_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$7_1 + 4 >> 2] | 0;
    $0_1 = $2_1 >>> 0 < $19_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $7_1 = $2_1;
    $2_1 = $8_1 + $2_1 | 0;
    $0_1 = $2_1 >>> 0 < $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $7_1 = $2_1;
    $2_1 = $0_1;
    $0_1 = $4_1 >> 31;
    $9_1 = $4_1 >> 30;
    $4_1 = $9_1 + $7_1 | 0;
    $0_1 = $0_1 + $2_1 | 0;
    $0_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $4_1 + $25_1 | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $2_1;
    $7_1 = $2_1 << 2 | $10_1;
    $9_1 = $7_1 + $18_1 | 0;
    $2_1 = $0_1;
    $0_1 = ($0_1 << 2 | $4_1 >>> 30) + $5_1 | 0;
    $0_1 = $7_1 >>> 0 > $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $19_1 = $0_1;
    $8_1 = $0_1 >>> 30 | 0;
    $10_1 = ($5_1 | 0) == ($0_1 | 0) & $9_1 >>> 0 < $18_1 >>> 0 | $5_1 >>> 0 > $0_1 >>> 0;
    $4_1 = ($5_1 | 0) == ($20_1 | 0) & $11_1 >>> 0 > $18_1 >>> 0 | $5_1 >>> 0 < $20_1 >>> 0;
    $18_1 = $3_1 + 72 | 0;
    $20_1 = HEAP32[$18_1 >> 2];
    $0_1 = $3_1 + 104 | 0;
    $5_1 = $20_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$18_1 + 4 >> 2] | 0;
    $0_1 = $5_1 >>> 0 < $20_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $18_1 = $5_1;
    $5_1 = $4_1 + $5_1 | 0;
    $0_1 = $5_1 >>> 0 < $18_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $18_1 = $5_1;
    $5_1 = $0_1;
    $0_1 = $2_1 >> 31;
    $4_1 = $2_1 >> 30;
    $2_1 = $4_1 + $18_1 | 0;
    $0_1 = $0_1 + $5_1 | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $5_1 = $2_1 + $10_1 | 0;
    $0_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $5_1;
    $18_1 = $2_1 << 2 | $8_1;
    $4_1 = $18_1 + $6_1 | 0;
    $5_1 = $0_1;
    $0_1 = ($0_1 << 2 | $2_1 >>> 30) + $1_1 | 0;
    $0_1 = $4_1 >>> 0 < $18_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $18_1 = $4_1;
    $20_1 = $0_1;
    $7_1 = $0_1 >>> 30 | 0;
    $8_1 = ($1_1 | 0) == ($0_1 | 0) & $6_1 >>> 0 > $18_1 >>> 0 | $1_1 >>> 0 > $0_1 >>> 0;
    $2_1 = ($1_1 | 0) == ($12_1 | 0) & $6_1 >>> 0 < $15_1 >>> 0 | $1_1 >>> 0 < $12_1 >>> 0;
    $6_1 = $3_1 + 8 | 0;
    $12_1 = HEAP32[$6_1 >> 2];
    $0_1 = $3_1 + 40 | 0;
    $1_1 = $12_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$6_1 + 4 >> 2] | 0;
    $0_1 = $1_1 >>> 0 < $12_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $6_1 = $1_1;
    $1_1 = $2_1 + $1_1 | 0;
    $0_1 = $1_1 >>> 0 < $6_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $6_1 = $1_1;
    $1_1 = $0_1;
    $0_1 = $5_1 >> 31;
    $2_1 = $5_1 >> 30;
    $5_1 = $2_1 + $6_1 | 0;
    $0_1 = $0_1 + $1_1 | 0;
    $0_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $1_1 = $5_1 + $8_1 | 0;
    $0_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $39_1 = $1_1 << 2 | $7_1;
    $37_1 = $0_1 << 2 | $1_1 >>> 30;
    $32_1 = HEAP32[$3_1 + 48 >> 2];
    $5_1 = HEAP32[$3_1 + 16 >> 2];
    $1_1 = $32_1 + $5_1 | 0;
    $27_1 = HEAP32[$3_1 + 52 >> 2];
    $0_1 = $27_1 + HEAP32[$3_1 + 20 >> 2] | 0;
    $0_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $5_1 = $1_1;
    $1_1 = $0_1;
    $16_1 = $5_1;
    $33_1 = HEAP32[$3_1 + 112 >> 2];
    $2_1 = HEAP32[$3_1 + 80 >> 2];
    $5_1 = $33_1 + $2_1 | 0;
    $13_1 = HEAP32[$3_1 + 116 >> 2];
    $0_1 = $13_1 + HEAP32[$3_1 + 84 >> 2] | 0;
    $0_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $5_1;
    $5_1 = $0_1;
    $11_1 = $2_1;
    $34_1 = HEAP32[$3_1 + 176 >> 2];
    $4_1 = HEAP32[$3_1 + 144 >> 2];
    $2_1 = $34_1 + $4_1 | 0;
    $24_1 = HEAP32[$3_1 + 180 >> 2];
    $0_1 = $24_1 + HEAP32[$3_1 + 148 >> 2] | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $2_1;
    $2_1 = $0_1;
    $15_1 = $4_1;
    $28_1 = HEAP32[$3_1 + 240 >> 2];
    $6_1 = HEAP32[$3_1 + 208 >> 2];
    $4_1 = $28_1 + $6_1 | 0;
    $26_1 = HEAP32[$3_1 + 244 >> 2];
    $0_1 = $26_1 + HEAP32[$3_1 + 212 >> 2] | 0;
    $0_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $6_1 = $4_1;
    $4_1 = $0_1;
    $10_1 = $6_1;
    $25_1 = HEAP32[$3_1 + 304 >> 2];
    $7_1 = HEAP32[$3_1 + 272 >> 2];
    $6_1 = $25_1 + $7_1 | 0;
    $12_1 = HEAP32[$3_1 + 308 >> 2];
    $0_1 = $12_1 + HEAP32[$3_1 + 276 >> 2] | 0;
    $0_1 = $6_1 >>> 0 < $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $30_1 = $0_1 >>> 30 | 0;
    $8_1 = ($0_1 | 0) == ($12_1 | 0) & $6_1 >>> 0 < $25_1 >>> 0 | $0_1 >>> 0 < $12_1 >>> 0;
    $7_1 = $3_1 + 280 | 0;
    $12_1 = HEAP32[$7_1 >> 2];
    $0_1 = $3_1 + 312 | 0;
    $6_1 = $12_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$7_1 + 4 >> 2] | 0;
    $0_1 = $6_1 >>> 0 < $12_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $7_1 = $6_1;
    $6_1 = $8_1 + $6_1 | 0;
    $0_1 = $6_1 >>> 0 < $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $7_1 = $6_1;
    $25_1 = $6_1 << 2 | $30_1;
    $12_1 = $25_1 + $10_1 | 0;
    $6_1 = $0_1;
    $0_1 = ($0_1 << 2 | $7_1 >>> 30) + $4_1 | 0;
    $8_1 = $12_1;
    $12_1 = $8_1 >>> 0 < $25_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $30_1 = $12_1 >>> 30 | 0;
    $31_1 = ($4_1 | 0) == ($12_1 | 0) & $8_1 >>> 0 < $10_1 >>> 0 | $4_1 >>> 0 > $12_1 >>> 0;
    $7_1 = ($4_1 | 0) == ($26_1 | 0) & $10_1 >>> 0 < $28_1 >>> 0 | $4_1 >>> 0 < $26_1 >>> 0;
    $10_1 = $3_1 + 216 | 0;
    $26_1 = HEAP32[$10_1 >> 2];
    $0_1 = $3_1 + 248 | 0;
    $4_1 = $26_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$10_1 + 4 >> 2] | 0;
    $0_1 = $4_1 >>> 0 < $26_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $10_1 = $4_1;
    $4_1 = $7_1 + $4_1 | 0;
    $0_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $10_1 = $4_1;
    $4_1 = $0_1;
    $0_1 = $6_1 >> 31;
    $7_1 = $6_1 >> 30;
    $6_1 = $7_1 + $10_1 | 0;
    $0_1 = $0_1 + $4_1 | 0;
    $0_1 = $6_1 >>> 0 < $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $6_1 + $31_1 | 0;
    $0_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $6_1 = $4_1;
    $10_1 = $4_1 << 2 | $30_1;
    $7_1 = $10_1 + $15_1 | 0;
    $4_1 = $0_1;
    $0_1 = ($0_1 << 2 | $6_1 >>> 30) + $2_1 | 0;
    $0_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $10_1 = $0_1;
    $26_1 = $0_1 >>> 30 | 0;
    $28_1 = ($2_1 | 0) == ($0_1 | 0) & $7_1 >>> 0 < $15_1 >>> 0 | $2_1 >>> 0 > $0_1 >>> 0;
    $6_1 = ($2_1 | 0) == ($24_1 | 0) & $15_1 >>> 0 < $34_1 >>> 0 | $2_1 >>> 0 < $24_1 >>> 0;
    $15_1 = $3_1 + 152 | 0;
    $24_1 = HEAP32[$15_1 >> 2];
    $0_1 = $3_1 + 184 | 0;
    $2_1 = $24_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$15_1 + 4 >> 2] | 0;
    $0_1 = $2_1 >>> 0 < $24_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $15_1 = $2_1;
    $2_1 = $6_1 + $2_1 | 0;
    $0_1 = $2_1 >>> 0 < $15_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $15_1 = $2_1;
    $2_1 = $0_1;
    $0_1 = $4_1 >> 31;
    $6_1 = $4_1 >> 30;
    $4_1 = $6_1 + $15_1 | 0;
    $0_1 = $0_1 + $2_1 | 0;
    $0_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $4_1 + $28_1 | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $4_1 = $2_1;
    $15_1 = $2_1 << 2 | $26_1;
    $6_1 = $15_1 + $11_1 | 0;
    $2_1 = $0_1;
    $0_1 = ($0_1 << 2 | $4_1 >>> 30) + $5_1 | 0;
    $0_1 = $6_1 >>> 0 < $15_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $15_1 = $0_1;
    $24_1 = $0_1 >>> 30 | 0;
    $26_1 = ($5_1 | 0) == ($0_1 | 0) & $6_1 >>> 0 < $11_1 >>> 0 | $5_1 >>> 0 > $0_1 >>> 0;
    $4_1 = ($5_1 | 0) == ($13_1 | 0) & $11_1 >>> 0 < $33_1 >>> 0 | $5_1 >>> 0 < $13_1 >>> 0;
    $11_1 = $3_1 + 88 | 0;
    $13_1 = HEAP32[$11_1 >> 2];
    $0_1 = $3_1 + 120 | 0;
    $5_1 = $13_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$11_1 + 4 >> 2] | 0;
    $0_1 = $5_1 >>> 0 < $13_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $11_1 = $5_1;
    $5_1 = $4_1 + $5_1 | 0;
    $0_1 = $5_1 >>> 0 < $11_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $11_1 = $5_1;
    $5_1 = $0_1;
    $0_1 = $2_1 >> 31;
    $4_1 = $2_1 >> 30;
    $2_1 = $4_1 + $11_1 | 0;
    $0_1 = $0_1 + $5_1 | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $5_1 = $2_1 + $26_1 | 0;
    $0_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = $0_1;
    $4_1 = $5_1;
    $0_1 = $0_1 << 2 | $4_1 >>> 30;
    $11_1 = $4_1 << 2 | $24_1;
    $5_1 = $11_1 + $16_1 | 0;
    $0_1 = $0_1 + $1_1 | 0;
    $0_1 = $5_1 >>> 0 < $11_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $11_1 = $0_1;
    $13_1 = $0_1 >>> 30 | 0;
    $24_1 = ($1_1 | 0) == ($0_1 | 0) & $5_1 >>> 0 < $16_1 >>> 0 | $1_1 >>> 0 > $0_1 >>> 0;
    $4_1 = ($1_1 | 0) == ($27_1 | 0) & $16_1 >>> 0 < $32_1 >>> 0 | $1_1 >>> 0 < $27_1 >>> 0;
    $16_1 = $3_1 + 24 | 0;
    $27_1 = HEAP32[$16_1 >> 2];
    $0_1 = $3_1 + 56 | 0;
    $1_1 = $27_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$16_1 + 4 >> 2] | 0;
    $0_1 = $1_1 >>> 0 < $27_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $16_1 = $1_1;
    $1_1 = $4_1 + $1_1 | 0;
    $0_1 = $1_1 >>> 0 < $16_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $16_1 = $1_1;
    $1_1 = $0_1;
    $0_1 = $2_1 >> 31;
    $4_1 = $2_1 >> 30;
    $2_1 = $4_1 + $16_1 | 0;
    $0_1 = $0_1 + $1_1 | 0;
    $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $1_1 = $2_1 + $24_1 | 0;
    $0_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $27_1 = $1_1 << 2 | $13_1;
    $24_1 = $0_1 << 2 | $1_1 >>> 30;
    $4_1 = $18_1;
    $26_1 = $20_1 & 1073741823;
    $18_1 = $5_1;
    $34_1 = $11_1 & 1073741823;
    $32_1 = $19_1 & 1073741823;
    $28_1 = $15_1 & 1073741823;
    $33_1 = $22_1 & 1073741823;
    $30_1 = $10_1 & 1073741823;
    $5_1 = $23_1;
    $15_1 = $14_1 & 1073741823;
    $1_1 = $8_1;
    $11_1 = $12_1 & 1073741823;
    $43_1 = $43_1 + 1 | 0;
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 392 | 0;
  $106($0_1, $24_1, $40_1);
  $91($44_1, $0_1, 40);
  global$0 = $3_1 + 432 | 0;
 }
 
 function $11($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 2080 | 0;
  global$0 = $5_1;
  $288($5_1 + 56 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 60 >> 2];
  HEAP32[$5_1 + 68 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 56 >> 2];
  HEAP32[$5_1 + 64 >> 2] = $2_1;
  $288($5_1 + 48 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$5_1 + 52 >> 2];
  HEAP32[$5_1 + 76 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 48 >> 2];
  HEAP32[$5_1 + 72 >> 2] = $4_1;
  $67($5_1 + 80 | 0, $2_1, $1_1);
  label$1 : {
   if (HEAP32[$5_1 + 80 >> 2]) {
    break label$1
   }
   $2_1 = $5_1 + 100 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 128 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $6_1;
   $2_1 = $5_1 + 92 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 120 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $6_1;
   $1_1 = HEAP32[$5_1 + 88 >> 2];
   HEAP32[$5_1 + 112 >> 2] = HEAP32[$5_1 + 84 >> 2];
   HEAP32[$5_1 + 116 >> 2] = $1_1;
   HEAP32[$5_1 + 140 >> 2] = $3_1;
   HEAP32[$5_1 + 136 >> 2] = $4_1;
   HEAP32[$5_1 + 748 >> 2] = 2;
   HEAP32[$5_1 + 744 >> 2] = $5_1 + 136;
   $201($5_1 + 40 | 0, 16, 0);
   HEAP32[$5_1 + 152 >> 2] = 0;
   $1_1 = HEAP32[$5_1 + 44 >> 2];
   HEAP32[$5_1 + 144 >> 2] = HEAP32[$5_1 + 40 >> 2];
   HEAP32[$5_1 + 148 >> 2] = $1_1;
   $7_1 = $5_1 + 1324 | 0;
   HEAP32[$7_1 >> 2] = 1;
   HEAP32[$5_1 + 1308 >> 2] = 1;
   HEAP32[$5_1 + 1312 >> 2] = 0;
   HEAP32[$5_1 + 1304 >> 2] = 1062248;
   HEAP32[$5_1 + 1320 >> 2] = $5_1 + 744;
   label$2 : {
    if (!$241($5_1 + 144 | 0, $5_1 + 1304 | 0)) {
     $9_1 = $5_1 + 760 | 0;
     HEAP8[$9_1 | 0] = 0;
     HEAP32[$5_1 + 772 >> 2] = 0;
     $1_1 = $5_1 + 768 | 0;
     HEAP8[$1_1 | 0] = 0;
     HEAP32[$5_1 + 764 >> 2] = 0;
     HEAP32[$5_1 + 780 >> 2] = 0;
     $2_1 = $5_1 + 776 | 0;
     HEAP8[$2_1 | 0] = 0;
     HEAP32[$5_1 + 788 >> 2] = 0;
     $3_1 = $5_1 + 784 | 0;
     HEAP8[$3_1 | 0] = 0;
     HEAP32[$5_1 + 164 >> 2] = 0;
     HEAP32[$5_1 + 168 >> 2] = 0;
     HEAP32[$5_1 + 160 >> 2] = HEAP32[262259];
     HEAP32[$5_1 + 752 >> 2] = 0;
     HEAP32[$5_1 + 756 >> 2] = 0;
     HEAP8[$5_1 + 800 | 0] = 1;
     $4_1 = HEAP32[$5_1 + 144 >> 2];
     $10_1 = $4_1 + HEAP32[$5_1 + 152 >> 2] | 0;
     HEAP32[$5_1 + 748 >> 2] = $10_1;
     HEAP32[$5_1 + 744 >> 2] = $4_1;
     HEAP32[$5_1 + 792 >> 2] = 0;
     HEAP32[$5_1 + 796 >> 2] = 0;
     $8_1 = HEAP32[$2_1 + 4 >> 2];
     $6_1 = $5_1 + 184 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $8_1;
     $8_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $5_1 + 192 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $8_1;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$5_1 + 176 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 180 >> 2] = $3_1;
     $1_1 = HEAP32[$9_1 >> 2];
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$5_1 + 1320 >> 2] = $1_1;
     HEAP32[$5_1 + 1312 >> 2] = 0;
     HEAP32[$5_1 + 1316 >> 2] = 0;
     HEAP32[$5_1 + 1308 >> 2] = $10_1;
     HEAP32[$5_1 + 1304 >> 2] = $4_1;
     $3_1 = HEAP32[$5_1 + 180 >> 2];
     $1_1 = $5_1 + 1328 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 176 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$6_1 + 4 >> 2];
     $1_1 = $5_1 + 1336 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $5_1 + 1344 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $3_1;
     HEAP8[$5_1 + 1360 | 0] = 1;
     HEAP32[$5_1 + 1352 >> 2] = 0;
     HEAP32[$5_1 + 1356 >> 2] = 0;
     $1_1 = $5_1 + 1312 | 0;
     $2_1 = $5_1 + 752 | 0;
     while (1) {
      $3_1 = $26($5_1 + 1304 | 0);
      if (($3_1 | 0) == 1114112) {
       break label$2
      }
      $138($5_1 + 160 | 0, $3_1);
      continue;
     };
    }
    abort();
   }
   $375($1_1);
   $375($2_1);
   $4_1 = HEAP32[$5_1 + 112 >> 2];
   $12_1 = HEAP32[$5_1 + 160 >> 2];
   $13_1 = HEAP32[$5_1 + 168 >> 2];
   $1_1 = HEAP32[$5_1 + 120 >> 2];
   $201($5_1 + 32 | 0, 64, 1);
   $14_1 = HEAP32[$5_1 + 36 >> 2];
   $10_1 = HEAP32[$5_1 + 32 >> 2];
   $2_1 = $5_1 + 744 | 0;
   $175($2_1);
   $3_1 = $5_1 + 176 | 0;
   $208($3_1);
   $6_1 = $5_1 + 1520 | 0;
   $175($6_1);
   $91($5_1 + 1304 | 0, $2_1, 216);
   $2_1 = $91($5_1 + 1736 | 0, $3_1, 128);
   $209($5_1 + 1864 | 0);
   label$5 : {
    if ($1_1 >>> 0 >= 129) {
     $3_1 = $5_1 + 176 | 0;
     $175($3_1);
     $409($3_1, $4_1, $1_1);
     $1_1 = $5_1 + 744 | 0;
     $91($1_1, $3_1, 216);
     $54($5_1 + 1992 | 0, $1_1);
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) == 64) {
       break label$5
      }
      $1_1 = $2_1 + $3_1 | 0;
      $4_1 = $1_1;
      $7_1 = HEAPU8[$1_1 | 0];
      $1_1 = HEAPU8[($5_1 + 1992 | 0) + $3_1 | 0];
      HEAP8[$4_1 | 0] = $7_1 ^ $1_1;
      $4_1 = ($5_1 + 1864 | 0) + $3_1 | 0;
      HEAP8[$4_1 | 0] = $1_1 ^ HEAPU8[$4_1 | 0];
      $3_1 = $3_1 + 1 | 0;
      continue;
     };
    }
    $3_1 = 0;
    while (1) {
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$5
     }
     if (($3_1 | 0) == 128) {
      break label$1
     }
     $7_1 = $2_1 + $3_1 | 0;
     $9_1 = $7_1;
     $8_1 = HEAPU8[$7_1 | 0];
     $7_1 = $3_1 + $4_1 | 0;
     HEAP8[$9_1 | 0] = $8_1 ^ HEAPU8[$7_1 | 0];
     $9_1 = ($5_1 + 1864 | 0) + $3_1 | 0;
     HEAP8[$9_1 | 0] = HEAPU8[$9_1 | 0] ^ HEAPU8[$7_1 | 0];
     $3_1 = $3_1 + 1 | 0;
     continue;
    };
   }
   $1_1 = $5_1 + 1304 | 0;
   $410($1_1, $2_1);
   $410($6_1, $5_1 + 1864 | 0);
   $91($5_1 + 176 | 0, $1_1, 560);
   $6_1 = $10_1;
   $8_1 = 64;
   while (1) {
    if (($11_1 | 0) != 1) {
     $7_1 = $8_1 >>> 0 < 64 ? $8_1 : 64;
     $9_1 = $7_1 + $6_1 | 0;
     $3_1 = $7_1;
     $4_1 = $6_1;
     while (1) {
      if ($3_1) {
       HEAP8[$4_1 | 0] = 0;
       $3_1 = $3_1 - 1 | 0;
       $4_1 = $4_1 + 1 | 0;
       continue;
      } else {
       label$14 : {
        $1_1 = $5_1 + 744 | 0;
        $344($1_1, $5_1 + 176 | 0);
        $409($1_1, $12_1, $13_1);
        $11_1 = $11_1 + 1 | 0;
        HEAP32[$5_1 + 740 >> 2] = $11_1 << 24 | $11_1 << 8 & 16711680 | ($11_1 >>> 8 & 65280 | $11_1 >>> 24);
        $409($1_1, $5_1 + 740 | 0, 4);
        $2_1 = $5_1 + 1304 | 0;
        $91($2_1, $1_1, 560);
        $1_1 = $5_1 + 1864 | 0;
        $244($1_1, $2_1);
        $3_1 = $6_1;
        $4_1 = $7_1;
        while (1) {
         if (!$4_1) {
          break label$14
         }
         HEAP8[$3_1 | 0] = HEAPU8[$3_1 | 0] ^ HEAPU8[$1_1 | 0];
         $3_1 = $3_1 + 1 | 0;
         $4_1 = $4_1 - 1 | 0;
         $1_1 = $1_1 + 1 | 0;
         continue;
        };
       }
      }
      break;
     };
     $91($5_1 + 1992 | 0, $5_1 + 1864 | 0, 64);
     $2_1 = 1;
     while (1) {
      if (($2_1 | 0) != 2048) {
       $3_1 = $5_1 + 744 | 0;
       $344($3_1, $5_1 + 176 | 0);
       $1_1 = $5_1 + 1992 | 0;
       $409($3_1, $1_1, 64);
       $4_1 = $5_1 + 1304 | 0;
       $91($4_1, $3_1, 560);
       $244($1_1, $4_1);
       $3_1 = $6_1;
       $4_1 = $7_1;
       while (1) {
        if ($4_1) {
         HEAP8[$3_1 | 0] = HEAPU8[$3_1 | 0] ^ HEAPU8[$1_1 | 0];
         $3_1 = $3_1 + 1 | 0;
         $4_1 = $4_1 - 1 | 0;
         $1_1 = $1_1 + 1 | 0;
         continue;
        }
        break;
       };
       $2_1 = $2_1 + 1 | 0;
       continue;
      }
      break;
     };
     $8_1 = $8_1 - $7_1 | 0;
     $6_1 = $9_1;
     continue;
    }
    break;
   };
   HEAP32[$5_1 + 1312 >> 2] = 64;
   HEAP32[$5_1 + 1304 >> 2] = $10_1;
   HEAP32[$5_1 + 1308 >> 2] = $14_1;
   $374($5_1 + 160 | 0);
   $374($5_1 + 144 | 0);
   $302($5_1 + 24 | 0, $10_1, 64, 32);
   $2_1 = HEAP32[$5_1 + 24 >> 2];
   $1_1 = HEAP32[$5_1 + 28 >> 2];
   $201($5_1 + 16 | 0, $1_1, 0);
   $3_1 = HEAP32[$5_1 + 20 >> 2];
   $2_1 = $91(HEAP32[$5_1 + 16 >> 2], $2_1, $1_1);
   $4_1 = $5_1 + 1304 | 0;
   $374($4_1);
   $390($5_1 + 112 | 0);
   $392($5_1 + 72 | 0);
   $392($5_1 - -64 | 0);
   HEAP32[$5_1 + 1312 >> 2] = $1_1;
   HEAP32[$5_1 + 1308 >> 2] = $3_1;
   HEAP32[$5_1 + 1304 >> 2] = $2_1;
   $271($5_1 + 8 | 0, $4_1);
   $1_1 = HEAP32[$5_1 + 12 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   global$0 = $5_1 + 2080 | 0;
   return;
  }
  abort();
 }
 
 function $12($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0;
  $6_1 = global$0 - 1344 | 0;
  global$0 = $6_1;
  $288($6_1 + 32 | 0, $0_1, $1_1);
  $1_1 = HEAP32[$6_1 + 36 >> 2];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  $0_1 = HEAP32[$6_1 + 32 >> 2];
  HEAP32[$6_1 + 40 >> 2] = $0_1;
  $288($6_1 + 24 | 0, $2_1, $3_1);
  $21_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 52 >> 2] = $21_1;
  $22_1 = HEAP32[$6_1 + 24 >> 2];
  HEAP32[$6_1 + 48 >> 2] = $22_1;
  $288($6_1 + 16 | 0, $4_1, $5_1);
  $23_1 = HEAP32[$6_1 + 20 >> 2];
  HEAP32[$6_1 + 60 >> 2] = $23_1;
  $24_1 = HEAP32[$6_1 + 16 >> 2];
  HEAP32[$6_1 + 56 >> 2] = $24_1;
  $2_1 = 64;
  $5_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != 64) {
     $3_1 = 3;
     $14_1 = 1048823;
     $15_1 = 9;
     $16_1 = 1048832;
     $17_1 = 37;
     $0_1 = 0;
     break label$2;
    }
    $2_1 = $6_1 + 338 | 0;
    HEAP8[$2_1 | 0] = 0;
    HEAP16[$6_1 + 336 >> 1] = 0;
    $302($6_1 + 8 | 0, $0_1, 64, 32);
    if (HEAP32[$6_1 + 12 >> 2] != 32) {
     break label$1
    }
    $4_1 = HEAP32[$6_1 + 8 >> 2];
    HEAP8[$2_1 | 0] = HEAPU8[$4_1 + 2 | 0];
    HEAP16[$6_1 + 336 >> 1] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
    $19_1 = HEAP8[$0_1 + 63 | 0];
    if (($19_1 | 0) >= 0) {
     $3_1 = 4;
     $0_1 = 0;
     break label$2;
    }
    $7_1 = $0_1 + 36 | 0;
    $13_1 = HEAPU8[$0_1 + 32 | 0] | HEAPU8[$0_1 + 33 | 0] << 8 | HEAPU8[$0_1 + 34 | 0] << 16;
    $18_1 = HEAPU8[$4_1 + 31 | 0];
    $25_1 = HEAPU8[$4_1 + 27 | 0] | HEAPU8[$4_1 + 28 | 0] << 8 | (HEAPU8[$4_1 + 29 | 0] << 16 | HEAPU8[$4_1 + 30 | 0] << 24);
    $12_1 = HEAPU8[$0_1 + 59 | 0] | HEAPU8[$0_1 + 60 | 0] << 8 | (HEAPU8[$0_1 + 61 | 0] << 16 | HEAPU8[$0_1 + 62 | 0] << 24);
    $8_1 = HEAPU8[$0_1 + 55 | 0] | HEAPU8[$0_1 + 56 | 0] << 8 | (HEAPU8[$0_1 + 57 | 0] << 16 | HEAPU8[$0_1 + 58 | 0] << 24);
    $9_1 = HEAPU8[$0_1 + 51 | 0] | HEAPU8[$0_1 + 52 | 0] << 8 | (HEAPU8[$0_1 + 53 | 0] << 16 | HEAPU8[$0_1 + 54 | 0] << 24);
    $10_1 = HEAPU8[$0_1 + 47 | 0] | HEAPU8[$0_1 + 48 | 0] << 8 | (HEAPU8[$0_1 + 49 | 0] << 16 | HEAPU8[$0_1 + 50 | 0] << 24);
    $11_1 = HEAPU8[$0_1 + 43 | 0] | HEAPU8[$0_1 + 44 | 0] << 8 | (HEAPU8[$0_1 + 45 | 0] << 16 | HEAPU8[$0_1 + 46 | 0] << 24);
    $1_1 = HEAPU8[$0_1 + 39 | 0] | HEAPU8[$0_1 + 40 | 0] << 8 | (HEAPU8[$0_1 + 41 | 0] << 16 | HEAPU8[$0_1 + 42 | 0] << 24);
    $20_1 = HEAPU8[$0_1 + 35 | 0];
    $2_1 = HEAPU8[$4_1 + 23 | 0] | HEAPU8[$4_1 + 24 | 0] << 8 | (HEAPU8[$4_1 + 25 | 0] << 16 | HEAPU8[$4_1 + 26 | 0] << 24);
    $17_1 = HEAPU8[$4_1 + 19 | 0] | HEAPU8[$4_1 + 20 | 0] << 8 | (HEAPU8[$4_1 + 21 | 0] << 16 | HEAPU8[$4_1 + 22 | 0] << 24);
    $16_1 = HEAPU8[$4_1 + 15 | 0] | HEAPU8[$4_1 + 16 | 0] << 8 | (HEAPU8[$4_1 + 17 | 0] << 16 | HEAPU8[$4_1 + 18 | 0] << 24);
    $15_1 = HEAPU8[$4_1 + 11 | 0] | HEAPU8[$4_1 + 12 | 0] << 8 | (HEAPU8[$4_1 + 13 | 0] << 16 | HEAPU8[$4_1 + 14 | 0] << 24);
    $14_1 = HEAPU8[$4_1 + 7 | 0] | HEAPU8[$4_1 + 8 | 0] << 8 | (HEAPU8[$4_1 + 9 | 0] << 16 | HEAPU8[$4_1 + 10 | 0] << 24);
    $3_1 = HEAPU8[$4_1 + 3 | 0];
    HEAP8[$6_1 + 66 | 0] = HEAPU8[$4_1 + 6 | 0];
    HEAP16[$6_1 + 64 >> 1] = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8;
    $4_1 = $19_1 & 127;
    label$5 : {
     if ($4_1 >>> 0 <= 15) {
      HEAP8[$6_1 + 738 | 0] = HEAPU8[$7_1 + 2 | 0];
      HEAP16[$6_1 + 736 >> 1] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8;
      $0_1 = 0;
      break label$5;
     }
     HEAP8[$6_1 + 742 | 0] = HEAPU8[$7_1 + 2 | 0];
     HEAP8[$6_1 + 739 | 0] = $20_1;
     HEAP8[$6_1 + 767 | 0] = $4_1;
     HEAP8[$6_1 + 763 | 0] = $12_1;
     HEAP8[$6_1 + 764 | 0] = $12_1 >>> 8;
     HEAP8[$6_1 + 765 | 0] = $12_1 >>> 16;
     HEAP8[$6_1 + 766 | 0] = $12_1 >>> 24;
     HEAP8[$6_1 + 759 | 0] = $8_1;
     HEAP8[$6_1 + 760 | 0] = $8_1 >>> 8;
     HEAP8[$6_1 + 761 | 0] = $8_1 >>> 16;
     HEAP8[$6_1 + 762 | 0] = $8_1 >>> 24;
     HEAP8[$6_1 + 755 | 0] = $9_1;
     HEAP8[$6_1 + 756 | 0] = $9_1 >>> 8;
     HEAP8[$6_1 + 757 | 0] = $9_1 >>> 16;
     HEAP8[$6_1 + 758 | 0] = $9_1 >>> 24;
     HEAP8[$6_1 + 751 | 0] = $10_1;
     HEAP8[$6_1 + 752 | 0] = $10_1 >>> 8;
     HEAP8[$6_1 + 753 | 0] = $10_1 >>> 16;
     HEAP8[$6_1 + 754 | 0] = $10_1 >>> 24;
     HEAP8[$6_1 + 747 | 0] = $11_1;
     HEAP8[$6_1 + 748 | 0] = $11_1 >>> 8;
     HEAP8[$6_1 + 749 | 0] = $11_1 >>> 16;
     HEAP8[$6_1 + 750 | 0] = $11_1 >>> 24;
     HEAP8[$6_1 + 743 | 0] = $1_1;
     HEAP8[$6_1 + 744 | 0] = $1_1 >>> 8;
     HEAP8[$6_1 + 745 | 0] = $1_1 >>> 16;
     HEAP8[$6_1 + 746 | 0] = $1_1 >>> 24;
     HEAP16[$6_1 + 740 >> 1] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8;
     HEAP16[$6_1 + 736 >> 1] = $13_1;
     HEAP8[$6_1 + 738 | 0] = $13_1 >>> 16;
     $4($6_1 + 944 | 0, $6_1 + 736 | 0);
     $0_1 = 1;
     if (HEAPU8[$6_1 + 944 | 0] != 1) {
      $20_1 = 2;
      break label$5;
     }
     HEAP8[$6_1 + 738 | 0] = HEAPU8[$6_1 + 951 | 0];
     HEAP16[$6_1 + 736 >> 1] = HEAPU8[$6_1 + 949 | 0] | HEAPU8[$6_1 + 950 | 0] << 8;
     $13_1 = HEAPU8[$6_1 + 945 | 0] | HEAPU8[$6_1 + 946 | 0] << 8 | HEAPU8[$6_1 + 947 | 0] << 16;
     $4_1 = HEAPU8[$6_1 + 976 | 0];
     $12_1 = HEAP32[$6_1 + 972 >> 2];
     $8_1 = HEAP32[$6_1 + 968 >> 2];
     $9_1 = HEAP32[$6_1 + 964 >> 2];
     $10_1 = HEAP32[$6_1 + 960 >> 2];
     $11_1 = HEAP32[$6_1 + 956 >> 2];
     $1_1 = HEAP32[$6_1 + 952 >> 2];
     $0_1 = 0;
     $20_1 = HEAPU8[$6_1 + 948 | 0];
    }
    $7_1 = $6_1 + 530 | 0;
    $19_1 = $6_1 + 738 | 0;
    HEAP8[$7_1 | 0] = HEAPU8[$19_1 | 0];
    HEAP16[$6_1 + 528 >> 1] = HEAPU16[$6_1 + 736 >> 1];
    if (!$0_1) {
     HEAP8[$6_1 + 274 | 0] = HEAPU8[$7_1 | 0];
     HEAP8[$19_1 | 0] = HEAPU8[$6_1 + 338 | 0];
     HEAP8[$6_1 + 1186 | 0] = HEAPU8[$6_1 + 66 | 0];
     HEAP16[$6_1 + 272 >> 1] = HEAPU16[$6_1 + 528 >> 1];
     HEAP16[$6_1 + 736 >> 1] = HEAPU16[$6_1 + 336 >> 1];
     HEAP16[$6_1 + 1184 >> 1] = HEAPU16[$6_1 + 64 >> 1];
     $0_1 = $18_1;
     $18_1 = $25_1;
     $26_1 = $0_1 & 255 | $13_1 << 8;
     $0_1 = 1;
     break label$2;
    }
    HEAP8[$6_1 + 1186 | 0] = HEAPU8[$7_1 | 0];
    HEAP16[$6_1 + 1184 >> 1] = HEAPU16[$6_1 + 528 >> 1];
    $2_1 = $8_1;
    $17_1 = $9_1;
    $16_1 = $10_1;
    $15_1 = $11_1;
    $14_1 = $1_1;
    $3_1 = $20_1;
    $0_1 = 0;
   }
   $13_1 = $6_1 + 944 | 0;
   $159($13_1, $24_1, $23_1);
   HEAP8[$6_1 + 270 | 0] = HEAPU8[$6_1 + 738 | 0];
   HEAP8[$6_1 + 266 | 0] = HEAPU8[$6_1 + 1186 | 0];
   HEAP8[$6_1 + 262 | 0] = HEAPU8[$6_1 + 274 | 0];
   HEAP16[$6_1 + 268 >> 1] = HEAPU16[$6_1 + 736 >> 1];
   HEAP16[$6_1 + 264 >> 1] = HEAPU16[$6_1 + 1184 >> 1];
   HEAP16[$6_1 + 260 >> 1] = HEAPU16[$6_1 + 272 >> 1];
   $7_1 = HEAP32[$6_1 + 944 >> 2];
   $91($6_1 - -64 | 0, $13_1 | 4, 196);
   if (!($7_1 | !$0_1)) {
    HEAP8[$6_1 + 307 | 0] = $20_1;
    HEAP16[$6_1 + 308 >> 1] = HEAPU16[$6_1 + 260 >> 1];
    HEAP8[$6_1 + 310 | 0] = HEAPU8[$6_1 + 262 | 0];
    HEAP16[$6_1 + 272 >> 1] = HEAPU16[$6_1 + 268 >> 1];
    HEAP8[$6_1 + 275 | 0] = $3_1;
    HEAP16[$6_1 + 276 >> 1] = HEAPU16[$6_1 + 264 >> 1];
    HEAP8[$6_1 + 299 | 0] = $18_1;
    HEAP8[$6_1 + 300 | 0] = $18_1 >>> 8;
    HEAP8[$6_1 + 301 | 0] = $18_1 >>> 16;
    HEAP8[$6_1 + 302 | 0] = $18_1 >>> 24;
    $0_1 = $26_1;
    HEAP8[$6_1 + 303 | 0] = $0_1;
    HEAP8[$6_1 + 304 | 0] = $0_1 >>> 8;
    HEAP8[$6_1 + 305 | 0] = $0_1 >>> 16;
    HEAP8[$6_1 + 306 | 0] = $0_1 >>> 24;
    HEAP8[$6_1 + 295 | 0] = $2_1;
    HEAP8[$6_1 + 296 | 0] = $2_1 >>> 8;
    HEAP8[$6_1 + 297 | 0] = $2_1 >>> 16;
    HEAP8[$6_1 + 298 | 0] = $2_1 >>> 24;
    HEAP8[$6_1 + 291 | 0] = $17_1;
    HEAP8[$6_1 + 292 | 0] = $17_1 >>> 8;
    HEAP8[$6_1 + 293 | 0] = $17_1 >>> 16;
    HEAP8[$6_1 + 294 | 0] = $17_1 >>> 24;
    HEAP8[$6_1 + 287 | 0] = $16_1;
    HEAP8[$6_1 + 288 | 0] = $16_1 >>> 8;
    HEAP8[$6_1 + 289 | 0] = $16_1 >>> 16;
    HEAP8[$6_1 + 290 | 0] = $16_1 >>> 24;
    HEAP8[$6_1 + 283 | 0] = $15_1;
    HEAP8[$6_1 + 284 | 0] = $15_1 >>> 8;
    HEAP8[$6_1 + 285 | 0] = $15_1 >>> 16;
    HEAP8[$6_1 + 286 | 0] = $15_1 >>> 24;
    HEAP8[$6_1 + 279 | 0] = $14_1;
    HEAP8[$6_1 + 280 | 0] = $14_1 >>> 8;
    HEAP8[$6_1 + 281 | 0] = $14_1 >>> 16;
    HEAP8[$6_1 + 282 | 0] = $14_1 >>> 24;
    HEAP8[$6_1 + 274 | 0] = HEAPU8[$6_1 + 270 | 0];
    HEAP8[$6_1 + 278 | 0] = HEAPU8[$6_1 + 266 | 0];
    HEAP8[$6_1 + 335 | 0] = $4_1;
    $0_1 = $6_1 + 331 | 0;
    HEAP8[$0_1 | 0] = $12_1;
    HEAP8[$0_1 + 1 | 0] = $12_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $12_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $12_1 >>> 24;
    $0_1 = $6_1 + 327 | 0;
    HEAP8[$0_1 | 0] = $8_1;
    HEAP8[$0_1 + 1 | 0] = $8_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $8_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $8_1 >>> 24;
    $0_1 = $6_1 + 323 | 0;
    HEAP8[$0_1 | 0] = $9_1;
    HEAP8[$0_1 + 1 | 0] = $9_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $9_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $9_1 >>> 24;
    $0_1 = $6_1 + 319 | 0;
    HEAP8[$0_1 | 0] = $10_1;
    HEAP8[$0_1 + 1 | 0] = $10_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $10_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $10_1 >>> 24;
    $0_1 = $6_1 + 315 | 0;
    HEAP8[$0_1 | 0] = $11_1;
    HEAP8[$0_1 + 1 | 0] = $11_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $11_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $11_1 >>> 24;
    $0_1 = $6_1 + 311 | 0;
    HEAP8[$0_1 | 0] = $1_1;
    HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
    $3_1 = $6_1 + 336 | 0;
    $91($3_1, $6_1 + 68 | 0, 192);
    $0_1 = $6_1 + 944 | 0;
    $181($0_1, 1105533, 14);
    $277($0_1, 1217612, 0, 1048983, 9);
    $1_1 = $6_1 + 736 | 0;
    $91($1_1, $0_1, 208);
    $2_1 = $6_1 + 528 | 0;
    $91($2_1, $1_1, 200);
    HEAP8[$6_1 + 730 | 0] = HEAPU8[$6_1 + 938 | 0];
    HEAP16[$6_1 + 728 >> 1] = HEAPU16[$6_1 + 936 >> 1];
    $277($2_1, 1105547, 10, $22_1, $21_1);
    $336($1_1);
    $91($0_1, $2_1, 208);
    $395($0_1, 1105557, 11);
    $389($0_1, 1105568, 7, $6_1 + 496 | 0);
    $2_1 = $6_1 + 272 | 0;
    $389($0_1, 1105582, 6, $2_1);
    $4_1 = $6_1 + 1152 | 0;
    $322($4_1, $0_1, 1105588, 6);
    $206($1_1, $3_1);
    $3_1 = $6_1 + 1184 | 0;
    $27($3_1, $4_1, $1_1, $6_1 + 304 | 0);
    $65($1_1, $3_1);
    $1_1 = $285($1_1, $2_1, 32);
    $336($0_1);
    $5_1 = !$1_1;
   }
   $392($6_1 + 56 | 0);
   $392($6_1 + 48 | 0);
   $392($6_1 + 40 | 0);
   global$0 = $6_1 + 1344 | 0;
   return $5_1 | 0;
  }
  abort();
 }
 
 function $13($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0;
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[$0_1 + 52 >> 2];
  $3_1 = $2_1 - -64 | 0;
  label$1 : {
   if (HEAP32[$0_1 + 8 >> 2] != 1) {
    $305($2_1 + 72 | 0, $0_1 + 16 | 0, 4, HEAP32[$0_1 + 12 >> 2]);
    $5_1 = HEAP32[$2_1 + 76 >> 2];
    $9_1 = HEAP32[$2_1 + 72 >> 2];
    break label$1;
   }
   $5_1 = HEAP32[$0_1 + 20 >> 2];
   $9_1 = HEAP32[$0_1 + 12 >> 2];
  }
  $333($3_1, $9_1, $5_1, $7_1);
  $12_1 = HEAP32[$2_1 + 64 >> 2];
  label$3 : {
   $9_1 = HEAP32[$2_1 + 68 >> 2];
   if ($9_1 >>> 0 >= 21) {
    $218($2_1 + 56 | 0, $9_1 >>> 1 | 0);
    $3_1 = HEAP32[$2_1 + 60 >> 2];
    HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 56 >> 2];
    HEAP32[$2_1 + 84 >> 2] = $3_1;
    HEAP32[$2_1 + 88 >> 2] = 0;
    HEAP32[$2_1 + 100 >> 2] = 0;
    HEAP32[$2_1 + 104 >> 2] = 0;
    $5_1 = HEAP32[304401];
    HEAP32[$2_1 + 96 >> 2] = $5_1;
    $19_1 = $12_1 - 24 | 0;
    $3_1 = $9_1;
    while (1) {
     if (!$3_1) {
      $3_1 = HEAP32[$2_1 + 100 >> 2];
      if ($3_1) {
       $379($5_1, $3_1 << 3, 4)
      }
      $347($2_1 + 80 | 0);
      break label$3;
     }
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         $7_1 = $3_1 - 1 | 0;
         if (!$7_1) {
          break label$11
         }
         $6_1 = $3_1 << 3;
         $1_1 = HEAPU8[($6_1 + $12_1 | 0) - 16 | 0];
         if ($1_1 >>> 0 <= HEAPU8[($7_1 << 3) + $12_1 | 0]) {
          $5_1 = $6_1 + $19_1 | 0;
          while (1) {
           if (($7_1 | 0) == 1) {
            break label$11
           }
           $7_1 = $7_1 - 1 | 0;
           $6_1 = $1_1 & 255;
           $1_1 = HEAPU8[$5_1 | 0];
           $5_1 = $5_1 - 8 | 0;
           if ($1_1 >>> 0 <= $6_1 >>> 0) {
            continue
           }
           break;
          };
          break label$10;
         }
         $5_1 = $6_1 + $19_1 | 0;
         while (1) {
          label$15 : {
           if (($7_1 | 0) == 1) {
            $7_1 = 0;
            break label$15;
           }
           $7_1 = $7_1 - 1 | 0;
           $6_1 = $1_1 & 255;
           $1_1 = HEAPU8[$5_1 | 0];
           $5_1 = $5_1 - 8 | 0;
           if ($1_1 >>> 0 > $6_1 >>> 0) {
            continue
           }
          }
          break;
         };
         $298($2_1 + 48 | 0, $7_1, $3_1, $12_1, $9_1);
         $8_1 = HEAP32[$2_1 + 48 >> 2];
         $1_1 = HEAP32[$2_1 + 52 >> 2];
         $6_1 = $1_1 >>> 1 | 0;
         $305($2_1 + 40 | 0, $8_1, $6_1, $6_1);
         $10_1 = HEAP32[$2_1 + 44 >> 2];
         $4_1 = HEAP32[$2_1 + 40 >> 2];
         $1_1 = $8_1 + ($1_1 << 3) | 0;
         $8_1 = $6_1 << 3;
         $305($2_1 + 32 | 0, $1_1 - $8_1 | 0, $6_1, $6_1);
         $5_1 = $6_1 - 1 | 0;
         $1_1 = ($8_1 + HEAP32[$2_1 + 32 >> 2] | 0) - 8 | 0;
         $17_1 = HEAP32[$2_1 + 36 >> 2];
         while (1) {
          if (($5_1 | 0) == -1) {
           break label$10
          }
          if (!$10_1 | $5_1 >>> 0 >= $17_1 >>> 0) {
           break label$9
          }
          $6_1 = HEAP32[$4_1 >> 2];
          $8_1 = HEAP32[$4_1 + 4 >> 2];
          $11_1 = HEAP32[$1_1 + 4 >> 2];
          HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $11_1;
          HEAP8[$1_1 | 0] = $6_1;
          HEAP32[$1_1 + 4 >> 2] = $8_1;
          $10_1 = $10_1 - 1 | 0;
          $5_1 = $5_1 - 1 | 0;
          $1_1 = $1_1 - 8 | 0;
          $4_1 = $4_1 + 8 | 0;
          continue;
         };
        }
        $7_1 = 0;
       }
       $1_1 = $3_1 - $7_1 | 0;
       while (1) if ($1_1 >>> 0 < 10 ? $7_1 : 0) {
        $7_1 = $7_1 - 1 | 0;
        $298($2_1 + 16 | 0, $7_1, $3_1, $12_1, $9_1);
        $183(HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2]);
        $1_1 = $1_1 + 1 | 0;
        continue;
       } else {
        $4_1 = HEAP32[$2_1 + 104 >> 2];
        if (($4_1 | 0) == HEAP32[$2_1 + 100 >> 2]) {
         $153($2_1 + 96 | 0, $4_1);
         $4_1 = HEAP32[$2_1 + 104 >> 2];
        }
        $5_1 = HEAP32[$2_1 + 96 >> 2];
        $3_1 = $5_1 + ($4_1 << 3) | 0;
        HEAP32[$3_1 + 4 >> 2] = $1_1;
        HEAP32[$3_1 >> 2] = $7_1;
        $1_1 = $4_1 + 1 | 0;
        HEAP32[$2_1 + 104 >> 2] = $1_1;
        $17_1 = HEAP32[$2_1 + 80 >> 2];
        while (1) {
         if ($1_1 >>> 0 < 2) {
          break label$8
         }
         label$23 : {
          label$24 : {
           label$25 : {
            label$26 : {
             $6_1 = ($1_1 - 1 << 3) + $5_1 | 0;
             if (!HEAP32[$6_1 >> 2]) {
              break label$26
             }
             $3_1 = HEAP32[$6_1 + 4 >> 2];
             $11_1 = ($1_1 << 3) + $5_1 | 0;
             $10_1 = HEAP32[$11_1 - 12 >> 2];
             if ($3_1 >>> 0 >= $10_1 >>> 0) {
              break label$26
             }
             if ($1_1 >>> 0 < 3) {
              break label$8
             }
             $8_1 = $1_1 - 3 | 0;
             $4_1 = HEAP32[(($8_1 << 3) + $5_1 | 0) + 4 >> 2];
             if ($4_1 >>> 0 <= $3_1 + $10_1 >>> 0) {
              break label$25
             }
             if ($1_1 >>> 0 < 4 | HEAPU32[$11_1 - 28 >> 2] > $4_1 + $10_1 >>> 0) {
              break label$8
             }
             break label$25;
            }
            if ($1_1 >>> 0 < 3) {
             break label$24
            }
            $3_1 = HEAP32[$6_1 + 4 >> 2];
            $8_1 = $1_1 - 3 | 0;
            $4_1 = HEAP32[(($8_1 << 3) + $5_1 | 0) + 4 >> 2];
           }
           if ($4_1 >>> 0 < $3_1 >>> 0) {
            break label$23
           }
          }
          $8_1 = $1_1 - 2 | 0;
         }
         $11_1 = $8_1 + 1 | 0;
         if ($1_1 >>> 0 <= $8_1 >>> 0 | $11_1 >>> 0 >= $1_1 >>> 0) {
          break label$9
         }
         $20_1 = $11_1 << 3;
         $3_1 = $20_1 + $5_1 | 0;
         $10_1 = HEAP32[$3_1 + 4 >> 2];
         $21_1 = HEAP32[$3_1 >> 2];
         $22_1 = $8_1 << 3;
         $3_1 = $22_1 + $5_1 | 0;
         $23_1 = HEAP32[$3_1 + 4 >> 2];
         $298($2_1 + 24 | 0, $21_1, $23_1 + HEAP32[$3_1 >> 2] | 0, $12_1, $9_1);
         $3_1 = HEAP32[$2_1 + 24 >> 2];
         $6_1 = $10_1 << 3;
         $1_1 = $3_1 + $6_1 | 0;
         $4_1 = HEAP32[$2_1 + 28 >> 2];
         $13_1 = ($4_1 << 3) + $3_1 | 0;
         label$27 : {
          label$28 : {
           $4_1 = $4_1 - $10_1 | 0;
           if ($4_1 >>> 0 < $10_1 >>> 0) {
            $4_1 = $4_1 << 3;
            $6_1 = $91($17_1, $1_1, $4_1);
            $5_1 = $4_1 + $6_1 | 0;
            $4_1 = $13_1 - 8 | 0;
            while (1) {
             if ($1_1 >>> 0 <= $3_1 >>> 0 | $5_1 >>> 0 <= $6_1 >>> 0) {
              break label$28
             }
             $14_1 = $5_1 - 8 | 0;
             $15_1 = $1_1 - 8 | 0;
             $13_1 = HEAPU8[$14_1 | 0] < HEAPU8[$15_1 | 0];
             $16_1 = ($13_1 ? $1_1 : $5_1) - 8 | 0;
             $18_1 = HEAP32[$16_1 + 4 >> 2];
             HEAP32[$4_1 >> 2] = HEAP32[$16_1 >> 2];
             HEAP32[$4_1 + 4 >> 2] = $18_1;
             $5_1 = $13_1 ? $5_1 : $14_1;
             $1_1 = $13_1 ? $15_1 : $1_1;
             $4_1 = $4_1 - 8 | 0;
             continue;
            };
           }
           $4_1 = $91($17_1, $3_1, $6_1);
           $5_1 = $6_1 + $4_1 | 0;
           while (1) {
            if ($4_1 >>> 0 >= $5_1 >>> 0 | $1_1 >>> 0 >= $13_1 >>> 0) {
             break label$27
            }
            $6_1 = HEAPU8[$1_1 | 0];
            $14_1 = HEAPU8[$4_1 | 0];
            $15_1 = $6_1 >>> 0 < $14_1 >>> 0;
            $16_1 = $15_1 ? $1_1 : $4_1;
            $18_1 = HEAP32[$16_1 + 4 >> 2];
            HEAP32[$3_1 >> 2] = HEAP32[$16_1 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $18_1;
            $3_1 = $3_1 + 8 | 0;
            $4_1 = (($6_1 >>> 0 >= $14_1 >>> 0) << 3) + $4_1 | 0;
            $1_1 = ($15_1 << 3) + $1_1 | 0;
            continue;
           };
          }
          $3_1 = $1_1;
          $4_1 = $6_1;
         }
         $91($3_1, $4_1, $5_1 - $4_1 & -8);
         $3_1 = HEAP32[$2_1 + 104 >> 2];
         if ($3_1 >>> 0 <= $8_1 >>> 0) {
          break label$9
         }
         $5_1 = HEAP32[$2_1 + 96 >> 2];
         $6_1 = $22_1 + $5_1 | 0;
         HEAP32[$6_1 + 4 >> 2] = $10_1 + $23_1;
         HEAP32[$6_1 >> 2] = $21_1;
         if ($3_1 >>> 0 > $11_1 >>> 0) {
          $6_1 = $5_1 + $20_1 | 0;
          $42($6_1, $6_1 + 8 | 0, ($3_1 - $8_1 << 3) - 16 | 0);
          $1_1 = $3_1 - 1 | 0;
          HEAP32[$2_1 + 104 >> 2] = $1_1;
          continue;
         }
         break;
        };
        abort();
       };
      }
      abort();
     }
     $3_1 = $7_1;
     continue;
    };
   }
   if ($9_1 >>> 0 < 2) {
    break label$3
   }
   $1_1 = $9_1 - 2 | 0;
   while (1) {
    if (($1_1 | 0) == -1) {
     break label$3
    }
    $333($2_1 + 8 | 0, $12_1, $9_1, $1_1);
    $183(HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
    $1_1 = $1_1 - 1 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 52 >> 2] = HEAP32[($0_1 + 8 | 0) + (HEAP32[$0_1 + 8 >> 2] == 1 ? 12 : 4) >> 2];
  global$0 = $2_1 + 112 | 0;
 }
 
 function $14($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 176 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAPU8[1219493]) {
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $41(1219492)), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
    if (!HEAPU8[1219493]) {
     $4_1 = HEAP32[304874];
     HEAP32[304874] = 0;
     if (!$4_1) {
      break label$1
     }
     FUNCTION_TABLE[$4_1 | 0]($3_1 + 48 | 0);
     HEAP8[1219493] = 1;
     $4_1 = $3_1 + 56 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[304871] = HEAP32[$4_1 >> 2];
     HEAP32[304872] = $5_1;
     $4_1 = HEAP32[$3_1 + 52 >> 2];
     HEAP32[304869] = HEAP32[$3_1 + 48 >> 2];
     HEAP32[304870] = $4_1;
    }
    $121($3_1 + 152 | 0);
   }
   $201($3_1 + 16 | 0, 33, 0);
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   $4_1 = HEAP32[$3_1 + 20 >> 2];
   HEAP32[$3_1 + 32 >> 2] = HEAP32[$3_1 + 16 >> 2];
   HEAP32[$3_1 + 36 >> 2] = $4_1;
   $4_1 = 1;
   $302($3_1 + 8 | 0, 1062236, 1, 0);
   label$4 : {
    if (!$361(HEAP32[$3_1 + 8 >> 2], HEAP32[$3_1 + 12 >> 2], 1062237, 0)) {
     $6_1 = -1;
     $5_1 = $315(1062236, 1);
     $4_1 = -1;
     $8_1 = 2;
     $7_1 = i64toi32_i32$HIGH_BITS;
     break label$4;
    }
    $302($3_1, 1062236, 1, 1);
    $5_1 = $315(HEAP32[$3_1 >> 2], HEAP32[$3_1 + 4 >> 2]);
    $9_1 = 1;
    $8_1 = 1;
    $7_1 = i64toi32_i32$HIGH_BITS;
   }
   $10_1 = $3_1 + 108 | 0;
   HEAP32[$10_1 >> 2] = 1;
   HEAP32[$10_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 100 >> 2] = $2_1;
   HEAP32[$3_1 + 88 >> 2] = $4_1;
   HEAP32[$3_1 + 84 >> 2] = $6_1;
   HEAP32[$3_1 + 80 >> 2] = $2_1;
   HEAP32[$3_1 + 76 >> 2] = 0;
   HEAP32[$3_1 + 72 >> 2] = $8_1;
   HEAP32[$3_1 + 68 >> 2] = $9_1;
   HEAP32[$3_1 - -64 >> 2] = 0;
   $9_1 = $3_1 + 56 | 0;
   $4_1 = $9_1;
   HEAP32[$4_1 >> 2] = $5_1;
   HEAP32[$4_1 + 4 >> 2] = $7_1;
   HEAP16[$3_1 + 120 >> 1] = 1;
   HEAP32[$3_1 + 116 >> 2] = $2_1;
   HEAP32[$3_1 + 104 >> 2] = 1062236;
   HEAP32[$3_1 + 96 >> 2] = $1_1;
   HEAP32[$3_1 + 48 >> 2] = 1;
   $10_1 = $3_1 + 32 | 0;
   $11_1 = $3_1 + 62 | 0;
   $1_1 = 0;
   $2_1 = 0;
   $4_1 = 0;
   while (1) {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           if ($4_1 & 255) {
            break label$13
           }
           $5_1 = HEAP32[$3_1 + 96 >> 2];
           label$14 : {
            label$15 : {
             label$16 : {
              label$17 : {
               label$18 : {
                label$19 : {
                 if (HEAP32[$3_1 + 48 >> 2] == 1) {
                  $4_1 = HEAP32[$3_1 + 108 >> 2];
                  $6_1 = HEAP32[$3_1 + 104 >> 2];
                  $7_1 = HEAP32[$3_1 + 100 >> 2];
                  if (HEAP32[$3_1 + 84 >> 2] == -1) {
                   break label$19
                  }
                  $76($3_1 + 152 | 0, $9_1, $5_1, $7_1, $6_1, $4_1, 0);
                  break label$18;
                 }
                 $6_1 = HEAP32[$3_1 + 100 >> 2];
                 $12_1 = $6_1 + $5_1 | 0;
                 $4_1 = HEAPU8[$3_1 + 62 | 0];
                 label$21 : {
                  while (1) {
                   if ($4_1 & 255) {
                    break label$21
                   }
                   $8_1 = HEAPU8[$3_1 + 60 | 0];
                   HEAP8[$3_1 + 60 | 0] = $8_1 ^ 1;
                   $4_1 = HEAP32[$3_1 + 52 >> 2];
                   label$23 : {
                    if (!$4_1) {
                     break label$23
                    }
                    if ($4_1 >>> 0 >= $6_1 >>> 0) {
                     if (($4_1 | 0) == ($6_1 | 0)) {
                      break label$23
                     }
                     break label$8;
                    }
                    if (HEAP8[$4_1 + $5_1 | 0] <= -65) {
                     break label$8
                    }
                   }
                   HEAP32[$3_1 + 132 >> 2] = $12_1;
                   HEAP32[$3_1 + 128 >> 2] = $4_1 + $5_1;
                   $7_1 = $152($3_1 + 128 | 0);
                   if ($8_1) {
                    break label$16
                   }
                   if (($7_1 | 0) != 1114112) {
                    $8_1 = 1;
                    label$26 : {
                     if ($7_1 >>> 0 < 128) {
                      break label$26
                     }
                     $8_1 = 2;
                     if ($7_1 >>> 0 < 2048) {
                      break label$26
                     }
                     $8_1 = $7_1 >>> 0 < 65536 ? 3 : 4;
                    }
                    HEAP32[$3_1 + 52 >> 2] = $8_1 + $4_1;
                    $4_1 = HEAPU8[$11_1 | 0];
                    continue;
                   }
                   break;
                  };
                  HEAP8[$3_1 + 62 | 0] = 1;
                 }
                 HEAP32[$3_1 + 152 >> 2] = 0;
                 break label$17;
                }
                $76($3_1 + 152 | 0, $9_1, $5_1, $7_1, $6_1, $4_1, 1);
               }
               if (HEAP32[$3_1 + 152 >> 2] == 1) {
                break label$15
               }
              }
              if (HEAPU8[$3_1 + 121 | 0]) {
               break label$13
              }
              $4_1 = HEAP32[$3_1 + 112 >> 2];
              $5_1 = HEAP32[$3_1 + 116 >> 2];
              if (!HEAPU8[$3_1 + 120 | 0] & ($4_1 | 0) == ($5_1 | 0)) {
               break label$13
              }
              HEAP8[$3_1 + 121 | 0] = 1;
              $6_1 = $5_1 - $4_1 | 0;
              $4_1 = $4_1 + HEAP32[$3_1 + 96 >> 2] | 0;
              break label$14;
             }
             HEAP32[$3_1 + 160 >> 2] = $4_1;
             HEAP32[$3_1 + 156 >> 2] = $4_1;
             HEAP32[$3_1 + 152 >> 2] = 1;
            }
            $4_1 = HEAP32[$3_1 + 112 >> 2];
            HEAP32[$3_1 + 112 >> 2] = HEAP32[$3_1 + 160 >> 2];
            $6_1 = HEAP32[$3_1 + 156 >> 2] - $4_1 | 0;
            $4_1 = $4_1 + $5_1 | 0;
           }
           HEAP32[$3_1 + 152 >> 2] = 0;
           $131($4_1, $6_1, $3_1 + 152 | 0);
           $240($3_1 + 128 | 0, 1219476, HEAP32[$3_1 + 152 >> 2]);
           $7_1 = $3_1 + 144 | 0;
           $8_1 = HEAP32[$7_1 + 4 >> 2];
           $5_1 = $3_1 + 168 | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $8_1;
           $7_1 = $3_1 + 136 | 0;
           $8_1 = HEAP32[$7_1 + 4 >> 2];
           $5_1 = $3_1 + 160 | 0;
           HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
           HEAP32[$5_1 + 4 >> 2] = $8_1;
           $5_1 = HEAP32[$3_1 + 132 >> 2];
           HEAP32[$3_1 + 152 >> 2] = HEAP32[$3_1 + 128 >> 2];
           HEAP32[$3_1 + 156 >> 2] = $5_1;
           while (1) {
            $5_1 = $140($3_1 + 152 | 0);
            if (!$5_1) {
             break label$12
            }
            if (!$361($4_1, $6_1, HEAP32[$5_1 - 12 >> 2], HEAP32[$5_1 - 8 >> 2])) {
             continue
            }
            break;
           };
           $1_1 = HEAPU16[$5_1 - 4 >> 1] << 21 >>> $2_1 | $1_1;
           HEAP32[$3_1 + 28 >> 2] = $1_1;
           $2_1 = $2_1 + 11 | 0;
           while (1) {
            HEAP32[$3_1 + 24 >> 2] = $2_1;
            if ($2_1 >>> 0 < 8) {
             break label$7
            }
            $306($10_1, $1_1 >>> 24 | 0);
            $1_1 = HEAP32[$3_1 + 28 >> 2] << 8;
            HEAP32[$3_1 + 28 >> 2] = $1_1;
            $2_1 = HEAP32[$3_1 + 24 >> 2] - 8 | 0;
            continue;
           };
          }
          $184($3_1 + 48 | 0, ((HEAP32[$3_1 + 40 >> 2] << 3) + $2_1 >>> 0) / 11 | 0);
          if (HEAP32[$3_1 + 48 >> 2] == 1) {
           break label$11
          }
          $2_1 = HEAP32[$3_1 + 52 >> 2];
          $1_1 = $3_1 - -64 | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$3_1 + 40 >> 2];
          $5_1 = $3_1 + 32 | 0;
          $6_1 = HEAP32[$5_1 + 4 >> 2];
          $4_1 = $3_1 + 56 | 0;
          HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$4_1 + 4 >> 2] = $6_1;
          $5_1 = HEAP32[$3_1 + 28 >> 2];
          $6_1 = HEAP32[$3_1 + 24 >> 2];
          HEAP32[$3_1 + 48 >> 2] = $6_1;
          HEAP32[$3_1 + 52 >> 2] = $5_1;
          if ($6_1) {
           $306($4_1, HEAPU8[$3_1 + 55 | 0])
          }
          $1_1 = HEAP32[$1_1 >> 2];
          HEAP32[$3_1 + 160 >> 2] = $1_1;
          $4_1 = HEAP32[$3_1 + 60 >> 2];
          HEAP32[$3_1 + 152 >> 2] = HEAP32[$3_1 + 56 >> 2];
          HEAP32[$3_1 + 156 >> 2] = $4_1;
          $4_1 = $1_1;
          $1_1 = $2_1 >>> 11 | 0;
          if ($4_1 >>> 0 <= $1_1 >>> 0) {
           break label$1
          }
          HEAP32[$3_1 + 160 >> 2] = $1_1;
          $4_1 = HEAP32[$3_1 + 152 >> 2];
          $2_1 = 0 - $2_1 & 7;
          if ((HEAPU8[$4_1 + $1_1 | 0] >>> $2_1 | 0) != (($260($4_1, $1_1) & 255) >>> $2_1 | 0)) {
           HEAP32[$3_1 + 48 >> 2] = 0;
           $1_1 = $117($3_1 + 48 | 0);
           HEAP32[$0_1 + 8 >> 2] = 1049072;
           HEAP32[$0_1 + 4 >> 2] = $1_1;
           HEAP32[$0_1 >> 2] = 1;
           $374($3_1 + 152 | 0);
           break label$9;
          }
          $1_1 = HEAP32[$3_1 + 156 >> 2];
          HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 152 >> 2];
          HEAP32[$0_1 + 8 >> 2] = $1_1;
          HEAP32[$0_1 >> 2] = 0;
          HEAP32[$0_1 + 12 >> 2] = HEAP32[$3_1 + 160 >> 2];
          break label$9;
         }
         HEAP32[$3_1 + 152 >> 2] = 1;
         $1_1 = $117($3_1 + 152 | 0);
         HEAP32[$0_1 + 8 >> 2] = 1049072;
         HEAP32[$0_1 + 4 >> 2] = $1_1;
         break label$10;
        }
        $1_1 = HEAP32[$3_1 + 56 >> 2];
        HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 52 >> 2];
        HEAP32[$0_1 + 8 >> 2] = $1_1;
       }
       HEAP32[$0_1 >> 2] = 1;
       $374($10_1);
      }
      global$0 = $3_1 + 176 | 0;
      return;
     }
     $119($5_1, $6_1, $4_1, $6_1);
     abort();
    }
    $4_1 = HEAPU8[$3_1 + 121 | 0];
    continue;
   };
  }
  abort();
 }
 
 function $15($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 400 | 0;
  global$0 = $4_1;
  $25_1 = HEAP32[$2_1 >> 2];
  $15_1 = HEAP32[$2_1 + 4 >> 2];
  $26_1 = HEAP32[$1_1 >> 2];
  $21_1 = HEAP32[$1_1 + 4 >> 2];
  $297($4_1, $25_1, $15_1, 0, 0, $26_1, $21_1, 0, 0);
  $19_1 = HEAP32[$1_1 + 32 >> 2];
  $20_1 = HEAP32[$1_1 + 36 >> 2];
  $22_1 = HEAP32[$2_1 + 8 >> 2];
  $8_1 = HEAP32[$2_1 + 12 >> 2];
  $297($4_1 + 144 | 0, $19_1, $20_1, 0, 0, __wasm_i64_mul($22_1, $8_1, 19, 0), i64toi32_i32$HIGH_BITS, 0, 0);
  $23_1 = HEAP32[$1_1 + 24 >> 2];
  $11_1 = HEAP32[$1_1 + 28 >> 2];
  $16_1 = HEAP32[$2_1 + 16 >> 2];
  $5_1 = HEAP32[$2_1 + 20 >> 2];
  $9_1 = __wasm_i64_mul($16_1, $5_1, 19, 0);
  $6_1 = i64toi32_i32$HIGH_BITS;
  $297($4_1 + 208 | 0, $23_1, $11_1, 0, 0, $9_1, $6_1, 0, 0);
  $17_1 = HEAP32[$1_1 + 16 >> 2];
  $18_1 = HEAP32[$1_1 + 20 >> 2];
  $31_1 = HEAP32[$2_1 + 24 >> 2];
  $24_1 = HEAP32[$2_1 + 28 >> 2];
  $7_1 = __wasm_i64_mul($31_1, $24_1, 19, 0);
  $14_1 = i64toi32_i32$HIGH_BITS;
  $297($4_1 + 272 | 0, $17_1, $18_1, 0, 0, $7_1, $14_1, 0, 0);
  $10_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 12 >> 2];
  $12_1 = HEAP32[$2_1 + 32 >> 2];
  $1_1 = HEAP32[$2_1 + 36 >> 2];
  $13_1 = __wasm_i64_mul($12_1, $1_1, 19, 0);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $297($4_1 + 336 | 0, $10_1, $3_1, 0, 0, $13_1, $2_1, 0, 0);
  $297($4_1 + 80 | 0, $10_1, $3_1, 0, 0, $25_1, $15_1, 0, 0);
  $297($4_1 + 16 | 0, $26_1, $21_1, 0, 0, $22_1, $8_1, 0, 0);
  $297($4_1 + 160 | 0, $19_1, $20_1, 0, 0, $9_1, $6_1, 0, 0);
  $297($4_1 + 224 | 0, $23_1, $11_1, 0, 0, $7_1, $14_1, 0, 0);
  $297($4_1 + 288 | 0, $17_1, $18_1, 0, 0, $13_1, $2_1, 0, 0);
  $297($4_1 + 96 | 0, $17_1, $18_1, 0, 0, $25_1, $15_1, 0, 0);
  $297($4_1 + 352 | 0, $10_1, $3_1, 0, 0, $22_1, $8_1, 0, 0);
  $297($4_1 + 32 | 0, $26_1, $21_1, 0, 0, $16_1, $5_1, 0, 0);
  $297($4_1 + 176 | 0, $19_1, $20_1, 0, 0, $7_1, $14_1, 0, 0);
  $297($4_1 + 240 | 0, $23_1, $11_1, 0, 0, $13_1, $2_1, 0, 0);
  $297($4_1 + 112 | 0, $23_1, $11_1, 0, 0, $25_1, $15_1, 0, 0);
  $297($4_1 + 304 | 0, $17_1, $18_1, 0, 0, $22_1, $8_1, 0, 0);
  $297($4_1 + 368 | 0, $10_1, $3_1, 0, 0, $16_1, $5_1, 0, 0);
  $297($4_1 + 48 | 0, $26_1, $21_1, 0, 0, $31_1, $24_1, 0, 0);
  $297($4_1 + 192 | 0, $19_1, $20_1, 0, 0, $13_1, $2_1, 0, 0);
  $297($4_1 + 128 | 0, $19_1, $20_1, 0, 0, $25_1, $15_1, 0, 0);
  $297($4_1 + 256 | 0, $23_1, $11_1, 0, 0, $22_1, $8_1, 0, 0);
  $297($4_1 + 320 | 0, $17_1, $18_1, 0, 0, $16_1, $5_1, 0, 0);
  $297($4_1 + 384 | 0, $10_1, $3_1, 0, 0, $31_1, $24_1, 0, 0);
  $297($4_1 - -64 | 0, $26_1, $21_1, 0, 0, $12_1, $1_1, 0, 0);
  $25_1 = HEAP32[$4_1 + 176 >> 2];
  $2_1 = HEAP32[$4_1 + 32 >> 2];
  $5_1 = $25_1 + $2_1 | 0;
  $36_1 = HEAP32[$4_1 + 180 >> 2];
  $1_1 = $36_1 + HEAP32[$4_1 + 36 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $35_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 240 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 244 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $38_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 96 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 100 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $39_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 352 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 356 >> 2] | 0;
  $14_1 = $5_1;
  $8_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = HEAP32[$4_1 + 160 >> 2];
  $2_1 = HEAP32[$4_1 + 16 >> 2];
  $5_1 = $15_1 + $2_1 | 0;
  $37_1 = HEAP32[$4_1 + 164 >> 2];
  $1_1 = $37_1 + HEAP32[$4_1 + 20 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 224 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $10_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 228 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 288 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 292 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $5_1;
  $2_1 = HEAP32[$4_1 + 80 >> 2];
  $5_1 = $5_1 + $2_1 | 0;
  $13_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 84 >> 2] | 0;
  $3_1 = $5_1;
  $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$4_1 + 144 >> 2];
  $5_1 = HEAP32[$4_1 >> 2];
  $12_1 = $26_1 + $5_1 | 0;
  $34_1 = HEAP32[$4_1 + 148 >> 2];
  $1_1 = $34_1 + HEAP32[$4_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = $12_1;
  $5_1 = HEAP32[$4_1 + 208 >> 2];
  $12_1 = $12_1 + $5_1 | 0;
  $7_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 212 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $30_1 = $12_1;
  $5_1 = HEAP32[$4_1 + 272 >> 2];
  $12_1 = $12_1 + $5_1 | 0;
  $9_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 276 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $12_1;
  $5_1 = HEAP32[$4_1 + 336 >> 2];
  $12_1 = $12_1 + $5_1 | 0;
  $6_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 340 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $1_1;
  $21_1 = $1_1 >>> 19 | 0;
  $1_1 = $4_1 + 344 | 0;
  $19_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 280 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $24_1 = $4_1 + 216 | 0;
  $1_1 = HEAP32[$24_1 >> 2];
  $24_1 = HEAP32[$24_1 + 4 >> 2];
  $40_1 = ($6_1 | 0) == ($31_1 | 0) & $12_1 >>> 0 < $28_1 >>> 0 | $6_1 >>> 0 > $31_1 >>> 0;
  $28_1 = ($6_1 | 0) == ($9_1 | 0) & $30_1 >>> 0 > $28_1 >>> 0 | $6_1 >>> 0 < $9_1 >>> 0;
  $30_1 = ($7_1 | 0) == ($9_1 | 0) & $27_1 >>> 0 > $30_1 >>> 0 | $7_1 >>> 0 > $9_1 >>> 0;
  $5_1 = $1_1;
  $27_1 = ($7_1 | 0) == ($34_1 | 0) & $26_1 >>> 0 > $27_1 >>> 0 | $7_1 >>> 0 < $34_1 >>> 0;
  $1_1 = $4_1 + 8 | 0;
  $6_1 = HEAP32[$1_1 >> 2];
  $9_1 = $4_1 + 152 | 0;
  $7_1 = $6_1 + HEAP32[$9_1 >> 2] | 0;
  $1_1 = HEAP32[$9_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $7_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $7_1;
  $9_1 = $27_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $5_1 + $6_1 | 0;
  $1_1 = $1_1 + $24_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $30_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $6_1 + $17_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $28_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $6_1 + $19_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $9_1 = $40_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $9_1;
  $1_1 = $1_1 << 13 | $6_1 >>> 19;
  $6_1 = $6_1 << 13 | $21_1;
  $9_1 = $6_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $6_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $24_1 = $1_1;
  $19_1 = $1_1 >>> 19 | 0;
  $1_1 = $4_1 + 88 | 0;
  $20_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 296 | 0;
  $18_1 = HEAP32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $4_1 + 232 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  $6_1 = HEAP32[$6_1 + 4 >> 2];
  $27_1 = ($2_1 | 0) == ($24_1 | 0) & $3_1 >>> 0 > $9_1 >>> 0 | $2_1 >>> 0 > $24_1 >>> 0;
  $28_1 = ($2_1 | 0) == ($13_1 | 0) & $3_1 >>> 0 < $29_1 >>> 0 | $2_1 >>> 0 < $13_1 >>> 0;
  $29_1 = ($13_1 | 0) == ($16_1 | 0) & $33_1 >>> 0 > $29_1 >>> 0 | $13_1 >>> 0 < $16_1 >>> 0;
  $5_1 = $1_1;
  $1_1 = $4_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 168 | 0;
  $13_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $13_1;
  $3_1 = $2_1 + (($10_1 | 0) == ($37_1 | 0) & $15_1 >>> 0 > $32_1 >>> 0 | $10_1 >>> 0 < $37_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $5_1 + $2_1 | 0;
  $1_1 = $1_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $2_1 + (($10_1 | 0) == ($16_1 | 0) & $33_1 >>> 0 < $32_1 >>> 0 | $10_1 >>> 0 > $16_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $2_1 + $18_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $29_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $2_1 + $20_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $28_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $27_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $1_1 = $1_1 << 13 | $2_1 >>> 19;
  $2_1 = $2_1 << 13 | $19_1;
  $3_1 = $2_1 + $14_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $15_1 = $3_1;
  HEAP32[$0_1 + 16 >> 2] = $3_1;
  $2_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 20 >> 2] = $2_1 & 524287;
  $6_1 = $0_1;
  $26_1 = HEAP32[$4_1 + 192 >> 2];
  $5_1 = HEAP32[$4_1 + 48 >> 2];
  $3_1 = $26_1 + $5_1 | 0;
  $33_1 = HEAP32[$4_1 + 196 >> 2];
  $1_1 = $33_1 + HEAP32[$4_1 + 52 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $3_1;
  $5_1 = HEAP32[$4_1 + 112 >> 2];
  $3_1 = $3_1 + $5_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 116 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $34_1 = $3_1;
  $5_1 = HEAP32[$4_1 + 304 >> 2];
  $3_1 = $3_1 + $5_1 | 0;
  $18_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 308 >> 2] | 0;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = $3_1;
  $5_1 = HEAP32[$4_1 + 368 >> 2];
  $3_1 = $3_1 + $5_1 | 0;
  $10_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 372 >> 2] | 0;
  $7_1 = $3_1;
  $5_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = $4_1 + 360 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 104 | 0;
  $20_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $4_1 + 248 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $13_1 = HEAP32[$3_1 + 4 >> 2];
  $15_1 = ($2_1 | 0) == ($8_1 | 0) & $14_1 >>> 0 > $15_1 >>> 0 | $2_1 >>> 0 < $8_1 >>> 0;
  $28_1 = ($8_1 | 0) == ($11_1 | 0) & $14_1 >>> 0 < $39_1 >>> 0 | $8_1 >>> 0 < $11_1 >>> 0;
  $0_1 = $1_1;
  $1_1 = $4_1 + 40 | 0;
  $8_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 184 | 0;
  $14_1 = $8_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $8_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $14_1;
  $3_1 = $8_1 + (($22_1 | 0) == ($36_1 | 0) & $25_1 >>> 0 > $35_1 >>> 0 | $22_1 >>> 0 < $36_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $0_1 + $3_1 | 0;
  $1_1 = $1_1 + $13_1 | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $3_1 + (($22_1 | 0) == ($23_1 | 0) & $35_1 >>> 0 > $38_1 >>> 0 | $22_1 >>> 0 > $23_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $3_1 + $20_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $3_1 + (($11_1 | 0) == ($23_1 | 0) & $38_1 >>> 0 > $39_1 >>> 0 | $11_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $28_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $3_1 = $15_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $3_1;
  $2_1 = $3_1 << 13 | $2_1 >>> 19;
  $3_1 = $2_1 + $7_1 | 0;
  $1_1 = ($1_1 << 13 | $8_1 >>> 19) + $5_1 | 0;
  $32_1 = $3_1;
  HEAP32[$6_1 + 24 >> 2] = $3_1;
  $8_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$6_1 + 28 >> 2] = $8_1 & 524287;
  $21_1 = HEAP32[$4_1 + 128 >> 2];
  $2_1 = HEAP32[$4_1 + 64 >> 2];
  $3_1 = $21_1 + $2_1 | 0;
  $30_1 = HEAP32[$4_1 + 132 >> 2];
  $1_1 = $30_1 + HEAP32[$4_1 + 68 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 256 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 260 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $25_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 320 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $13_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 324 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 384 >> 2];
  $14_1 = $3_1 + $2_1 | 0;
  $3_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 388 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $1_1 = $4_1 + 376 | 0;
  $19_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 312 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $11_1 = $4_1 + 120 | 0;
  $1_1 = HEAP32[$11_1 >> 2];
  $11_1 = HEAP32[$11_1 + 4 >> 2];
  $32_1 = ($5_1 | 0) == ($8_1 | 0) & $7_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 > $8_1 >>> 0;
  $35_1 = ($5_1 | 0) == ($10_1 | 0) & $7_1 >>> 0 < $27_1 >>> 0 | $5_1 >>> 0 < $10_1 >>> 0;
  $27_1 = ($10_1 | 0) == ($18_1 | 0) & $34_1 >>> 0 > $27_1 >>> 0 | $10_1 >>> 0 < $18_1 >>> 0;
  $0_1 = $1_1;
  $1_1 = $4_1 + 56 | 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $7_1 = $4_1 + 200 | 0;
  $10_1 = $5_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $10_1;
  $7_1 = $5_1 + (($17_1 | 0) == ($33_1 | 0) & $26_1 >>> 0 > $29_1 >>> 0 | $17_1 >>> 0 < $33_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $0_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $5_1 + (($17_1 | 0) == ($18_1 | 0) & $29_1 >>> 0 > $34_1 >>> 0 | $17_1 >>> 0 > $18_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $5_1 + $22_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $27_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $5_1 + $19_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $35_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $7_1 = $32_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $8_1 = $5_1 << 13 | $8_1 >>> 19;
  $7_1 = $8_1 + $14_1 | 0;
  $1_1 = ($1_1 << 13 | $5_1 >>> 19) + $2_1 | 0;
  $11_1 = $7_1;
  HEAP32[$6_1 + 32 >> 2] = $7_1;
  $8_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$6_1 + 36 >> 2] = $8_1 & 524287;
  $5_1 = $6_1;
  $1_1 = $4_1 + 392 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $4_1 + 328 | 0;
  $10_1 = HEAP32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $4_1 + 264 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  $6_1 = HEAP32[$6_1 + 4 >> 2];
  $11_1 = ($2_1 | 0) == ($8_1 | 0) & $14_1 >>> 0 > $11_1 >>> 0 | $2_1 >>> 0 > $8_1 >>> 0;
  $29_1 = ($2_1 | 0) == ($3_1 | 0) & $14_1 >>> 0 < $15_1 >>> 0 | $2_1 >>> 0 < $3_1 >>> 0;
  $15_1 = ($3_1 | 0) == ($13_1 | 0) & $15_1 >>> 0 < $25_1 >>> 0 | $3_1 >>> 0 < $13_1 >>> 0;
  $0_1 = $1_1;
  $1_1 = $4_1 + 72 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 136 | 0;
  $14_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $14_1;
  $3_1 = $2_1 + (($16_1 | 0) == ($30_1 | 0) & $21_1 >>> 0 > $28_1 >>> 0 | $16_1 >>> 0 < $30_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $0_1 + $3_1 | 0;
  $1_1 = $1_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + (($13_1 | 0) == ($16_1 | 0) & $25_1 >>> 0 < $28_1 >>> 0 | $13_1 >>> 0 < $16_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $10_1 | 0;
  $1_1 = $1_1 + $7_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $15_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $3_1 + $17_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $29_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $11_1 + $3_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = __wasm_i64_mul($3_1 << 13 | $8_1 >>> 19, $1_1 << 13 | $3_1 >>> 19, 19, 0) + $12_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + ($31_1 & 524287) | 0;
  HEAP32[$5_1 >> 2] = $2_1;
  $1_1 = $2_1 >>> 0 < $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$5_1 + 4 >> 2] = $1_1 & 524287;
  $2_1 = $5_1;
  $0_1 = $1_1 >>> 19 | 0;
  $8_1 = $0_1 + $9_1 | 0;
  $1_1 = $24_1 & 524287;
  HEAP32[$2_1 + 8 >> 2] = $8_1;
  HEAP32[$2_1 + 12 >> 2] = $0_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  global$0 = $4_1 + 400 | 0;
 }
 
 function $16($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 221696 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 352 >> 2] = 0;
  HEAP32[$5_1 + 280 >> 2] = 528734635;
  HEAP32[$5_1 + 284 >> 2] = 1541459225;
  HEAP32[$5_1 + 272 >> 2] = 1359893119;
  HEAP32[$5_1 + 276 >> 2] = -1694144372;
  HEAP32[$5_1 + 264 >> 2] = 1013904242;
  HEAP32[$5_1 + 268 >> 2] = -1521486534;
  HEAP32[$5_1 + 256 >> 2] = 1779033703;
  HEAP32[$5_1 + 260 >> 2] = -1150833019;
  $2_1 = $5_1 + 256 | 0;
  $216($2_1, 1218607, 63);
  $6_1 = $2_1;
  $2_1 = $5_1 + 131536 | 0;
  $129($6_1, $2_1);
  $7_1 = 32;
  $10_1 = 1218672;
  while (1) {
   label$1 : {
    $6_1 = 0;
    if (!$7_1) {
     break label$1
    }
    $7_1 = $7_1 - 1 | 0;
    $11_1 = HEAPU8[$10_1 | 0];
    $6_1 = HEAPU8[$2_1 | 0];
    $10_1 = $10_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 - $11_1 | 0;
    if (!$6_1) {
     continue
    }
   }
   break;
  };
  if ($6_1) {
   $424(1218e3, 0)
  }
  if ($317($1_1)) {
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $2_1 = HEAP32[304499];
   HEAP32[$0_1 + 184 >> 2] = HEAP32[304498];
   HEAP32[$0_1 + 188 >> 2] = $2_1;
   $2_1 = HEAP32[304493];
   HEAP32[$0_1 + 176 >> 2] = HEAP32[304492];
   HEAP32[$0_1 + 180 >> 2] = $2_1;
   $12_1 = $0_1 + 208 | 0;
   if ($1_1 & 512) {
    $6_1 = $0_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = $12_1;
    $7_1 = $5_1 + 131456 | 0;
    $91($7_1, 1218768, 40);
    $91($5_1 + 131496 | 0, 1218808, 40);
    $4_1 = $5_1 + 131536 | 0;
    $83($4_1, 1218864);
    $2_1 = $5_1 + 256 | 0;
    $21($2_1, $4_1, 0);
    HEAP32[$5_1 + 131448 >> 2] = HEAP32[$5_1 + 336 >> 2];
    $4_1 = $5_1 + 131328 | 0;
    $91($4_1, $2_1, 40);
    $91($5_1 + 131368 | 0, $5_1 + 296 | 0, 40);
    $2_1 = $5_1 + 131416 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 131424 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 131432 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 131440 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 131408 >> 2] = 1;
    HEAP32[$5_1 + 131412 >> 2] = 0;
    $35($4_1, $4_1, 1218768, 0);
    $91($5_1 + 128 | 0, $7_1, 80);
    HEAP32[$5_1 + 208 >> 2] = 1;
    HEAP32[$5_1 + 212 >> 2] = 0;
    $147($5_1 + 216 | 0, 0, 36);
    $3_1 = $91($5_1, $4_1, 128);
    $9_1 = $3_1 + 256 | 0;
    $2_1 = 0;
    label$6 : while (1) {
     if (($2_1 | 0) != 64) {
      $91(($3_1 + 256 | 0) + ($2_1 << 11) | 0, $3_1, 128);
      $4_1 = 0;
      while (1) if (($4_1 | 0) == 1920) {
       $4_1 = 4;
       while (1) {
        if ($4_1) {
         $7_1 = $3_1 + 128 | 0;
         $230($7_1, $7_1, 0);
         $4_1 = $4_1 - 1 | 0;
         continue;
        }
        break;
       };
       $230($3_1, $3_1, 0);
       if (($2_1 | 0) == 62) {
        $279($3_1, $3_1);
        $47($3_1, $3_1, $3_1 + 131328 | 0);
       }
       $9_1 = $9_1 + 2048 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue label$6;
      } else {
       $7_1 = $4_1 + $9_1 | 0;
       $47($7_1 + 128 | 0, $7_1, $3_1 + 128 | 0);
       $4_1 = $4_1 + 128 | 0;
       continue;
      };
     }
     break;
    };
    $12_1 = $0_1 + 65744 | 0;
    $8_1 = $3_1 + 336 | 0;
    $4_1 = 0;
    $9_1 = $3_1 + 131536 | 0;
    $2_1 = -1;
    while (1) {
     if (($4_1 | 0) != 1024) {
      label$16 : {
       if (HEAP32[$8_1 + 40 >> 2]) {
        $377($9_1);
        break label$16;
       }
       label$18 : {
        if (($2_1 | 0) == -1) {
         $91($9_1, $8_1, 40);
         break label$18;
        }
        $8($9_1, ($3_1 + 131536 | 0) + Math_imul($2_1, 88) | 0, $8_1);
       }
       $2_1 = $4_1;
      }
      $9_1 = $9_1 + 88 | 0;
      $8_1 = $8_1 + 128 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue;
     }
     break;
    };
    label$20 : {
     if (($2_1 | 0) == -1) {
      break label$20
     }
     $284($3_1 + 221656 | 0, ($3_1 + 131536 | 0) + Math_imul($2_1, 88) | 0);
     $13_1 = $3_1 + 248 | 0;
     while (1) {
      $8_1 = 0 - $2_1 | 0;
      $10_1 = $2_1 << 7;
      $4_1 = $10_1 + $13_1 | 0;
      $11_1 = Math_imul($2_1, 88);
      $9_1 = $11_1 + ($3_1 + 131536 | 0) | 0;
      label$22 : {
       while (1) {
        $8_1 = $8_1 + 1 | 0;
        if (($8_1 | 0) == 1) {
         break label$22
        }
        $9_1 = $9_1 - 88 | 0;
        $7_1 = HEAP32[$4_1 >> 2];
        $4_1 = $4_1 - 128 | 0;
        if ($7_1) {
         continue
        }
        break;
       };
       $2_1 = $3_1 + 221656 | 0;
       $8($11_1 + ($3_1 + 131536 | 0) | 0, $9_1, $2_1);
       $8($2_1, $2_1, ($3_1 + $10_1 | 0) + 336 | 0);
       $2_1 = 0 - $8_1 | 0;
       continue;
      }
      break;
     };
     $91(($3_1 + 131536 | 0) + Math_imul($2_1, 88) | 0, $3_1 + 221656 | 0, 40);
     $4_1 = 0;
     $8_1 = $3_1 + 256 | 0;
     while (1) {
      if (($4_1 | 0) == 90112) {
       break label$20
      }
      if (!HEAP32[$8_1 + 120 >> 2]) {
       $2_1 = ($3_1 + 131536 | 0) + $4_1 | 0;
       $258($2_1, $8_1, $2_1);
      }
      $8_1 = $8_1 + 128 | 0;
      $4_1 = $4_1 + 88 | 0;
      continue;
     };
    }
    $2_1 = $3_1 + 131536 | 0;
    $8_1 = 0;
    $9_1 = 0;
    while (1) {
     if (($9_1 | 0) != 64) {
      $4_1 = 0;
      $7_1 = $2_1;
      while (1) {
       if (($4_1 | 0) != 1024) {
        $259((HEAP32[$6_1 >> 2] + $8_1 | 0) + $4_1 | 0, $7_1);
        $4_1 = $4_1 - -64 | 0;
        $7_1 = $7_1 + 88 | 0;
        continue;
       }
       break;
      };
      $8_1 = $8_1 + 1024 | 0;
      $2_1 = $2_1 + 1408 | 0;
      $9_1 = $9_1 + 1 | 0;
      continue;
     }
     break;
    };
    $2_1 = global$0 - 384 | 0;
    global$0 = $2_1;
    $3_1 = $147($2_1, 0, 64);
    HEAP32[$6_1 + 160 >> 2] = 0;
    $13_1 = $6_1 + 40 | 0;
    $4_1 = $91($13_1, 1218768, 40);
    $91($6_1 + 80 | 0, 1218808, 40);
    $2_1 = $6_1 + 128 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $6_1 + 120 | 0;
    HEAP32[$2_1 >> 2] = 1;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $6_1 + 136 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $6_1 + 144 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $6_1 + 152 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $279($4_1, $4_1);
    $2_1 = $6_1 + 16 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$6_1 + 8 >> 2] = 1;
    HEAP32[$6_1 + 12 >> 2] = 0;
    $2_1 = $6_1 + 24 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $6_1 + 32 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $9_1 = $3_1 + 144 | 0;
    $8_1 = $6_1 + 8 | 0;
    $90($9_1, $8_1);
    $10_1 = $3_1 + 168 | 0;
    $4_1 = $10_1;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $7_1 = $3_1 + 24 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $2_1;
    $11_1 = $3_1 + 160 | 0;
    $4_1 = $11_1;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $7_1 = $3_1 + 16 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$3_1 + 156 >> 2];
    HEAP32[$3_1 + 8 >> 2] = HEAP32[$3_1 + 152 >> 2];
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    $2_1 = HEAP32[$3_1 + 148 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 144 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $2_1;
    $4_1 = $3_1 + 72 | 0;
    $116($4_1, $3_1, 32);
    $148($4_1, $9_1);
    $7_1 = $3_1 + 184 | 0;
    $2_1 = !$83($7_1, $9_1);
    $197($7_1, 1219176, !(HEAP32[$3_1 + 216 >> 2] | (HEAP32[$3_1 + 208 >> 2] | (HEAP32[$3_1 + 200 >> 2] | (HEAP32[$3_1 + 192 >> 2] | HEAP32[$3_1 + 184 >> 2]))) | (HEAP32[$3_1 + 220 >> 2] | (HEAP32[$3_1 + 212 >> 2] | (HEAP32[$3_1 + 204 >> 2] | (HEAP32[$3_1 + 196 >> 2] | HEAP32[$3_1 + 188 >> 2]))))) | $2_1);
    $251($13_1, $7_1);
    $343($7_1);
    $148($4_1, $9_1);
    $2_1 = $3_1 + 352 | 0;
    $79($2_1, $9_1, 0);
    $228($2_1, 1218536, !(HEAP32[$3_1 + 376 >> 2] | (HEAP32[$3_1 + 368 >> 2] | (HEAP32[$3_1 + 360 >> 2] | HEAP32[$3_1 + 352 >> 2])) | (HEAP32[$3_1 + 380 >> 2] | (HEAP32[$3_1 + 372 >> 2] | (HEAP32[$3_1 + 364 >> 2] | HEAP32[$3_1 + 356 >> 2])))));
    HEAP32[$10_1 >> 2] = 0;
    HEAP32[$10_1 + 4 >> 2] = 0;
    HEAP32[$11_1 >> 2] = 0;
    HEAP32[$11_1 + 4 >> 2] = 0;
    HEAP32[$3_1 + 152 >> 2] = 0;
    HEAP32[$3_1 + 156 >> 2] = 0;
    HEAP32[$3_1 + 144 >> 2] = 0;
    HEAP32[$3_1 + 148 >> 2] = 0;
    $4_1 = $6_1;
    $6_1 = $3_1 + 224 | 0;
    $136($4_1, $6_1, $2_1);
    $171($2_1, $2_1);
    $2_1 = HEAP32[$3_1 + 380 >> 2];
    $4_1 = $8_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 376 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$3_1 + 372 >> 2];
    $4_1 = $8_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 368 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$3_1 + 364 >> 2];
    $4_1 = $8_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 360 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$3_1 + 356 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 + 352 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $2_1;
    $91($13_1, $6_1, 128);
    $368($6_1);
    global$0 = $3_1 + 384 | 0;
   }
   if (!(HEAP32[$0_1 >> 2] | !($1_1 & 256))) {
    HEAP32[$5_1 + 376 >> 2] = 0;
    $6_1 = $5_1 + 256 | 0;
    $91($6_1, 1218768, 40);
    $91($5_1 + 296 | 0, 1218808, 40);
    $2_1 = $5_1 + 344 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 352 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 360 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $5_1 + 368 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$0_1 >> 2] = $12_1;
    HEAP32[$5_1 + 336 >> 2] = 1;
    HEAP32[$5_1 + 340 >> 2] = 0;
    $53($12_1, $6_1);
    HEAP32[$0_1 + 4 >> 2] = $12_1 + 524288;
    $4_1 = 128;
    $91($5_1 + 131536 | 0, $6_1, 128);
    while (1) {
     if ($4_1) {
      $2_1 = $5_1 + 131536 | 0;
      $230($2_1, $2_1, 0);
      $4_1 = $4_1 - 1 | 0;
      continue;
     }
     break;
    };
    $53(HEAP32[$0_1 + 4 >> 2], $5_1 + 131536 | 0);
   }
   HEAP32[$0_1 + 192 >> 2] = $1_1 >>> 10 & 1;
   $4_1 = $0_1;
  }
  global$0 = $5_1 + 221696 | 0;
  return $4_1;
 }
 
 function $17($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 336 | 0;
  global$0 = $4_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $2_1;
  $9_1 = HEAP32[$1_1 >> 2];
  $3_1 = $9_1;
  $2_1 = $2_1 << 1 | $3_1 >>> 31;
  $23_1 = HEAP32[$1_1 + 24 >> 2];
  $24_1 = HEAP32[$1_1 + 28 >> 2];
  $36_1 = $3_1 << 1;
  $32_1 = $2_1;
  $297($4_1 - -64 | 0, $23_1, $24_1, 0, 0, $36_1, $2_1, 0, 0);
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  $33_1 = $2_1;
  $31_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = $31_1;
  $2_1 = $2_1 << 1 | $3_1 >>> 31;
  $5_1 = $3_1 << 1;
  $3_1 = $2_1;
  $25_1 = HEAP32[$1_1 + 16 >> 2];
  $16_1 = HEAP32[$1_1 + 20 >> 2];
  $297($4_1 + 272 | 0, $5_1, $2_1, 0, 0, $25_1, $16_1, 0, 0);
  $6_1 = HEAP32[$1_1 + 32 >> 2];
  $1_1 = HEAP32[$1_1 + 36 >> 2];
  $297($4_1 + 224 | 0, $6_1, $1_1, 0, 0, $6_1, $1_1, 0, 0);
  $2_1 = HEAP32[$4_1 + 228 >> 2];
  $14_1 = $2_1;
  $297($4_1 + 208 | 0, HEAP32[$4_1 + 224 >> 2], $2_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $2_1 = $1_1 << 1 | $6_1 >>> 31;
  $34_1 = $6_1 << 1;
  $26_1 = $2_1;
  $297($4_1 + 176 | 0, $34_1, $2_1, 0, 0, $9_1, $7_1, 0, 0);
  $297($4_1 + 80 | 0, $23_1, $24_1, 0, 0, $5_1, $3_1, 0, 0);
  $297($4_1 + 256 | 0, $25_1, $16_1, 0, 0, $25_1, $16_1, 0, 0);
  $1_1 = $4_1 + 232 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 >> 2];
  $2_1 = $6_1 << 12;
  $5_1 = $3_1 << 12 | $6_1 >>> 20;
  $297($4_1 + 192 | 0, $14_1 >>> 20 | $2_1, $5_1, $3_1 >>> 20 | 0, 0, 15632, 16, 0, 0);
  $297($4_1 + 320 | 0, $9_1, $7_1, 0, 0, $9_1, $7_1, 0, 0);
  $297($4_1 + 160 | 0, $34_1, $26_1, 0, 0, $31_1, $33_1, 0, 0);
  $2_1 = $25_1;
  $1_1 = $16_1 << 1 | $2_1 >>> 31;
  $297($4_1 + 96 | 0, $2_1 << 1, $1_1, 0, 0, $23_1, $24_1, 0, 0);
  $27_1 = HEAP32[$4_1 + 164 >> 2];
  $1_1 = $27_1 + HEAP32[$4_1 + 100 >> 2] | 0;
  $21_1 = HEAP32[$4_1 + 160 >> 2];
  $2_1 = HEAP32[$4_1 + 96 >> 2];
  $3_1 = $21_1 + $2_1 | 0;
  $13_1 = $3_1;
  $5_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $19_1 = HEAP32[$4_1 + 80 >> 2];
  $2_1 = HEAP32[$4_1 + 256 >> 2];
  $3_1 = $19_1 + $2_1 | 0;
  $17_1 = HEAP32[$4_1 + 84 >> 2];
  $1_1 = $17_1 + HEAP32[$4_1 + 260 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $3_1;
  $3_1 = HEAP32[$4_1 + 176 >> 2];
  $14_1 = $18_1 + $3_1 | 0;
  $28_1 = $1_1;
  $2_1 = $1_1 + HEAP32[$4_1 + 180 >> 2] | 0;
  $2_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $29_1 = $14_1;
  $1_1 = HEAP32[$4_1 + 192 >> 2];
  $3_1 = $14_1 + $1_1 | 0;
  $12_1 = $2_1;
  $2_1 = $2_1 + HEAP32[$4_1 + 196 >> 2] | 0;
  $9_1 = $3_1;
  $3_1 = $1_1 >>> 0 > $3_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $7_1 = HEAP32[$4_1 + 64 >> 2];
  $2_1 = HEAP32[$4_1 + 272 >> 2];
  $14_1 = $7_1 + $2_1 | 0;
  $15_1 = HEAP32[$4_1 + 68 >> 2];
  $1_1 = $15_1 + HEAP32[$4_1 + 276 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = $14_1;
  $14_1 = HEAP32[$4_1 + 208 >> 2];
  $6_1 = $10_1 + $14_1 | 0;
  $2_1 = HEAP32[$4_1 + 212 >> 2] + $1_1 | 0;
  $30_1 = $6_1;
  $35_1 = $6_1 >>> 0 < $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $11_1 = $35_1 >>> 20 | 0;
  $6_1 = $4_1 + 216 | 0;
  $2_1 = HEAP32[$6_1 >> 2];
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $20_1 = ($1_1 | 0) == ($35_1 | 0) & $10_1 >>> 0 > $30_1 >>> 0 | $1_1 >>> 0 > $35_1 >>> 0;
  $14_1 = $2_1;
  $10_1 = ($1_1 | 0) == ($15_1 | 0) & $7_1 >>> 0 > $10_1 >>> 0 | $1_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $4_1 + 280 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $6_1 = $4_1 + 72 | 0;
  $7_1 = $2_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $6_1 = $10_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $14_1 + $6_1 | 0;
  $2_1 = $1_1 + $8_1 | 0;
  $2_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $6_1 = $7_1;
  $8_1 = $20_1 + $6_1 | 0;
  $1_1 = $2_1;
  $1_1 = $6_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $8_1;
  $2_1 = $7_1 << 12 | $11_1;
  $8_1 = $2_1 + $9_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $7_1 >>> 20) + $3_1 | 0;
  $14_1 = $8_1;
  $11_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $20_1 = $11_1 >>> 20 | 0;
  $1_1 = $4_1 + 200 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $4_1 + 184 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$2_1 + 4 >> 2];
  $37_1 = ($3_1 | 0) == ($11_1 | 0) & $9_1 >>> 0 > $14_1 >>> 0 | $3_1 >>> 0 > $11_1 >>> 0;
  $7_1 = ($3_1 | 0) == ($12_1 | 0) & $9_1 >>> 0 < $29_1 >>> 0 | $3_1 >>> 0 < $12_1 >>> 0;
  $8_1 = $1_1;
  $1_1 = $4_1 + 264 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 88 | 0;
  $9_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $2_1 + (($17_1 | 0) == ($28_1 | 0) & $18_1 >>> 0 < $19_1 >>> 0 | $17_1 >>> 0 > $28_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $8_1 + $2_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = $3_1 + (($12_1 | 0) == ($28_1 | 0) & $18_1 >>> 0 > $29_1 >>> 0 | $12_1 >>> 0 < $28_1 >>> 0) | 0;
  $2_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $9_1 = $3_1 + $22_1 | 0;
  $1_1 = $2_1 + $15_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $9_1;
  $3_1 = $7_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $6_1 >>> 20 | 0;
  $6_1 = $2_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $3_1 = $37_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = $3_1;
  $3_1 = $3_1 << 12 | $20_1;
  $9_1 = $3_1 + $13_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $10_1 >>> 20) + $5_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $11_1;
  $8_1 = $1_1;
  $297($4_1, $9_1 << 4 & -16 | $11_1 >>> 16 & 15, ($1_1 << 4 | $9_1 >>> 28) & 16777215, 0, 0, 977, 1, 0, 0);
  $17_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $17_1 + HEAP32[$4_1 + 324 >> 2] | 0;
  $19_1 = HEAP32[$4_1 >> 2];
  $2_1 = HEAP32[$4_1 + 320 >> 2];
  $3_1 = $19_1 + $2_1 | 0;
  $10_1 = $3_1;
  HEAP32[$0_1 >> 2] = $3_1;
  $7_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 4 >> 2] = $7_1 & 1048575;
  $297($4_1 + 304 | 0, $36_1, $32_1, 0, 0, $31_1, $33_1, 0, 0);
  $297($4_1 + 144 | 0, $34_1, $26_1, 0, 0, $25_1, $16_1, 0, 0);
  $297($4_1 + 112 | 0, $23_1, $24_1, 0, 0, $23_1, $24_1, 0, 0);
  $22_1 = $4_1 + 48 | 0;
  $18_1 = HEAP32[$4_1 + 148 >> 2];
  $1_1 = $18_1 + HEAP32[$4_1 + 116 >> 2] | 0;
  $20_1 = HEAP32[$4_1 + 144 >> 2];
  $2_1 = HEAP32[$4_1 + 112 >> 2];
  $3_1 = $20_1 + $2_1 | 0;
  $12_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = ($5_1 | 0) == ($8_1 | 0) & $9_1 >>> 0 < $13_1 >>> 0 | $5_1 >>> 0 > $8_1 >>> 0;
  $9_1 = ($5_1 | 0) == ($27_1 | 0) & $13_1 >>> 0 < $21_1 >>> 0 | $5_1 >>> 0 < $27_1 >>> 0;
  $2_1 = $4_1 + 104 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $5_1 = $4_1 + 168 | 0;
  $13_1 = $1_1 + HEAP32[$5_1 >> 2] | 0;
  $2_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
  $2_1 = $1_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $5_1 = $13_1;
  $13_1 = $9_1 + $5_1 | 0;
  $1_1 = $2_1;
  $1_1 = $5_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1 >>> 20 | 0;
  $6_1 = $5_1 + $13_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $6_1;
  $6_1 = $11_1 + $5_1 | 0;
  $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $6_1;
  $5_1 = $6_1 << 12 | $8_1 >>> 20;
  $8_1 = $5_1 + $12_1 | 0;
  $6_1 = $2_1;
  $2_1 = ($2_1 << 12 | $15_1 >>> 20) + $3_1 | 0;
  $21_1 = $8_1;
  $9_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $297($22_1, $8_1, $9_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $11_1 = $0_1;
  $29_1 = HEAP32[$4_1 + 52 >> 2];
  $1_1 = $29_1 + HEAP32[$4_1 + 308 >> 2] | 0;
  $27_1 = HEAP32[$4_1 + 48 >> 2];
  $2_1 = HEAP32[$4_1 + 304 >> 2];
  $5_1 = $27_1 + $2_1 | 0;
  $13_1 = $5_1;
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $0_1 = ($7_1 | 0) == ($17_1 | 0) & $10_1 >>> 0 < $19_1 >>> 0 | $7_1 >>> 0 < $17_1 >>> 0;
  $1_1 = $4_1 + 328 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $8_1 = $4_1 + 8 | 0;
  $10_1 = $2_1 + HEAP32[$8_1 >> 2] | 0;
  $1_1 = HEAP32[$8_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $10_1;
  $10_1 = $0_1 + $8_1 | 0;
  $2_1 = $8_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $10_1 << 12 | $7_1 >>> 20;
  $22_1 = $7_1 + $13_1 | 0;
  $8_1 = $2_1;
  $1_1 = ($2_1 << 12 | $10_1 >>> 20) + $5_1 | 0;
  $17_1 = $22_1;
  HEAP32[$11_1 + 8 >> 2] = $17_1;
  $7_1 = $7_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$11_1 + 12 >> 2] = $7_1 & 1048575;
  $297($4_1 + 240 | 0, $25_1, $16_1, 0, 0, $36_1, $32_1, 0, 0);
  $297($4_1 + 288 | 0, $31_1, $33_1, 0, 0, $31_1, $33_1, 0, 0);
  $297($4_1 + 128 | 0, $34_1, $26_1, 0, 0, $23_1, $24_1, 0, 0);
  $10_1 = ($3_1 | 0) == ($9_1 | 0) & $12_1 >>> 0 > $21_1 >>> 0 | $3_1 >>> 0 > $9_1 >>> 0;
  $0_1 = ($3_1 | 0) == ($18_1 | 0) & $12_1 >>> 0 < $20_1 >>> 0 | $3_1 >>> 0 < $18_1 >>> 0;
  $1_1 = $4_1 + 120 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 152 | 0;
  $12_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $12_1;
  $3_1 = $0_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $0_1 = $3_1;
  $3_1 = $6_1 >>> 20 | 0;
  $6_1 = $0_1 + $3_1 | 0;
  $2_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $10_1 + $3_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $6_1;
  $22_1 = $6_1 << 12 | $9_1 >>> 20;
  $3_1 = HEAP32[$4_1 + 128 >> 2];
  $9_1 = $22_1 + $3_1 | 0;
  $6_1 = $1_1;
  $21_1 = $1_1 << 12 | $16_1 >>> 20;
  $1_1 = $21_1 + HEAP32[$4_1 + 132 >> 2] | 0;
  $18_1 = $9_1;
  $9_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($4_1 + 32 | 0, $18_1, $9_1 & 1048575, 0, 0, 15632, 16, 0, 0);
  $26_1 = HEAP32[$4_1 + 240 >> 2];
  $2_1 = HEAP32[$4_1 + 288 >> 2];
  $3_1 = $26_1 + $2_1 | 0;
  $19_1 = HEAP32[$4_1 + 244 >> 2];
  $1_1 = $19_1 + HEAP32[$4_1 + 292 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $20_1 = $3_1;
  $2_1 = HEAP32[$4_1 + 32 >> 2];
  $3_1 = $3_1 + $2_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$4_1 + 36 >> 2] | 0;
  $12_1 = $3_1;
  $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = ($5_1 | 0) == ($7_1 | 0) & $13_1 >>> 0 > $17_1 >>> 0 | $5_1 >>> 0 > $7_1 >>> 0;
  $0_1 = ($5_1 | 0) == ($29_1 | 0) & $13_1 >>> 0 < $27_1 >>> 0 | $5_1 >>> 0 < $29_1 >>> 0;
  $1_1 = $4_1 + 312 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $4_1 + 56 | 0;
  $13_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $13_1;
  $5_1 = $0_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $0_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $8_1 = $0_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $8_1;
  $8_1 = $10_1 + $5_1 | 0;
  $2_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = $8_1;
  $8_1 = $8_1 << 12 | $7_1 >>> 20;
  $7_1 = $8_1 + $12_1 | 0;
  $5_1 = $2_1;
  $1_1 = ($2_1 << 12 | $13_1 >>> 20) + $3_1 | 0;
  $32_1 = $7_1;
  HEAP32[$11_1 + 16 >> 2] = $7_1;
  $8_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$11_1 + 20 >> 2] = $8_1 & 1048575;
  $2_1 = $4_1 + 136 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = $6_1 >>> 20 | 0;
  $6_1 = $2_1 + $1_1 | 0;
  $1_1 = $7_1;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $6_1 + (($9_1 | 0) == ($21_1 | 0) & $22_1 >>> 0 > $18_1 >>> 0 | $9_1 >>> 0 < $21_1 >>> 0) | 0;
  $2_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($4_1 + 16 | 0, $7_1 << 12 | $9_1 >>> 20, $2_1 << 12 | $7_1 >>> 20, $2_1 >>> 20 | 0, 0, 15632, 16, 0, 0);
  $6_1 = $11_1;
  $10_1 = HEAP32[$4_1 + 20 >> 2];
  $1_1 = $10_1 + ($35_1 & 1048575) | 0;
  $16_1 = HEAP32[$4_1 + 16 >> 2];
  $2_1 = $30_1 & -2;
  $11_1 = $16_1 + $2_1 | 0;
  $9_1 = $11_1;
  $11_1 = $2_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1 + 40 | 0;
  $1_1 = HEAP32[$2_1 >> 2];
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $30_1 = ($3_1 | 0) == ($8_1 | 0) & $12_1 >>> 0 > $32_1 >>> 0 | $3_1 >>> 0 > $8_1 >>> 0;
  $13_1 = ($3_1 | 0) == ($15_1 | 0) & $12_1 >>> 0 < $20_1 >>> 0 | $3_1 >>> 0 < $15_1 >>> 0;
  $0_1 = $1_1;
  $1_1 = $4_1 + 296 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + 248 | 0;
  $12_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $12_1;
  $3_1 = $2_1 + (($15_1 | 0) == ($19_1 | 0) & $20_1 >>> 0 < $26_1 >>> 0 | $15_1 >>> 0 < $19_1 >>> 0) | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $0_1 + $3_1 | 0;
  $2_1 = $1_1 + $7_1 | 0;
  $2_1 = $3_1 >>> 0 > $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $3_1 = $12_1;
  $7_1 = $13_1 + $3_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1 >>> 20 | 0;
  $5_1 = $3_1 + $7_1 | 0;
  $2_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $30_1 + $3_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $5_1;
  $3_1 = $5_1 << 12 | $8_1 >>> 20;
  $8_1 = $3_1 + $9_1 | 0;
  $5_1 = $1_1;
  $2_1 = ($1_1 << 12 | $7_1 >>> 20) + $11_1 | 0;
  $30_1 = $8_1;
  HEAP32[$6_1 + 24 >> 2] = $8_1;
  $2_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$6_1 + 28 >> 2] = $2_1 & 1048575;
  $8_1 = $28_1 & 65535;
  $3_1 = $6_1;
  $0_1 = $2_1;
  $7_1 = ($2_1 | 0) == ($11_1 | 0) & $9_1 >>> 0 > $30_1 >>> 0 | $2_1 >>> 0 < $11_1 >>> 0;
  $2_1 = ($11_1 | 0) == ($10_1 | 0) & $9_1 >>> 0 < $16_1 >>> 0 | $11_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $4_1 + 24 | 0;
  $11_1 = $2_1 + HEAP32[$1_1 >> 2] | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $5_1 >>> 20 | 0;
  $6_1 = $5_1 + $11_1 | 0;
  $1_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $5_1 = $7_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1 << 12 | $5_1 >>> 20;
  $0_1 = $5_1 << 12 | $0_1 >>> 20;
  $5_1 = $0_1 + $14_1 | 0;
  $1_1 = $2_1 + $8_1 | 0;
  HEAP32[$3_1 + 32 >> 2] = $5_1;
  HEAP32[$3_1 + 36 >> 2] = $0_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  global$0 = $4_1 + 336 | 0;
 }
 
 function $18($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 320 | 0;
  global$0 = $4_1;
  $147($4_1 + 280 | 0, 0, 40);
  $3_1 = $4_1 + 272 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 264 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 256 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 248 >> 2] = 0;
  HEAP32[$4_1 + 252 >> 2] = 0;
  HEAP32[$4_1 + 240 >> 2] = 1;
  HEAP32[$4_1 + 244 >> 2] = 0;
  $91($4_1 + 200 | 0, $1_1, 40);
  $91($4_1 + 160 | 0, $0_1, 40);
  $38_1 = $4_1 + 168 | 0;
  $26_1 = 5;
  $21_1 = -1;
  $31_1 = -1;
  while (1) {
   $12_1 = 62;
   $13_1 = 0;
   $6_1 = 0;
   $27_1 = 0;
   $17_1 = 0;
   $10_1 = 1;
   $8_1 = 0;
   $16_1 = HEAP32[$4_1 + 200 >> 2];
   $14_1 = $16_1;
   $18_1 = HEAP32[$4_1 + 204 >> 2];
   $23_1 = $18_1;
   $7_1 = HEAP32[$4_1 + 164 >> 2];
   $15_1 = $7_1;
   $19_1 = HEAP32[$4_1 + 160 >> 2];
   $24_1 = $19_1;
   $20_1 = 1;
   $3_1 = 0;
   while (1) {
    $2_1 = $12_1 & 31;
    $5_1 = $21_1;
    if (($12_1 & 63) >>> 0 >= 32) {
     $2_1 = -1 << $2_1;
     $9_1 = 0;
    } else {
     $9_1 = -1 << $2_1;
     $2_1 = $9_1 | (1 << $2_1) - 1 & -1 >>> 32 - $2_1;
    }
    $21_1 = $9_1 | $24_1;
    $11_1 = $2_1 | $7_1;
    __inlined_func$__wasm_ctz_i64 : {
     if ($21_1 | $11_1) {
      $2_1 = $11_1 - 1 | 0;
      $9_1 = $21_1 - 1 | 0;
      $2_1 = ($9_1 | 0) != -1 ? $2_1 + 1 | 0 : $2_1;
      $2_1 = Math_clz32($2_1 ^ $11_1);
      $9_1 = ($2_1 | 0) == 32 ? Math_clz32($9_1 ^ $21_1) + 32 | 0 : $2_1;
      $2_1 = 63 - $9_1 | 0;
      i64toi32_i32$HIGH_BITS = 0 - ($9_1 >>> 0 > 63) | 0;
      break __inlined_func$__wasm_ctz_i64;
     }
     i64toi32_i32$HIGH_BITS = 0;
     $2_1 = 64;
    }
    $9_1 = $2_1;
    $2_1 = $9_1;
    $21_1 = $5_1 - $2_1 | 0;
    $31_1 = $31_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 > $5_1 >>> 0) | 0) | 0;
    $5_1 = $2_1 & 31;
    if (($2_1 & 63) >>> 0 >= 32) {
     $2_1 = $13_1 << $5_1;
     $13_1 = 0;
    } else {
     $2_1 = (1 << $5_1) - 1 & $13_1 >>> 32 - $5_1 | $6_1 << $5_1;
     $13_1 = $13_1 << $5_1;
    }
    $6_1 = $2_1;
    $5_1 = $9_1 & 31;
    if (($9_1 & 63) >>> 0 >= 32) {
     $2_1 = $20_1 << $5_1;
     $20_1 = 0;
    } else {
     $2_1 = (1 << $5_1) - 1 & $20_1 >>> 32 - $5_1 | $3_1 << $5_1;
     $20_1 = $20_1 << $5_1;
    }
    $3_1 = $2_1;
    $12_1 = $12_1 - $9_1 | 0;
    if ($12_1) {
     $5_1 = $9_1 & 31;
     if (($9_1 & 63) >>> 0 >= 32) {
      $2_1 = 0;
      $9_1 = $7_1 >>> $5_1 | 0;
     } else {
      $2_1 = $7_1 >>> $5_1 | 0;
      $9_1 = ((1 << $5_1) - 1 & $7_1) << 32 - $5_1 | $24_1 >>> $5_1;
     }
     label$4 : {
      if (($31_1 | 0) < 0) {
       $7_1 = __wasm_i64_mul($9_1, $2_1, $9_1, $2_1);
       $28_1 = $7_1 - 2 | 0;
       $5_1 = i64toi32_i32$HIGH_BITS - ($7_1 >>> 0 < 2) | 0;
       $24_1 = 0 - $14_1 | 0;
       $7_1 = 0 - ((($14_1 | 0) != 0) + $23_1 | 0) | 0;
       $5_1 = __wasm_i64_mul($28_1, $5_1, __wasm_i64_mul($9_1, $2_1, $24_1, $7_1), i64toi32_i32$HIGH_BITS);
       $32_1 = 0 - $13_1 | 0;
       $11_1 = 0 - ((($13_1 | 0) != 0) + $6_1 | 0) | 0;
       $28_1 = 0 - $20_1 | 0;
       $29_1 = 0 - ((($20_1 | 0) != 0) + $3_1 | 0) | 0;
       $30_1 = 63;
       $13_1 = $10_1;
       $6_1 = $8_1;
       $14_1 = $9_1;
       $23_1 = $2_1;
       $20_1 = $27_1;
       $3_1 = $17_1;
       $2_1 = $21_1;
       $21_1 = 0 - $2_1 | 0;
       $31_1 = 0 - ((($2_1 | 0) != 0) + $31_1 | 0) | 0;
       $2_1 = ($12_1 | 0) > ($21_1 | 0) ? $21_1 + 1 | 0 : $12_1;
       break label$4;
      }
      $5_1 = __wasm_i64_mul($9_1, $2_1, 0 - ((($14_1 << 1) + 2 & 8) + $14_1 | 0) | 0, 0);
      $30_1 = 15;
      $28_1 = $27_1;
      $29_1 = $17_1;
      $32_1 = $10_1;
      $11_1 = $8_1;
      $24_1 = $9_1;
      $7_1 = $2_1;
      $2_1 = ($12_1 | 0) > ($21_1 | 0) ? $21_1 + 1 | 0 : $12_1;
     }
     $2_1 = 64 - $2_1 | 0;
     $8_1 = $2_1 & 31;
     $10_1 = -1 >>> $8_1 | 0;
     $5_1 = (($2_1 & 63) >>> 0 >= 32 ? $10_1 : $10_1 | (1 << $8_1) - 1 << 32 - $8_1) & ($5_1 & $30_1);
     $8_1 = __wasm_i64_mul($5_1, 0, $13_1, $6_1) + $32_1 | 0;
     $10_1 = $8_1;
     $2_1 = $11_1 + i64toi32_i32$HIGH_BITS | 0;
     $8_1 = $8_1 >>> 0 < $32_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $17_1 = __wasm_i64_mul($5_1, 0, $20_1, $3_1) + $28_1 | 0;
     $27_1 = $17_1;
     $2_1 = $29_1 + i64toi32_i32$HIGH_BITS | 0;
     $17_1 = $17_1 >>> 0 < $28_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $2_1 = __wasm_i64_mul($5_1, 0, $14_1, $23_1) + $24_1 | 0;
     $7_1 = $7_1 + i64toi32_i32$HIGH_BITS | 0;
     $7_1 = $2_1 >>> 0 < $24_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $24_1 = $2_1;
     continue;
    }
    break;
   };
   HEAP32[$4_1 + 152 >> 2] = $10_1;
   HEAP32[$4_1 + 156 >> 2] = $8_1;
   HEAP32[$4_1 + 144 >> 2] = $27_1;
   HEAP32[$4_1 + 148 >> 2] = $17_1;
   HEAP32[$4_1 + 136 >> 2] = $13_1;
   HEAP32[$4_1 + 140 >> 2] = $6_1;
   HEAP32[$4_1 + 128 >> 2] = $20_1;
   HEAP32[$4_1 + 132 >> 2] = $3_1;
   $7($4_1 + 280 | 0, $4_1 + 240 | 0, $4_1 + 128 | 0, $1_1);
   $39_1 = $20_1;
   $40_1 = $3_1;
   $30_1 = $3_1 >> 31;
   $2_1 = $18_1 >> 31;
   $297($4_1 + 112 | 0, $20_1, $3_1, $30_1, $30_1, $16_1, $18_1, $2_1, $2_1);
   $32_1 = $13_1;
   $28_1 = $6_1;
   $29_1 = $6_1 >> 31;
   $3_1 = $15_1 >> 31;
   $297($4_1 + 80 | 0, $13_1, $6_1, $29_1, $29_1, $19_1, $15_1, $3_1, $3_1);
   $9_1 = $27_1;
   $24_1 = $17_1;
   $13_1 = $17_1 >> 31;
   $297($4_1 + 96 | 0, $9_1, $17_1, $13_1, $13_1, $16_1, $18_1, $2_1, $2_1);
   $20_1 = $10_1;
   $27_1 = $8_1;
   $17_1 = $8_1 >> 31;
   $297($4_1 - -64 | 0, $10_1, $8_1, $17_1, $17_1, $19_1, $15_1, $3_1, $3_1);
   $5_1 = HEAP32[$4_1 + 64 >> 2];
   $6_1 = HEAP32[$4_1 + 96 >> 2];
   $23_1 = $5_1 + $6_1 | 0;
   $10_1 = $4_1 + 104 | 0;
   $8_1 = HEAP32[$10_1 >> 2];
   $7_1 = $4_1 + 72 | 0;
   $2_1 = $8_1 + HEAP32[$7_1 >> 2] | 0;
   $19_1 = HEAP32[$4_1 + 68 >> 2];
   $3_1 = $19_1 + HEAP32[$4_1 + 100 >> 2] | 0;
   $3_1 = $6_1 >>> 0 > $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $11_1 = $3_1;
   $6_1 = $2_1 + (($3_1 | 0) == ($19_1 | 0) & $5_1 >>> 0 > $23_1 >>> 0 | $3_1 >>> 0 < $19_1 >>> 0) | 0;
   $14_1 = $6_1;
   $3_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$10_1 + 4 >> 2] | 0;
   $3_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $23_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $5_1 = HEAP32[$4_1 + 80 >> 2];
   $7_1 = HEAP32[$4_1 + 112 >> 2];
   $12_1 = $5_1 + $7_1 | 0;
   $10_1 = $4_1 + 120 | 0;
   $8_1 = HEAP32[$10_1 >> 2];
   $2_1 = $4_1 + 88 | 0;
   $6_1 = $8_1 + HEAP32[$2_1 >> 2] | 0;
   $19_1 = HEAP32[$4_1 + 84 >> 2];
   $3_1 = $19_1 + HEAP32[$4_1 + 116 >> 2] | 0;
   $3_1 = $7_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $7_1 = $3_1;
   $5_1 = $6_1 + (($3_1 | 0) == ($19_1 | 0) & $5_1 >>> 0 > $12_1 >>> 0 | $3_1 >>> 0 < $19_1 >>> 0) | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2] + HEAP32[$10_1 + 4 >> 2] | 0;
   $3_1 = $6_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $2_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
   $6_1 = $4_1 + 160 | 0;
   $3_1 = $4_1 + 200 | 0;
   $35_1 = (($26_1 | 0) > 1 ? $26_1 : 1) - 1 | 0;
   $12_1 = $35_1;
   while (1) {
    $25_1 = $5_1 << 2 | $7_1 >>> 30;
    $19_1 = $2_1;
    $22_1 = $2_1 << 2 | $5_1 >>> 30;
    $18_1 = $14_1 << 2 | $11_1 >>> 30;
    $15_1 = $23_1 << 2 | $14_1 >>> 30;
    if ($12_1) {
     $10_1 = $3_1 + 8 | 0;
     $2_1 = $10_1;
     $16_1 = HEAP32[$2_1 + 4 >> 2];
     $11_1 = HEAP32[$2_1 >> 2];
     $5_1 = $16_1 >> 31;
     $297($4_1, $11_1, $16_1, $5_1, $5_1, $39_1, $40_1, $30_1, $30_1);
     $8_1 = $6_1 + 8 | 0;
     $2_1 = $8_1;
     $14_1 = HEAP32[$2_1 + 4 >> 2];
     $7_1 = HEAP32[$2_1 >> 2];
     $2_1 = $14_1 >> 31;
     $297($4_1 + 16 | 0, $7_1, $14_1, $2_1, $2_1, $32_1, $28_1, $29_1, $29_1);
     $297($4_1 + 32 | 0, $11_1, $16_1, $5_1, $5_1, $9_1, $24_1, $13_1, $13_1);
     $297($4_1 + 48 | 0, $7_1, $14_1, $2_1, $2_1, $20_1, $27_1, $17_1, $17_1);
     $36_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $22_1 + $36_1 | 0;
     $7_1 = $2_1 + 1 | 0;
     $14_1 = $2_1;
     $37_1 = HEAP32[$4_1 >> 2];
     $2_1 = $25_1 + $37_1 | 0;
     $33_1 = $2_1 >>> 0 < $25_1 >>> 0 ? $7_1 : $14_1;
     $11_1 = $33_1 + HEAP32[$4_1 + 20 >> 2] | 0;
     $5_1 = HEAP32[$4_1 + 16 >> 2];
     $7_1 = $5_1 + $2_1 | 0;
     $41_1 = $7_1;
     HEAP32[$3_1 >> 2] = $7_1;
     $7_1 = $5_1 >>> 0 > $7_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
     HEAP32[$3_1 + 4 >> 2] = $7_1 & 1073741823;
     $22_1 = HEAP32[$4_1 + 36 >> 2];
     $3_1 = $15_1 + $22_1 | 0;
     $5_1 = $3_1 + 1 | 0;
     $14_1 = $3_1;
     $16_1 = HEAP32[$4_1 + 32 >> 2];
     $3_1 = $18_1 + $16_1 | 0;
     $34_1 = $3_1 >>> 0 < $18_1 >>> 0 ? $5_1 : $14_1;
     $15_1 = $34_1 + HEAP32[$4_1 + 52 >> 2] | 0;
     $11_1 = HEAP32[$4_1 + 48 >> 2];
     $5_1 = $11_1 + $3_1 | 0;
     $14_1 = $5_1;
     HEAP32[$6_1 >> 2] = $5_1;
     $11_1 = $5_1 >>> 0 < $11_1 >>> 0 ? $15_1 + 1 | 0 : $15_1;
     HEAP32[$6_1 + 4 >> 2] = $11_1 & 1073741823;
     $18_1 = $23_1 >> 30;
     $25_1 = $4_1 + 40 | 0;
     $15_1 = $18_1 + HEAP32[$25_1 >> 2] | 0;
     $16_1 = $15_1 + (($34_1 | 0) == ($22_1 | 0) & $3_1 >>> 0 < $16_1 >>> 0 | $34_1 >>> 0 < $22_1 >>> 0) | 0;
     $22_1 = $4_1 + 56 | 0;
     $5_1 = $16_1 + HEAP32[$22_1 >> 2] | 0;
     $6_1 = $5_1 + (($11_1 | 0) == ($34_1 | 0) & $3_1 >>> 0 > $14_1 >>> 0 | $11_1 >>> 0 < $34_1 >>> 0) | 0;
     $14_1 = $6_1;
     $3_1 = HEAP32[$25_1 + 4 >> 2] + ($23_1 >> 31) | 0;
     $3_1 = $15_1 >>> 0 < $18_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $3_1 = HEAP32[$22_1 + 4 >> 2] + ($15_1 >>> 0 > $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1) | 0;
     $3_1 = $5_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $23_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $25_1 = $19_1 >> 30;
     $18_1 = $4_1 + 8 | 0;
     $15_1 = $25_1 + HEAP32[$18_1 >> 2] | 0;
     $16_1 = $15_1 + (($33_1 | 0) == ($36_1 | 0) & $2_1 >>> 0 < $37_1 >>> 0 | $33_1 >>> 0 < $36_1 >>> 0) | 0;
     $3_1 = $4_1 + 24 | 0;
     $6_1 = $16_1 + HEAP32[$3_1 >> 2] | 0;
     $5_1 = $6_1 + (($7_1 | 0) == ($33_1 | 0) & $2_1 >>> 0 > $41_1 >>> 0 | $7_1 >>> 0 < $33_1 >>> 0) | 0;
     $2_1 = HEAP32[$3_1 + 4 >> 2];
     $3_1 = HEAP32[$18_1 + 4 >> 2] + ($19_1 >> 31) | 0;
     $3_1 = $15_1 >>> 0 < $25_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $3_1 = $2_1 + ($15_1 >>> 0 > $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1) | 0;
     $3_1 = $6_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $2_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
     $12_1 = $12_1 - 1 | 0;
     $3_1 = $10_1;
     $6_1 = $8_1;
     continue;
    }
    break;
   };
   $3_1 = $26_1 - 1 | 0;
   $2_1 = $3_1 << 3;
   $6_1 = $2_1 + ($4_1 + 160 | 0) | 0;
   HEAP32[$6_1 >> 2] = $18_1;
   HEAP32[$6_1 + 4 >> 2] = $15_1;
   $6_1 = $2_1 + ($4_1 + 200 | 0) | 0;
   HEAP32[$6_1 >> 2] = $25_1;
   HEAP32[$6_1 + 4 >> 2] = $22_1;
   label$8 : {
    if (!(HEAP32[$4_1 + 160 >> 2] | HEAP32[$4_1 + 164 >> 2])) {
     $13_1 = 0;
     $6_1 = 0;
     $12_1 = $38_1;
     while (1) {
      if ($35_1) {
       $35_1 = $35_1 - 1 | 0;
       $13_1 = $13_1 | HEAP32[$12_1 >> 2];
       $6_1 = $6_1 | HEAP32[$12_1 + 4 >> 2];
       $12_1 = $12_1 + 8 | 0;
       continue;
      }
      break;
     };
     if (!($6_1 | $13_1)) {
      break label$8
     }
    }
    $2_1 = ($26_1 >> 31) - ($26_1 >>> 0 < 2) >> 31;
    $8_1 = $22_1 >> 31;
    $6_1 = $15_1 >> 31;
    if ($2_1 | $8_1 ^ $25_1 | $6_1 ^ $18_1 | ($2_1 | $8_1 ^ $22_1 | $6_1 ^ $15_1)) {
     continue
    }
    $8_1 = ($26_1 << 3) - 16 | 0;
    $10_1 = $8_1 + ($4_1 + 200 | 0) | 0;
    $2_1 = HEAP32[$10_1 >> 2];
    $6_1 = HEAP32[$10_1 + 4 >> 2] | $7_1 & -1073741824;
    HEAP32[$10_1 >> 2] = $2_1;
    HEAP32[$10_1 + 4 >> 2] = $6_1;
    $7_1 = $8_1 + ($4_1 + 160 | 0) | 0;
    $2_1 = HEAP32[$7_1 >> 2];
    $6_1 = HEAP32[$7_1 + 4 >> 2] | $11_1 & -1073741824;
    HEAP32[$7_1 >> 2] = $2_1;
    HEAP32[$7_1 + 4 >> 2] = $6_1;
    $26_1 = $3_1;
    continue;
   }
   break;
  };
  $3_1 = $4_1 + 280 | 0;
  $106($3_1, $22_1, $1_1);
  $91($0_1, $3_1, 40);
  global$0 = $4_1 + 320 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $9_1 = HEAP32[$0_1 >> 2];
  $0_1 = 1;
  label$1 : {
   $13_1 = HEAP32[$1_1 + 24 >> 2];
   $14_1 = HEAP32[$1_1 + 28 >> 2];
   $15_1 = HEAP32[$14_1 + 16 >> 2];
   if (FUNCTION_TABLE[$15_1 | 0]($13_1, 34) | 0) {
    break label$1
   }
   HEAP32[$5_1 + 20 >> 2] = $9_1;
   HEAP32[$5_1 + 24 >> 2] = $8_1 + $9_1;
   HEAP32[$5_1 + 16 >> 2] = 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $254($5_1 + 8 | 0, $5_1 + 16 | 0);
      $1_1 = 116;
      $0_1 = 2;
      $3_1 = 0;
      $7_1 = HEAP32[$5_1 + 8 >> 2];
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $2_1 = HEAP32[$5_1 + 12 >> 2];
            switch ($2_1 - 9 | 0) {
            case 0:
             break label$5;
            case 2:
            case 3:
             break label$7;
            case 1:
             break label$8;
            case 4:
             break label$9;
            default:
             break label$10;
            };
           }
           if (($2_1 | 0) == 34 | ($2_1 | 0) == 92) {
            break label$6
           }
           if (($2_1 | 0) != 1114112) {
            break label$7
           }
           $256($5_1, $9_1, $8_1, $6_1);
           $0_1 = 1;
           if (FUNCTION_TABLE[HEAP32[$14_1 + 12 >> 2]]($13_1, HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2]) | 0) {
            break label$1
           }
           $0_1 = FUNCTION_TABLE[$15_1 | 0]($13_1, 34) | 0;
           break label$1;
          }
          $1_1 = 114;
          break label$5;
         }
         $1_1 = 110;
         break label$5;
        }
        $10_1 = $2_1 << 11;
        $0_1 = 0;
        $1_1 = 32;
        $3_1 = 32;
        while (1) {
         label$12 : {
          if ($0_1 >>> 0 >= $1_1 >>> 0) {
           $3_1 = $0_1;
           break label$12;
          }
          $3_1 = ($3_1 >>> 1 | 0) + $0_1 | 0;
          $11_1 = HEAP32[($3_1 << 2) + 1064276 >> 2] << 11;
          label$14 : {
           if ($11_1 >>> 0 >= $10_1 >>> 0) {
            if (($10_1 | 0) == ($11_1 | 0)) {
             break label$12
            }
            $1_1 = $3_1;
            break label$14;
           }
           $0_1 = $3_1 + 1 | 0;
          }
          $3_1 = $1_1 - $0_1 | 0;
          continue;
         }
         break;
        };
        $0_1 = ($0_1 >>> 0 < $1_1 >>> 0) + $3_1 | 0;
        if ($0_1 >>> 0 > 31) {
         break label$2
        }
        $10_1 = $0_1 << 2;
        $3_1 = ($0_1 | 0) != 31 ? (HEAP32[$10_1 + 1064280 >> 2] >>> 21 | 0) - 1 | 0 : 706;
        $1_1 = 0;
        $11_1 = 0;
        $16_1 = $0_1 - 1 | 0;
        if ($0_1 >>> 0 >= $16_1 >>> 0) {
         if ($16_1 >>> 0 >= 32) {
          break label$2
         }
         $11_1 = HEAP32[($16_1 << 2) + 1064276 >> 2] & 2097151;
        }
        $0_1 = HEAP32[$10_1 + 1064276 >> 2] >>> 21 | 0;
        $10_1 = $0_1 >>> 0 > 707 ? $0_1 : 707;
        $11_1 = $2_1 - $11_1 | 0;
        label$18 : {
         label$19 : {
          label$20 : {
           label$21 : {
            label$22 : {
             while (1) {
              label$24 : {
               label$25 : {
                if (($0_1 | 0) != ($3_1 | 0)) {
                 if (($0_1 | 0) == ($10_1 | 0)) {
                  break label$2
                 }
                 $1_1 = HEAPU8[$0_1 + 1064404 | 0] + $1_1 | 0;
                 if ($11_1 >>> 0 >= $1_1 >>> 0) {
                  break label$25
                 }
                } else {
                 $0_1 = $3_1
                }
                if ($0_1 & 1) {
                 break label$20
                }
                if ($2_1 >>> 0 < 65536) {
                 break label$24
                }
                if ($2_1 >>> 0 >= 131072) {
                 break label$22
                }
                if ($96($2_1, 1063559, 42, 1063643, 192, 1063835, 438)) {
                 break label$18
                }
                break label$21;
               }
               $0_1 = $0_1 + 1 | 0;
               continue;
              }
              break;
             };
             if (!$96($2_1, 1062888, 40, 1062968, 288, 1063256, 303)) {
              break label$21
             }
             break label$18;
            }
            if (($2_1 & 2097120) == 173792 | $2_1 - 177977 >>> 0 < 7 | (($2_1 & 2097150) == 178206 | $2_1 - 183970 >>> 0 < 14) | ($2_1 - 191457 >>> 0 < 3103 | $2_1 - 195102 >>> 0 < 1506 | $2_1 - 201547 >>> 0 < 716213)) {
             break label$21
            }
            if ($2_1 >>> 0 < 918e3) {
             break label$18
            }
           }
           $4_1 = 5;
           $12_1 = Math_clz32($2_1 | 1) >>> 2 ^ 7;
           break label$19;
          }
          $4_1 = 5;
          $12_1 = Math_clz32($2_1 | 1) >>> 2 ^ 7;
         }
         $3_1 = 1;
         $0_1 = 3;
         $1_1 = $2_1;
         break label$5;
        }
        $0_1 = 1;
        $3_1 = 0;
       }
       $1_1 = $2_1;
      }
      if ((($3_1 ? ($4_1 & 255) + $12_1 | 0 : $0_1) | 0) == 1) {
       continue
      }
      if ($6_1 >>> 0 > $7_1 >>> 0) {
       break label$3
      }
      label$28 : {
       if (!$6_1) {
        break label$28
       }
       if ($6_1 >>> 0 >= $8_1 >>> 0) {
        if (($6_1 | 0) == ($8_1 | 0)) {
         break label$28
        }
        break label$3;
       }
       if (HEAP8[$6_1 + $9_1 | 0] < -64) {
        break label$3
       }
      }
      label$30 : {
       if (!$7_1) {
        break label$30
       }
       if ($7_1 >>> 0 >= $8_1 >>> 0) {
        if (($7_1 | 0) != ($8_1 | 0)) {
         break label$3
        }
        break label$30;
       }
       if (HEAP8[$7_1 + $9_1 | 0] <= -65) {
        break label$3
       }
      }
      if (!(FUNCTION_TABLE[HEAP32[$14_1 + 12 >> 2]]($13_1, $6_1 + $9_1 | 0, $7_1 - $6_1 | 0) | 0)) {
       while (1) {
        $6_1 = $0_1;
        $0_1 = 0;
        $3_1 = $1_1;
        label$34 : {
         label$35 : {
          label$36 : {
           label$37 : {
            switch ($6_1 - 1 | 0) {
            case 0:
             break label$34;
            case 1:
             break label$35;
            case 2:
             break label$37;
            default:
             break label$36;
            };
           }
           label$38 : {
            switch (($4_1 & 255) - 1 | 0) {
            case 0:
             $4_1 = $4_1 & -256;
             $3_1 = 125;
             $0_1 = 3;
             break label$34;
            case 2:
             $4_1 = $4_1 & -256 | 2;
             $3_1 = 123;
             $0_1 = 3;
             break label$34;
            case 3:
             $4_1 = $4_1 & -256 | 3;
             $3_1 = 117;
             $0_1 = 3;
             break label$34;
            case 4:
             $4_1 = $4_1 & -256 | 4;
             $3_1 = 92;
             $0_1 = 3;
             break label$34;
            case 1:
             break label$38;
            default:
             break label$36;
            };
           }
           $0_1 = $1_1 >>> ($12_1 << 2) & 15;
           $3_1 = ($0_1 >>> 0 < 10 ? 48 : 87) + $0_1 | 0;
           if (!$12_1) {
            $4_1 = $4_1 & -256 | 1;
            $0_1 = 3;
            break label$34;
           }
           $12_1 = $12_1 - 1 | 0;
           $0_1 = 3;
           break label$34;
          }
          $0_1 = 1;
          label$44 : {
           if ($2_1 >>> 0 < 128) {
            break label$44
           }
           $0_1 = 2;
           if ($2_1 >>> 0 < 2048) {
            break label$44
           }
           $0_1 = $2_1 >>> 0 < 65536 ? 3 : 4;
          }
          $6_1 = $0_1 + $7_1 | 0;
          continue label$4;
         }
         $3_1 = 92;
         $0_1 = 1;
        }
        if (!(FUNCTION_TABLE[$15_1 | 0]($13_1, $3_1) | 0)) {
         continue
        }
        break;
       }
      }
      break;
     };
     $0_1 = 1;
     break label$1;
    }
    $119($9_1, $8_1, $6_1, $7_1);
    abort();
   }
   abort();
  }
  global$0 = $5_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $20($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $93_1 = 0;
  $38_1 = global$0 - 960 | 0;
  global$0 = $38_1;
  while (1) {
   if (($18_1 | 0) != 960) {
    $147($18_1 + $38_1 | 0, 0, 40);
    $18_1 = $18_1 + 40 | 0;
    continue;
   }
   break;
  };
  $39_1 = HEAP32[$0_1 + 192 >> 2];
  $40_1 = HEAP32[$0_1 + 196 >> 2];
  $1_1 = HEAP32[$0_1 + 152 >> 2];
  $5_1 = HEAP32[$0_1 + 156 >> 2];
  $2_1 = HEAP32[$0_1 + 112 >> 2];
  $13_1 = HEAP32[$0_1 + 116 >> 2];
  $41_1 = HEAP32[$0_1 + 72 >> 2];
  $35_1 = HEAP32[$0_1 + 76 >> 2];
  $6_1 = HEAP32[$0_1 + 32 >> 2];
  $7_1 = HEAP32[$0_1 + 36 >> 2];
  $8_1 = HEAP32[$0_1 + 184 >> 2];
  $9_1 = HEAP32[$0_1 + 188 >> 2];
  $19_1 = HEAP32[$0_1 + 144 >> 2];
  $20_1 = HEAP32[$0_1 + 148 >> 2];
  $10_1 = HEAP32[$0_1 + 104 >> 2];
  $11_1 = HEAP32[$0_1 + 108 >> 2];
  $16_1 = HEAP32[$0_1 + 64 >> 2];
  $29_1 = HEAP32[$0_1 + 68 >> 2];
  $21_1 = HEAP32[$0_1 + 24 >> 2];
  $42_1 = HEAP32[$0_1 + 28 >> 2];
  $43_1 = HEAP32[$0_1 + 176 >> 2];
  $44_1 = HEAP32[$0_1 + 180 >> 2];
  $45_1 = HEAP32[$0_1 + 136 >> 2];
  $46_1 = HEAP32[$0_1 + 140 >> 2];
  $47_1 = HEAP32[$0_1 + 96 >> 2];
  $48_1 = HEAP32[$0_1 + 100 >> 2];
  $49_1 = HEAP32[$0_1 + 56 >> 2];
  $50_1 = HEAP32[$0_1 + 60 >> 2];
  $14_1 = HEAP32[$0_1 + 16 >> 2];
  $15_1 = HEAP32[$0_1 + 20 >> 2];
  $30_1 = HEAP32[$0_1 + 168 >> 2];
  $31_1 = HEAP32[$0_1 + 172 >> 2];
  $51_1 = HEAP32[$0_1 + 128 >> 2];
  $52_1 = HEAP32[$0_1 + 132 >> 2];
  $53_1 = HEAP32[$0_1 + 88 >> 2];
  $54_1 = HEAP32[$0_1 + 92 >> 2];
  $55_1 = HEAP32[$0_1 + 48 >> 2];
  $56_1 = HEAP32[$0_1 + 52 >> 2];
  $57_1 = HEAP32[$0_1 + 8 >> 2];
  $58_1 = HEAP32[$0_1 + 12 >> 2];
  $22_1 = HEAP32[$0_1 + 160 >> 2];
  $23_1 = HEAP32[$0_1 + 164 >> 2];
  $17_1 = HEAP32[$0_1 + 120 >> 2];
  $32_1 = HEAP32[$0_1 + 124 >> 2];
  $59_1 = HEAP32[$0_1 + 80 >> 2];
  $60_1 = HEAP32[$0_1 + 84 >> 2];
  $61_1 = HEAP32[$0_1 + 40 >> 2];
  $62_1 = HEAP32[$0_1 + 44 >> 2];
  $63_1 = HEAP32[$0_1 >> 2];
  $64_1 = HEAP32[$0_1 + 4 >> 2];
  $18_1 = 0;
  $65_1 = 1105720;
  while (1) {
   if (($18_1 | 0) == 960) {
    HEAP32[$0_1 + 160 >> 2] = $22_1;
    HEAP32[$0_1 + 164 >> 2] = $23_1;
    HEAP32[$0_1 + 120 >> 2] = $17_1;
    HEAP32[$0_1 + 124 >> 2] = $32_1;
    HEAP32[$0_1 + 80 >> 2] = $59_1;
    HEAP32[$0_1 + 84 >> 2] = $60_1;
    HEAP32[$0_1 + 40 >> 2] = $61_1;
    HEAP32[$0_1 + 44 >> 2] = $62_1;
    HEAP32[$0_1 >> 2] = $63_1;
    HEAP32[$0_1 + 4 >> 2] = $64_1;
    HEAP32[$0_1 + 168 >> 2] = $30_1;
    HEAP32[$0_1 + 172 >> 2] = $31_1;
    HEAP32[$0_1 + 128 >> 2] = $51_1;
    HEAP32[$0_1 + 132 >> 2] = $52_1;
    HEAP32[$0_1 + 88 >> 2] = $53_1;
    HEAP32[$0_1 + 92 >> 2] = $54_1;
    HEAP32[$0_1 + 48 >> 2] = $55_1;
    HEAP32[$0_1 + 52 >> 2] = $56_1;
    HEAP32[$0_1 + 8 >> 2] = $57_1;
    HEAP32[$0_1 + 12 >> 2] = $58_1;
    HEAP32[$0_1 + 176 >> 2] = $43_1;
    HEAP32[$0_1 + 180 >> 2] = $44_1;
    HEAP32[$0_1 + 136 >> 2] = $45_1;
    HEAP32[$0_1 + 140 >> 2] = $46_1;
    HEAP32[$0_1 + 96 >> 2] = $47_1;
    HEAP32[$0_1 + 100 >> 2] = $48_1;
    HEAP32[$0_1 + 56 >> 2] = $49_1;
    HEAP32[$0_1 + 60 >> 2] = $50_1;
    HEAP32[$0_1 + 16 >> 2] = $14_1;
    HEAP32[$0_1 + 20 >> 2] = $15_1;
    HEAP32[$0_1 + 184 >> 2] = $8_1;
    HEAP32[$0_1 + 188 >> 2] = $9_1;
    HEAP32[$0_1 + 144 >> 2] = $19_1;
    HEAP32[$0_1 + 148 >> 2] = $20_1;
    HEAP32[$0_1 + 104 >> 2] = $10_1;
    HEAP32[$0_1 + 108 >> 2] = $11_1;
    HEAP32[$0_1 + 64 >> 2] = $16_1;
    HEAP32[$0_1 + 68 >> 2] = $29_1;
    HEAP32[$0_1 + 24 >> 2] = $21_1;
    HEAP32[$0_1 + 28 >> 2] = $42_1;
    HEAP32[$0_1 + 192 >> 2] = $39_1;
    HEAP32[$0_1 + 196 >> 2] = $40_1;
    HEAP32[$0_1 + 152 >> 2] = $1_1;
    HEAP32[$0_1 + 156 >> 2] = $5_1;
    HEAP32[$0_1 + 112 >> 2] = $2_1;
    HEAP32[$0_1 + 116 >> 2] = $13_1;
    HEAP32[$0_1 + 72 >> 2] = $41_1;
    HEAP32[$0_1 + 76 >> 2] = $35_1;
    HEAP32[$0_1 + 32 >> 2] = $6_1;
    HEAP32[$0_1 + 36 >> 2] = $7_1;
    global$0 = $38_1 + 960 | 0;
   } else {
    $4_1 = $15_1 ^ $50_1 ^ $48_1 ^ $46_1 ^ $44_1;
    $33_1 = $4_1;
    $24_1 = $14_1 ^ $49_1 ^ $47_1 ^ $45_1 ^ $43_1;
    $25_1 = $61_1 ^ $63_1 ^ $59_1 ^ $17_1 ^ $22_1;
    $36_1 = __wasm_rotl_i64($24_1, $4_1, 1) ^ $25_1;
    $26_1 = $62_1 ^ $64_1 ^ $60_1 ^ $32_1 ^ $23_1;
    $37_1 = $26_1 ^ i64toi32_i32$HIGH_BITS;
    $66_1 = __wasm_rotl_i64($30_1 ^ $36_1, $31_1 ^ $37_1, 2);
    $27_1 = i64toi32_i32$HIGH_BITS;
    $68_1 = $27_1;
    $4_1 = $18_1 + $38_1 | 0;
    $28_1 = $4_1 + 32 | 0;
    HEAP32[$28_1 >> 2] = $66_1;
    HEAP32[$28_1 + 4 >> 2] = $27_1;
    $3_1 = $17_1;
    $30_1 = $55_1 ^ $57_1 ^ $53_1 ^ $51_1 ^ $30_1;
    $31_1 = $56_1 ^ $58_1 ^ $54_1 ^ $52_1 ^ $31_1;
    $17_1 = $6_1 ^ $41_1 ^ $2_1 ^ $1_1 ^ $39_1;
    $27_1 = __wasm_rotl_i64($30_1, $31_1, 1) ^ $17_1;
    $12_1 = $32_1;
    $32_1 = $7_1 ^ $35_1 ^ $13_1 ^ $5_1 ^ $40_1;
    $28_1 = $32_1 ^ i64toi32_i32$HIGH_BITS;
    $67_1 = __wasm_rotl_i64($3_1 ^ $27_1, $12_1 ^ $28_1, 41);
    $12_1 = i64toi32_i32$HIGH_BITS;
    $69_1 = $12_1;
    $3_1 = $4_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = $67_1;
    HEAP32[$3_1 + 4 >> 2] = $12_1;
    $3_1 = $2_1;
    $2_1 = $21_1 ^ $16_1 ^ $10_1 ^ $19_1 ^ $8_1;
    $25_1 = __wasm_rotl_i64($25_1, $26_1, 1) ^ $2_1;
    $12_1 = $13_1;
    $13_1 = $29_1 ^ $42_1 ^ $11_1 ^ $20_1 ^ $9_1;
    $26_1 = $13_1 ^ i64toi32_i32$HIGH_BITS;
    $12_1 = __wasm_rotl_i64($3_1 ^ $25_1, $12_1 ^ $26_1, 39);
    $3_1 = i64toi32_i32$HIGH_BITS;
    $70_1 = $3_1;
    $34_1 = $4_1 + 16 | 0;
    HEAP32[$34_1 >> 2] = $12_1;
    HEAP32[$34_1 + 4 >> 2] = $3_1;
    $24_1 = __wasm_rotl_i64($17_1, $32_1, 1) ^ $24_1;
    $33_1 = $33_1 ^ i64toi32_i32$HIGH_BITS;
    $3_1 = __wasm_rotl_i64($16_1 ^ $24_1, $29_1 ^ $33_1, 55);
    $16_1 = i64toi32_i32$HIGH_BITS;
    $89_1 = $16_1;
    $29_1 = $4_1 + 8 | 0;
    HEAP32[$29_1 >> 2] = $3_1;
    HEAP32[$29_1 + 4 >> 2] = $16_1;
    $17_1 = $14_1;
    $14_1 = __wasm_rotl_i64($2_1, $13_1, 1) ^ $30_1;
    $2_1 = $15_1;
    $15_1 = $31_1 ^ i64toi32_i32$HIGH_BITS;
    $34_1 = __wasm_rotl_i64($17_1 ^ $14_1, $2_1 ^ $15_1, 62);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $84_1 = $2_1;
    HEAP32[$4_1 >> 2] = $34_1;
    HEAP32[$4_1 + 4 >> 2] = $2_1;
    $90_1 = $55_1 ^ $36_1;
    $91_1 = $56_1 ^ $37_1;
    $92_1 = $25_1 ^ $39_1;
    $93_1 = $26_1 ^ $40_1;
    $39_1 = $66_1 ^ ($34_1 ^ -1) & $3_1;
    $40_1 = $68_1 ^ ($2_1 ^ -1) & $16_1;
    $30_1 = ($12_1 ^ -1) & $67_1 ^ $3_1;
    $31_1 = ($70_1 ^ -1) & $69_1 ^ $16_1;
    $4_1 = __wasm_rotl_i64($53_1 ^ $36_1, $54_1 ^ $37_1, 10);
    $71_1 = i64toi32_i32$HIGH_BITS;
    $72_1 = __wasm_rotl_i64($8_1 ^ $24_1, $9_1 ^ $33_1, 56);
    $73_1 = i64toi32_i32$HIGH_BITS;
    $74_1 = __wasm_rotl_i64($14_1 ^ $45_1, $15_1 ^ $46_1, 15);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $85_1 = $2_1;
    $45_1 = ($74_1 ^ -1) & $72_1 ^ $4_1;
    $46_1 = ($2_1 ^ -1) & $73_1 ^ $71_1;
    $75_1 = __wasm_rotl_i64($6_1 ^ $25_1, $7_1 ^ $26_1, 27);
    $76_1 = i64toi32_i32$HIGH_BITS;
    $77_1 = __wasm_rotl_i64($27_1 ^ $61_1, $28_1 ^ $62_1, 36);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $86_1 = $2_1;
    $17_1 = ($77_1 ^ -1) & $4_1 ^ $75_1;
    $32_1 = ($2_1 ^ -1) & $71_1 ^ $76_1;
    $22_1 = __wasm_rotl_i64($22_1 ^ $27_1, $23_1 ^ $28_1, 18);
    $23_1 = i64toi32_i32$HIGH_BITS;
    $78_1 = __wasm_rotl_i64($14_1 ^ $49_1, $15_1 ^ $50_1, 6);
    $79_1 = i64toi32_i32$HIGH_BITS;
    $80_1 = __wasm_rotl_i64($57_1 ^ $36_1, $58_1 ^ $37_1, 1);
    $13_1 = i64toi32_i32$HIGH_BITS;
    $87_1 = $13_1;
    $2_1 = ($80_1 ^ -1) & $78_1 ^ $22_1;
    $13_1 = ($13_1 ^ -1) & $79_1 ^ $23_1;
    $81_1 = __wasm_rotl_i64($1_1 ^ $25_1, $5_1 ^ $26_1, 8);
    $82_1 = i64toi32_i32$HIGH_BITS;
    $83_1 = __wasm_rotl_i64($10_1 ^ $24_1, $11_1 ^ $33_1, 25);
    $1_1 = i64toi32_i32$HIGH_BITS;
    $88_1 = $1_1;
    $53_1 = $78_1 ^ ($83_1 ^ -1) & $81_1;
    $54_1 = $79_1 ^ ($1_1 ^ -1) & $82_1;
    $1_1 = __wasm_rotl_i64($14_1 ^ $43_1, $15_1 ^ $44_1, 61);
    $5_1 = i64toi32_i32$HIGH_BITS;
    $6_1 = __wasm_rotl_i64($25_1 ^ $41_1, $35_1 ^ $26_1, 20);
    $7_1 = i64toi32_i32$HIGH_BITS;
    $8_1 = __wasm_rotl_i64($21_1 ^ $24_1, $33_1 ^ $42_1, 28);
    $35_1 = i64toi32_i32$HIGH_BITS;
    $9_1 = $35_1;
    $41_1 = ($8_1 ^ -1) & $6_1 ^ $1_1;
    $35_1 = ($9_1 ^ -1) & $7_1 ^ $5_1;
    $10_1 = __wasm_rotl_i64($51_1 ^ $36_1, $52_1 ^ $37_1, 45);
    $16_1 = $10_1 ^ ($1_1 ^ -1) & $8_1;
    $11_1 = i64toi32_i32$HIGH_BITS;
    $29_1 = $11_1 ^ ($5_1 ^ -1) & $9_1;
    $21_1 = __wasm_rotl_i64($27_1 ^ $59_1, $28_1 ^ $60_1, 3);
    $49_1 = $21_1 ^ ($10_1 ^ -1) & $1_1;
    $1_1 = i64toi32_i32$HIGH_BITS;
    $50_1 = $1_1 ^ ($11_1 ^ -1) & $5_1;
    $55_1 = $6_1 ^ ($21_1 ^ -1) & $10_1;
    $56_1 = $7_1 ^ ($1_1 ^ -1) & $11_1;
    $61_1 = ($6_1 ^ -1) & $21_1 ^ $8_1;
    $62_1 = ($7_1 ^ -1) & $1_1 ^ $9_1;
    $1_1 = __wasm_rotl_i64($19_1 ^ $24_1, $20_1 ^ $33_1, 21);
    $5_1 = i64toi32_i32$HIGH_BITS;
    $8_1 = $27_1 ^ $63_1;
    $6_1 = __wasm_rotl_i64($92_1, $93_1, 14);
    $21_1 = $8_1 & ($6_1 ^ -1) ^ $1_1;
    $9_1 = $28_1 ^ $64_1;
    $7_1 = i64toi32_i32$HIGH_BITS;
    $42_1 = $9_1 & ($7_1 ^ -1) ^ $5_1;
    $19_1 = __wasm_rotl_i64($14_1 ^ $47_1, $15_1 ^ $48_1, 43);
    $14_1 = $19_1 ^ ($1_1 ^ -1) & $6_1;
    $11_1 = i64toi32_i32$HIGH_BITS;
    $15_1 = $11_1 ^ ($5_1 ^ -1) & $7_1;
    $20_1 = __wasm_rotl_i64($90_1, $91_1, 44);
    $57_1 = $20_1 ^ ($19_1 ^ -1) & $1_1;
    $10_1 = i64toi32_i32$HIGH_BITS;
    $58_1 = $10_1 ^ ($11_1 ^ -1) & $5_1;
    $63_1 = HEAP32[$65_1 >> 2] ^ (($20_1 ^ -1) & $19_1 ^ $8_1);
    $64_1 = HEAP32[$65_1 + 4 >> 2] ^ (($10_1 ^ -1) & $11_1 ^ $9_1);
    $65_1 = $65_1 + 8 | 0;
    $18_1 = $18_1 + 40 | 0;
    $1_1 = ($75_1 ^ -1) & $77_1 ^ $72_1;
    $5_1 = ($76_1 ^ -1) & $86_1 ^ $73_1;
    $6_1 = $6_1 ^ ($8_1 ^ -1) & $20_1;
    $7_1 = $7_1 ^ ($9_1 ^ -1) & $10_1;
    $8_1 = ($66_1 ^ -1) & $34_1 ^ $67_1;
    $9_1 = ($68_1 ^ -1) & $84_1 ^ $69_1;
    $19_1 = $74_1 ^ ($72_1 ^ -1) & $75_1;
    $20_1 = $85_1 ^ ($73_1 ^ -1) & $76_1;
    $10_1 = $81_1 ^ ($22_1 ^ -1) & $80_1;
    $11_1 = $82_1 ^ ($23_1 ^ -1) & $87_1;
    $43_1 = $12_1 ^ ($67_1 ^ -1) & $66_1;
    $44_1 = $70_1 ^ ($69_1 ^ -1) & $68_1;
    $47_1 = ($81_1 ^ -1) & $22_1 ^ $83_1;
    $48_1 = ($82_1 ^ -1) & $23_1 ^ $88_1;
    $51_1 = ($4_1 ^ -1) & $74_1 ^ $77_1;
    $52_1 = ($71_1 ^ -1) & $85_1 ^ $86_1;
    $22_1 = $34_1 ^ ($3_1 ^ -1) & $12_1;
    $23_1 = $84_1 ^ ($89_1 ^ -1) & $70_1;
    $59_1 = $80_1 ^ ($78_1 ^ -1) & $83_1;
    $60_1 = $87_1 ^ ($79_1 ^ -1) & $88_1;
    continue;
   }
   break;
  };
 }
 
 function $21($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 608 | 0;
  global$0 = $3_1;
  $4_1 = $91($0_1, $1_1, 40);
  $5_1 = $3_1 + 48 | 0;
  $17($5_1, $1_1);
  $0_1 = $3_1 + 8 | 0;
  $8($0_1, $1_1, $5_1);
  HEAP32[$4_1 + 80 >> 2] = 0;
  $269($0_1, 1218952);
  $1_1 = $3_1 + 528 | 0;
  $17($1_1, $0_1);
  $8($1_1, $1_1, $0_1);
  $5_1 = $3_1 + 488 | 0;
  $17($5_1, $1_1);
  $8($5_1, $5_1, $0_1);
  $91($3_1 + 448 | 0, $5_1, 40);
  $1_1 = 3;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 448 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 448 | 0;
  $8($0_1, $0_1, $3_1 + 488 | 0);
  $91($3_1 + 408 | 0, $0_1, 40);
  $5_1 = $4_1 + 40 | 0;
  $1_1 = 3;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 408 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 408 | 0;
  $8($0_1, $0_1, $3_1 + 488 | 0);
  $91($3_1 + 368 | 0, $0_1, 40);
  $1_1 = 2;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 368 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 368 | 0;
  $8($0_1, $0_1, $3_1 + 528 | 0);
  $91($3_1 + 328 | 0, $0_1, 40);
  $1_1 = 11;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 328 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 328 | 0;
  $8($0_1, $0_1, $3_1 + 368 | 0);
  $91($3_1 + 288 | 0, $0_1, 40);
  $1_1 = 22;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 288 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 288 | 0;
  $8($0_1, $0_1, $3_1 + 328 | 0);
  $91($3_1 + 248 | 0, $0_1, 40);
  $1_1 = 44;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 248 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 248 | 0;
  $8($0_1, $0_1, $3_1 + 288 | 0);
  $91($3_1 + 208 | 0, $0_1, 40);
  $1_1 = 88;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 208 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 208 | 0;
  $8($0_1, $0_1, $3_1 + 248 | 0);
  $91($3_1 + 168 | 0, $0_1, 40);
  $1_1 = 44;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 168 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 168 | 0;
  $8($0_1, $0_1, $3_1 + 288 | 0);
  $91($3_1 + 128 | 0, $0_1, 40);
  $1_1 = 3;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 128 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 128 | 0;
  $8($0_1, $0_1, $3_1 + 488 | 0);
  $91($3_1 + 88 | 0, $0_1, 40);
  $1_1 = 23;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 88 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 88 | 0;
  $8($0_1, $0_1, $3_1 + 328 | 0);
  $1_1 = 6;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $0_1 = $3_1 + 88 | 0;
    $17($0_1, $0_1);
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 88 | 0;
  $8($0_1, $0_1, $3_1 + 528 | 0);
  $17($0_1, $0_1);
  $17($5_1, $0_1);
  $17($0_1, $5_1);
  $0_1 = $3_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  $3_1 = ($1_1 - $4_1 | 0) - 3908 | 0;
  $1_1 = (HEAP32[$0_1 + 12 >> 2] - (HEAP32[$0_1 + 92 >> 2] + ($1_1 >>> 0 < $4_1 >>> 0) | 0) | 0) + 4194299 | 0;
  HEAP32[$0_1 + 568 >> 2] = $3_1;
  HEAP32[$0_1 + 572 >> 2] = $3_1 >>> 0 < 4294963388 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  $4_1 = HEAP32[$0_1 + 96 >> 2];
  $3_1 = ($1_1 - $4_1 | 0) - 4 | 0;
  $1_1 = (HEAP32[$0_1 + 20 >> 2] - (HEAP32[$0_1 + 100 >> 2] + ($1_1 >>> 0 < $4_1 >>> 0) | 0) | 0) + 4194303 | 0;
  HEAP32[$0_1 + 576 >> 2] = $3_1;
  HEAP32[$0_1 + 580 >> 2] = $3_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  $4_1 = HEAP32[$0_1 + 104 >> 2];
  $3_1 = ($1_1 - $4_1 | 0) - 4 | 0;
  $1_1 = (HEAP32[$0_1 + 28 >> 2] - (HEAP32[$0_1 + 108 >> 2] + ($1_1 >>> 0 < $4_1 >>> 0) | 0) | 0) + 4194303 | 0;
  HEAP32[$0_1 + 584 >> 2] = $3_1;
  HEAP32[$0_1 + 588 >> 2] = $3_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = HEAP32[$0_1 + 32 >> 2];
  $4_1 = HEAP32[$0_1 + 112 >> 2];
  $3_1 = ($1_1 - $4_1 | 0) - 4 | 0;
  $1_1 = (HEAP32[$0_1 + 36 >> 2] - (HEAP32[$0_1 + 116 >> 2] + ($1_1 >>> 0 < $4_1 >>> 0) | 0) | 0) + 4194303 | 0;
  HEAP32[$0_1 + 592 >> 2] = $3_1;
  HEAP32[$0_1 + 596 >> 2] = $3_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  $4_1 = HEAP32[$0_1 + 120 >> 2];
  $3_1 = ($1_1 - $4_1 | 0) - 4 | 0;
  $1_1 = (HEAP32[$0_1 + 44 >> 2] - (HEAP32[$0_1 + 124 >> 2] + ($1_1 >>> 0 < $4_1 >>> 0) | 0) | 0) + 262143 | 0;
  HEAP32[$0_1 + 600 >> 2] = $3_1;
  HEAP32[$0_1 + 604 >> 2] = $3_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = 0;
  label$23 : {
   if (!$198($0_1 + 568 | 0)) {
    break label$23
   }
   $128($5_1);
   $1_1 = 1;
   if ((HEAP32[$5_1 >> 2] & 1) == ($2_1 | 0)) {
    break label$23
   }
   $250($5_1, $5_1, 1);
   $1_1 = 1;
  }
  global$0 = $0_1 + 608 | 0;
  return $1_1;
 }
 
 function $22($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0;
  $33_1 = HEAP32[$0_1 + 192 >> 2];
  $3_1 = HEAP32[$0_1 + 196 >> 2];
  $1_1 = HEAP32[$0_1 + 152 >> 2];
  $4_1 = HEAP32[$0_1 + 156 >> 2];
  $2_1 = HEAP32[$0_1 + 112 >> 2];
  $24_1 = HEAP32[$0_1 + 116 >> 2];
  $34_1 = HEAP32[$0_1 + 72 >> 2];
  $29_1 = HEAP32[$0_1 + 76 >> 2];
  $5_1 = HEAP32[$0_1 + 32 >> 2];
  $6_1 = HEAP32[$0_1 + 36 >> 2];
  $7_1 = HEAP32[$0_1 + 184 >> 2];
  $8_1 = HEAP32[$0_1 + 188 >> 2];
  $13_1 = HEAP32[$0_1 + 144 >> 2];
  $14_1 = HEAP32[$0_1 + 148 >> 2];
  $9_1 = HEAP32[$0_1 + 104 >> 2];
  $10_1 = HEAP32[$0_1 + 108 >> 2];
  $25_1 = HEAP32[$0_1 + 64 >> 2];
  $26_1 = HEAP32[$0_1 + 68 >> 2];
  $15_1 = HEAP32[$0_1 + 24 >> 2];
  $35_1 = HEAP32[$0_1 + 28 >> 2];
  $36_1 = HEAP32[$0_1 + 176 >> 2];
  $37_1 = HEAP32[$0_1 + 180 >> 2];
  $38_1 = HEAP32[$0_1 + 136 >> 2];
  $39_1 = HEAP32[$0_1 + 140 >> 2];
  $40_1 = HEAP32[$0_1 + 96 >> 2];
  $41_1 = HEAP32[$0_1 + 100 >> 2];
  $42_1 = HEAP32[$0_1 + 56 >> 2];
  $43_1 = HEAP32[$0_1 + 60 >> 2];
  $11_1 = HEAP32[$0_1 + 16 >> 2];
  $12_1 = HEAP32[$0_1 + 20 >> 2];
  $27_1 = HEAP32[$0_1 + 168 >> 2];
  $44_1 = HEAP32[$0_1 + 172 >> 2];
  $45_1 = HEAP32[$0_1 + 128 >> 2];
  $46_1 = HEAP32[$0_1 + 132 >> 2];
  $47_1 = HEAP32[$0_1 + 88 >> 2];
  $48_1 = HEAP32[$0_1 + 92 >> 2];
  $49_1 = HEAP32[$0_1 + 48 >> 2];
  $50_1 = HEAP32[$0_1 + 52 >> 2];
  $51_1 = HEAP32[$0_1 + 8 >> 2];
  $52_1 = HEAP32[$0_1 + 12 >> 2];
  $16_1 = HEAP32[$0_1 + 160 >> 2];
  $17_1 = HEAP32[$0_1 + 164 >> 2];
  $53_1 = HEAP32[$0_1 + 120 >> 2];
  $54_1 = HEAP32[$0_1 + 124 >> 2];
  $55_1 = HEAP32[$0_1 + 80 >> 2];
  $56_1 = HEAP32[$0_1 + 84 >> 2];
  $57_1 = HEAP32[$0_1 + 40 >> 2];
  $58_1 = HEAP32[$0_1 + 44 >> 2];
  $59_1 = HEAP32[$0_1 >> 2];
  $60_1 = HEAP32[$0_1 + 4 >> 2];
  $61_1 = -192;
  while (1) {
   if ($61_1) {
    $18_1 = $37_1 ^ ($39_1 ^ ($41_1 ^ ($12_1 ^ $43_1)));
    $28_1 = $18_1;
    $19_1 = $36_1 ^ ($38_1 ^ ($40_1 ^ ($11_1 ^ $42_1)));
    $20_1 = $16_1 ^ ($53_1 ^ ($55_1 ^ ($57_1 ^ $59_1)));
    $18_1 = __wasm_rotl_i64($19_1, $18_1, 1) ^ $20_1;
    $88_1 = $49_1 ^ $18_1;
    $21_1 = $17_1 ^ ($54_1 ^ ($56_1 ^ ($58_1 ^ $60_1)));
    $31_1 = $21_1 ^ i64toi32_i32$HIGH_BITS;
    $89_1 = $50_1 ^ $31_1;
    $22_1 = $7_1 ^ ($13_1 ^ ($9_1 ^ ($15_1 ^ $25_1)));
    $20_1 = __wasm_rotl_i64($20_1, $21_1, 1) ^ $22_1;
    $90_1 = $20_1 ^ $33_1;
    $23_1 = $8_1 ^ ($14_1 ^ ($10_1 ^ ($26_1 ^ $35_1)));
    $21_1 = $23_1 ^ i64toi32_i32$HIGH_BITS;
    $91_1 = $21_1 ^ $3_1;
    $62_1 = __wasm_rotl_i64($27_1 ^ $18_1, $44_1 ^ $31_1, 2);
    $63_1 = i64toi32_i32$HIGH_BITS;
    $3_1 = $3_1 ^ ($4_1 ^ ($24_1 ^ ($6_1 ^ $29_1)));
    $32_1 = $3_1;
    $30_1 = $25_1;
    $25_1 = $33_1 ^ ($1_1 ^ ($2_1 ^ ($5_1 ^ $34_1)));
    $19_1 = __wasm_rotl_i64($25_1, $3_1, 1) ^ $19_1;
    $28_1 = $28_1 ^ i64toi32_i32$HIGH_BITS;
    $64_1 = __wasm_rotl_i64($30_1 ^ $19_1, $28_1 ^ $26_1, 55);
    $65_1 = i64toi32_i32$HIGH_BITS;
    $3_1 = $11_1;
    $26_1 = $27_1 ^ ($45_1 ^ ($47_1 ^ ($49_1 ^ $51_1)));
    $11_1 = __wasm_rotl_i64($22_1, $23_1, 1) ^ $26_1;
    $30_1 = $12_1;
    $27_1 = $44_1 ^ ($46_1 ^ ($48_1 ^ ($50_1 ^ $52_1)));
    $12_1 = $27_1 ^ i64toi32_i32$HIGH_BITS;
    $66_1 = __wasm_rotl_i64($3_1 ^ $11_1, $30_1 ^ $12_1, 62);
    $3_1 = i64toi32_i32$HIGH_BITS;
    $30_1 = $3_1;
    $33_1 = ($66_1 ^ -1) & $64_1 ^ $62_1;
    $3_1 = ($3_1 ^ -1) & $65_1 ^ $63_1;
    $22_1 = __wasm_rotl_i64($26_1, $27_1, 1) ^ $25_1;
    $23_1 = i64toi32_i32$HIGH_BITS ^ $32_1;
    $32_1 = __wasm_rotl_i64($53_1 ^ $22_1, $54_1 ^ $23_1, 41);
    $67_1 = i64toi32_i32$HIGH_BITS;
    $68_1 = __wasm_rotl_i64($2_1 ^ $20_1, $24_1 ^ $21_1, 39);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $83_1 = $2_1;
    $27_1 = ($68_1 ^ -1) & $32_1 ^ $64_1;
    $44_1 = ($2_1 ^ -1) & $67_1 ^ $65_1;
    $69_1 = __wasm_rotl_i64($18_1 ^ $47_1, $48_1 ^ $31_1, 10);
    $70_1 = i64toi32_i32$HIGH_BITS;
    $71_1 = __wasm_rotl_i64($7_1 ^ $19_1, $8_1 ^ $28_1, 56);
    $72_1 = i64toi32_i32$HIGH_BITS;
    $73_1 = __wasm_rotl_i64($11_1 ^ $38_1, $12_1 ^ $39_1, 15);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $84_1 = $2_1;
    $38_1 = ($73_1 ^ -1) & $71_1 ^ $69_1;
    $39_1 = ($2_1 ^ -1) & $72_1 ^ $70_1;
    $74_1 = __wasm_rotl_i64($5_1 ^ $20_1, $6_1 ^ $21_1, 27);
    $75_1 = i64toi32_i32$HIGH_BITS;
    $76_1 = __wasm_rotl_i64($22_1 ^ $57_1, $23_1 ^ $58_1, 36);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $85_1 = $2_1;
    $53_1 = ($76_1 ^ -1) & $69_1 ^ $74_1;
    $54_1 = ($2_1 ^ -1) & $70_1 ^ $75_1;
    $16_1 = __wasm_rotl_i64($16_1 ^ $22_1, $17_1 ^ $23_1, 18);
    $17_1 = i64toi32_i32$HIGH_BITS;
    $77_1 = __wasm_rotl_i64($11_1 ^ $42_1, $12_1 ^ $43_1, 6);
    $78_1 = i64toi32_i32$HIGH_BITS;
    $79_1 = __wasm_rotl_i64($18_1 ^ $51_1, $52_1 ^ $31_1, 1);
    $24_1 = i64toi32_i32$HIGH_BITS;
    $86_1 = $24_1;
    $2_1 = ($79_1 ^ -1) & $77_1 ^ $16_1;
    $24_1 = ($24_1 ^ -1) & $78_1 ^ $17_1;
    $80_1 = __wasm_rotl_i64($1_1 ^ $20_1, $4_1 ^ $21_1, 8);
    $81_1 = i64toi32_i32$HIGH_BITS;
    $82_1 = __wasm_rotl_i64($9_1 ^ $19_1, $10_1 ^ $28_1, 25);
    $1_1 = i64toi32_i32$HIGH_BITS;
    $87_1 = $1_1;
    $47_1 = $77_1 ^ ($82_1 ^ -1) & $80_1;
    $48_1 = $78_1 ^ ($1_1 ^ -1) & $81_1;
    $1_1 = __wasm_rotl_i64($11_1 ^ $36_1, $12_1 ^ $37_1, 61);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $5_1 = __wasm_rotl_i64($20_1 ^ $34_1, $29_1 ^ $21_1, 20);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $7_1 = __wasm_rotl_i64($15_1 ^ $19_1, $28_1 ^ $35_1, 28);
    $29_1 = i64toi32_i32$HIGH_BITS;
    $8_1 = $29_1;
    $34_1 = ($7_1 ^ -1) & $5_1 ^ $1_1;
    $29_1 = ($8_1 ^ -1) & $6_1 ^ $4_1;
    $9_1 = __wasm_rotl_i64($18_1 ^ $45_1, $46_1 ^ $31_1, 45);
    $25_1 = $9_1 ^ ($1_1 ^ -1) & $7_1;
    $10_1 = i64toi32_i32$HIGH_BITS;
    $26_1 = $10_1 ^ ($4_1 ^ -1) & $8_1;
    $15_1 = __wasm_rotl_i64($22_1 ^ $55_1, $23_1 ^ $56_1, 3);
    $42_1 = $15_1 ^ ($9_1 ^ -1) & $1_1;
    $1_1 = i64toi32_i32$HIGH_BITS;
    $43_1 = $1_1 ^ ($10_1 ^ -1) & $4_1;
    $49_1 = $5_1 ^ ($15_1 ^ -1) & $9_1;
    $50_1 = $6_1 ^ ($1_1 ^ -1) & $10_1;
    $57_1 = ($5_1 ^ -1) & $15_1 ^ $7_1;
    $58_1 = ($6_1 ^ -1) & $1_1 ^ $8_1;
    $1_1 = __wasm_rotl_i64($13_1 ^ $19_1, $14_1 ^ $28_1, 21);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $7_1 = $22_1 ^ $59_1;
    $5_1 = __wasm_rotl_i64($90_1, $91_1, 14);
    $15_1 = $7_1 & ($5_1 ^ -1) ^ $1_1;
    $8_1 = $23_1 ^ $60_1;
    $6_1 = i64toi32_i32$HIGH_BITS;
    $35_1 = $8_1 & ($6_1 ^ -1) ^ $4_1;
    $13_1 = __wasm_rotl_i64($11_1 ^ $40_1, $12_1 ^ $41_1, 43);
    $11_1 = $13_1 ^ ($1_1 ^ -1) & $5_1;
    $10_1 = i64toi32_i32$HIGH_BITS;
    $12_1 = $10_1 ^ ($4_1 ^ -1) & $6_1;
    $14_1 = __wasm_rotl_i64($88_1, $89_1, 44);
    $51_1 = $14_1 ^ ($13_1 ^ -1) & $1_1;
    $9_1 = i64toi32_i32$HIGH_BITS;
    $52_1 = $9_1 ^ ($10_1 ^ -1) & $4_1;
    $1_1 = $61_1 + 1105912 | 0;
    $59_1 = HEAP32[$1_1 >> 2] ^ (($14_1 ^ -1) & $13_1 ^ $7_1);
    $60_1 = HEAP32[$1_1 + 4 >> 2] ^ (($9_1 ^ -1) & $10_1 ^ $8_1);
    $61_1 = $61_1 + 8 | 0;
    $1_1 = ($74_1 ^ -1) & $76_1 ^ $71_1;
    $4_1 = ($75_1 ^ -1) & $85_1 ^ $72_1;
    $5_1 = $5_1 ^ ($7_1 ^ -1) & $14_1;
    $6_1 = $6_1 ^ ($8_1 ^ -1) & $9_1;
    $7_1 = ($62_1 ^ -1) & $66_1 ^ $32_1;
    $8_1 = ($63_1 ^ -1) & $30_1 ^ $67_1;
    $13_1 = $73_1 ^ ($71_1 ^ -1) & $74_1;
    $14_1 = $84_1 ^ ($72_1 ^ -1) & $75_1;
    $9_1 = $80_1 ^ ($16_1 ^ -1) & $79_1;
    $10_1 = $81_1 ^ ($17_1 ^ -1) & $86_1;
    $36_1 = $68_1 ^ ($32_1 ^ -1) & $62_1;
    $37_1 = $83_1 ^ ($67_1 ^ -1) & $63_1;
    $40_1 = ($80_1 ^ -1) & $16_1 ^ $82_1;
    $41_1 = ($81_1 ^ -1) & $17_1 ^ $87_1;
    $45_1 = ($69_1 ^ -1) & $73_1 ^ $76_1;
    $46_1 = ($70_1 ^ -1) & $84_1 ^ $85_1;
    $16_1 = $66_1 ^ ($64_1 ^ -1) & $68_1;
    $17_1 = $30_1 ^ ($65_1 ^ -1) & $83_1;
    $55_1 = $79_1 ^ ($77_1 ^ -1) & $82_1;
    $56_1 = $86_1 ^ ($78_1 ^ -1) & $87_1;
    continue;
   } else {
    HEAP32[$0_1 + 160 >> 2] = $16_1;
    HEAP32[$0_1 + 164 >> 2] = $17_1;
    HEAP32[$0_1 + 120 >> 2] = $53_1;
    HEAP32[$0_1 + 124 >> 2] = $54_1;
    HEAP32[$0_1 + 80 >> 2] = $55_1;
    HEAP32[$0_1 + 84 >> 2] = $56_1;
    HEAP32[$0_1 + 40 >> 2] = $57_1;
    HEAP32[$0_1 + 44 >> 2] = $58_1;
    HEAP32[$0_1 >> 2] = $59_1;
    HEAP32[$0_1 + 4 >> 2] = $60_1;
    HEAP32[$0_1 + 168 >> 2] = $27_1;
    HEAP32[$0_1 + 172 >> 2] = $44_1;
    HEAP32[$0_1 + 128 >> 2] = $45_1;
    HEAP32[$0_1 + 132 >> 2] = $46_1;
    HEAP32[$0_1 + 88 >> 2] = $47_1;
    HEAP32[$0_1 + 92 >> 2] = $48_1;
    HEAP32[$0_1 + 48 >> 2] = $49_1;
    HEAP32[$0_1 + 52 >> 2] = $50_1;
    HEAP32[$0_1 + 8 >> 2] = $51_1;
    HEAP32[$0_1 + 12 >> 2] = $52_1;
    HEAP32[$0_1 + 176 >> 2] = $36_1;
    HEAP32[$0_1 + 180 >> 2] = $37_1;
    HEAP32[$0_1 + 136 >> 2] = $38_1;
    HEAP32[$0_1 + 140 >> 2] = $39_1;
    HEAP32[$0_1 + 96 >> 2] = $40_1;
    HEAP32[$0_1 + 100 >> 2] = $41_1;
    HEAP32[$0_1 + 56 >> 2] = $42_1;
    HEAP32[$0_1 + 60 >> 2] = $43_1;
    HEAP32[$0_1 + 16 >> 2] = $11_1;
    HEAP32[$0_1 + 20 >> 2] = $12_1;
    HEAP32[$0_1 + 184 >> 2] = $7_1;
    HEAP32[$0_1 + 188 >> 2] = $8_1;
    HEAP32[$0_1 + 144 >> 2] = $13_1;
    HEAP32[$0_1 + 148 >> 2] = $14_1;
    HEAP32[$0_1 + 104 >> 2] = $9_1;
    HEAP32[$0_1 + 108 >> 2] = $10_1;
    HEAP32[$0_1 + 64 >> 2] = $25_1;
    HEAP32[$0_1 + 68 >> 2] = $26_1;
    HEAP32[$0_1 + 24 >> 2] = $15_1;
    HEAP32[$0_1 + 28 >> 2] = $35_1;
    HEAP32[$0_1 + 192 >> 2] = $33_1;
    HEAP32[$0_1 + 196 >> 2] = $3_1;
    HEAP32[$0_1 + 152 >> 2] = $1_1;
    HEAP32[$0_1 + 156 >> 2] = $4_1;
    HEAP32[$0_1 + 112 >> 2] = $2_1;
    HEAP32[$0_1 + 116 >> 2] = $24_1;
    HEAP32[$0_1 + 72 >> 2] = $34_1;
    HEAP32[$0_1 + 76 >> 2] = $29_1;
    HEAP32[$0_1 + 32 >> 2] = $5_1;
    HEAP32[$0_1 + 36 >> 2] = $6_1;
   }
   break;
  };
 }
 
 function $23($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $5_1 = global$0 - 1712 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $2_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $4_1;
  $50($5_1 + 56 | 0, $2_1, $1_1);
  if (HEAP32[$5_1 + 56 >> 2]) {
   abort()
  }
  $21_1 = $5_1 + 320 | 0;
  $91($21_1, $5_1 - -64 | 0, 256);
  $266($5_1 + 864 | 0, $4_1, $3_1);
  $2_1 = $5_1 + 896 | 0;
  $181($2_1, 1048869, 20);
  $277($2_1, 1105547, 10, 1217612, 0);
  $1_1 = $5_1 + 576 | 0;
  $91($1_1, $2_1, 208);
  $3_1 = $5_1 + 888 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $11_1 = $5_1 + 1128 | 0;
  $2_1 = $11_1;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $5_1 + 880 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $22_1 = $5_1 + 1120 | 0;
  $2_1 = $22_1;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $5_1 + 872 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $23_1 = $5_1 + 1112 | 0;
  $2_1 = $23_1;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$5_1 + 868 >> 2];
  HEAP32[$5_1 + 1104 >> 2] = HEAP32[$5_1 + 864 >> 2];
  HEAP32[$5_1 + 1108 >> 2] = $2_1;
  $2_1 = $5_1 + 1168 | 0;
  $3_1 = $5_1 + 1104 | 0;
  $174($2_1, $21_1, $1_1, $3_1);
  $4_1 = $5_1 + 1208 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $24_1 = $5_1 + 1432 | 0;
  $7_1 = $24_1;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $7_1 = $5_1 + 1216 | 0;
  $14_1 = HEAP32[$7_1 + 4 >> 2];
  $25_1 = $5_1 + 1440 | 0;
  $8_1 = $25_1;
  HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $14_1;
  $8_1 = $5_1 + 1224 | 0;
  $15_1 = HEAP32[$8_1 + 4 >> 2];
  $14_1 = $5_1 + 1448 | 0;
  HEAP32[$14_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$14_1 + 4 >> 2] = $15_1;
  $9_1 = $5_1 + 1192 | 0;
  $16_1 = HEAP32[$9_1 + 4 >> 2];
  $15_1 = $5_1 + 1640 | 0;
  HEAP32[$15_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$15_1 + 4 >> 2] = $16_1;
  $13_1 = $5_1 + 1184 | 0;
  $17_1 = HEAP32[$13_1 + 4 >> 2];
  $16_1 = $5_1 + 1632 | 0;
  HEAP32[$16_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$16_1 + 4 >> 2] = $17_1;
  $6_1 = $5_1 + 1176 | 0;
  $12_1 = HEAP32[$6_1 + 4 >> 2];
  $17_1 = $5_1 + 1624 | 0;
  HEAP32[$17_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $12_1;
  $12_1 = HEAP32[$5_1 + 1204 >> 2];
  HEAP32[$5_1 + 1424 >> 2] = HEAP32[$5_1 + 1200 >> 2];
  HEAP32[$5_1 + 1428 >> 2] = $12_1;
  $12_1 = HEAP32[$5_1 + 1172 >> 2];
  HEAP32[$5_1 + 1616 >> 2] = HEAP32[$5_1 + 1168 >> 2];
  HEAP32[$5_1 + 1620 >> 2] = $12_1;
  $12_1 = $5_1 + 1672 | 0;
  HEAP32[$12_1 >> 2] = 0;
  HEAP32[$12_1 + 4 >> 2] = 0;
  $19_1 = $5_1 + 1664 | 0;
  HEAP32[$19_1 >> 2] = 0;
  HEAP32[$19_1 + 4 >> 2] = 0;
  $20_1 = $5_1 + 1656 | 0;
  HEAP32[$20_1 >> 2] = 0;
  HEAP32[$20_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 1648 >> 2] = 0;
  HEAP32[$5_1 + 1652 >> 2] = 0;
  $18_1 = $5_1 + 536 | 0;
  $10_1 = HEAP32[$18_1 + 4 >> 2];
  HEAP32[$9_1 >> 2] = HEAP32[$18_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $10_1;
  $9_1 = $5_1 + 528 | 0;
  $10_1 = HEAP32[$9_1 + 4 >> 2];
  HEAP32[$13_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$13_1 + 4 >> 2] = $10_1;
  $13_1 = $5_1 + 520 | 0;
  $10_1 = HEAP32[$13_1 + 4 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $10_1;
  HEAP32[$5_1 + 1116 >> 2] = 64;
  $6_1 = HEAP32[$5_1 + 516 >> 2];
  HEAP32[$5_1 + 1168 >> 2] = HEAP32[$5_1 + 512 >> 2];
  HEAP32[$5_1 + 1172 >> 2] = $6_1;
  $6_1 = $5_1 + 552 | 0;
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $10_1;
  $6_1 = $5_1 + 560 | 0;
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $10_1;
  $6_1 = $5_1 + 568 | 0;
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $10_1;
  HEAP32[$5_1 + 1108 >> 2] = 32;
  $6_1 = $5_1 + 544 | 0;
  HEAP32[$5_1 + 1104 >> 2] = $6_1;
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$5_1 + 1200 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 1204 >> 2] = $10_1;
  HEAP32[$5_1 + 1112 >> 2] = $2_1;
  $58($1_1, 1048889, 10, $5_1 + 1648 | 0, 32, $3_1, 2);
  $10_1 = HEAP32[$18_1 + 4 >> 2];
  $6_1 = $5_1 + 1704 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$18_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $10_1;
  $18_1 = HEAP32[$9_1 + 4 >> 2];
  $6_1 = $5_1 + 1696 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $18_1;
  $6_1 = HEAP32[$13_1 + 4 >> 2];
  $9_1 = $5_1 + 1688 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $6_1;
  $9_1 = HEAP32[$5_1 + 516 >> 2];
  HEAP32[$5_1 + 1680 >> 2] = HEAP32[$5_1 + 512 >> 2];
  HEAP32[$5_1 + 1684 >> 2] = $9_1;
  $9_1 = HEAP32[$15_1 + 4 >> 2];
  HEAP32[$11_1 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $9_1;
  $11_1 = HEAP32[$16_1 + 4 >> 2];
  HEAP32[$22_1 >> 2] = HEAP32[$16_1 >> 2];
  HEAP32[$22_1 + 4 >> 2] = $11_1;
  $11_1 = HEAP32[$17_1 + 4 >> 2];
  HEAP32[$23_1 >> 2] = HEAP32[$17_1 >> 2];
  HEAP32[$23_1 + 4 >> 2] = $11_1;
  $11_1 = HEAP32[$5_1 + 1620 >> 2];
  HEAP32[$5_1 + 1104 >> 2] = HEAP32[$5_1 + 1616 >> 2];
  HEAP32[$5_1 + 1108 >> 2] = $11_1;
  $5($2_1, $5_1 + 1680 | 0, $3_1);
  $11_1 = HEAP32[$20_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$20_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $11_1;
  $4_1 = HEAP32[$19_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$19_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$12_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$5_1 + 1652 >> 2];
  HEAP32[$5_1 + 1200 >> 2] = HEAP32[$5_1 + 1648 >> 2];
  HEAP32[$5_1 + 1204 >> 2] = $4_1;
  $4_1 = $5_1 + 1360 | 0;
  $91($4_1, $2_1, 64);
  $336($1_1);
  $91($3_1, $4_1, 64);
  $8_1 = HEAP32[$14_1 + 4 >> 2];
  $7_1 = $5_1 + 856 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$25_1 + 4 >> 2];
  $7_1 = $5_1 + 848 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$25_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$24_1 + 4 >> 2];
  $7_1 = $5_1 + 840 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$24_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$5_1 + 1428 >> 2];
  HEAP32[$5_1 + 832 >> 2] = HEAP32[$5_1 + 1424 >> 2];
  HEAP32[$5_1 + 836 >> 2] = $7_1;
  $350($2_1, $3_1);
  $91($5_1 + 1552 | 0, $3_1, 64);
  $91($4_1, $2_1, 192);
  $91($1_1, $4_1, 256);
  $95($4_1, $1_1);
  $201($5_1 + 16 | 0, 96, 0);
  $2_1 = HEAP32[$5_1 + 20 >> 2];
  $3_1 = $91(HEAP32[$5_1 + 16 >> 2], $4_1, 96);
  $383($1_1);
  $383($21_1);
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 584 >> 2] = 96;
  HEAP32[$5_1 + 580 >> 2] = $2_1;
  HEAP32[$5_1 + 576 >> 2] = $3_1;
  $271($5_1 + 8 | 0, $1_1);
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 1712 | 0;
 }
 
 function $24($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 224 | 0;
  global$0 = $4_1;
  if ($1_1 >>> 0 > 63) {
   $91($4_1 + 32 | 0, ($0_1 + $1_1 | 0) + -64 | 0, 64);
   $147($4_1 + 96 | 0, 0, 64);
   $31_1 = $1_1 >>> 1 | 0;
   label$2 : {
    label$3 : while (1) {
     if (!$1_1) {
      break label$2
     }
     $26_1 = $1_1 >>> 0 < 64 ? $1_1 : 64;
     $6_1 = $4_1 + 96 | 0;
     $247($4_1 + 32 | 0, 64, $0_1, $26_1, $6_1, 64);
     $91($4_1 + 160 | 0, $6_1, 64);
     $0_1 = $0_1 + $26_1 | 0;
     $27_1 = 4;
     $9_1 = HEAP32[$4_1 + 188 >> 2];
     $6_1 = HEAP32[$4_1 + 172 >> 2];
     $5_1 = HEAP32[$4_1 + 204 >> 2];
     $14_1 = HEAP32[$4_1 + 220 >> 2];
     $10_1 = HEAP32[$4_1 + 168 >> 2];
     $20_1 = HEAP32[$4_1 + 216 >> 2];
     $11_1 = HEAP32[$4_1 + 184 >> 2];
     $15_1 = HEAP32[$4_1 + 200 >> 2];
     $16_1 = HEAP32[$4_1 + 212 >> 2];
     $21_1 = HEAP32[$4_1 + 196 >> 2];
     $12_1 = HEAP32[$4_1 + 164 >> 2];
     $17_1 = HEAP32[$4_1 + 180 >> 2];
     $18_1 = HEAP32[$4_1 + 192 >> 2];
     $8_1 = HEAP32[$4_1 + 176 >> 2];
     $13_1 = HEAP32[$4_1 + 208 >> 2];
     $19_1 = HEAP32[$4_1 + 160 >> 2];
     while (1) {
      if ($27_1) {
       $22_1 = __wasm_rotl_i32($12_1 + $17_1 | 0, 7) ^ $21_1;
       $28_1 = __wasm_rotl_i32($22_1 + $17_1 | 0, 9) ^ $16_1;
       $23_1 = __wasm_rotl_i32($13_1 + $19_1 | 0, 7) ^ $8_1;
       $29_1 = __wasm_rotl_i32($23_1 + $19_1 | 0, 9) ^ $18_1;
       $24_1 = __wasm_rotl_i32($29_1 + $23_1 | 0, 13) ^ $13_1;
       $25_1 = __wasm_rotl_i32($5_1 + $14_1 | 0, 7) ^ $6_1;
       $9_1 = __wasm_rotl_i32($25_1 + $14_1 | 0, 9) ^ $9_1;
       $7_1 = __wasm_rotl_i32($9_1 + $25_1 | 0, 13) ^ $5_1;
       $6_1 = __wasm_rotl_i32($9_1 + $7_1 | 0, 18) ^ $14_1;
       $5_1 = __wasm_rotl_i32($11_1 + $15_1 | 0, 7) ^ $20_1;
       $13_1 = $24_1 ^ __wasm_rotl_i32($6_1 + $5_1 | 0, 7);
       $16_1 = $28_1 ^ __wasm_rotl_i32($13_1 + $6_1 | 0, 9);
       $20_1 = __wasm_rotl_i32($13_1 + $16_1 | 0, 13) ^ $5_1;
       $14_1 = __wasm_rotl_i32($16_1 + $20_1 | 0, 18) ^ $6_1;
       $10_1 = __wasm_rotl_i32($5_1 + $15_1 | 0, 9) ^ $10_1;
       $6_1 = __wasm_rotl_i32($10_1 + $5_1 | 0, 13) ^ $11_1;
       $8_1 = __wasm_rotl_i32($6_1 + $10_1 | 0, 18) ^ $15_1;
       $5_1 = __wasm_rotl_i32($8_1 + $22_1 | 0, 7) ^ $7_1;
       $18_1 = __wasm_rotl_i32($5_1 + $8_1 | 0, 9) ^ $29_1;
       $21_1 = __wasm_rotl_i32($5_1 + $18_1 | 0, 13) ^ $22_1;
       $15_1 = __wasm_rotl_i32($18_1 + $21_1 | 0, 18) ^ $8_1;
       $11_1 = $6_1;
       $6_1 = __wasm_rotl_i32($22_1 + $28_1 | 0, 13) ^ $12_1;
       $7_1 = __wasm_rotl_i32($6_1 + $28_1 | 0, 18) ^ $17_1;
       $11_1 = $11_1 ^ __wasm_rotl_i32($7_1 + $23_1 | 0, 7);
       $9_1 = __wasm_rotl_i32($11_1 + $7_1 | 0, 9) ^ $9_1;
       $8_1 = __wasm_rotl_i32($9_1 + $11_1 | 0, 13) ^ $23_1;
       $17_1 = __wasm_rotl_i32($9_1 + $8_1 | 0, 18) ^ $7_1;
       $7_1 = __wasm_rotl_i32($24_1 + $29_1 | 0, 18) ^ $19_1;
       $12_1 = __wasm_rotl_i32($7_1 + $25_1 | 0, 7) ^ $6_1;
       $10_1 = __wasm_rotl_i32($12_1 + $7_1 | 0, 9) ^ $10_1;
       $6_1 = __wasm_rotl_i32($10_1 + $12_1 | 0, 13) ^ $25_1;
       $19_1 = __wasm_rotl_i32($10_1 + $6_1 | 0, 18) ^ $7_1;
       $27_1 = $27_1 - 1 | 0;
       continue;
      } else {
       label$7 : {
        HEAP32[$4_1 + 208 >> 2] = $13_1;
        HEAP32[$4_1 + 160 >> 2] = $19_1;
        HEAP32[$4_1 + 192 >> 2] = $18_1;
        HEAP32[$4_1 + 176 >> 2] = $8_1;
        HEAP32[$4_1 + 180 >> 2] = $17_1;
        HEAP32[$4_1 + 212 >> 2] = $16_1;
        HEAP32[$4_1 + 196 >> 2] = $21_1;
        HEAP32[$4_1 + 164 >> 2] = $12_1;
        HEAP32[$4_1 + 200 >> 2] = $15_1;
        HEAP32[$4_1 + 216 >> 2] = $20_1;
        HEAP32[$4_1 + 184 >> 2] = $11_1;
        HEAP32[$4_1 + 220 >> 2] = $14_1;
        HEAP32[$4_1 + 168 >> 2] = $10_1;
        HEAP32[$4_1 + 204 >> 2] = $5_1;
        HEAP32[$4_1 + 188 >> 2] = $9_1;
        HEAP32[$4_1 + 172 >> 2] = $6_1;
        $1_1 = $1_1 - $26_1 | 0;
        $5_1 = 0;
        while (1) {
         if (($5_1 | 0) != 64) {
          $7_1 = $5_1 + 4 | 0;
          $304($4_1 + 24 | 0, $4_1 + 32 | 0, 64, $5_1, $7_1);
          $8_1 = HEAP32[($4_1 + 160 | 0) + $5_1 >> 2];
          $24_1 = HEAP32[$4_1 + 28 >> 2];
          $6_1 = HEAP32[$4_1 + 24 >> 2];
          $304($4_1 + 16 | 0, $4_1 + 96 | 0, 64, $5_1, $7_1);
          if (HEAPU32[$4_1 + 20 >> 2] <= 3 | $24_1 >>> 0 <= 3) {
           break label$7
          }
          $5_1 = HEAP32[$4_1 + 16 >> 2];
          $5_1 = $8_1 + (HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24)) | 0;
          HEAP8[$6_1 | 0] = $5_1;
          HEAP8[$6_1 + 1 | 0] = $5_1 >>> 8;
          HEAP8[$6_1 + 2 | 0] = $5_1 >>> 16;
          HEAP8[$6_1 + 3 | 0] = $5_1 >>> 24;
          $5_1 = $7_1;
          continue;
         }
         break;
        };
        $6_1 = ($30_1 << 5 & -64) + (0 - ($30_1 & 1) & $31_1) | 0;
        $304($4_1 + 8 | 0, $2_1, $3_1, $6_1, $6_1 - -64 | 0);
        if (HEAPU32[$4_1 + 12 >> 2] <= 63) {
         break label$7
        }
        $91(HEAP32[$4_1 + 8 >> 2], $4_1 + 32 | 0, 64);
        $30_1 = $30_1 + 1 | 0;
        continue label$3;
       }
      }
      break;
     };
     break;
    };
    abort();
   }
   global$0 = $4_1 + 224 | 0;
   return;
  }
  abort();
 }
 
 function $25($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 992 | 0;
  global$0 = $7_1;
  $288($7_1 + 40 | 0, $1_1, $2_1);
  $8_1 = HEAP32[$7_1 + 44 >> 2];
  HEAP32[$7_1 + 52 >> 2] = $8_1;
  $9_1 = HEAP32[$7_1 + 40 >> 2];
  HEAP32[$7_1 + 48 >> 2] = $9_1;
  $288($7_1 + 32 | 0, $3_1, $4_1);
  $2_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$7_1 + 60 >> 2] = $2_1;
  $1_1 = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$7_1 + 56 >> 2] = $1_1;
  $288($7_1 + 24 | 0, $5_1, $6_1);
  $6_1 = HEAP32[$7_1 + 28 >> 2];
  HEAP32[$7_1 + 68 >> 2] = $6_1;
  $5_1 = HEAP32[$7_1 + 24 >> 2];
  HEAP32[$7_1 + 64 >> 2] = $5_1;
  $52($7_1 + 72 | 0, $9_1, $8_1, $1_1, $2_1);
  $8_1 = $7_1 + 432 | 0;
  $175($8_1);
  $4_1 = $7_1 + 264 | 0;
  $412($8_1, $4_1);
  $9_1 = $7_1 + 776 | 0;
  $91($9_1, $8_1, 216);
  $326($7_1 + 368 | 0, $9_1);
  $1_1 = $7_1 + 377 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 313 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$3_1 | 0] = $1_1;
  HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$3_1 + 4 | 0] = $2_1;
  HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = $7_1 + 385 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 321 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$3_1 | 0] = $1_1;
  HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$3_1 + 4 | 0] = $2_1;
  HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = $7_1 + 391 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 327 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$3_1 | 0] = $1_1;
  HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$3_1 + 4 | 0] = $2_1;
  HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
  $2_1 = $7_1 + 408 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $7_1 + 344 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $7_1 + 416 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $7_1 + 352 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $7_1 + 424 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $7_1 + 360 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = HEAPU8[$7_1 + 373 | 0] | HEAPU8[$7_1 + 374 | 0] << 8 | (HEAPU8[$7_1 + 375 | 0] << 16 | HEAPU8[$7_1 + 376 | 0] << 24);
  $1_1 = HEAPU8[$7_1 + 369 | 0] | HEAPU8[$7_1 + 370 | 0] << 8 | (HEAPU8[$7_1 + 371 | 0] << 16 | HEAPU8[$7_1 + 372 | 0] << 24);
  HEAP8[$7_1 + 305 | 0] = $1_1;
  HEAP8[$7_1 + 306 | 0] = $1_1 >>> 8;
  HEAP8[$7_1 + 307 | 0] = $1_1 >>> 16;
  HEAP8[$7_1 + 308 | 0] = $1_1 >>> 24;
  HEAP8[$7_1 + 309 | 0] = $2_1;
  HEAP8[$7_1 + 310 | 0] = $2_1 >>> 8;
  HEAP8[$7_1 + 311 | 0] = $2_1 >>> 16;
  HEAP8[$7_1 + 312 | 0] = $2_1 >>> 24;
  $1_1 = HEAP32[$7_1 + 404 >> 2];
  HEAP32[$7_1 + 336 >> 2] = HEAP32[$7_1 + 400 >> 2];
  HEAP32[$7_1 + 340 >> 2] = $1_1;
  $1_1 = HEAPU8[$7_1 + 399 | 0];
  HEAP8[$7_1 + 304 | 0] = HEAPU8[$7_1 + 368 | 0] & 248;
  HEAP8[$7_1 + 335 | 0] = $1_1 & 63 | 64;
  $175($8_1);
  $3_1 = $7_1 + 336 | 0;
  $412($8_1, $3_1);
  $409($8_1, $5_1, $6_1);
  $91($9_1, $8_1, 216);
  $2_1 = $7_1 + 680 | 0;
  $291($2_1, $9_1);
  $413($9_1, $2_1);
  $1_1 = $7_1 + 648 | 0;
  $130($1_1, $9_1);
  $175($9_1);
  $91($8_1, $9_1, 216);
  $412($8_1, $1_1);
  $412($8_1, $7_1 + 232 | 0);
  $409($8_1, $5_1, $6_1);
  $91($9_1, $8_1, 216);
  $1_1 = $7_1 + 744 | 0;
  $291($1_1, $9_1);
  $272($9_1, $1_1, $7_1 + 304 | 0);
  $5($7_1 + 712 | 0, $9_1, $2_1);
  $9_1 = HEAPU8[$7_1 + 651 | 0] | HEAPU8[$7_1 + 652 | 0] << 8 | (HEAPU8[$7_1 + 653 | 0] << 16 | HEAPU8[$7_1 + 654 | 0] << 24);
  $6_1 = HEAPU8[$7_1 + 743 | 0];
  HEAP8[$7_1 + 800 | 0] = HEAPU8[$7_1 + 679 | 0];
  $5_1 = $7_1 + 671 | 0;
  $1_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
  $2_1 = $7_1 + 792 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $5_1 = $7_1 + 663 | 0;
  $1_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
  $2_1 = $7_1 + 784 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $7_1 + 720 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $5_1 = $7_1 + 809 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$5_1 | 0] = $1_1;
  HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$5_1 + 4 | 0] = $2_1;
  HEAP8[$5_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$5_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$5_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = $7_1 + 728 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $5_1 = $7_1 + 817 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$5_1 | 0] = $1_1;
  HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$5_1 + 4 | 0] = $2_1;
  HEAP8[$5_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$5_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$5_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = $7_1 + 735 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $5_1 = $7_1 + 824 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$5_1 | 0] = $1_1;
  HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$5_1 + 4 | 0] = $2_1;
  HEAP8[$5_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$5_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$5_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = HEAPU8[$7_1 + 659 | 0] | HEAPU8[$7_1 + 660 | 0] << 8 | (HEAPU8[$7_1 + 661 | 0] << 16 | HEAPU8[$7_1 + 662 | 0] << 24);
  HEAP32[$7_1 + 776 >> 2] = HEAPU8[$7_1 + 655 | 0] | HEAPU8[$7_1 + 656 | 0] << 8 | (HEAPU8[$7_1 + 657 | 0] << 16 | HEAPU8[$7_1 + 658 | 0] << 24);
  HEAP32[$7_1 + 780 >> 2] = $1_1;
  $2_1 = HEAPU8[$7_1 + 716 | 0] | HEAPU8[$7_1 + 717 | 0] << 8 | (HEAPU8[$7_1 + 718 | 0] << 16 | HEAPU8[$7_1 + 719 | 0] << 24);
  $1_1 = HEAPU8[$7_1 + 712 | 0] | HEAPU8[$7_1 + 713 | 0] << 8 | (HEAPU8[$7_1 + 714 | 0] << 16 | HEAPU8[$7_1 + 715 | 0] << 24);
  HEAP8[$7_1 + 801 | 0] = $1_1;
  HEAP8[$7_1 + 802 | 0] = $1_1 >>> 8;
  HEAP8[$7_1 + 803 | 0] = $1_1 >>> 16;
  HEAP8[$7_1 + 804 | 0] = $1_1 >>> 24;
  HEAP8[$7_1 + 805 | 0] = $2_1;
  HEAP8[$7_1 + 806 | 0] = $2_1 >>> 8;
  HEAP8[$7_1 + 807 | 0] = $2_1 >>> 16;
  HEAP8[$7_1 + 808 | 0] = $2_1 >>> 24;
  if ($6_1 >>> 0 >= 32) {
   abort()
  }
  $2_1 = $7_1 + 302 | 0;
  HEAP8[$2_1 | 0] = HEAPU8[$7_1 + 650 | 0];
  HEAP16[$7_1 + 300 >> 1] = HEAPU16[$7_1 + 648 >> 1];
  $1_1 = $7_1 + 368 | 0;
  $5_1 = $7_1 + 776 | 0;
  $91($1_1, $5_1, 56);
  $338($7_1 + 304 | 0);
  $338($3_1);
  $3_1 = $7_1 + 434 | 0;
  HEAP8[$3_1 | 0] = HEAPU8[$2_1 | 0];
  HEAP16[$7_1 + 432 >> 1] = HEAPU16[$7_1 + 300 >> 1];
  $91($5_1, $1_1, 56);
  $201($7_1 + 16 | 0, 64, 0);
  $2_1 = HEAP32[$7_1 + 20 >> 2];
  $8_1 = HEAP32[$7_1 + 16 >> 2];
  $1_1 = HEAPU16[$7_1 + 432 >> 1];
  HEAP8[$8_1 | 0] = $1_1;
  HEAP8[$8_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$8_1 + 3 | 0] = $9_1;
  HEAP8[$8_1 + 4 | 0] = $9_1 >>> 8;
  HEAP8[$8_1 + 5 | 0] = $9_1 >>> 16;
  HEAP8[$8_1 + 6 | 0] = $9_1 >>> 24;
  HEAP8[$8_1 + 2 | 0] = HEAPU8[$3_1 | 0];
  $91($8_1 + 7 | 0, $5_1, 56);
  HEAP8[$8_1 + 63 | 0] = $6_1;
  $338($4_1);
  $392($7_1 - -64 | 0);
  $392($7_1 + 56 | 0);
  $392($7_1 + 48 | 0);
  HEAP32[$7_1 + 80 >> 2] = 64;
  HEAP32[$7_1 + 76 >> 2] = $2_1;
  HEAP32[$7_1 + 72 >> 2] = $8_1;
  $271($7_1 + 8 | 0, $7_1 + 72 | 0);
  $1_1 = HEAP32[$7_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $7_1 + 992 | 0;
 }
 
 function $26($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 36 >> 2] = $0_1;
  label$1 : {
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (!HEAP32[$0_1 + 52 >> 2]) {
           if (HEAP32[$0_1 >> 2]) {
            $1_1 = $152($0_1);
            $0_1 = HEAP32[$2_1 + 36 >> 2];
            if (($1_1 | 0) != 1114112) {
             break label$8
            }
           }
           if (!HEAP32[($0_1 + 8 | 0) + (HEAP32[$0_1 + 8 >> 2] == 1 ? 12 : 4) >> 2]) {
            $9_1 = 1114112;
            break label$1;
           }
           $13($0_1);
           $0_1 = HEAP32[$2_1 + 36 >> 2];
          }
          $4_1 = HEAP32[$0_1 + 48 >> 2];
          $3_1 = HEAP32[$0_1 + 8 >> 2];
          label$12 : {
           if (($3_1 | 0) != 1) {
            $6_1 = HEAP32[$0_1 + 12 >> 2];
            if ($6_1 >>> 0 >= 5) {
             break label$7
            }
            $5_1 = $0_1 + 16 | 0;
            $1_1 = $6_1;
            break label$12;
           }
           $6_1 = HEAP32[$0_1 + 12 >> 2];
           $5_1 = $6_1;
           $1_1 = HEAP32[$0_1 + 20 >> 2];
          }
          if ($1_1 >>> 0 <= $4_1 >>> 0) {
           break label$6
          }
          $9_1 = HEAP32[(($4_1 << 3) + $5_1 | 0) + 4 >> 2];
          $1_1 = $4_1 + 1 | 0;
          if (($1_1 | 0) != HEAP32[$0_1 + 52 >> 2]) {
           HEAP32[$0_1 + 48 >> 2] = $1_1;
           break label$1;
          }
          $10_1 = $0_1 + 16 | 0;
          $7_1 = ($3_1 ? HEAP32[$0_1 + 20 >> 2] : $6_1) - $1_1 | 0;
          $6_1 = 0;
          $3_1 = 0;
          while (1) {
           if (($3_1 | 0) == ($7_1 | 0)) {
            if (HEAP32[$0_1 + 8 >> 2] != 1) {
             $1_1 = HEAP32[$0_1 + 12 >> 2];
             HEAP32[$0_1 + 12 >> 2] = $1_1 >>> 0 > $7_1 >>> 0 ? $7_1 : $1_1;
             break label$3;
            }
            if (HEAPU32[$0_1 + 20 >> 2] < $7_1 >>> 0) {
             break label$3
            }
            HEAP32[$0_1 + 20 >> 2] = $7_1;
            break label$3;
           }
           $8_1 = HEAP32[$0_1 + 52 >> 2];
           $11_1 = HEAP32[$0_1 + 8 >> 2];
           label$18 : {
            if (($11_1 | 0) != 1) {
             $4_1 = HEAP32[$0_1 + 12 >> 2];
             if ($4_1 >>> 0 >= 5) {
              break label$7
             }
             $5_1 = $4_1;
             $1_1 = $10_1;
             break label$18;
            }
            $5_1 = HEAP32[$0_1 + 20 >> 2];
            $4_1 = HEAP32[$0_1 + 12 >> 2];
            $1_1 = $4_1;
           }
           $12_1 = $5_1;
           $5_1 = $3_1 + $8_1 | 0;
           if ($12_1 >>> 0 <= $5_1 >>> 0) {
            break label$6
           }
           $1_1 = ($5_1 << 3) + $1_1 | 0;
           $5_1 = HEAP32[$1_1 + 4 >> 2];
           $8_1 = HEAPU8[$1_1 | 0];
           label$20 : {
            if (!$11_1) {
             $305($2_1, $10_1, 4, $4_1);
             $4_1 = HEAP32[$2_1 >> 2];
             $1_1 = HEAP32[$2_1 + 4 >> 2];
             break label$20;
            }
            $1_1 = HEAP32[$0_1 + 20 >> 2];
           }
           if ($1_1 >>> 0 <= $3_1 >>> 0) {
            break label$6
           }
           $1_1 = $4_1 + $6_1 | 0;
           HEAP8[$1_1 | 0] = $8_1;
           HEAP32[$1_1 + 4 >> 2] = $5_1;
           $3_1 = $3_1 + 1 | 0;
           $6_1 = $6_1 + 8 | 0;
           continue;
          };
         }
         if (HEAPU8[$0_1 + 56 | 0] != 1) {
          HEAP32[$2_1 + 40 >> 2] = $2_1 + 36;
          if ($1_1 >>> 0 >= 128) {
           label$24 : {
            $0_1 = $1_1 - 44032 | 0;
            if ($0_1 >>> 0 >= 11172) {
             $299($2_1 + 24 | 0, $1_1);
             $3_1 = HEAP32[$2_1 + 24 >> 2];
             if (!$3_1) {
              break label$24
             }
             $0_1 = HEAP32[$2_1 + 28 >> 2] << 2;
             while (1) {
              if (!$0_1) {
               break label$4
              }
              $402($2_1 + 40 | 0, HEAP32[$3_1 >> 2]);
              $0_1 = $0_1 - 4 | 0;
              $3_1 = $3_1 + 4 | 0;
              continue;
             };
            }
            HEAP32[$2_1 + 44 >> 2] = $2_1 + 36;
            $1_1 = $2_1 + 44 | 0;
            $402($1_1, (($0_1 >>> 0) / 588 | 0) + 4352 | 0);
            $402($1_1, ((($0_1 >>> 0) % 588 >>> 0) / 28 | 0) + 4449 | 0);
            $0_1 = ($0_1 >>> 0) % 28 | 0;
            if (!$0_1) {
             break label$4
            }
            $402($2_1 + 44 | 0, $0_1 + 4519 | 0);
            break label$4;
           }
           $402($2_1 + 40 | 0, $1_1);
           break label$4;
          }
          $402($2_1 + 40 | 0, $1_1);
          break label$4;
         }
         HEAP32[$2_1 + 40 >> 2] = $2_1 + 36;
         if ($1_1 >>> 0 >= 128) {
          label$28 : {
           $0_1 = $1_1 - 44032 | 0;
           if ($0_1 >>> 0 >= 11172) {
            $180($2_1 + 16 | 0, $1_1, 1152700, 3678, 1173468, 3678);
            $3_1 = HEAP32[$2_1 + 16 >> 2];
            if ($3_1) {
             $0_1 = HEAP32[$2_1 + 20 >> 2];
             break label$5;
            }
            $299($2_1 + 8 | 0, $1_1);
            $3_1 = HEAP32[$2_1 + 8 >> 2];
            if (!$3_1) {
             break label$28
            }
            $0_1 = HEAP32[$2_1 + 12 >> 2];
            break label$5;
           }
           HEAP32[$2_1 + 44 >> 2] = $2_1 + 36;
           $1_1 = $2_1 + 44 | 0;
           $402($1_1, (($0_1 >>> 0) / 588 | 0) + 4352 | 0);
           $402($1_1, ((($0_1 >>> 0) % 588 >>> 0) / 28 | 0) + 4449 | 0);
           $0_1 = ($0_1 >>> 0) % 28 | 0;
           if (!$0_1) {
            break label$4
           }
           $402($2_1 + 44 | 0, $0_1 + 4519 | 0);
           break label$4;
          }
          $402($2_1 + 40 | 0, $1_1);
          break label$4;
         }
         $402($2_1 + 40 | 0, $1_1);
         break label$4;
        }
        abort();
       }
       abort();
      }
      $0_1 = $0_1 << 2;
      while (1) {
       if (!$0_1) {
        break label$4
       }
       $402($2_1 + 40 | 0, HEAP32[$3_1 >> 2]);
       $0_1 = $0_1 - 4 | 0;
       $3_1 = $3_1 + 4 | 0;
       continue;
      };
     }
     $0_1 = HEAP32[$2_1 + 36 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$0_1 + 48 >> 2] = 0;
   HEAP32[$0_1 + 52 >> 2] = 0;
  }
  global$0 = $2_1 + 48 | 0;
  return $9_1;
 }
 
 function $27($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 2720 | 0;
  global$0 = $4_1;
  $89($4_1 + 8 | 0, $1_1, 5);
  $89($4_1 + 264 | 0, $3_1, 8);
  $5_1 = 256;
  $9_1 = 255;
  $1_1 = 255;
  while (1) {
   label$2 : {
    $3_1 = $1_1;
    $1_1 = $9_1;
    if (($1_1 | 0) == -1) {
     break label$2
    }
    if (HEAPU8[($4_1 + 8 | 0) + $1_1 | 0]) {
     $3_1 = $1_1;
     break label$2;
    }
    $9_1 = $1_1 - 1 | 0;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $5_1;
    if (!HEAPU8[($4_1 + 264 | 0) + $1_1 | 0]) {
     continue
    }
   }
   break;
  };
  $123($4_1 + 520 | 0, $2_1);
  $147($4_1 + 1800 | 0, 0, 40);
  $1_1 = $4_1 + 1872 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1864 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1856 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1848 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1888 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1896 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1904 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $4_1 + 1912 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 1880 >> 2] = 1;
  HEAP32[$4_1 + 1884 >> 2] = 0;
  HEAP32[$4_1 + 1840 >> 2] = 1;
  HEAP32[$4_1 + 1844 >> 2] = 0;
  $10_1 = $4_1 + 2040 | 0;
  $11_1 = $4_1 + 1960 | 0;
  $12_1 = $4_1 + 2e3 | 0;
  $2_1 = $4_1 + 2320 | 0;
  $13_1 = $4_1 + 2160 | 0;
  $14_1 = $4_1 + 2360 | 0;
  $15_1 = $4_1 + 2120 | 0;
  $9_1 = $4_1 + 2280 | 0;
  while (1) {
   $120($4_1 + 1920 | 0, $4_1 + 1800 | 0);
   label$5 : {
    label$6 : {
     $1_1 = HEAP8[($4_1 + 8 | 0) + $3_1 | 0];
     label$7 : {
      if (($1_1 | 0) > 0) {
       $281($4_1 + 2080 | 0, $4_1 + 1920 | 0);
       if (($1_1 & 255) >>> 0 >= 16) {
        break label$6
       }
       $5_1 = $4_1 + 2240 | 0;
       $91($5_1, ($4_1 + 520 | 0) + Math_imul(($1_1 & 254) >>> 1 | 0, 160) | 0, 160);
       $108($4_1 + 1920 | 0, $4_1 + 2080 | 0, $5_1);
       break label$7;
      }
      if (($1_1 | 0) >= 0) {
       break label$7
      }
      $281($4_1 + 2080 | 0, $4_1 + 1920 | 0);
      $1_1 = 0 - $1_1 | 0;
      if (($1_1 & 255) >>> 0 >= 16) {
       break label$6
      }
      $5_1 = $4_1 + 2240 | 0;
      $91($5_1, ($4_1 + 520 | 0) + Math_imul($1_1 << 24 >> 24 >>> 1 | 0, 160) | 0, 160);
      $109($4_1 + 1920 | 0, $4_1 + 2080 | 0, $5_1);
     }
     $1_1 = HEAP8[($4_1 + 264 | 0) + $3_1 | 0];
     if (($1_1 | 0) > 0) {
      $5_1 = $4_1 + 2240 | 0;
      $7_1 = $4_1 + 1920 | 0;
      $281($5_1, $7_1);
      $6_1 = $4_1 + 2080 | 0;
      $91($6_1, Math_imul(($1_1 & 254) >>> 1 | 0, 120) + 1065592 | 0, 120);
      $122($7_1, $5_1, $6_1);
      break label$5;
     }
     if (($1_1 | 0) >= 0) {
      break label$5
     }
     $281($4_1 + 2240 | 0, $4_1 + 1920 | 0);
     $1_1 = 0 - $1_1 << 24 >> 24;
     if (($1_1 | 0) < 0) {
      break label$6
     }
     $6_1 = $4_1 + 2080 | 0;
     $91($6_1, Math_imul($1_1 >>> 1 | 0, 120) + 1065592 | 0, 120);
     $1_1 = $4_1 + 2400 | 0;
     $91($1_1, $9_1, 40);
     $5_1 = $4_1 + 2240 | 0;
     $300($1_1, $5_1);
     $8_1 = $4_1 + 2440 | 0;
     $167($8_1, $9_1, $5_1);
     $5_1 = $4_1 + 2480 | 0;
     $15($5_1, $1_1, $15_1);
     $7_1 = $4_1 + 2520 | 0;
     $15($7_1, $8_1, $6_1);
     $6_1 = $4_1 + 2560 | 0;
     $15($6_1, $14_1, $13_1);
     $1_1 = $4_1 + 2600 | 0;
     $91($1_1, $2_1, 40);
     $300($1_1, $2_1);
     $167($4_1 + 1920 | 0, $5_1, $7_1);
     $8_1 = $4_1 + 2640 | 0;
     $91($8_1, $5_1, 40);
     $300($8_1, $7_1);
     $167($12_1, $1_1, $6_1);
     $5_1 = $4_1 + 2680 | 0;
     $91($5_1, $1_1, 40);
     $300($5_1, $6_1);
     $91($11_1, $8_1, 40);
     $91($10_1, $5_1, 40);
     break label$5;
    }
    abort();
   }
   $313($4_1 + 1800 | 0, $4_1 + 1920 | 0);
   if ($3_1) {
    $3_1 = $3_1 - 1 | 0;
    continue;
   }
   break;
  };
  $296($0_1, $4_1 + 1800 | 0);
  global$0 = $4_1 + 2720 | 0;
 }
 
 function $28($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 288 | 0;
  global$0 = $3_1;
  $29($3_1 + 224 | 0, $1_1, $2_1);
  $19_1 = HEAP32[$3_1 + 256 >> 2];
  $12_1 = HEAP32[$3_1 + 260 >> 2];
  $297($3_1 + 208 | 0, $19_1, $12_1, 0, 0, 801750719, 1076732275, 0, 0);
  $17_1 = HEAP32[$3_1 + 264 >> 2];
  $13_1 = HEAP32[$3_1 + 268 >> 2];
  $297($3_1 + 176 | 0, $17_1, $13_1, 0, 0, 801750719, 1076732275, 0, 0);
  $297($3_1 + 192 | 0, $19_1, $12_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $14_1 = HEAP32[$3_1 + 272 >> 2];
  $10_1 = HEAP32[$3_1 + 276 >> 2];
  $297($3_1 + 144 | 0, $14_1, $10_1, 0, 0, 801750719, 1076732275, 0, 0);
  $297($3_1 + 160 | 0, $17_1, $13_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $22_1 = HEAP32[$3_1 + 280 >> 2];
  $1_1 = HEAP32[$3_1 + 284 >> 2];
  $297($3_1 + 112 | 0, $22_1, $1_1, 0, 0, 801750719, 1076732275, 0, 0);
  $297($3_1 + 128 | 0, $14_1, $10_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $23_1 = $1_1;
  $297($3_1 + 96 | 0, $22_1, $1_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $24_1 = $3_1 + 80 | 0;
  $21_1 = HEAP32[$3_1 + 240 >> 2];
  $11_1 = HEAP32[$3_1 + 244 >> 2];
  $9_1 = $11_1;
  $4_1 = HEAP32[$3_1 + 224 >> 2];
  $2_1 = HEAP32[$3_1 + 208 >> 2];
  $6_1 = $4_1 + $2_1 | 0;
  $5_1 = HEAP32[$3_1 + 228 >> 2];
  $1_1 = $5_1 + HEAP32[$3_1 + 212 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $6_1;
  $2_1 = $6_1;
  $6_1 = $1_1;
  $5_1 = ($5_1 | 0) == ($1_1 | 0) & $2_1 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0;
  $7_1 = HEAP32[$3_1 + 232 >> 2];
  $1_1 = $3_1 + 216 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $7_1 + $2_1 | 0;
  $8_1 = HEAP32[$3_1 + 236 >> 2];
  $1_1 = $8_1 + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $5_1 + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $4_1;
  $2_1 = $4_1;
  $4_1 = $1_1;
  $15_1 = ($8_1 | 0) == ($1_1 | 0) & $2_1 >>> 0 < $7_1 >>> 0 | $1_1 >>> 0 < $8_1 >>> 0;
  $1_1 = $3_1 + 200 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $7_1 = $3_1 + 184 | 0;
  $8_1 = $2_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $7_1 = $2_1 + $21_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $7_1;
  $7_1 = $15_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $15_1 = $7_1;
  $7_1 = HEAP32[$3_1 + 176 >> 2];
  $8_1 = $7_1 + $5_1 | 0;
  $9_1 = $4_1;
  $1_1 = $4_1 + HEAP32[$3_1 + 180 >> 2] | 0;
  $1_1 = $7_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $8_1;
  $4_1 = $1_1;
  $5_1 = ($1_1 | 0) == ($9_1 | 0) & $5_1 >>> 0 > $7_1 >>> 0 | $1_1 >>> 0 < $9_1 >>> 0;
  $9_1 = $15_1 + $5_1 | 0;
  $1_1 = $2_1;
  $8_1 = $9_1;
  $2_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $7_1;
  $20_1 = HEAP32[$3_1 + 248 >> 2];
  $7_1 = $3_1;
  $15_1 = HEAP32[$3_1 + 252 >> 2];
  $9_1 = $15_1;
  $25_1 = $8_1;
  $3_1 = HEAP32[$3_1 + 192 >> 2];
  $8_1 = $3_1 + $5_1 | 0;
  $1_1 = HEAP32[$7_1 + 196 >> 2] + $4_1 | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = $8_1;
  $3_1 = $8_1;
  $16_1 = $1_1;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 < $5_1 >>> 0 | $1_1 >>> 0 < $4_1 >>> 0;
  $3_1 = $25_1 + $4_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $11_1 = ($11_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $21_1 >>> 0 | $1_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $7_1 + 168 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $7_1 + 152 | 0;
  $8_1 = $2_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $8_1;
  $5_1 = $2_1 + $20_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $11_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $11_1 = $5_1;
  $5_1 = HEAP32[$7_1 + 144 >> 2];
  $8_1 = $5_1 + $3_1 | 0;
  $9_1 = $4_1;
  $1_1 = $4_1 + HEAP32[$7_1 + 148 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $8_1;
  $4_1 = $1_1;
  $3_1 = ($1_1 | 0) == ($9_1 | 0) & $3_1 >>> 0 > $5_1 >>> 0 | $1_1 >>> 0 < $9_1 >>> 0;
  $9_1 = $11_1 + $3_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $2_1 = $1_1;
  $8_1 = $3_1;
  $3_1 = HEAP32[$7_1 + 160 >> 2];
  $9_1 = $3_1 + $5_1 | 0;
  $1_1 = HEAP32[$7_1 + 164 >> 2] + $4_1 | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 > $9_1 >>> 0 | $1_1 >>> 0 < $4_1 >>> 0;
  $5_1 = $8_1 + $4_1 | 0;
  $1_1 = $2_1;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $2_1 = $9_1;
  $1_1 = $7_1 + 120 | 0;
  $9_1 = HEAP32[$1_1 >> 2];
  $8_1 = HEAP32[$1_1 + 4 >> 2];
  $25_1 = $5_1;
  $1_1 = $3_1 + $12_1 | 0;
  $5_1 = $2_1 + $19_1 | 0;
  $1_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $21_1 = $5_1;
  $11_1 = $1_1;
  $2_1 = ($1_1 | 0) == ($3_1 | 0) & $2_1 >>> 0 > $5_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0;
  $3_1 = $25_1 + $2_1 | 0;
  $1_1 = $4_1;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $15_1 = ($15_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $20_1 >>> 0 | $1_1 >>> 0 < $15_1 >>> 0;
  $12_1 = $9_1;
  $9_1 = HEAP32[$7_1 + 96 >> 2];
  $1_1 = $7_1 + 136 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $5_1 = $9_1 + $2_1 | 0;
  $20_1 = HEAP32[$7_1 + 100 >> 2];
  $1_1 = $20_1 + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $12_1 + $2_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $5_1;
  $5_1 = $15_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $15_1 = $5_1;
  $5_1 = HEAP32[$7_1 + 112 >> 2];
  $8_1 = $5_1 + $3_1 | 0;
  $12_1 = $4_1;
  $1_1 = $4_1 + HEAP32[$7_1 + 116 >> 2] | 0;
  $1_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $8_1;
  $4_1 = $1_1;
  $3_1 = ($1_1 | 0) == ($12_1 | 0) & $3_1 >>> 0 > $5_1 >>> 0 | $1_1 >>> 0 < $12_1 >>> 0;
  $12_1 = $15_1 + $3_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $8_1 = $12_1;
  $3_1 = $5_1;
  $5_1 = HEAP32[$7_1 + 128 >> 2];
  $12_1 = $3_1 + $5_1 | 0;
  $1_1 = HEAP32[$7_1 + 132 >> 2] + $4_1 | 0;
  $1_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $1_1;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 > $12_1 >>> 0 | $1_1 >>> 0 < $4_1 >>> 0;
  $3_1 = $8_1 + $4_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $19_1 = $3_1;
  $4_1 = $17_1;
  $3_1 = $4_1 + $12_1 | 0;
  $1_1 = $5_1 + $13_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $3_1;
  $8_1 = $1_1;
  $4_1 = ($5_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $12_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0;
  $3_1 = $19_1 + $4_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $3_1;
  $3_1 = $3_1 + $14_1 | 0;
  $2_1 = $1_1;
  $1_1 = $1_1 + $10_1 | 0;
  $19_1 = $3_1;
  $5_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($24_1, $3_1, $5_1, 0, 0, 801750719, 1076732275, 0, 0);
  $10_1 = ($2_1 | 0) == ($5_1 | 0) & $4_1 >>> 0 > $3_1 >>> 0 | $2_1 >>> 0 > $5_1 >>> 0;
  $9_1 = ($2_1 | 0) == ($20_1 | 0) & $4_1 >>> 0 < $9_1 >>> 0 | $2_1 >>> 0 < $20_1 >>> 0;
  $1_1 = $7_1 + 104 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $2_1 + $22_1 | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2] + $23_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $9_1 + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $10_1 + $4_1 | 0;
  $17_1 = $4_1;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $297($7_1 + 48 | 0, $4_1, $1_1, 0, 0, 801750719, 1076732275, 0, 0);
  $297($7_1 - -64 | 0, $3_1, $5_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $9_1 = $1_1;
  $297($7_1 + 32 | 0, $4_1, $1_1, 0, 0, 1354194884, 1162945305, 0, 0);
  $24_1 = $7_1 + 16 | 0;
  $1_1 = $7_1 + 56 | 0;
  $14_1 = HEAP32[$1_1 >> 2];
  $10_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $18_1;
  $4_1 = HEAP32[$7_1 + 80 >> 2];
  $3_1 = $2_1 + $4_1 | 0;
  $1_1 = HEAP32[$7_1 + 84 >> 2] + $6_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $3_1;
  $13_1 = $1_1;
  $3_1 = ($1_1 | 0) == ($6_1 | 0) & $2_1 >>> 0 > $3_1 >>> 0 | $1_1 >>> 0 < $6_1 >>> 0;
  $1_1 = $7_1 + 88 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $2_1 + $26_1 | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2] + $16_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = $3_1 + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $4_1;
  $4_1 = $1_1;
  $18_1 = ($16_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $26_1 >>> 0 | $1_1 >>> 0 < $16_1 >>> 0;
  $1_1 = $7_1 + 72 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + $21_1 | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2] + $11_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $2_1 + $14_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $6_1;
  $6_1 = $18_1 + $2_1 | 0;
  $1_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $18_1 = $6_1;
  $6_1 = HEAP32[$7_1 + 48 >> 2];
  $10_1 = $6_1 + $3_1 | 0;
  $1_1 = HEAP32[$7_1 + 52 >> 2] + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $1_1;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 > $10_1 >>> 0 | $1_1 >>> 0 < $4_1 >>> 0;
  $3_1 = $18_1 + $4_1 | 0;
  $1_1 = $2_1;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $16_1 = $3_1;
  $4_1 = HEAP32[$7_1 + 64 >> 2];
  $3_1 = $4_1 + $10_1 | 0;
  $1_1 = HEAP32[$7_1 + 68 >> 2] + $6_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $3_1;
  $14_1 = $1_1;
  $4_1 = ($6_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $10_1 >>> 0 | $1_1 >>> 0 < $6_1 >>> 0;
  $3_1 = $16_1 + $4_1 | 0;
  $1_1 = $2_1;
  $10_1 = $3_1;
  $6_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = $7_1 + 40 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $4_1 = $2_1 + $15_1 | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2] + $8_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $4_1;
  $4_1 = (($11_1 | 0) == ($6_1 | 0) & $3_1 >>> 0 < $21_1 >>> 0 | $6_1 >>> 0 < $11_1 >>> 0) + $4_1 | 0;
  $1_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $16_1 = $4_1;
  $11_1 = ($9_1 | 0) == ($23_1 | 0) & $17_1 >>> 0 < $22_1 >>> 0 | $9_1 >>> 0 < $23_1 >>> 0;
  $1_1 = $11_1;
  $4_1 = $1_1 ? 801750719 : 0;
  $3_1 = $4_1 + $3_1 | 0;
  $1_1 = ($1_1 ? 1076732275 : 0) + $6_1 | 0;
  $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $6_1 = ($6_1 | 0) == ($1_1 | 0) & $3_1 >>> 0 < $10_1 >>> 0 | $1_1 >>> 0 < $6_1 >>> 0;
  $10_1 = $16_1 + $6_1 | 0;
  $1_1 = $2_1;
  $1_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $10_1;
  $2_1 = $1_1;
  $16_1 = $6_1;
  $6_1 = HEAP32[$7_1 + 32 >> 2];
  $10_1 = $6_1 + $3_1 | 0;
  $1_1 = HEAP32[$7_1 + 36 >> 2] + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $10_1;
  $10_1 = $1_1;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 > $6_1 >>> 0 | $1_1 >>> 0 < $4_1 >>> 0;
  $3_1 = $16_1 + $4_1 | 0;
  $1_1 = $2_1;
  $4_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $3_1;
  $1_1 = $5_1 + $10_1 | 0;
  $3_1 = $6_1;
  $2_1 = $3_1 + $19_1 | 0;
  $6_1 = $2_1;
  $2_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = ($10_1 | 0) == ($2_1 | 0) & $3_1 >>> 0 > $6_1 >>> 0 | $2_1 >>> 0 < $10_1 >>> 0;
  $5_1 = $16_1 + $3_1 | 0;
  $1_1 = $4_1;
  $4_1 = $5_1;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $15_1 = $11_1 + (($8_1 | 0) == ($1_1 | 0) & $4_1 >>> 0 < $15_1 >>> 0 | $1_1 >>> 0 < $8_1 >>> 0) | 0;
  $3_1 = $11_1 ? 1354194884 : 0;
  $10_1 = $3_1 + $4_1 | 0;
  $5_1 = $1_1;
  $1_1 = $1_1 + ($11_1 ? 1162945305 : 0) | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $10_1;
  $3_1 = $1_1;
  $11_1 = $15_1 + (($1_1 | 0) == ($5_1 | 0) & $4_1 >>> 0 > $8_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0) | 0;
  $4_1 = $17_1;
  $5_1 = $4_1 + $8_1 | 0;
  $1_1 = $1_1 + $9_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = $5_1;
  $4_1 = $5_1;
  $5_1 = $1_1;
  $16_1 = $11_1 + (($3_1 | 0) == ($1_1 | 0) & $4_1 >>> 0 < $8_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0) | 0;
  $297($24_1, $16_1, 0, 0, 0, 801750719, 1076732275, 0, 0);
  $11_1 = HEAP32[$7_1 + 20 >> 2];
  $1_1 = $13_1 + $11_1 | 0;
  $9_1 = HEAP32[$7_1 + 16 >> 2];
  $4_1 = $12_1;
  $3_1 = $9_1 + $4_1 | 0;
  $8_1 = $3_1;
  HEAP32[$0_1 >> 2] = $3_1;
  $13_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 4 >> 2] = $13_1;
  $297($7_1, $16_1, 0, 0, 0, 1354194884, 1162945305, 0, 0);
  $4_1 = $0_1;
  $12_1 = HEAP32[$7_1 >> 2];
  $3_1 = $12_1;
  $17_1 = $3_1 + $18_1 | 0;
  $18_1 = HEAP32[$7_1 + 4 >> 2];
  $1_1 = $18_1 + $14_1 | 0;
  $1_1 = $3_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $14_1 = ($13_1 | 0) == ($11_1 | 0) & $9_1 >>> 0 > $8_1 >>> 0 | $13_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $7_1 + 24 | 0;
  $13_1 = $14_1 + HEAP32[$1_1 >> 2] | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $13_1 >>> 0 < $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $13_1;
  $13_1 = $13_1 + $17_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $9_1 = $13_1;
  HEAP32[$4_1 + 8 >> 2] = $9_1;
  $14_1 = $9_1 >>> 0 < $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$4_1 + 12 >> 2] = $14_1;
  $1_1 = $2_1;
  $13_1 = $6_1 + $16_1 | 0;
  $1_1 = $13_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $1_1;
  $0_1 = ($3_1 | 0) == ($14_1 | 0) & $9_1 >>> 0 < $17_1 >>> 0 | $3_1 >>> 0 > $14_1 >>> 0;
  $3_1 = ($3_1 | 0) == ($18_1 | 0) & $12_1 >>> 0 > $17_1 >>> 0 | $3_1 >>> 0 < $18_1 >>> 0;
  $1_1 = $7_1 + 8 | 0;
  $6_1 = $3_1 + HEAP32[$1_1 >> 2] | 0;
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $0_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $13_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  HEAP32[$4_1 + 20 >> 2] = $1_1;
  $0_1 = ($1_1 | 0) == ($2_1 | 0) & $3_1 >>> 0 < $13_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0;
  $2_1 = $0_1 + (!$2_1 & $13_1 >>> 0 < $16_1 >>> 0) | 0;
  $1_1 = $0_1 >>> 0 > $2_1 >>> 0;
  $3_1 = $2_1;
  $6_1 = $10_1 + $3_1 | 0;
  $2_1 = $1_1;
  $1_1 = $5_1 + $1_1 | 0;
  HEAP32[$4_1 + 24 >> 2] = $6_1;
  $1_1 = $6_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$4_1 + 28 >> 2] = $1_1;
  $199($4_1, $253($4_1) + (($1_1 | 0) == ($2_1 | 0) & $6_1 >>> 0 < $3_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0) | 0);
  global$0 = $7_1 + 288 | 0;
 }
 
 function $29($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  $297($6_1 + 240 | 0, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0);
  $3_1 = HEAP32[$6_1 + 244 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$6_1 + 240 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $297($6_1 + 208 | 0, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2], 0, 0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0);
  $297($6_1 + 224 | 0, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2], 0, 0);
  $10_1 = HEAP32[$6_1 + 208 >> 2];
  $3_1 = $6_1 + 248 | 0;
  $11_1 = HEAP32[$3_1 >> 2];
  $4_1 = $10_1 + $11_1 | 0;
  $5_1 = HEAP32[$6_1 + 212 >> 2];
  $3_1 = $5_1 + HEAP32[$3_1 + 4 >> 2] | 0;
  $3_1 = $4_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $4_1;
  $9_1 = HEAP32[$6_1 + 224 >> 2];
  $4_1 = $4_1 + $9_1 | 0;
  $11_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 228 >> 2] | 0;
  $8_1 = $4_1;
  HEAP32[$0_1 + 8 >> 2] = $4_1;
  $9_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 + 12 >> 2] = $9_1;
  $297($6_1 + 160 | 0, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2], 0, 0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0);
  $297($6_1 + 176 | 0, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2], 0, 0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2], 0, 0);
  $297($6_1 + 192 | 0, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, HEAP32[$1_1 + 16 >> 2], HEAP32[$1_1 + 20 >> 2], 0, 0);
  $4_1 = $0_1;
  $10_1 = ($5_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 < $10_1 >>> 0 | $5_1 >>> 0 > $11_1 >>> 0;
  $3_1 = $6_1 + 216 | 0;
  $5_1 = $10_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $12_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = ($9_1 | 0) == ($11_1 | 0) & $7_1 >>> 0 > $8_1 >>> 0 | $9_1 >>> 0 < $11_1 >>> 0;
  $3_1 = $6_1 + 232 | 0;
  $11_1 = $9_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $9_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = $11_1;
  $11_1 = $9_1 + $12_1 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $3_1 = $9_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $11_1;
  $7_1 = HEAP32[$6_1 + 160 >> 2];
  $11_1 = $11_1 + $7_1 | 0;
  $9_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 164 >> 2] | 0;
  $3_1 = $7_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $15_1 = $11_1;
  $8_1 = HEAP32[$6_1 + 176 >> 2];
  $11_1 = $11_1 + $8_1 | 0;
  $7_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 180 >> 2] | 0;
  $3_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $16_1 = $11_1;
  $10_1 = HEAP32[$6_1 + 192 >> 2];
  $11_1 = $11_1 + $10_1 | 0;
  $8_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 196 >> 2] | 0;
  $18_1 = $11_1;
  HEAP32[$4_1 + 16 >> 2] = $11_1;
  $10_1 = $11_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$4_1 + 20 >> 2] = $10_1;
  $297($6_1 + 96 | 0, HEAP32[$2_1 + 24 >> 2], HEAP32[$2_1 + 28 >> 2], 0, 0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0);
  $297($6_1 + 112 | 0, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2], 0, 0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2], 0, 0);
  $297($6_1 + 128 | 0, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2], 0, 0, HEAP32[$1_1 + 16 >> 2], HEAP32[$1_1 + 20 >> 2], 0, 0);
  $297($6_1 + 144 | 0, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], 0, 0);
  $11_1 = $4_1;
  $14_1 = ($7_1 | 0) == ($9_1 | 0) & $13_1 >>> 0 > $15_1 >>> 0 | $7_1 >>> 0 < $9_1 >>> 0;
  $3_1 = $6_1 + 168 | 0;
  $4_1 = $14_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $4_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $21_1 = $4_1;
  $5_1 = ($5_1 | 0) == ($9_1 | 0) & $12_1 >>> 0 > $13_1 >>> 0 | $5_1 >>> 0 > $9_1 >>> 0;
  $4_1 = $4_1 + $5_1 | 0;
  $9_1 = $3_1;
  $14_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = ($7_1 | 0) == ($8_1 | 0) & $15_1 >>> 0 > $16_1 >>> 0 | $7_1 >>> 0 > $8_1 >>> 0;
  $3_1 = $6_1 + 184 | 0;
  $5_1 = $7_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $5_1;
  $5_1 = $5_1 + $14_1 | 0;
  $3_1 = $3_1 + $4_1 | 0;
  $17_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = ($8_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 > $18_1 >>> 0 | $8_1 >>> 0 > $10_1 >>> 0;
  $3_1 = $6_1 + 200 | 0;
  $7_1 = $8_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $7_1;
  $7_1 = $8_1 + $17_1 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $3_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $16_1 = $7_1;
  $10_1 = HEAP32[$6_1 + 96 >> 2];
  $8_1 = $7_1 + $10_1 | 0;
  $7_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 100 >> 2] | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $8_1;
  $12_1 = HEAP32[$6_1 + 112 >> 2];
  $10_1 = $8_1 + $12_1 | 0;
  $8_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 116 >> 2] | 0;
  $3_1 = $10_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $10_1;
  $13_1 = HEAP32[$6_1 + 128 >> 2];
  $12_1 = $10_1 + $13_1 | 0;
  $10_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 132 >> 2] | 0;
  $3_1 = $12_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $20_1 = $12_1;
  $15_1 = HEAP32[$6_1 + 144 >> 2];
  $13_1 = $12_1 + $15_1 | 0;
  $12_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 148 >> 2] | 0;
  $3_1 = $13_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$11_1 + 24 >> 2] = $13_1;
  HEAP32[$11_1 + 28 >> 2] = $3_1;
  $297($6_1 + 48 | 0, HEAP32[$2_1 + 24 >> 2], HEAP32[$2_1 + 28 >> 2], 0, 0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2], 0, 0);
  $297($6_1 - -64 | 0, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2], 0, 0, HEAP32[$1_1 + 16 >> 2], HEAP32[$1_1 + 20 >> 2], 0, 0);
  $297($6_1 + 80 | 0, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2], 0, 0, HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], 0, 0);
  $13_1 = ($3_1 | 0) == ($12_1 | 0) & $13_1 >>> 0 < $20_1 >>> 0 | $3_1 >>> 0 < $12_1 >>> 0;
  $15_1 = $6_1 + 152 | 0;
  $11_1 = $13_1 + HEAP32[$15_1 >> 2] | 0;
  $3_1 = HEAP32[$15_1 + 4 >> 2];
  $3_1 = $11_1 >>> 0 < $13_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $13_1 = $11_1;
  $11_1 = $3_1;
  $15_1 = $13_1;
  $22_1 = ($5_1 | 0) == ($7_1 | 0) & $16_1 >>> 0 < $17_1 >>> 0 | $5_1 >>> 0 > $7_1 >>> 0;
  $3_1 = ($4_1 | 0) == ($5_1 | 0) & $14_1 >>> 0 > $17_1 >>> 0 | $4_1 >>> 0 > $5_1 >>> 0;
  $5_1 = ($4_1 | 0) == ($9_1 | 0) & $14_1 >>> 0 < $21_1 >>> 0 | $4_1 >>> 0 < $9_1 >>> 0;
  $4_1 = $3_1 + $5_1 | 0;
  $3_1 = $4_1 >>> 0 < $5_1 >>> 0;
  $5_1 = $4_1;
  $4_1 = $22_1 + $4_1 | 0;
  $21_1 = $4_1;
  $9_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = ($7_1 | 0) == ($8_1 | 0) & $16_1 >>> 0 > $18_1 >>> 0 | $7_1 >>> 0 > $8_1 >>> 0;
  $3_1 = $6_1 + 104 | 0;
  $4_1 = $5_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $4_1;
  $4_1 = $4_1 + $21_1 | 0;
  $3_1 = $3_1 + $9_1 | 0;
  $17_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = ($8_1 | 0) == ($10_1 | 0) & $18_1 >>> 0 > $19_1 >>> 0 | $8_1 >>> 0 > $10_1 >>> 0;
  $3_1 = $6_1 + 120 | 0;
  $5_1 = $7_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $7_1 = $5_1;
  $5_1 = $5_1 + $17_1 | 0;
  $3_1 = $3_1 + $4_1 | 0;
  $16_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = ($10_1 | 0) == ($12_1 | 0) & $19_1 >>> 0 > $20_1 >>> 0 | $10_1 >>> 0 > $12_1 >>> 0;
  $3_1 = $6_1 + 136 | 0;
  $7_1 = $8_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $7_1;
  $7_1 = $8_1 + $16_1 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $3_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $22_1 = $7_1;
  $8_1 = $7_1;
  $7_1 = $8_1 + $13_1 | 0;
  $13_1 = $3_1;
  $3_1 = $3_1 + $11_1 | 0;
  $3_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $18_1 = $7_1;
  $10_1 = HEAP32[$6_1 + 48 >> 2];
  $7_1 = $7_1 + $10_1 | 0;
  $8_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 52 >> 2] | 0;
  $3_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $19_1 = $7_1;
  $12_1 = HEAP32[$6_1 + 64 >> 2];
  $7_1 = $7_1 + $12_1 | 0;
  $10_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 68 >> 2] | 0;
  $3_1 = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $20_1 = $7_1;
  $14_1 = HEAP32[$6_1 + 80 >> 2];
  $7_1 = $7_1 + $14_1 | 0;
  $12_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 84 >> 2] | 0;
  $23_1 = $7_1;
  HEAP32[$0_1 + 32 >> 2] = $7_1;
  $14_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 + 36 >> 2] = $14_1;
  $297($6_1 + 16 | 0, HEAP32[$2_1 + 24 >> 2], HEAP32[$2_1 + 28 >> 2], 0, 0, HEAP32[$1_1 + 16 >> 2], HEAP32[$1_1 + 20 >> 2], 0, 0);
  $297($6_1 + 32 | 0, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2], 0, 0, HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], 0, 0);
  $7_1 = $0_1;
  $0_1 = ($5_1 | 0) == ($13_1 | 0) & $16_1 >>> 0 > $22_1 >>> 0 | $5_1 >>> 0 > $13_1 >>> 0;
  $3_1 = ($4_1 | 0) == ($5_1 | 0) & $16_1 >>> 0 < $17_1 >>> 0 | $4_1 >>> 0 > $5_1 >>> 0;
  $5_1 = ($4_1 | 0) == ($9_1 | 0) & $17_1 >>> 0 < $21_1 >>> 0 | $4_1 >>> 0 < $9_1 >>> 0;
  $4_1 = $3_1 + $5_1 | 0;
  $3_1 = $4_1 >>> 0 < $5_1 >>> 0;
  $5_1 = $4_1;
  $4_1 = $0_1 + $4_1 | 0;
  $3_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $4_1;
  $4_1 = $4_1 + (($8_1 | 0) == ($11_1 | 0) & $15_1 >>> 0 > $18_1 >>> 0 | $8_1 >>> 0 < $11_1 >>> 0) | 0;
  $17_1 = $4_1;
  $11_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = ($8_1 | 0) == ($10_1 | 0) & $18_1 >>> 0 > $19_1 >>> 0 | $8_1 >>> 0 > $10_1 >>> 0;
  $3_1 = $6_1 + 56 | 0;
  $4_1 = $5_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $4_1;
  $4_1 = $4_1 + $17_1 | 0;
  $3_1 = $3_1 + $11_1 | 0;
  $13_1 = $4_1;
  $4_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = ($10_1 | 0) == ($12_1 | 0) & $19_1 >>> 0 > $20_1 >>> 0 | $10_1 >>> 0 > $12_1 >>> 0;
  $3_1 = $6_1 + 72 | 0;
  $5_1 = $9_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $5_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = $5_1;
  $5_1 = $5_1 + $13_1 | 0;
  $3_1 = $3_1 + $4_1 | 0;
  $15_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = ($12_1 | 0) == ($14_1 | 0) & $20_1 >>> 0 > $23_1 >>> 0 | $12_1 >>> 0 > $14_1 >>> 0;
  $3_1 = $6_1 + 88 | 0;
  $9_1 = $8_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $8_1 >>> 0 > $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $9_1;
  $9_1 = $8_1 + $15_1 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $3_1 = $8_1 >>> 0 > $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $12_1 = $9_1;
  $10_1 = HEAP32[$6_1 + 16 >> 2];
  $8_1 = $9_1 + $10_1 | 0;
  $9_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 20 >> 2] | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $14_1 = $8_1;
  $16_1 = HEAP32[$6_1 + 32 >> 2];
  $10_1 = $8_1 + $16_1 | 0;
  $8_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 36 >> 2] | 0;
  $3_1 = $10_1 >>> 0 < $16_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $16_1 = $10_1;
  HEAP32[$7_1 + 40 >> 2] = $10_1;
  $10_1 = $3_1;
  HEAP32[$7_1 + 44 >> 2] = $3_1;
  $297($6_1, HEAP32[$2_1 + 24 >> 2], HEAP32[$2_1 + 28 >> 2], 0, 0, HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], 0, 0);
  $2_1 = ($4_1 | 0) == ($11_1 | 0) & $13_1 >>> 0 < $17_1 >>> 0 | $4_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $2_1 + (($4_1 | 0) == ($5_1 | 0) & $13_1 >>> 0 > $15_1 >>> 0 | $4_1 >>> 0 > $5_1 >>> 0) | 0;
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0;
  $2_1 = $1_1;
  $1_1 = $1_1 + (($5_1 | 0) == ($9_1 | 0) & $12_1 >>> 0 < $15_1 >>> 0 | $5_1 >>> 0 > $9_1 >>> 0) | 0;
  $11_1 = $1_1;
  $2_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = ($8_1 | 0) == ($9_1 | 0) & $12_1 >>> 0 > $14_1 >>> 0 | $8_1 >>> 0 < $9_1 >>> 0;
  $3_1 = $6_1 + 24 | 0;
  $1_1 = $4_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $1_1 >>> 0 < $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = $1_1;
  $1_1 = $4_1 + $11_1 | 0;
  $3_1 = $2_1 + $3_1 | 0;
  $5_1 = $1_1;
  $1_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = ($8_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 < $14_1 >>> 0 | $8_1 >>> 0 > $10_1 >>> 0;
  $3_1 = $6_1 + 40 | 0;
  $4_1 = $9_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = $4_1;
  $4_1 = $4_1 + $5_1 | 0;
  $3_1 = $1_1 + $3_1 | 0;
  $3_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $9_1 = $4_1;
  $10_1 = HEAP32[$6_1 >> 2];
  $8_1 = $4_1 + $10_1 | 0;
  $4_1 = $3_1;
  $3_1 = $3_1 + HEAP32[$6_1 + 4 >> 2] | 0;
  $3_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$7_1 + 48 >> 2] = $8_1;
  HEAP32[$7_1 + 52 >> 2] = $3_1;
  $0_1 = ($3_1 | 0) == ($4_1 | 0) & $8_1 >>> 0 < $9_1 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
  $4_1 = ($1_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 > $9_1 >>> 0 | $1_1 >>> 0 > $4_1 >>> 0;
  $2_1 = ($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $11_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0;
  $3_1 = $6_1 + 8 | 0;
  $1_1 = $2_1 + HEAP32[$3_1 >> 2] | 0;
  $3_1 = HEAP32[$3_1 + 4 >> 2];
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = $1_1;
  $1_1 = $4_1 + $1_1 | 0;
  $3_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = $1_1;
  $1_1 = $0_1 + $1_1 | 0;
  HEAP32[$7_1 + 56 >> 2] = $1_1;
  HEAP32[$7_1 + 60 >> 2] = $1_1 >>> 0 < $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  global$0 = $6_1 + 256 | 0;
 }
 
 function $30($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0;
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  $5_1 = $1_1;
  $3_1 = HEAP32[$1_1 + 32 >> 2];
  $16_1 = HEAP32[$1_1 + 36 >> 2];
  $6_1 = HEAP32[$1_1 + 24 >> 2];
  $12_1 = HEAP32[$1_1 + 28 >> 2];
  $7_1 = HEAP32[$1_1 + 16 >> 2];
  $8_1 = HEAP32[$1_1 + 20 >> 2];
  $9_1 = HEAP32[$1_1 + 8 >> 2];
  $1_1 = HEAP32[$1_1 + 12 >> 2];
  $14_1 = HEAP32[$5_1 >> 2];
  $17_1 = HEAP32[$5_1 + 4 >> 2];
  while (1) {
   $297($4_1 + 176 | 0, $14_1, $17_1, 0, 0, $14_1, $17_1, 0, 0);
   $11_1 = __wasm_i64_mul($3_1, $16_1, 19, 0);
   $15_1 = i64toi32_i32$HIGH_BITS;
   $297($4_1 + 128 | 0, $9_1, $1_1, 0, 0, $11_1, $15_1, 0, 0);
   $10_1 = __wasm_i64_mul($6_1, $12_1, 19, 0);
   $5_1 = i64toi32_i32$HIGH_BITS;
   $297($4_1 - -64 | 0, $10_1, $5_1, 0, 0, $7_1, $8_1, 0, 0);
   $297($4_1 + 224 | 0, $10_1, $5_1, 0, 0, $6_1, $12_1, 0, 0);
   $297($4_1 + 112 | 0, $14_1, $17_1, 0, 0, $9_1, $1_1, 0, 0);
   $297($4_1 + 48 | 0, $7_1, $8_1, 0, 0, $11_1, $15_1, 0, 0);
   $297($4_1 + 96 | 0, $9_1, $1_1, 0, 0, $9_1, $1_1, 0, 0);
   $297($4_1 + 32 | 0, $14_1, $17_1, 0, 0, $7_1, $8_1, 0, 0);
   $297($4_1 + 208 | 0, $10_1, $5_1, 0, 0, $3_1, $16_1, 0, 0);
   $297($4_1 + 192 | 0, $11_1, $15_1, 0, 0, $3_1, $16_1, 0, 0);
   $297($4_1 + 160 | 0, $14_1, $17_1, 0, 0, $6_1, $12_1, 0, 0);
   $297($4_1 + 16 | 0, $9_1, $1_1, 0, 0, $7_1, $8_1, 0, 0);
   $297($4_1, $7_1, $8_1, 0, 0, $7_1, $8_1, 0, 0);
   $297($4_1 + 144 | 0, $14_1, $17_1, 0, 0, $3_1, $16_1, 0, 0);
   $297($4_1 + 80 | 0, $9_1, $1_1, 0, 0, $6_1, $12_1, 0, 0);
   $36_1 = HEAP32[$4_1 + 144 >> 2];
   $3_1 = HEAP32[$4_1 + 80 >> 2];
   $6_1 = $36_1 + $3_1 | 0;
   $26_1 = HEAP32[$4_1 + 148 >> 2];
   $1_1 = $26_1 + HEAP32[$4_1 + 84 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $37_1 = $6_1;
   $38_1 = $6_1 << 1;
   $3_1 = HEAP32[$4_1 >> 2];
   $6_1 = $38_1 + $3_1 | 0;
   $17_1 = $1_1;
   $27_1 = $1_1 << 1 | $37_1 >>> 31;
   $1_1 = $27_1 + HEAP32[$4_1 + 4 >> 2] | 0;
   $23_1 = $6_1;
   $10_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $39_1 = HEAP32[$4_1 + 160 >> 2];
   $3_1 = HEAP32[$4_1 + 16 >> 2];
   $6_1 = $39_1 + $3_1 | 0;
   $28_1 = HEAP32[$4_1 + 164 >> 2];
   $1_1 = $28_1 + HEAP32[$4_1 + 20 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $40_1 = $6_1;
   $41_1 = $6_1 << 1;
   $3_1 = HEAP32[$4_1 + 192 >> 2];
   $6_1 = $41_1 + $3_1 | 0;
   $16_1 = $1_1;
   $29_1 = $1_1 << 1 | $40_1 >>> 31;
   $1_1 = $29_1 + HEAP32[$4_1 + 196 >> 2] | 0;
   $30_1 = $6_1;
   $5_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $42_1 = HEAP32[$4_1 + 32 >> 2];
   $3_1 = HEAP32[$4_1 + 208 >> 2];
   $6_1 = $42_1 + $3_1 | 0;
   $31_1 = HEAP32[$4_1 + 36 >> 2];
   $1_1 = $31_1 + HEAP32[$4_1 + 212 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $43_1 = $6_1;
   $44_1 = $6_1 << 1;
   $3_1 = HEAP32[$4_1 + 96 >> 2];
   $6_1 = $44_1 + $3_1 | 0;
   $12_1 = $1_1;
   $19_1 = $1_1 << 1 | $43_1 >>> 31;
   $1_1 = $19_1 + HEAP32[$4_1 + 100 >> 2] | 0;
   $14_1 = $6_1;
   $6_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $45_1 = HEAP32[$4_1 + 112 >> 2];
   $3_1 = HEAP32[$4_1 + 48 >> 2];
   $7_1 = $45_1 + $3_1 | 0;
   $32_1 = HEAP32[$4_1 + 116 >> 2];
   $1_1 = $32_1 + HEAP32[$4_1 + 52 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $21_1 = $7_1;
   $46_1 = $7_1 << 1;
   $3_1 = HEAP32[$4_1 + 224 >> 2];
   $7_1 = $46_1 + $3_1 | 0;
   $11_1 = $1_1;
   $22_1 = $1_1 << 1 | $21_1 >>> 31;
   $1_1 = $22_1 + HEAP32[$4_1 + 228 >> 2] | 0;
   $18_1 = $7_1;
   $3_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $24_1 = HEAP32[$4_1 + 128 >> 2];
   $7_1 = HEAP32[$4_1 + 64 >> 2];
   $15_1 = $24_1 + $7_1 | 0;
   $33_1 = HEAP32[$4_1 + 132 >> 2];
   $1_1 = $33_1 + HEAP32[$4_1 + 68 >> 2] | 0;
   $1_1 = $7_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $20_1 = $15_1;
   $13_1 = $15_1 << 1;
   $15_1 = HEAP32[$4_1 + 176 >> 2];
   $8_1 = $13_1 + $15_1 | 0;
   $7_1 = $1_1;
   $9_1 = $1_1 << 1 | $20_1 >>> 31;
   $1_1 = $9_1 + HEAP32[$4_1 + 180 >> 2] | 0;
   $1_1 = $8_1 >>> 0 < $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $15_1 = $8_1;
   $25_1 = $1_1;
   $1_1 = $4_1 + 184 | 0;
   $34_1 = HEAP32[$1_1 >> 2];
   $35_1 = HEAP32[$1_1 + 4 >> 2];
   $8_1 = ($9_1 | 0) == ($25_1 | 0) & $15_1 >>> 0 < $13_1 >>> 0 | $9_1 >>> 0 > $25_1 >>> 0;
   $20_1 = ($7_1 | 0) == ($33_1 | 0) & $20_1 >>> 0 < $24_1 >>> 0 | $7_1 >>> 0 < $33_1 >>> 0;
   $1_1 = $4_1 + 72 | 0;
   $9_1 = HEAP32[$1_1 >> 2];
   $13_1 = $4_1 + 136 | 0;
   $24_1 = $9_1 + HEAP32[$13_1 >> 2] | 0;
   $1_1 = HEAP32[$13_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $9_1 >>> 0 > $24_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $9_1 = $24_1;
   $13_1 = $20_1 + $9_1 | 0;
   $1_1 = $9_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $9_1 = $13_1;
   $7_1 = $9_1 << 1 | $7_1 >>> 31;
   $20_1 = $7_1 + $34_1 | 0;
   $1_1 = ($1_1 << 1 | $9_1 >>> 31) + $35_1 | 0;
   $1_1 = $7_1 >>> 0 > $20_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $7_1 = $20_1;
   $9_1 = $8_1 + $7_1 | 0;
   $1_1 = $7_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $7_1 = $9_1;
   $1_1 = $1_1 << 13 | $7_1 >>> 19;
   $7_1 = $7_1 << 13 | $25_1 >>> 19;
   $9_1 = $7_1 + $18_1 | 0;
   $1_1 = $1_1 + $3_1 | 0;
   $1_1 = $7_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $20_1 = $1_1;
   $34_1 = $1_1 >>> 19 | 0;
   $35_1 = ($3_1 | 0) == ($1_1 | 0) & $9_1 >>> 0 < $18_1 >>> 0 | $3_1 >>> 0 > $1_1 >>> 0;
   $13_1 = ($3_1 | 0) == ($22_1 | 0) & $18_1 >>> 0 < $46_1 >>> 0 | $3_1 >>> 0 < $22_1 >>> 0;
   $1_1 = $4_1 + 232 | 0;
   $22_1 = HEAP32[$1_1 >> 2];
   $18_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = $13_1;
   $1_1 = $4_1 + 56 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $8_1 = $4_1 + 120 | 0;
   $13_1 = $3_1 + HEAP32[$8_1 >> 2] | 0;
   $1_1 = HEAP32[$8_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $13_1;
   $8_1 = $3_1 + (($11_1 | 0) == ($32_1 | 0) & $21_1 >>> 0 < $45_1 >>> 0 | $11_1 >>> 0 < $32_1 >>> 0) | 0;
   $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $11_1 = $3_1 << 1 | $11_1 >>> 31;
   $8_1 = $11_1 + $22_1 | 0;
   $1_1 = ($1_1 << 1 | $3_1 >>> 31) + $18_1 | 0;
   $1_1 = $8_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $8_1;
   $11_1 = $7_1 + $3_1 | 0;
   $1_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $11_1;
   $11_1 = $3_1 + $35_1 | 0;
   $1_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $11_1;
   $1_1 = $1_1 << 13 | $3_1 >>> 19;
   $3_1 = $3_1 << 13 | $34_1;
   $11_1 = $3_1 + $14_1 | 0;
   $1_1 = $1_1 + $6_1 | 0;
   $7_1 = $11_1;
   $18_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $13_1 = $18_1 >>> 19 | 0;
   $21_1 = ($6_1 | 0) == ($18_1 | 0) & $7_1 >>> 0 < $14_1 >>> 0 | $6_1 >>> 0 > $18_1 >>> 0;
   $22_1 = ($6_1 | 0) == ($19_1 | 0) & $14_1 >>> 0 < $44_1 >>> 0 | $6_1 >>> 0 < $19_1 >>> 0;
   $1_1 = $4_1 + 104 | 0;
   $14_1 = HEAP32[$1_1 >> 2];
   $8_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = $4_1 + 216 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $6_1 = $4_1 + 40 | 0;
   $19_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
   $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $19_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $19_1;
   $6_1 = $3_1 + (($12_1 | 0) == ($31_1 | 0) & $43_1 >>> 0 < $42_1 >>> 0 | $12_1 >>> 0 < $31_1 >>> 0) | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   $6_1 = $3_1 << 1 | $12_1 >>> 31;
   $12_1 = $6_1 + $14_1 | 0;
   $1_1 = ($1_1 << 1 | $3_1 >>> 31) + $8_1 | 0;
   $1_1 = $6_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $12_1;
   $6_1 = $3_1 + $22_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   $6_1 = $3_1 + $21_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $6_1;
   $1_1 = $1_1 << 13 | $3_1 >>> 19;
   $3_1 = $3_1 << 13 | $13_1;
   $6_1 = $3_1 + $30_1 | 0;
   $1_1 = $1_1 + $5_1 | 0;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $8_1 = $1_1;
   $21_1 = $1_1 >>> 19 | 0;
   $1_1 = $4_1 + 200 | 0;
   $14_1 = HEAP32[$1_1 >> 2];
   $12_1 = HEAP32[$1_1 + 4 >> 2];
   $11_1 = ($5_1 | 0) == ($8_1 | 0) & $6_1 >>> 0 < $30_1 >>> 0 | $5_1 >>> 0 > $8_1 >>> 0;
   $13_1 = ($5_1 | 0) == ($29_1 | 0) & $30_1 >>> 0 < $41_1 >>> 0 | $5_1 >>> 0 < $29_1 >>> 0;
   $1_1 = $4_1 + 24 | 0;
   $3_1 = HEAP32[$1_1 >> 2];
   $5_1 = $4_1 + 168 | 0;
   $19_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $3_1 >>> 0 > $19_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $19_1;
   $5_1 = $3_1 + (($16_1 | 0) == ($28_1 | 0) & $40_1 >>> 0 < $39_1 >>> 0 | $16_1 >>> 0 < $28_1 >>> 0) | 0;
   $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $5_1;
   $5_1 = $3_1 << 1 | $16_1 >>> 31;
   $16_1 = $5_1 + $14_1 | 0;
   $1_1 = ($1_1 << 1 | $3_1 >>> 31) + $12_1 | 0;
   $1_1 = $5_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $16_1;
   $5_1 = $13_1 + $3_1 | 0;
   $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $5_1;
   $5_1 = $11_1 + $3_1 | 0;
   $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $5_1;
   $1_1 = $1_1 << 13 | $3_1 >>> 19;
   $3_1 = $3_1 << 13 | $21_1;
   $5_1 = $3_1 + $23_1 | 0;
   $1_1 = $1_1 + $10_1 | 0;
   $1_1 = $3_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $3_1 = $5_1;
   $12_1 = $1_1;
   $21_1 = $1_1 >>> 19 | 0;
   $1_1 = $4_1 + 8 | 0;
   $14_1 = HEAP32[$1_1 >> 2];
   $16_1 = HEAP32[$1_1 + 4 >> 2];
   $11_1 = ($10_1 | 0) == ($12_1 | 0) & $3_1 >>> 0 < $23_1 >>> 0 | $10_1 >>> 0 > $12_1 >>> 0;
   $13_1 = ($10_1 | 0) == ($27_1 | 0) & $23_1 >>> 0 < $38_1 >>> 0 | $10_1 >>> 0 < $27_1 >>> 0;
   $1_1 = $4_1 + 88 | 0;
   $5_1 = HEAP32[$1_1 >> 2];
   $10_1 = $4_1 + 152 | 0;
   $23_1 = $5_1 + HEAP32[$10_1 >> 2] | 0;
   $1_1 = HEAP32[$10_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
   $1_1 = $5_1 >>> 0 > $23_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = $23_1;
   $10_1 = $5_1 + (($17_1 | 0) == ($26_1 | 0) & $37_1 >>> 0 < $36_1 >>> 0 | $17_1 >>> 0 < $26_1 >>> 0) | 0;
   $1_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = $10_1;
   $10_1 = $5_1 << 1 | $17_1 >>> 31;
   $17_1 = $10_1 + $14_1 | 0;
   $1_1 = ($1_1 << 1 | $5_1 >>> 31) + $16_1 | 0;
   $1_1 = $10_1 >>> 0 > $17_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = $17_1;
   $10_1 = $13_1 + $5_1 | 0;
   $1_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = $10_1;
   $10_1 = $11_1 + $5_1 | 0;
   $1_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = $10_1;
   $5_1 = __wasm_i64_mul($5_1 << 13 | $21_1, $1_1 << 13 | $5_1 >>> 19, 19, 0) + $15_1 | 0;
   $1_1 = i64toi32_i32$HIGH_BITS + ($25_1 & 524287) | 0;
   $1_1 = $5_1 >>> 0 < $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $14_1 = $5_1;
   $17_1 = $1_1 & 524287;
   $5_1 = $1_1 >>> 19 | 0;
   $15_1 = $5_1 + $9_1 | 0;
   $1_1 = $20_1 & 524287;
   $1_1 = $5_1 >>> 0 > $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $9_1 = $15_1;
   $16_1 = $12_1 & 524287;
   $12_1 = $8_1 & 524287;
   $8_1 = $18_1 & 524287;
   $2_1 = $2_1 - 1 | 0;
   if ($2_1) {
    continue
   }
   break;
  };
  HEAP32[$0_1 + 32 >> 2] = $3_1;
  HEAP32[$0_1 + 36 >> 2] = $16_1;
  HEAP32[$0_1 + 24 >> 2] = $6_1;
  HEAP32[$0_1 + 28 >> 2] = $12_1;
  HEAP32[$0_1 + 16 >> 2] = $7_1;
  HEAP32[$0_1 + 20 >> 2] = $8_1;
  HEAP32[$0_1 + 8 >> 2] = $9_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $14_1;
  HEAP32[$0_1 + 4 >> 2] = $17_1;
  global$0 = $4_1 + 240 | 0;
 }
 
 function $31($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $288($4_1 + 32 | 0, $1_1, $2_1);
  HEAP32[$4_1 + 44 >> 2] = 0;
  HEAP32[$4_1 + 48 >> 2] = 0;
  HEAP32[$4_1 + 40 >> 2] = HEAP32[262259];
  $16_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$4_1 + 60 >> 2] = $16_1;
  $18_1 = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$4_1 + 56 >> 2] = $18_1;
  HEAP32[$4_1 + 64 >> 2] = 0;
  HEAP32[$4_1 + 68 >> 2] = 0;
  $24_1 = $3_1;
  $10_1 = $4_1 + 120 | 0;
  $19_1 = $10_1 + 24 | 0;
  $20_1 = $10_1 + 16 | 0;
  $21_1 = $10_1 + 8 | 0;
  label$1 : {
   while (1) {
    if (($9_1 | 0) != ($24_1 | 0) | $8_1) {
     HEAP32[$10_1 >> 2] = 0;
     HEAP32[$10_1 + 4 >> 2] = 0;
     HEAP32[$19_1 >> 2] = 0;
     HEAP32[$19_1 + 4 >> 2] = 0;
     HEAP32[$20_1 >> 2] = 0;
     HEAP32[$20_1 + 4 >> 2] = 0;
     HEAP32[$21_1 >> 2] = 0;
     HEAP32[$21_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 152 >> 2] = 0;
     HEAP32[$4_1 + 104 >> 2] = $9_1;
     HEAP32[$4_1 + 108 >> 2] = $8_1;
     HEAP32[$4_1 + 80 >> 2] = $9_1;
     HEAP32[$4_1 + 84 >> 2] = $8_1;
     HEAP32[$4_1 + 72 >> 2] = 0;
     HEAP32[$4_1 + 76 >> 2] = 0;
     $5_1 = $8_1 + 1640531534 | 0;
     $1_1 = $9_1 + 2048144761 | 0;
     $5_1 = $1_1 >>> 0 < 2048144761 ? $5_1 + 1 | 0 : $5_1;
     $6_1 = $1_1;
     HEAP32[$4_1 + 112 >> 2] = $1_1;
     HEAP32[$4_1 + 116 >> 2] = $5_1;
     $1_1 = $8_1 - (($9_1 >>> 0 < 3626702001) + 1028477378 | 0) | 0;
     $13_1 = $1_1;
     $11_1 = $9_1 + 668265295 | 0;
     HEAP32[$4_1 + 96 >> 2] = $11_1;
     HEAP32[$4_1 + 100 >> 2] = $1_1;
     $2_1 = $8_1 + 1625958382 | 0;
     $1_1 = $9_1 - 1379879466 | 0;
     $2_1 = $1_1 >>> 0 < 2915087830 ? $2_1 + 1 | 0 : $2_1;
     $14_1 = $1_1;
     HEAP32[$4_1 + 88 >> 2] = $1_1;
     $15_1 = $2_1;
     HEAP32[$4_1 + 92 >> 2] = $2_1;
     if ($16_1) {
      $1_1 = $16_1;
      $3_1 = $18_1;
      $12_1 = $9_1;
      $17_1 = $8_1;
      while (1) {
       if ($1_1 >>> 0 >= 32) {
        $1_1 = $1_1 - 32 | 0;
        $7_1 = __wasm_i64_mul(HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24), HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24), 668265295, -1028477379) + $14_1 | 0;
        $2_1 = $15_1 + i64toi32_i32$HIGH_BITS | 0;
        $14_1 = __wasm_i64_mul(__wasm_rotl_i64($7_1, $7_1 >>> 0 < $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
        $15_1 = i64toi32_i32$HIGH_BITS;
        $2_1 = $3_1 + 24 | 0;
        $7_1 = __wasm_i64_mul(HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24), HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24), 668265295, -1028477379) + $6_1 | 0;
        $2_1 = $5_1 + i64toi32_i32$HIGH_BITS | 0;
        $6_1 = __wasm_i64_mul(__wasm_rotl_i64($7_1, $6_1 >>> 0 > $7_1 >>> 0 ? $2_1 + 1 | 0 : $2_1, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
        $5_1 = i64toi32_i32$HIGH_BITS;
        $2_1 = $3_1 + 16 | 0;
        $7_1 = __wasm_i64_mul(HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24), HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24), 668265295, -1028477379) + $12_1 | 0;
        $2_1 = $17_1 + i64toi32_i32$HIGH_BITS | 0;
        $12_1 = __wasm_i64_mul(__wasm_rotl_i64($7_1, $7_1 >>> 0 < $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
        $17_1 = i64toi32_i32$HIGH_BITS;
        $2_1 = $3_1 + 8 | 0;
        $7_1 = __wasm_i64_mul(HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24), HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24), 668265295, -1028477379) + $11_1 | 0;
        $2_1 = $13_1 + i64toi32_i32$HIGH_BITS | 0;
        $11_1 = __wasm_i64_mul(__wasm_rotl_i64($7_1, $7_1 >>> 0 < $11_1 >>> 0 ? $2_1 + 1 | 0 : $2_1, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
        $13_1 = i64toi32_i32$HIGH_BITS;
        $3_1 = $3_1 + 32 | 0;
        continue;
       }
       break;
      };
      HEAP32[$4_1 + 112 >> 2] = $6_1;
      HEAP32[$4_1 + 116 >> 2] = $5_1;
      HEAP32[$4_1 + 104 >> 2] = $12_1;
      HEAP32[$4_1 + 108 >> 2] = $17_1;
      HEAP32[$4_1 + 96 >> 2] = $11_1;
      HEAP32[$4_1 + 100 >> 2] = $13_1;
      HEAP32[$4_1 + 88 >> 2] = $14_1;
      HEAP32[$4_1 + 92 >> 2] = $15_1;
      $365($4_1 + 24 | 0, $10_1, 32, $1_1);
      if (HEAP32[$4_1 + 28 >> 2] != ($1_1 | 0)) {
       break label$1
      }
      $91(HEAP32[$4_1 + 24 >> 2], $3_1, $1_1);
      HEAP32[$4_1 + 152 >> 2] = $1_1;
      $2_1 = HEAP32[$4_1 + 76 >> 2];
      $1_1 = HEAP32[$4_1 + 72 >> 2];
     } else {
      $2_1 = 0;
      $1_1 = 0;
     }
     $1_1 = $1_1 + $16_1 | 0;
     if ($1_1 >>> 0 < $16_1 >>> 0) {
      $2_1 = $2_1 + 1 | 0
     }
     $3_1 = $1_1;
     HEAP32[$4_1 + 72 >> 2] = $1_1;
     $12_1 = $2_1;
     HEAP32[$4_1 + 76 >> 2] = $2_1;
     label$8 : {
      if (!$2_1 & $1_1 >>> 0 <= 31) {
       $2_1 = HEAP32[$4_1 + 84 >> 2] + 668265263 | 0;
       $1_1 = HEAP32[$4_1 + 80 >> 2] + 374761413 | 0;
       $2_1 = $1_1 >>> 0 < 374761413 ? $2_1 + 1 | 0 : $2_1;
       break label$8;
      }
      $1_1 = HEAP32[$4_1 + 100 >> 2];
      $6_1 = $1_1;
      $11_1 = HEAP32[$4_1 + 96 >> 2];
      $1_1 = __wasm_rotl_i64($11_1, $1_1, 7);
      $2_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = HEAP32[$4_1 + 92 >> 2];
      $14_1 = $5_1;
      $15_1 = HEAP32[$4_1 + 88 >> 2];
      $5_1 = __wasm_rotl_i64($15_1, $5_1, 1);
      $1_1 = $5_1 + $1_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $5_1 = HEAP32[$4_1 + 108 >> 2];
      $17_1 = $5_1;
      $13_1 = HEAP32[$4_1 + 104 >> 2];
      $7_1 = __wasm_rotl_i64($13_1, $5_1, 12);
      $1_1 = $7_1 + $1_1 | 0;
      $5_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $5_1 = $1_1 >>> 0 < $7_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
      $2_1 = HEAP32[$4_1 + 116 >> 2];
      $7_1 = $2_1;
      $22_1 = HEAP32[$4_1 + 112 >> 2];
      $23_1 = __wasm_rotl_i64($22_1, $2_1, 18);
      $2_1 = $23_1 + $1_1 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
      $1_1 = __wasm_i64_mul(__wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul($15_1, $14_1, 668265295, -1028477379), i64toi32_i32$HIGH_BITS, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535) ^ $2_1, i64toi32_i32$HIGH_BITS ^ ($2_1 >>> 0 < $23_1 >>> 0 ? $1_1 + 1 | 0 : $1_1), -2048144761, -1640531535);
      $2_1 = $1_1 - 1028477341 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS - (($1_1 >>> 0 < 1028477341) + 2048144776 | 0) | 0;
      $1_1 = __wasm_i64_mul(__wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul($11_1, $6_1, 668265295, -1028477379), i64toi32_i32$HIGH_BITS, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535) ^ $2_1, i64toi32_i32$HIGH_BITS ^ $1_1, -2048144761, -1640531535);
      $2_1 = $1_1 - 1028477341 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS - (($1_1 >>> 0 < 1028477341) + 2048144776 | 0) | 0;
      $1_1 = __wasm_i64_mul(__wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul($13_1, $17_1, 668265295, -1028477379), i64toi32_i32$HIGH_BITS, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535) ^ $2_1, i64toi32_i32$HIGH_BITS ^ $1_1, -2048144761, -1640531535);
      $2_1 = $1_1 - 1028477341 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS - (($1_1 >>> 0 < 1028477341) + 2048144776 | 0) | 0;
      $2_1 = __wasm_i64_mul(__wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul($22_1, $7_1, 668265295, -1028477379), i64toi32_i32$HIGH_BITS, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535) ^ $2_1, i64toi32_i32$HIGH_BITS ^ $1_1, -2048144761, -1640531535);
      $1_1 = $2_1 - 1028477341 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS - (($2_1 >>> 0 < 1028477341) + 2048144776 | 0) | 0;
     }
     $5_1 = $1_1;
     $1_1 = $8_1;
     $8_1 = $9_1 + 1 | 0;
     $1_1 = $8_1 ? $1_1 : $1_1 + 1 | 0;
     $9_1 = $8_1;
     $8_1 = $1_1;
     $1_1 = HEAP32[$10_1 + 32 >> 2];
     if ($1_1 >>> 0 >= 33) {
      abort()
     }
     $6_1 = $4_1 + 16 | 0;
     HEAP32[$6_1 + 4 >> 2] = $1_1;
     HEAP32[$6_1 >> 2] = $10_1;
     $2_1 = $2_1 + $12_1 | 0;
     $1_1 = $3_1 + $5_1 | 0;
     $2_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $6_1 = $1_1;
     $5_1 = $2_1;
     $1_1 = HEAP32[$4_1 + 16 >> 2];
     $3_1 = HEAP32[$4_1 + 20 >> 2];
     while (1) {
      if ($3_1 >>> 0 > 7) {
       $3_1 = $3_1 - 8 | 0;
       $2_1 = __wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul(HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24), HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24), 668265295, -1028477379), i64toi32_i32$HIGH_BITS, 31), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535) ^ $6_1, $5_1 ^ i64toi32_i32$HIGH_BITS, 27), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
       $6_1 = $2_1 - 1028477341 | 0;
       $5_1 = i64toi32_i32$HIGH_BITS - (($2_1 >>> 0 < 1028477341) + 2048144776 | 0) | 0;
       $1_1 = $1_1 + 8 | 0;
       continue;
      }
      break;
     };
     while (1) {
      if ($3_1 >>> 0 > 3) {
       $3_1 = $3_1 - 4 | 0;
       $2_1 = __wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul(HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24), 0, -2048144761, -1640531535) ^ $6_1, $5_1 ^ i64toi32_i32$HIGH_BITS, 23), i64toi32_i32$HIGH_BITS, 668265295, -1028477379) - 1640531463 | 0;
       $5_1 = i64toi32_i32$HIGH_BITS + 374761393 | 0;
       $5_1 = $2_1 >>> 0 < 2654435833 ? $5_1 + 1 | 0 : $5_1;
       $6_1 = $2_1;
       $1_1 = $1_1 + 4 | 0;
       continue;
      }
      break;
     };
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) != ($3_1 | 0)) {
       $12_1 = $1_1 + $2_1 | 0;
       $2_1 = $2_1 + 1 | 0;
       $6_1 = __wasm_i64_mul(__wasm_rotl_i64(__wasm_i64_mul(HEAPU8[$12_1 | 0], 0, 374761413, 668265263) ^ $6_1, $5_1 ^ i64toi32_i32$HIGH_BITS, 11), i64toi32_i32$HIGH_BITS, -2048144761, -1640531535);
       $5_1 = i64toi32_i32$HIGH_BITS;
       continue;
      }
      break;
     };
     $1_1 = __wasm_i64_mul($6_1 ^ $5_1 >>> 1, $5_1, 668265295, -1028477379);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $5_1 = $2_1 >>> 29 | 0;
     $1_1 = __wasm_i64_mul($1_1 ^ (($2_1 & 536870911) << 3 | $1_1 >>> 29), $2_1 ^ $5_1, -1640531463, 374761393);
     $3_1 = i64toi32_i32$HIGH_BITS;
     HEAP32[$4_1 + 64 >> 2] = $1_1 ^ $3_1;
     HEAP32[$4_1 + 68 >> 2] = $3_1;
     $337($4_1 + 40 | 0, $4_1 - -64 | 0, 8);
     continue;
    }
    break;
   };
   $392($4_1 + 56 | 0);
   HEAP32[$4_1 + 80 >> 2] = HEAP32[$4_1 + 48 >> 2];
   $1_1 = HEAP32[$4_1 + 44 >> 2];
   HEAP32[$4_1 + 72 >> 2] = HEAP32[$4_1 + 40 >> 2];
   HEAP32[$4_1 + 76 >> 2] = $1_1;
   $271($4_1 + 8 | 0, $4_1 + 72 | 0);
   $1_1 = HEAP32[$4_1 + 12 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   global$0 = $4_1 + 160 | 0;
   return;
  }
  abort();
 }
 
 function $32($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 1424 | 0;
  global$0 = $2_1;
  $4_1 = $2_1 + 680 | 0;
  $214($4_1, $1_1);
  $3_1 = $2_1 + 720 | 0;
  $59($3_1, $4_1);
  label$1 : {
   label$2 : {
    if (!($286($3_1, $1_1) & 255) | ($334($4_1) & 255) == 1) {
     break label$2
    }
    $3_1 = $2_1 + 768 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    $3_1 = $2_1 + 776 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    $3_1 = $2_1 + 784 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 760 >> 2] = 0;
    HEAP32[$2_1 + 764 >> 2] = 0;
    HEAP32[$2_1 + 752 >> 2] = 1;
    HEAP32[$2_1 + 756 >> 2] = 0;
    $4_1 = $2_1 + 792 | 0;
    $12_1 = $2_1 + 680 | 0;
    $422($4_1, $12_1);
    $13_1 = $2_1 + 832 | 0;
    $3_1 = $2_1 + 752 | 0;
    $167($13_1, $3_1, $4_1);
    $10_1 = $2_1 + 872 | 0;
    $91($10_1, $3_1, 40);
    $300($10_1, $4_1);
    $4_1 = $2_1 + 912 | 0;
    $422($4_1, $10_1);
    $9_1 = $2_1 + 1192 | 0;
    $91($9_1, 1065192, 40);
    $186($9_1);
    $7_1 = $2_1 + 1232 | 0;
    $422($7_1, $13_1);
    $11_1 = $2_1 + 1152 | 0;
    $15($11_1, $9_1, $7_1);
    $3_1 = $2_1 + 952 | 0;
    $167($3_1, $11_1, $4_1);
    $15($9_1, $3_1, $4_1);
    $265($7_1, $9_1);
    $4_1 = HEAPU8[$2_1 + 1232 | 0];
    $8_1 = $2_1 + 992 | 0;
    $91($8_1, $2_1 + 1240 | 0, 40);
    $5_1 = $2_1 + 1032 | 0;
    $15($5_1, $8_1, $10_1);
    $15($7_1, $5_1, $3_1);
    $3_1 = $2_1 + 1072 | 0;
    $15($3_1, $8_1, $7_1);
    $91($7_1, $12_1, 40);
    $300($7_1, $12_1);
    $8_1 = $2_1 + 1112 | 0;
    $15($8_1, $7_1, $5_1);
    $301($8_1, $334($8_1));
    $15($11_1, $13_1, $3_1);
    $15($9_1, $8_1, $11_1);
    label$3 : {
     if (!$4_1) {
      break label$3
     }
     if (($334($2_1 + 1192 | 0) & 255) == 1) {
      break label$3
     }
     $3_1 = $2_1 + 1416 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 1408 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 1400 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 1392 >> 2] = 0;
     HEAP32[$2_1 + 1396 >> 2] = 0;
     $3_1 = $2_1 + 1232 | 0;
     $59($3_1, $2_1 + 1152 | 0);
     if (($286($3_1, $2_1 + 1392 | 0) & 255) == 1) {
      break label$3
     }
     $6_1 = $2_1 + 1232 | 0;
     $91($6_1, $2_1 + 1112 | 0, 40);
     $91($2_1 + 1272 | 0, $2_1 + 1152 | 0, 40);
     $91($2_1 + 1312 | 0, $2_1 + 752 | 0, 40);
     $91($2_1 + 1352 | 0, $2_1 + 1192 | 0, 40);
     $91($2_1 + 520 | 0, $6_1, 160);
     $6_1 = 1;
    }
    if (!$6_1) {
     break label$2
    }
    $4_1 = $91($2_1, $91($2_1 + 195 | 0, $91($2_1 + 360 | 0, $2_1 + 520 | 0, 160), 160), 160);
    $3_1 = $4_1 + 184 | 0;
    $5_1 = $1_1 + 24 | 0;
    $6_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    HEAP32[$3_1 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $5_1 = $1_1 + 16 | 0;
    $6_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $3_1 = $4_1 + 176 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $5_1 = $1_1 + 8 | 0;
    $6_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $3_1 = $4_1 + 168 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $6_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    HEAP32[$4_1 + 160 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$4_1 + 164 >> 2] = $6_1;
    $91($0_1 + 8 | 0, $4_1, 192);
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $2_1 + 372 | 0;
   $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   $6_1 = $2_1 + 207 | 0;
   $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP8[$6_1 | 0] = $1_1;
   HEAP8[$6_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$6_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$6_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$6_1 + 4 | 0] = $3_1;
   HEAP8[$6_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$6_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$6_1 + 7 | 0] = $3_1 >>> 24;
   $4_1 = $2_1 + 365 | 0;
   $1_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $3_1 = $2_1 + 200 | 0;
   HEAP32[$3_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$3_1 + 4 >> 2] = $1_1;
   $4_1 = HEAPU8[$2_1 + 361 | 0] | HEAPU8[$2_1 + 362 | 0] << 8 | (HEAPU8[$2_1 + 363 | 0] << 16 | HEAPU8[$2_1 + 364 | 0] << 24);
   $1_1 = HEAPU8[$2_1 + 357 | 0] | HEAPU8[$2_1 + 358 | 0] << 8 | (HEAPU8[$2_1 + 359 | 0] << 16 | HEAPU8[$2_1 + 360 | 0] << 24);
   HEAP32[$2_1 + 192 >> 2] = $1_1;
   HEAP32[$2_1 + 196 >> 2] = $4_1;
   HEAP8[$0_1 + 4 | 0] = 1;
   HEAP8[$0_1 + 5 | 0] = $1_1;
   HEAP8[$0_1 + 6 | 0] = $1_1 >>> 8;
   HEAP8[$0_1 + 7 | 0] = $1_1 >>> 16;
   HEAP8[$0_1 + 8 | 0] = $1_1 >>> 24;
   HEAP8[$0_1 + 9 | 0] = $4_1;
   HEAP8[$0_1 + 10 | 0] = $4_1 >>> 8;
   HEAP8[$0_1 + 11 | 0] = $4_1 >>> 16;
   HEAP8[$0_1 + 12 | 0] = $4_1 >>> 24;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $5_1 = $0_1 + 13 | 0;
   $1_1 = HEAP32[$3_1 >> 2];
   HEAP8[$5_1 | 0] = $1_1;
   HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$5_1 + 4 | 0] = $4_1;
   HEAP8[$5_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$5_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$5_1 + 7 | 0] = $4_1 >>> 24;
   $3_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
   $4_1 = $0_1 + 20 | 0;
   $1_1 = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
   HEAP8[$4_1 | 0] = $1_1;
   HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
   HEAP8[$4_1 + 4 | 0] = $3_1;
   HEAP8[$4_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$4_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$4_1 + 7 | 0] = $3_1 >>> 24;
   $1_1 = 1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  global$0 = $2_1 + 1424 | 0;
 }
 
 function $33($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 1376 | 0;
  global$0 = $7_1;
  $288($7_1 + 40 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$7_1 + 44 >> 2];
  HEAP32[$7_1 + 52 >> 2] = $1_1;
  $2_1 = HEAP32[$7_1 + 40 >> 2];
  HEAP32[$7_1 + 48 >> 2] = $2_1;
  $288($7_1 + 32 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$7_1 + 60 >> 2] = $3_1;
  $4_1 = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$7_1 + 56 >> 2] = $4_1;
  $288($7_1 + 24 | 0, $5_1, $6_1);
  $6_1 = HEAP32[$7_1 + 28 >> 2];
  HEAP32[$7_1 + 68 >> 2] = $6_1;
  $8_1 = HEAP32[$7_1 + 24 >> 2];
  HEAP32[$7_1 + 64 >> 2] = $8_1;
  $5_1 = $7_1 + 864 | 0;
  $114($5_1, $4_1, $3_1);
  $3_1 = $7_1 + 1072 | 0;
  $159($3_1, $2_1, $1_1);
  $1_1 = HEAPU8[$7_1 + 864 | 0];
  $91($7_1 + 272 | 0, $5_1 | 1, 64);
  $2_1 = HEAP32[$7_1 + 1072 >> 2];
  $91($7_1 + 76 | 0, $3_1 | 4, 196);
  if ($2_1 ? 1 : $1_1 & 1) {
   abort()
  }
  $5_1 = $7_1 + 336 | 0;
  $91($5_1, $7_1 + 272 | 0, 64);
  $91($7_1 + 400 | 0, $7_1 + 80 | 0, 192);
  $1_1 = $7_1 + 1072 | 0;
  $181($1_1, 1105533, 14);
  $277($1_1, 1217612, 0, 1048983, 9);
  $2_1 = $7_1 + 864 | 0;
  $91($2_1, $1_1, 208);
  $3_1 = $7_1 + 656 | 0;
  $91($3_1, $2_1, 200);
  HEAP8[$7_1 + 858 | 0] = HEAPU8[$7_1 + 1066 | 0];
  HEAP16[$7_1 + 856 >> 1] = HEAPU16[$7_1 + 1064 >> 1];
  $277($3_1, 1105547, 10, $8_1, $6_1);
  $336($2_1);
  $91($1_1, $3_1, 208);
  $395($1_1, 1105557, 11);
  $389($1_1, 1105568, 7, $7_1 + 560 | 0);
  HEAP32[$7_1 + 868 >> 2] = 32;
  HEAP32[$7_1 + 864 >> 2] = $7_1 + 368;
  $3_1 = $7_1 + 1280 | 0;
  $311($3_1, $1_1, 1105575, 7, $2_1);
  $66($2_1, $3_1);
  $4_1 = $7_1 + 1312 | 0;
  $65($4_1, $2_1);
  $389($1_1, 1105582, 6, $4_1);
  $2_1 = $7_1 + 1344 | 0;
  $322($2_1, $1_1, 1105588, 6);
  $6_1 = $7_1 + 592 | 0;
  $272($6_1, $2_1, $5_1);
  $5($7_1 + 896 | 0, $6_1, $3_1);
  $338($3_1);
  $3_1 = $7_1 + 1336 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $7_1 + 888 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = $7_1 + 1328 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $7_1 + 880 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $8_1;
  $8_1 = $7_1 + 1320 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $7_1 + 872 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$7_1 + 1316 >> 2];
  HEAP32[$7_1 + 864 >> 2] = HEAP32[$7_1 + 1312 >> 2];
  HEAP32[$7_1 + 868 >> 2] = $8_1;
  $336($1_1);
  $9_1 = HEAP32[$4_1 + 4 >> 2];
  $8_1 = $7_1 + 600 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $7_1 + 608 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $7_1 + 616 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $3_1 = $7_1 + 904 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $7_1 + 632 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $7_1 + 912 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $7_1 + 640 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $7_1 + 919 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $2_1 = $7_1 + 647 | 0;
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $2_1 = HEAP32[$7_1 + 868 >> 2];
  HEAP32[$7_1 + 592 >> 2] = HEAP32[$7_1 + 864 >> 2];
  HEAP32[$7_1 + 596 >> 2] = $2_1;
  $2_1 = HEAP32[$7_1 + 900 >> 2];
  HEAP32[$7_1 + 624 >> 2] = HEAP32[$7_1 + 896 >> 2];
  HEAP32[$7_1 + 628 >> 2] = $2_1;
  $2_1 = HEAPU8[$7_1 + 927 | 0];
  $201($7_1 + 16 | 0, 64, 0);
  $3_1 = HEAP32[$7_1 + 20 >> 2];
  $4_1 = $91(HEAP32[$7_1 + 16 >> 2], $6_1, 63);
  HEAP8[$4_1 + 63 | 0] = $2_1 | 128;
  $391($5_1);
  $392($7_1 - -64 | 0);
  $392($7_1 + 56 | 0);
  $392($7_1 + 48 | 0);
  HEAP32[$7_1 + 1080 >> 2] = 64;
  HEAP32[$7_1 + 1076 >> 2] = $3_1;
  HEAP32[$7_1 + 1072 >> 2] = $4_1;
  $271($7_1 + 8 | 0, $1_1);
  $1_1 = HEAP32[$7_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $7_1 + 1376 | 0;
 }
 
 function $34($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 640 | 0;
  global$0 = $6_1;
  $288($6_1 - -64 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$6_1 + 68 >> 2];
  HEAP32[$6_1 + 76 >> 2] = $1_1;
  $2_1 = HEAP32[$6_1 + 64 >> 2];
  HEAP32[$6_1 + 72 >> 2] = $2_1;
  $288($6_1 + 56 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$6_1 + 60 >> 2];
  HEAP32[$6_1 + 84 >> 2] = $3_1;
  $4_1 = HEAP32[$6_1 + 56 >> 2];
  HEAP32[$6_1 + 80 >> 2] = $4_1;
  label$1 : {
   if ($5_1 - 1 >>> 0 > 63 | $3_1 >>> 0 > 64) {
    break label$1
   }
   $147($6_1 + 160 | 0, 0, 128);
   $7_1 = $6_1 + 344 | 0;
   HEAP32[$7_1 >> 2] = 327033209;
   HEAP32[$7_1 + 4 >> 2] = 1541459225;
   $7_1 = $6_1 + 336 | 0;
   HEAP32[$7_1 >> 2] = -79577749;
   HEAP32[$7_1 + 4 >> 2] = 528734635;
   $7_1 = $6_1 + 328 | 0;
   HEAP32[$7_1 >> 2] = 725511199;
   HEAP32[$7_1 + 4 >> 2] = -1694144372;
   $7_1 = $6_1 + 320 | 0;
   HEAP32[$7_1 >> 2] = -1377402159;
   HEAP32[$7_1 + 4 >> 2] = 1359893119;
   $7_1 = $6_1 + 312 | 0;
   HEAP32[$7_1 >> 2] = 1595750129;
   HEAP32[$7_1 + 4 >> 2] = -1521486534;
   $7_1 = $6_1 + 304 | 0;
   HEAP32[$7_1 >> 2] = -23791573;
   HEAP32[$7_1 + 4 >> 2] = 1013904242;
   $7_1 = $6_1 + 296 | 0;
   HEAP32[$7_1 >> 2] = -2067093701;
   HEAP32[$7_1 + 4 >> 2] = -1150833019;
   HEAP32[$6_1 + 352 >> 2] = 0;
   HEAP32[$6_1 + 356 >> 2] = 0;
   HEAP32[$6_1 + 360 >> 2] = $5_1;
   HEAP32[$6_1 + 288 >> 2] = $3_1 << 8 ^ $5_1 ^ -222443256;
   HEAP32[$6_1 + 292 >> 2] = $3_1 >>> 24 ^ 1779033703;
   label$2 : {
    label$3 : {
     if ($3_1) {
      $91($6_1 + 160 | 0, $4_1, $3_1);
      HEAP32[$6_1 + 352 >> 2] = 128;
      HEAP32[$6_1 + 356 >> 2] = 0;
      break label$3;
     }
     $365($6_1 + 48 | 0, $2_1, $1_1, $1_1 >>> 0 < 128 ? $1_1 : 128);
     $4_1 = HEAP32[$6_1 + 48 >> 2];
     $3_1 = HEAP32[$6_1 + 52 >> 2];
     $345($6_1 + 40 | 0, $2_1, $1_1, $3_1);
     if ($3_1 >>> 0 >= 129) {
      break label$1
     }
     $1_1 = HEAP32[$6_1 + 44 >> 2];
     $2_1 = HEAP32[$6_1 + 40 >> 2];
     $91($6_1 + 160 | 0, $4_1, $3_1);
     $5_1 = HEAP32[$6_1 + 356 >> 2];
     $7_1 = HEAP32[$6_1 + 352 >> 2];
     $4_1 = $3_1 + $7_1 | 0;
     $8_1 = $4_1 >>> 0 < $3_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $9_1 = $4_1;
     $3_1 = $4_1;
     $394(($5_1 | 0) == ($8_1 | 0) & $3_1 >>> 0 >= $7_1 >>> 0 | $5_1 >>> 0 < $8_1 >>> 0);
     $3_1 = 0;
     break label$2;
    }
    $3_1 = 1;
   }
   while (1) {
    if (!$3_1) {
     HEAP32[$6_1 + 352 >> 2] = $9_1;
     HEAP32[$6_1 + 356 >> 2] = $8_1;
     $3_1 = 1;
     continue;
    }
    if ($1_1 >>> 0 <= 127) {
     if ($1_1) {
      $3_1 = $6_1 + 160 | 0;
      $0($3_1, 0, 0);
      $91($3_1, $2_1, $1_1);
      $4_1 = HEAP32[$6_1 + 356 >> 2];
      $5_1 = HEAP32[$6_1 + 352 >> 2];
      $3_1 = $1_1 + $5_1 | 0;
      $2_1 = $3_1 >>> 0 < $1_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
      $394(($2_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 >= $5_1 >>> 0 | $2_1 >>> 0 > $4_1 >>> 0);
      HEAP32[$6_1 + 352 >> 2] = $3_1;
      HEAP32[$6_1 + 356 >> 2] = $2_1;
     }
     $91($6_1 + 368 | 0, $6_1 + 160 | 0, 208);
     $1_1 = HEAP32[$6_1 + 560 >> 2] & 127;
     if ($1_1) {
      $147($1_1 + ($6_1 + 368 | 0) | 0, 0, 128 - $1_1 | 0)
     }
     $2_1 = $6_1 + 368 | 0;
     $0($2_1, -1, -1);
     $3_1 = $6_1 + 520 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 600 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 512 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 592 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 504 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 584 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 536 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 616 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 544 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 624 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $3_1 = $6_1 + 552 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $1_1 = $6_1 + 632 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $1_1 = HEAP32[$6_1 + 500 >> 2];
     HEAP32[$6_1 + 576 >> 2] = HEAP32[$6_1 + 496 >> 2];
     HEAP32[$6_1 + 580 >> 2] = $1_1;
     $1_1 = $6_1 + 528 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$6_1 + 608 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$6_1 + 612 >> 2] = $3_1;
     $1_1 = HEAP32[$6_1 + 568 >> 2];
     $3_1 = $6_1 + 88 | 0;
     $91($3_1, $6_1 + 576 | 0, 64);
     HEAP32[$6_1 + 152 >> 2] = $1_1;
     $302($6_1 + 32 | 0, $3_1, 64, $1_1);
     $3_1 = HEAP32[$6_1 + 32 >> 2];
     $1_1 = HEAP32[$6_1 + 36 >> 2];
     $201($6_1 + 24 | 0, $1_1, 0);
     $4_1 = HEAP32[$6_1 + 28 >> 2];
     $3_1 = $91(HEAP32[$6_1 + 24 >> 2], $3_1, $1_1);
     $392($6_1 + 80 | 0);
     $392($6_1 + 72 | 0);
     HEAP32[$6_1 + 376 >> 2] = $1_1;
     HEAP32[$6_1 + 372 >> 2] = $4_1;
     HEAP32[$6_1 + 368 >> 2] = $3_1;
     $271($6_1 + 16 | 0, $2_1);
     $1_1 = HEAP32[$6_1 + 20 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     global$0 = $6_1 + 640 | 0;
     return;
    }
    $0($6_1 + 160 | 0, 0, 0);
    $365($6_1 + 8 | 0, $2_1, $1_1, 128);
    $4_1 = HEAP32[$6_1 + 8 >> 2];
    $3_1 = HEAP32[$6_1 + 12 >> 2];
    $345($6_1, $2_1, $1_1, $3_1);
    if ($3_1 >>> 0 >= 129) {
     break label$1
    }
    $1_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = HEAP32[$6_1 >> 2];
    $91($6_1 + 160 | 0, $4_1, $3_1);
    $5_1 = HEAP32[$6_1 + 356 >> 2];
    $7_1 = HEAP32[$6_1 + 352 >> 2];
    $4_1 = $3_1 + $7_1 | 0;
    $8_1 = $4_1 >>> 0 < $3_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
    $9_1 = $4_1;
    $3_1 = $4_1;
    $394(($5_1 | 0) == ($8_1 | 0) & $3_1 >>> 0 >= $7_1 >>> 0 | $5_1 >>> 0 < $8_1 >>> 0);
    $3_1 = 0;
    continue;
   };
  }
  abort();
 }
 
 function $35($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 448 | 0;
  global$0 = $4_1;
  $6_1 = HEAP32[$2_1 + 80 >> 2];
  label$1 : {
   if (HEAP32[$1_1 + 120 >> 2]) {
    HEAP32[$0_1 + 120 >> 2] = $6_1;
    $0_1 = $91($0_1, $2_1, 40);
    $91($0_1 + 40 | 0, $2_1 + 40 | 0, 40);
    $1_1 = $0_1 + 88 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$0_1 + 80 >> 2] = 1;
    HEAP32[$0_1 + 84 >> 2] = 0;
    $1_1 = $0_1 + 96 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $0_1 + 104 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $0_1 = $0_1 + 112 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   if ($6_1) {
    if ($3_1) {
     HEAP32[$3_1 + 8 >> 2] = 0;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAP32[$3_1 >> 2] = 1;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $2_1 = $3_1 + 16 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $2_1 = $3_1 + 24 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $2_1 = $3_1 + 32 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
    }
    $91($0_1, $1_1, 128);
    break label$1;
   }
   HEAP32[$0_1 + 120 >> 2] = 0;
   $6_1 = $4_1 + 408 | 0;
   $11_1 = $1_1 + 80 | 0;
   $17($6_1, $11_1);
   $5_1 = $4_1 + 368 | 0;
   $91($5_1, $1_1, 40);
   $213($5_1);
   $8($4_1 + 328 | 0, $2_1, $6_1);
   $5_1 = $4_1 + 288 | 0;
   $91($5_1, $1_1 + 40 | 0, 40);
   $213($5_1);
   $5_1 = $4_1 + 248 | 0;
   $8($5_1, $2_1 + 40 | 0, $6_1);
   $8($5_1, $5_1, $11_1);
   $2_1 = $4_1;
   $5_1 = HEAP32[$2_1 + 328 >> 2];
   $7_1 = HEAP32[$2_1 + 368 >> 2];
   $6_1 = ($5_1 - $7_1 | 0) - 3908 | 0;
   $8_1 = (HEAP32[$2_1 + 332 >> 2] - (HEAP32[$2_1 + 372 >> 2] + ($5_1 >>> 0 < $7_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 208 >> 2] = $6_1;
   HEAP32[$2_1 + 212 >> 2] = $6_1 >>> 0 < 4294963388 ? $8_1 + 1 | 0 : $8_1;
   $5_1 = HEAP32[$2_1 + 336 >> 2];
   $7_1 = HEAP32[$2_1 + 376 >> 2];
   $6_1 = ($5_1 - $7_1 | 0) - 4 | 0;
   $9_1 = (HEAP32[$2_1 + 340 >> 2] - (HEAP32[$2_1 + 380 >> 2] + ($5_1 >>> 0 < $7_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 216 >> 2] = $6_1;
   HEAP32[$2_1 + 220 >> 2] = $6_1 >>> 0 < 4294967292 ? $9_1 + 1 | 0 : $9_1;
   $5_1 = HEAP32[$2_1 + 344 >> 2];
   $7_1 = HEAP32[$2_1 + 384 >> 2];
   $6_1 = ($5_1 - $7_1 | 0) - 4 | 0;
   $7_1 = (HEAP32[$2_1 + 348 >> 2] - (HEAP32[$2_1 + 388 >> 2] + ($5_1 >>> 0 < $7_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 224 >> 2] = $6_1;
   HEAP32[$2_1 + 228 >> 2] = $6_1 >>> 0 < 4294967292 ? $7_1 + 1 | 0 : $7_1;
   $5_1 = HEAP32[$2_1 + 352 >> 2];
   $7_1 = HEAP32[$2_1 + 392 >> 2];
   $6_1 = ($5_1 - $7_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 356 >> 2] - (HEAP32[$2_1 + 396 >> 2] + ($5_1 >>> 0 < $7_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 232 >> 2] = $6_1;
   HEAP32[$2_1 + 236 >> 2] = $6_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $6_1 = HEAP32[$2_1 + 360 >> 2];
   $7_1 = HEAP32[$2_1 + 400 >> 2];
   $5_1 = ($6_1 - $7_1 | 0) - 4 | 0;
   $6_1 = (HEAP32[$2_1 + 364 >> 2] - (HEAP32[$2_1 + 404 >> 2] + ($6_1 >>> 0 < $7_1 >>> 0) | 0) | 0) + 262143 | 0;
   HEAP32[$2_1 + 240 >> 2] = $5_1;
   HEAP32[$2_1 + 244 >> 2] = $5_1 >>> 0 < 4294967292 ? $6_1 + 1 | 0 : $6_1;
   $6_1 = HEAP32[$2_1 + 320 >> 2];
   $13_1 = HEAP32[$2_1 + 324 >> 2];
   $5_1 = HEAP32[$2_1 + 312 >> 2];
   $14_1 = HEAP32[$2_1 + 316 >> 2];
   $7_1 = HEAP32[$2_1 + 304 >> 2];
   $15_1 = HEAP32[$2_1 + 308 >> 2];
   $9_1 = HEAP32[$2_1 + 296 >> 2];
   $16_1 = HEAP32[$2_1 + 300 >> 2];
   $8_1 = HEAP32[$2_1 + 248 >> 2];
   $12_1 = HEAP32[$2_1 + 288 >> 2];
   $10_1 = ($8_1 - $12_1 | 0) - 3908 | 0;
   $8_1 = (HEAP32[$2_1 + 252 >> 2] - (HEAP32[$2_1 + 292 >> 2] + ($8_1 >>> 0 < $12_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 168 >> 2] = $10_1;
   HEAP32[$2_1 + 172 >> 2] = $10_1 >>> 0 < 4294963388 ? $8_1 + 1 | 0 : $8_1;
   $10_1 = HEAP32[$2_1 + 256 >> 2];
   $8_1 = ($10_1 - $9_1 | 0) - 4 | 0;
   $9_1 = (HEAP32[$2_1 + 260 >> 2] - (($9_1 >>> 0 > $10_1 >>> 0) + $16_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 176 >> 2] = $8_1;
   HEAP32[$2_1 + 180 >> 2] = $8_1 >>> 0 < 4294967292 ? $9_1 + 1 | 0 : $9_1;
   $8_1 = HEAP32[$2_1 + 264 >> 2];
   $9_1 = ($8_1 - $7_1 | 0) - 4 | 0;
   $7_1 = (HEAP32[$2_1 + 268 >> 2] - (($7_1 >>> 0 > $8_1 >>> 0) + $15_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 184 >> 2] = $9_1;
   HEAP32[$2_1 + 188 >> 2] = $9_1 >>> 0 < 4294967292 ? $7_1 + 1 | 0 : $7_1;
   $9_1 = HEAP32[$2_1 + 272 >> 2];
   $7_1 = ($9_1 - $5_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 276 >> 2] - (($5_1 >>> 0 > $9_1 >>> 0) + $14_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 192 >> 2] = $7_1;
   HEAP32[$2_1 + 196 >> 2] = $7_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $5_1 = HEAP32[$2_1 + 280 >> 2];
   $2_1 = ($5_1 - $6_1 | 0) - 4 | 0;
   $8_1 = (HEAP32[$4_1 + 284 >> 2] - (($5_1 >>> 0 < $6_1 >>> 0) + $13_1 | 0) | 0) + 262143 | 0;
   HEAP32[$4_1 + 200 >> 2] = $2_1;
   HEAP32[$4_1 + 204 >> 2] = $2_1 >>> 0 < 4294967292 ? $8_1 + 1 | 0 : $8_1;
   if ($162($4_1 + 208 | 0)) {
    if ($162($4_1 + 168 | 0)) {
     $230($0_1, $1_1, $3_1);
     break label$1;
    }
    if ($3_1) {
     $147($3_1, 0, 40)
    }
    $370($0_1);
    break label$1;
   }
   $17($4_1 + 128 | 0, $4_1 + 168 | 0);
   $1_1 = $4_1 + 88 | 0;
   $2_1 = $4_1 + 208 | 0;
   $17($1_1, $2_1);
   $8($4_1 + 48 | 0, $2_1, $1_1);
   if ($3_1) {
    $91($3_1, $4_1 + 208 | 0, 40)
   }
   $8($0_1 + 80 | 0, $11_1, $4_1 + 208 | 0);
   $3_1 = $4_1 + 8 | 0;
   $8($3_1, $4_1 + 368 | 0, $4_1 + 88 | 0);
   $0_1 = $91($0_1, $3_1, 40);
   $280($0_1, 2);
   $2_1 = $4_1 + 48 | 0;
   $269($0_1, $2_1);
   $250($0_1, $0_1, 3);
   $269($0_1, $4_1 + 128 | 0);
   $1_1 = $0_1 + 40 | 0;
   $250($1_1, $0_1, 5);
   $269($1_1, $3_1);
   $8($1_1, $1_1, $4_1 + 168 | 0);
   $8($2_1, $2_1, $4_1 + 288 | 0);
   $0_1 = HEAP32[$4_1 + 48 >> 2];
   $3_1 = 4194299 - (HEAP32[$4_1 + 52 >> 2] + ($0_1 >>> 0 > 4294963388) | 0) | 0;
   HEAP32[$4_1 + 48 >> 2] = -3908 - $0_1;
   HEAP32[$4_1 + 52 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 56 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 60 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 56 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 60 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 64 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 68 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 64 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 68 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 72 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 76 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 72 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 76 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 80 >> 2];
   $3_1 = 262143 - (HEAP32[$4_1 + 84 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 80 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 84 >> 2] = $3_1;
   $269($1_1, $2_1);
  }
  global$0 = $4_1 + 448 | 0;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 1200 | 0;
  global$0 = $5_1;
  $288($5_1 + 24 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 36 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 32 >> 2] = $2_1;
  $288($5_1 + 16 | 0, $3_1, $4_1);
  $6_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $6_1;
  $7_1 = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $7_1;
  $3_1 = $5_1 + 336 | 0;
  $226($3_1);
  $4_1 = $5_1 + 48 | 0;
  $210($4_1);
  $8_1 = $5_1 + 768 | 0;
  $226($8_1);
  $91($5_1 + 656 | 0, $3_1, 112);
  $4_1 = $91($5_1 + 880 | 0, $4_1, 64);
  $211($5_1 + 1088 | 0);
  label$1 : {
   label$2 : {
    if ($1_1 >>> 0 >= 65) {
     $3_1 = $5_1 + 48 | 0;
     $226($3_1);
     $414($3_1, $2_1, $1_1);
     $1_1 = $5_1 + 336 | 0;
     $91($1_1, $3_1, 112);
     $56($5_1 + 944 | 0, $1_1);
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) == 32) {
       break label$2
      }
      $1_1 = $3_1 + $4_1 | 0;
      $2_1 = $1_1;
      $9_1 = HEAPU8[$1_1 | 0];
      $1_1 = HEAPU8[($5_1 + 944 | 0) + $3_1 | 0];
      HEAP8[$2_1 | 0] = $9_1 ^ $1_1;
      $2_1 = ($5_1 + 1088 | 0) + $3_1 | 0;
      HEAP8[$2_1 | 0] = $1_1 ^ HEAPU8[$2_1 | 0];
      $3_1 = $3_1 + 1 | 0;
      continue;
     };
    }
    $3_1 = 0;
    while (1) {
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$2
     }
     if (($3_1 | 0) == 64) {
      break label$1
     }
     $9_1 = $3_1 + $4_1 | 0;
     $10_1 = $9_1;
     $11_1 = HEAPU8[$9_1 | 0];
     $9_1 = $2_1 + $3_1 | 0;
     HEAP8[$10_1 | 0] = $11_1 ^ HEAPU8[$9_1 | 0];
     $10_1 = ($5_1 + 1088 | 0) + $3_1 | 0;
     HEAP8[$10_1 | 0] = HEAPU8[$10_1 | 0] ^ HEAPU8[$9_1 | 0];
     $3_1 = $3_1 + 1 | 0;
     continue;
    };
   }
   $2_1 = $5_1 + 656 | 0;
   $415($2_1, $4_1);
   $1_1 = $5_1 + 1088 | 0;
   $415($8_1, $1_1);
   $4_1 = $5_1 + 48 | 0;
   $91($4_1, $2_1, 288);
   $3_1 = $5_1 + 336 | 0;
   $91($3_1, $4_1, 288);
   $414($3_1, $7_1, $6_1);
   $91($2_1, $3_1, 288);
   $3_1 = HEAP32[$5_1 + 768 >> 2];
   $4_1 = HEAP32[$5_1 + 772 >> 2];
   $179($1_1 | 4, $5_1 + 780 | 0);
   $7_1 = $5_1 + 852 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 1028 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $7_1 = $5_1 + 860 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 1036 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $7_1 = $5_1 + 868 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 1044 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   HEAP32[$5_1 + 1088 >> 2] = HEAP32[$5_1 + 776 >> 2];
   $6_1 = $5_1 + 844 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   HEAP32[$5_1 + 1020 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 1024 >> 2] = $7_1;
   $91($5_1 + 952 | 0, $1_1, 68);
   HEAP32[$5_1 + 944 >> 2] = $3_1;
   HEAP32[$5_1 + 948 >> 2] = $4_1;
   $91($1_1, $2_1, 112);
   $3_1 = $5_1 + 1056 | 0;
   $56($3_1, $1_1);
   $4_1 = $5_1 + 944 | 0;
   $416($4_1, $3_1);
   $91($1_1, $4_1, 112);
   $56($5_1 + 624 | 0, $1_1);
   $201($5_1 + 8 | 0, 32, 0);
   $7_1 = HEAP32[$5_1 + 12 >> 2];
   $4_1 = HEAP32[$5_1 + 628 >> 2];
   $3_1 = HEAP32[$5_1 + 8 >> 2];
   $1_1 = $3_1;
   $6_1 = HEAP32[$5_1 + 624 >> 2];
   HEAP8[$1_1 | 0] = $6_1;
   HEAP8[$1_1 + 1 | 0] = $6_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $6_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $6_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $4_1;
   HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
   $6_1 = $5_1 + 648 | 0;
   $4_1 = HEAP32[$6_1 + 4 >> 2];
   $1_1 = $1_1 + 24 | 0;
   $6_1 = HEAP32[$6_1 >> 2];
   HEAP8[$1_1 | 0] = $6_1;
   HEAP8[$1_1 + 1 | 0] = $6_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $6_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $6_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $4_1;
   HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
   $6_1 = $5_1 + 640 | 0;
   $4_1 = HEAP32[$6_1 + 4 >> 2];
   $1_1 = $3_1 + 16 | 0;
   $6_1 = HEAP32[$6_1 >> 2];
   HEAP8[$1_1 | 0] = $6_1;
   HEAP8[$1_1 + 1 | 0] = $6_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $6_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $6_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $4_1;
   HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
   $6_1 = $5_1 + 632 | 0;
   $4_1 = HEAP32[$6_1 + 4 >> 2];
   $1_1 = $3_1 + 8 | 0;
   $6_1 = HEAP32[$6_1 >> 2];
   HEAP8[$1_1 | 0] = $6_1;
   HEAP8[$1_1 + 1 | 0] = $6_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $6_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $6_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $4_1;
   HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
   $392($5_1 + 40 | 0);
   $392($5_1 + 32 | 0);
   HEAP32[$5_1 + 664 >> 2] = 32;
   HEAP32[$5_1 + 660 >> 2] = $7_1;
   HEAP32[$5_1 + 656 >> 2] = $3_1;
   $271($5_1, $2_1);
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   global$0 = $5_1 + 1200 | 0;
   return;
  }
  abort();
 }
 
 function $37($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 480 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAP32[$2_1 + 80 >> 2]) {
    $91($0_1, $1_1, 128);
    break label$1;
   }
   if (HEAP32[$1_1 + 120 >> 2]) {
    HEAP32[$0_1 + 120 >> 2] = 0;
    $1_1 = $4_1 + 440 | 0;
    $17($1_1, $3_1);
    $6_1 = $4_1 + 400 | 0;
    $8($6_1, $1_1, $3_1);
    $8($0_1, $2_1, $1_1);
    $8($0_1 + 40 | 0, $2_1 + 40 | 0, $6_1);
    $1_1 = $0_1 + 88 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$0_1 + 80 >> 2] = 1;
    HEAP32[$0_1 + 84 >> 2] = 0;
    $1_1 = $0_1 + 96 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $0_1 + 104 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $0_1 = $0_1 + 112 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0_1 + 120 >> 2] = 0;
   $6_1 = $4_1 + 440 | 0;
   $10_1 = $1_1 + 80 | 0;
   $8($6_1, $10_1, $3_1);
   $3_1 = $4_1 + 400 | 0;
   $17($3_1, $6_1);
   $5_1 = $4_1 + 360 | 0;
   $91($5_1, $1_1, 40);
   $213($5_1);
   $8($4_1 + 320 | 0, $2_1, $3_1);
   $5_1 = $4_1 + 280 | 0;
   $91($5_1, $1_1 + 40 | 0, 40);
   $213($5_1);
   $5_1 = $4_1 + 240 | 0;
   $8($5_1, $2_1 + 40 | 0, $3_1);
   $8($5_1, $5_1, $6_1);
   $2_1 = $4_1;
   $6_1 = HEAP32[$2_1 + 320 >> 2];
   $5_1 = HEAP32[$2_1 + 360 >> 2];
   $3_1 = ($6_1 - $5_1 | 0) - 3908 | 0;
   $7_1 = (HEAP32[$2_1 + 324 >> 2] - (HEAP32[$2_1 + 364 >> 2] + ($5_1 >>> 0 > $6_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 200 >> 2] = $3_1;
   HEAP32[$2_1 + 204 >> 2] = $3_1 >>> 0 < 4294963388 ? $7_1 + 1 | 0 : $7_1;
   $6_1 = HEAP32[$2_1 + 328 >> 2];
   $5_1 = HEAP32[$2_1 + 368 >> 2];
   $3_1 = ($6_1 - $5_1 | 0) - 4 | 0;
   $8_1 = (HEAP32[$2_1 + 332 >> 2] - (HEAP32[$2_1 + 372 >> 2] + ($5_1 >>> 0 > $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 208 >> 2] = $3_1;
   HEAP32[$2_1 + 212 >> 2] = $3_1 >>> 0 < 4294967292 ? $8_1 + 1 | 0 : $8_1;
   $6_1 = HEAP32[$2_1 + 336 >> 2];
   $5_1 = HEAP32[$2_1 + 376 >> 2];
   $3_1 = ($6_1 - $5_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 340 >> 2] - (HEAP32[$2_1 + 380 >> 2] + ($5_1 >>> 0 > $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 216 >> 2] = $3_1;
   HEAP32[$2_1 + 220 >> 2] = $3_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $6_1 = HEAP32[$2_1 + 344 >> 2];
   $5_1 = HEAP32[$2_1 + 384 >> 2];
   $3_1 = ($6_1 - $5_1 | 0) - 4 | 0;
   $6_1 = (HEAP32[$2_1 + 348 >> 2] - (HEAP32[$2_1 + 388 >> 2] + ($5_1 >>> 0 > $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 224 >> 2] = $3_1;
   HEAP32[$2_1 + 228 >> 2] = $3_1 >>> 0 < 4294967292 ? $6_1 + 1 | 0 : $6_1;
   $3_1 = HEAP32[$2_1 + 352 >> 2];
   $5_1 = HEAP32[$2_1 + 392 >> 2];
   $6_1 = ($3_1 - $5_1 | 0) - 4 | 0;
   $3_1 = (HEAP32[$2_1 + 356 >> 2] - (HEAP32[$2_1 + 396 >> 2] + ($3_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 262143 | 0;
   HEAP32[$2_1 + 232 >> 2] = $6_1;
   HEAP32[$2_1 + 236 >> 2] = $6_1 >>> 0 < 4294967292 ? $3_1 + 1 | 0 : $3_1;
   $3_1 = HEAP32[$2_1 + 312 >> 2];
   $12_1 = HEAP32[$2_1 + 316 >> 2];
   $6_1 = HEAP32[$2_1 + 304 >> 2];
   $13_1 = HEAP32[$2_1 + 308 >> 2];
   $5_1 = HEAP32[$2_1 + 296 >> 2];
   $14_1 = HEAP32[$2_1 + 300 >> 2];
   $8_1 = HEAP32[$2_1 + 288 >> 2];
   $15_1 = HEAP32[$2_1 + 292 >> 2];
   $7_1 = HEAP32[$2_1 + 240 >> 2];
   $11_1 = HEAP32[$2_1 + 280 >> 2];
   $9_1 = ($7_1 - $11_1 | 0) - 3908 | 0;
   $7_1 = (HEAP32[$2_1 + 244 >> 2] - (HEAP32[$2_1 + 284 >> 2] + ($7_1 >>> 0 < $11_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 160 >> 2] = $9_1;
   HEAP32[$2_1 + 164 >> 2] = $9_1 >>> 0 < 4294963388 ? $7_1 + 1 | 0 : $7_1;
   $9_1 = HEAP32[$2_1 + 248 >> 2];
   $7_1 = ($9_1 - $8_1 | 0) - 4 | 0;
   $8_1 = (HEAP32[$2_1 + 252 >> 2] - (($8_1 >>> 0 > $9_1 >>> 0) + $15_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 168 >> 2] = $7_1;
   HEAP32[$2_1 + 172 >> 2] = $7_1 >>> 0 < 4294967292 ? $8_1 + 1 | 0 : $8_1;
   $7_1 = HEAP32[$2_1 + 256 >> 2];
   $8_1 = ($7_1 - $5_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 260 >> 2] - (($5_1 >>> 0 > $7_1 >>> 0) + $14_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 176 >> 2] = $8_1;
   HEAP32[$2_1 + 180 >> 2] = $8_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $8_1 = HEAP32[$2_1 + 264 >> 2];
   $5_1 = ($8_1 - $6_1 | 0) - 4 | 0;
   $6_1 = (HEAP32[$2_1 + 268 >> 2] - (($6_1 >>> 0 > $8_1 >>> 0) + $13_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 184 >> 2] = $5_1;
   HEAP32[$2_1 + 188 >> 2] = $5_1 >>> 0 < 4294967292 ? $6_1 + 1 | 0 : $6_1;
   $6_1 = HEAP32[$2_1 + 272 >> 2];
   $2_1 = ($6_1 - $3_1 | 0) - 4 | 0;
   $7_1 = (HEAP32[$4_1 + 276 >> 2] - (($3_1 >>> 0 > $6_1 >>> 0) + $12_1 | 0) | 0) + 262143 | 0;
   HEAP32[$4_1 + 192 >> 2] = $2_1;
   HEAP32[$4_1 + 196 >> 2] = $2_1 >>> 0 < 4294967292 ? $7_1 + 1 | 0 : $7_1;
   if ($162($4_1 + 200 | 0)) {
    if ($162($4_1 + 160 | 0)) {
     $230($0_1, $1_1, 0);
     break label$1;
    }
    $370($0_1);
    break label$1;
   }
   $6_1 = $4_1 + 120 | 0;
   $5_1 = $4_1 + 160 | 0;
   $17($6_1, $5_1);
   $2_1 = $4_1 + 80 | 0;
   $3_1 = $4_1 + 200 | 0;
   $17($2_1, $3_1);
   $1_1 = $4_1 + 40 | 0;
   $8($1_1, $3_1, $2_1);
   $8_1 = $91($0_1 + 80 | 0, $10_1, 40);
   $8($8_1, $8_1, $3_1);
   $8($4_1, $4_1 + 360 | 0, $2_1);
   $0_1 = $91($0_1, $4_1, 40);
   $280($0_1, 2);
   $269($0_1, $1_1);
   $250($0_1, $0_1, 3);
   $269($0_1, $6_1);
   $2_1 = $0_1 + 40 | 0;
   $250($2_1, $0_1, 5);
   $269($2_1, $4_1);
   $8($2_1, $2_1, $5_1);
   $8($1_1, $1_1, $4_1 + 280 | 0);
   $0_1 = HEAP32[$4_1 + 40 >> 2];
   $3_1 = 4194299 - (HEAP32[$4_1 + 44 >> 2] + ($0_1 >>> 0 > 4294963388) | 0) | 0;
   HEAP32[$4_1 + 40 >> 2] = -3908 - $0_1;
   HEAP32[$4_1 + 44 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 48 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 52 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 48 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 52 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 56 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 60 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 56 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 60 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 64 >> 2];
   $3_1 = 4194303 - (HEAP32[$4_1 + 68 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 64 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 68 >> 2] = $3_1;
   $0_1 = HEAP32[$4_1 + 72 >> 2];
   $3_1 = 262143 - (HEAP32[$4_1 + 76 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$4_1 + 72 >> 2] = -4 - $0_1;
   HEAP32[$4_1 + 76 >> 2] = $3_1;
   $269($2_1, $1_1);
  }
  global$0 = $4_1 + 480 | 0;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 1184 | 0;
  global$0 = $6_1;
  $7_1 = $6_1 + 312 | 0;
  $226($7_1);
  $9_1 = $6_1 + 8 | 0;
  $210($9_1);
  $11_1 = $6_1 + 752 | 0;
  $226($11_1);
  $91($6_1 + 640 | 0, $7_1, 112);
  $9_1 = $91($6_1 + 864 | 0, $9_1, 64);
  $211($6_1 + 1072 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 >= 65) {
      $7_1 = $6_1 + 8 | 0;
      $226($7_1);
      $414($7_1, $0_1, $1_1);
      $0_1 = $6_1 + 312 | 0;
      $91($0_1, $7_1, 112);
      $56($6_1 + 928 | 0, $0_1);
      $7_1 = 0;
      while (1) {
       if (($7_1 | 0) == 32) {
        break label$3
       }
       $0_1 = $7_1 + $9_1 | 0;
       $1_1 = $0_1;
       $8_1 = HEAPU8[$0_1 | 0];
       $0_1 = HEAPU8[($6_1 + 928 | 0) + $7_1 | 0];
       HEAP8[$1_1 | 0] = $8_1 ^ $0_1;
       $1_1 = ($6_1 + 1072 | 0) + $7_1 | 0;
       HEAP8[$1_1 | 0] = $0_1 ^ HEAPU8[$1_1 | 0];
       $7_1 = $7_1 + 1 | 0;
       continue;
      };
     }
     $7_1 = 0;
     while (1) {
      if (($1_1 | 0) == ($7_1 | 0)) {
       break label$3
      }
      if (($7_1 | 0) == 64) {
       break label$2
      }
      $8_1 = $7_1 + $9_1 | 0;
      $10_1 = $8_1;
      $12_1 = HEAPU8[$8_1 | 0];
      $8_1 = HEAPU8[$0_1 + $7_1 | 0];
      HEAP8[$10_1 | 0] = $12_1 ^ $8_1;
      $10_1 = ($6_1 + 1072 | 0) + $7_1 | 0;
      HEAP8[$10_1 | 0] = $8_1 ^ HEAPU8[$10_1 | 0];
      $7_1 = $7_1 + 1 | 0;
      continue;
     };
    }
    $0_1 = $6_1 + 640 | 0;
    $415($0_1, $9_1);
    $415($11_1, $6_1 + 1072 | 0);
    $91($6_1 + 8 | 0, $0_1, 288);
    HEAP32[$6_1 + 304 >> 2] = 32;
    HEAP32[$6_1 + 308 >> 2] = 0;
    HEAP32[$6_1 + 300 >> 2] = $5_1;
    HEAP32[$6_1 + 296 >> 2] = $4_1;
    $9_1 = $6_1 + 424 | 0;
    $11_1 = $6_1 + 120 | 0;
    $8_1 = $6_1 + 536 | 0;
    $10_1 = $6_1 + 232 | 0;
    $12_1 = $6_1 + 752 | 0;
    label$7 : while (1) {
     $267($6_1, $6_1 + 296 | 0);
     $7_1 = HEAP32[$6_1 >> 2];
     if (!$7_1) {
      break label$1
     }
     $4_1 = HEAP32[$6_1 + 4 >> 2];
     $1_1 = HEAP32[$6_1 + 308 >> 2] + 1 | 0;
     HEAP32[$6_1 + 308 >> 2] = $1_1;
     $0_1 = 0;
     while (1) if (($0_1 | 0) == ($4_1 | 0)) {
      $0_1 = $6_1 + 312 | 0;
      $193($0_1, $6_1 + 8 | 0);
      $179($8_1, $10_1);
      $193($9_1, $11_1);
      $414($0_1, $2_1, $3_1);
      HEAP32[$6_1 + 604 >> 2] = $1_1 << 8 & 16711680 | $1_1 << 24 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
      $414($0_1, $6_1 + 604 | 0, 4);
      $1_1 = $6_1 + 640 | 0;
      $91($1_1, $0_1, 288);
      $0_1 = $6_1 + 928 | 0;
      $193($0_1, $12_1);
      $5_1 = $6_1 + 1072 | 0;
      $91($5_1, $1_1, 112);
      $1_1 = $6_1 + 1040 | 0;
      $56($1_1, $5_1);
      $416($0_1, $1_1);
      $91($5_1, $0_1, 112);
      $0_1 = $4_1 >>> 0 < 32 ? $4_1 : 32;
      $1_1 = $6_1 + 608 | 0;
      $56($1_1, $5_1);
      while (1) {
       if (!$0_1) {
        continue label$7
       }
       HEAP8[$7_1 | 0] = HEAPU8[$7_1 | 0] ^ HEAPU8[$1_1 | 0];
       $7_1 = $7_1 + 1 | 0;
       $0_1 = $0_1 - 1 | 0;
       $1_1 = $1_1 + 1 | 0;
       continue;
      };
     } else {
      HEAP8[$0_1 + $7_1 | 0] = 0;
      $0_1 = $0_1 + 1 | 0;
      continue;
     };
    };
   }
   abort();
  }
  global$0 = $6_1 + 1184 | 0;
 }
 
 function $39($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0;
  $5_1 = global$0 - 400 | 0;
  global$0 = $5_1;
  $288($5_1 + 24 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $2_1;
  $1_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $1_1;
  $288($5_1 + 16 | 0, $3_1, $4_1);
  $4_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $4_1;
  $9_1 = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$5_1 + 56 >> 2] = $9_1;
  $3_1 = 1;
  $7_1 = ($2_1 | 0) != 32;
  if (!$7_1) {
   $3_1 = HEAPU8[$1_1 | 0];
   $42($5_1 + 256 | 0, $1_1 + 1 | 0, 31);
  }
  $200($5_1 + 328 | 0, $9_1, $4_1);
  $2_1 = $5_1 + 279 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $1_1 = $5_1 + 119 | 0;
  $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP8[$1_1 | 0] = $2_1;
  HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $4_1;
  HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
  $1_1 = $5_1 + 272 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $5_1 + 112 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $5_1 + 264 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $5_1 + 104 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $5_1 + 337 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $5_1 + 72 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $5_1 + 345 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $5_1 + 80 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $5_1 + 353 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $5_1 + 88 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = HEAPU8[$5_1 + 260 | 0] | HEAPU8[$5_1 + 261 | 0] << 8 | (HEAPU8[$5_1 + 262 | 0] << 16 | HEAPU8[$5_1 + 263 | 0] << 24);
  HEAP32[$5_1 + 96 >> 2] = HEAPU8[$5_1 + 256 | 0] | HEAPU8[$5_1 + 257 | 0] << 8 | (HEAPU8[$5_1 + 258 | 0] << 16 | HEAPU8[$5_1 + 259 | 0] << 24);
  HEAP32[$5_1 + 100 >> 2] = $1_1;
  $1_1 = HEAPU8[$5_1 + 333 | 0] | HEAPU8[$5_1 + 334 | 0] << 8 | (HEAPU8[$5_1 + 335 | 0] << 16 | HEAPU8[$5_1 + 336 | 0] << 24);
  HEAP32[$5_1 + 64 >> 2] = HEAPU8[$5_1 + 329 | 0] | HEAPU8[$5_1 + 330 | 0] << 8 | (HEAPU8[$5_1 + 331 | 0] << 16 | HEAPU8[$5_1 + 332 | 0] << 24);
  HEAP32[$5_1 + 68 >> 2] = $1_1;
  label$2 : {
   if (HEAP8[$5_1 + 328 | 0] & 1 | $7_1) {
    break label$2
   }
   $4_1 = $5_1 + 104 | 0;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $5_1 + 137 | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP8[$1_1 | 0] = $4_1;
   HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $2_1;
   HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
   $4_1 = $5_1 + 112 | 0;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $5_1 + 145 | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP8[$1_1 | 0] = $4_1;
   HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $2_1;
   HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
   $2_1 = $5_1 + 119 | 0;
   $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
   $1_1 = $5_1 + 152 | 0;
   $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
   HEAP8[$1_1 | 0] = $2_1;
   HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
   HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
   HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
   HEAP8[$1_1 + 4 | 0] = $4_1;
   HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
   HEAP8[$5_1 + 128 | 0] = $3_1;
   $1_1 = HEAP32[$5_1 + 100 >> 2];
   $2_1 = HEAP32[$5_1 + 96 >> 2];
   HEAP8[$5_1 + 129 | 0] = $2_1;
   HEAP8[$5_1 + 130 | 0] = $2_1 >>> 8;
   HEAP8[$5_1 + 131 | 0] = $2_1 >>> 16;
   HEAP8[$5_1 + 132 | 0] = $2_1 >>> 24;
   HEAP8[$5_1 + 133 | 0] = $1_1;
   HEAP8[$5_1 + 134 | 0] = $1_1 >>> 8;
   HEAP8[$5_1 + 135 | 0] = $1_1 >>> 16;
   HEAP8[$5_1 + 136 | 0] = $1_1 >>> 24;
   $2_1 = $5_1 + 88 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 184 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $2_1 = $5_1 + 80 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 176 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $2_1 = $5_1 + 72 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 168 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $1_1 = HEAP32[$5_1 + 68 >> 2];
   HEAP32[$5_1 + 160 >> 2] = HEAP32[$5_1 + 64 >> 2];
   HEAP32[$5_1 + 164 >> 2] = $1_1;
   HEAP32[$5_1 + 36 >> 2] = 0;
   HEAP32[$5_1 + 40 >> 2] = 0;
   HEAP32[$5_1 + 32 >> 2] = HEAP32[262259];
   $262();
   $8_1 = $5_1 + 328 | 0;
   $147($8_1, 0, 65);
   $19_1 = $5_1 + 128 | 0;
   $22_1 = $5_1 + 160 | 0;
   $3_1 = HEAP32[304599];
   $11_1 = global$0 - 80 | 0;
   global$0 = $11_1;
   $2_1 = HEAP32[305238];
   label$3 : {
    if (!HEAP32[$2_1 + 8 >> 2]) {
     FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218400, HEAP32[$2_1 + 180 >> 2]);
     $3_1 = 0;
     break label$3;
    }
    if (!$19_1) {
     FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218376, HEAP32[$2_1 + 180 >> 2]);
     $3_1 = 0;
     break label$3;
    }
    if (!$8_1) {
     FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218471, HEAP32[$2_1 + 180 >> 2]);
     $3_1 = 0;
     break label$3;
    }
    if (!$22_1) {
     FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218489, HEAP32[$2_1 + 180 >> 2]);
     $3_1 = 0;
     break label$3;
    }
    $6_1 = global$0 - 464 | 0;
    global$0 = $6_1;
    $13_1 = $11_1 + 48 | 0;
    $1_1 = $13_1 + 24 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $13_1 + 16 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $13_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$13_1 >> 2] = 0;
    HEAP32[$13_1 + 4 >> 2] = 0;
    $1_1 = $11_1 + 16 | 0;
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $1_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $4_1 = $1_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $12_1 = $11_1 + 12 | 0;
    if ($12_1) {
     HEAP32[$12_1 >> 2] = 0
    }
    $4_1 = $6_1 + 96 | 0;
    $23_1 = $309($4_1, $22_1);
    $228($4_1, 1218536, !$23_1);
    $79($6_1 + 32 | 0, $19_1, 0);
    $30_1 = $2_1 + 8 | 0;
    $31_1 = $3_1 ? $3_1 : 72;
    $32_1 = $6_1 + 208 | 0;
    $24_1 = $6_1 + 160 | 0;
    $25_1 = $6_1 + 152 | 0;
    while (1) {
     label$8 : {
      label$11 : {
       if (FUNCTION_TABLE[$31_1 | 0]($6_1, $19_1, $22_1, 0, 0, $26_1) | 0) {
        if (!$309($6_1 - -64 | 0, $6_1)) {
         break label$11
        }
        HEAP32[$6_1 + 132 >> 2] = 0;
        $3_1 = $6_1 + 256 | 0;
        $136($30_1, $3_1, $6_1 - -64 | 0);
        $2_1 = $6_1 + 168 | 0;
        $154($2_1, $3_1);
        $141($2_1);
        $141($32_1);
        $3_1 = $6_1 + 384 | 0;
        $81($3_1, $2_1);
        $79($13_1, $3_1, $6_1 + 132 | 0);
        if ($12_1) {
         HEAP32[$12_1 >> 2] = HEAP32[$6_1 + 208 >> 2] & 1 | HEAP32[$6_1 + 132 >> 2] << 1
        }
        $2_1 = $6_1 + 136 | 0;
        $28($2_1, $13_1, $6_1 + 96 | 0);
        $169($2_1, $2_1, $6_1 + 32 | 0);
        $3_1 = $6_1 + 424 | 0;
        $224($3_1, $6_1 - -64 | 0);
        $10($3_1, 1219120);
        $243($1_1, $3_1);
        $28($1_1, $1_1, $2_1);
        HEAP32[$24_1 >> 2] = 0;
        HEAP32[$24_1 + 4 >> 2] = 0;
        HEAP32[$25_1 >> 2] = 0;
        HEAP32[$25_1 + 4 >> 2] = 0;
        $2_1 = $6_1 + 144 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        HEAP32[$6_1 + 136 >> 2] = 0;
        HEAP32[$6_1 + 140 >> 2] = 0;
        $368($6_1 + 256 | 0);
        $378($6_1 + 168 | 0);
        $2_1 = HEAP32[$1_1 + 12 >> 2];
        $4_1 = HEAP32[$1_1 + 8 >> 2];
        $14_1 = ($2_1 | 0) == 1566010995 & $4_1 >>> 0 > 1470386205 | $2_1 >>> 0 > 1566010995;
        $3_1 = HEAP32[$1_1 + 28 >> 2];
        $7_1 = $3_1 >>> 31 | 0;
        $10_1 = $7_1 ^ -1;
        $2_1 = ($10_1 & (HEAP32[$1_1 + 16 >> 2] != -1 | HEAP32[$1_1 + 20 >> 2] != -1) | (($3_1 | 0) == 2147483647 & HEAP32[$1_1 + 24 >> 2] != -1 | $3_1 >>> 0 < 2147483647) | $10_1 & (($2_1 | 0) == 1566010995 & $4_1 >>> 0 < 1470386205 | $2_1 >>> 0 < 1566010995)) ^ -1;
        $3_1 = HEAP32[$1_1 + 4 >> 2];
        $27_1 = $14_1 & $2_1 | $7_1 | $2_1 & (($3_1 | 0) == -538366138 & HEAPU32[$1_1 >> 2] > 1746608288 | $3_1 >>> 0 > 3756601158);
        $2_1 = $27_1;
        $9_1 = $2_1 ? -1 : 0;
        $15_1 = $9_1 ^ HEAP32[$1_1 >> 2];
        $4_1 = $9_1 & -801750718;
        $3_1 = $15_1 + $4_1 | 0;
        $16_1 = $2_1 ? -1 : 0;
        $2_1 = $16_1;
        $7_1 = $2_1 ^ HEAP32[$1_1 + 4 >> 2];
        $2_1 = $7_1 + ($2_1 & -1076732276) | 0;
        $2_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
        $17_1 = $3_1;
        $3_1 = $371($1_1);
        $20_1 = $3_1 ? 0 : -1;
        HEAP32[$1_1 >> 2] = $17_1 & $20_1;
        $21_1 = $3_1 ? 0 : -1;
        HEAP32[$1_1 + 4 >> 2] = $21_1 & $2_1;
        $28_1 = $9_1 ^ HEAP32[$1_1 + 8 >> 2];
        $18_1 = $9_1 & -1354194885;
        $10_1 = $28_1 + $18_1 | 0;
        $14_1 = $16_1 ^ HEAP32[$1_1 + 12 >> 2];
        $4_1 = $14_1 + ($16_1 & -1162945306) | 0;
        $4_1 = $10_1 >>> 0 < $18_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
        $18_1 = $10_1;
        $10_1 = ($2_1 | 0) == ($7_1 | 0) & $15_1 >>> 0 > $17_1 >>> 0 | $2_1 >>> 0 < $7_1 >>> 0;
        $7_1 = $18_1 + $10_1 | 0;
        $2_1 = $4_1;
        $33_1 = $7_1;
        HEAP32[$1_1 + 8 >> 2] = $20_1 & $7_1;
        $7_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
        HEAP32[$1_1 + 12 >> 2] = $21_1 & $7_1;
        $29_1 = $9_1 ^ HEAP32[$1_1 + 16 >> 2];
        $15_1 = $9_1 & -2;
        $10_1 = $29_1 + $15_1 | 0;
        $17_1 = $16_1 ^ HEAP32[$1_1 + 20 >> 2];
        $3_1 = $16_1 + $17_1 | 0;
        $3_1 = $10_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
        $15_1 = $10_1;
        $7_1 = ($4_1 | 0) == ($7_1 | 0) & $18_1 >>> 0 > $33_1 >>> 0 | $4_1 >>> 0 > $7_1 >>> 0;
        $2_1 = $7_1 + (($4_1 | 0) == ($14_1 | 0) & $18_1 >>> 0 < $28_1 >>> 0 | $4_1 >>> 0 < $14_1 >>> 0) | 0;
        $4_1 = $2_1 >>> 0 < $7_1 >>> 0;
        $14_1 = $2_1;
        $7_1 = $2_1 + $15_1 | 0;
        $2_1 = $3_1 + $4_1 | 0;
        $2_1 = $7_1 >>> 0 < $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
        $14_1 = $7_1;
        HEAP32[$1_1 + 16 >> 2] = $20_1 & $7_1;
        $4_1 = $2_1;
        HEAP32[$1_1 + 20 >> 2] = $21_1 & $2_1;
        $2_1 = $16_1 + ($16_1 ^ HEAP32[$1_1 + 28 >> 2]) | 0;
        $7_1 = $9_1 + ($9_1 ^ HEAP32[$1_1 + 24 >> 2]) | 0;
        $2_1 = $7_1 >>> 0 < $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
        $9_1 = ($3_1 | 0) == ($4_1 | 0) & $15_1 >>> 0 > $14_1 >>> 0 | $3_1 >>> 0 > $4_1 >>> 0;
        $3_1 = $9_1 + (($3_1 | 0) == ($17_1 | 0) & $15_1 >>> 0 < $29_1 >>> 0 | $3_1 >>> 0 < $17_1 >>> 0) | 0;
        $4_1 = $3_1 >>> 0 < $9_1 >>> 0;
        $9_1 = $3_1;
        $3_1 = $3_1 + $7_1 | 0;
        $2_1 = $2_1 + $4_1 | 0;
        HEAP32[$1_1 + 24 >> 2] = $3_1 & $20_1;
        HEAP32[$1_1 + 28 >> 2] = $21_1 & ($3_1 >>> 0 < $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1);
        if ($12_1) {
         HEAP32[$12_1 >> 2] = $27_1 ^ HEAP32[$12_1 >> 2]
        }
        if ($371($13_1) | $371($1_1)) {
         break label$11
        }
        $34_1 = 1;
       }
       $2_1 = $6_1 + 24 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 16 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 40 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 48 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 56 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 72 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 80 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 88 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 104 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 112 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $6_1 + 120 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       HEAP32[$6_1 + 8 >> 2] = 0;
       HEAP32[$6_1 + 12 >> 2] = 0;
       HEAP32[$6_1 >> 2] = 0;
       HEAP32[$6_1 + 4 >> 2] = 0;
       HEAP32[$6_1 + 32 >> 2] = 0;
       HEAP32[$6_1 + 36 >> 2] = 0;
       HEAP32[$6_1 + 64 >> 2] = 0;
       HEAP32[$6_1 + 68 >> 2] = 0;
       HEAP32[$6_1 + 96 >> 2] = 0;
       HEAP32[$6_1 + 100 >> 2] = 0;
       $3_1 = $23_1 & $34_1;
       $2_1 = !$3_1;
       $228($13_1, 1218504, $2_1);
       $228($1_1, 1218504, $2_1);
       if ($12_1) {
        HEAP32[$6_1 + 256 >> 2] = $2_1;
        HEAP32[$12_1 >> 2] = HEAP32[$12_1 >> 2] & HEAP32[$6_1 + 256 >> 2] - 1;
       }
       global$0 = $6_1 + 464 | 0;
       break label$8;
      }
      $26_1 = $26_1 + 1 | 0;
      continue;
     }
     break;
    };
    $1_1 = HEAP32[$11_1 + 52 >> 2];
    $2_1 = HEAP32[$11_1 + 48 >> 2];
    HEAP8[$8_1 | 0] = $2_1;
    HEAP8[$8_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$8_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$8_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$8_1 + 4 | 0] = $1_1;
    HEAP8[$8_1 + 5 | 0] = $1_1 >>> 8;
    HEAP8[$8_1 + 6 | 0] = $1_1 >>> 16;
    HEAP8[$8_1 + 7 | 0] = $1_1 >>> 24;
    $4_1 = $11_1 + 56 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 8 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    $4_1 = $11_1 - -64 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 16 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    $4_1 = $11_1 + 72 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 24 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    $1_1 = HEAP32[$11_1 + 20 >> 2];
    $2_1 = HEAP32[$11_1 + 16 >> 2];
    HEAP8[$8_1 + 32 | 0] = $2_1;
    HEAP8[$8_1 + 33 | 0] = $2_1 >>> 8;
    HEAP8[$8_1 + 34 | 0] = $2_1 >>> 16;
    HEAP8[$8_1 + 35 | 0] = $2_1 >>> 24;
    HEAP8[$8_1 + 36 | 0] = $1_1;
    HEAP8[$8_1 + 37 | 0] = $1_1 >>> 8;
    HEAP8[$8_1 + 38 | 0] = $1_1 >>> 16;
    HEAP8[$8_1 + 39 | 0] = $1_1 >>> 24;
    $4_1 = $11_1 + 24 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 40 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    $4_1 = $11_1 + 32 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 48 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    $4_1 = $11_1 + 40 | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = $8_1 + 56 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$1_1 | 0] = $4_1;
    HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$1_1 + 4 | 0] = $2_1;
    HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
    HEAP8[$8_1 + 64 | 0] = HEAP32[$11_1 + 12 >> 2];
   }
   global$0 = $11_1 + 80 | 0;
   if (($3_1 | 0) != 1) {
    break label$2
   }
   $1_1 = $5_1 + 256 | 0;
   $4_1 = $5_1 + 328 | 0;
   $91($1_1, $4_1, 65);
   $147($4_1, 0, 64);
   HEAP32[$5_1 + 396 >> 2] = 0;
   $3_1 = HEAP32[304883];
   $9_1 = $5_1 + 396 | 0;
   $2_1 = global$0 + -64 | 0;
   global$0 = $2_1;
   label$16 : {
    if (!$4_1) {
     FUNCTION_TABLE[HEAP32[$3_1 + 176 >> 2]](1218296, HEAP32[$3_1 + 180 >> 2]);
     $1_1 = 0;
     break label$16;
    }
    if (!$1_1) {
     FUNCTION_TABLE[HEAP32[$3_1 + 176 >> 2]](1218268, HEAP32[$3_1 + 180 >> 2]);
     $1_1 = 0;
     break label$16;
    }
    if (!$9_1) {
     FUNCTION_TABLE[HEAP32[$3_1 + 176 >> 2]](1218593, HEAP32[$3_1 + 180 >> 2]);
     $1_1 = 0;
     break label$16;
    }
    $3_1 = $1_1 + 24 | 0;
    $10_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $7_1 = $2_1 + 56 | 0;
    HEAP32[$7_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$7_1 + 4 >> 2] = $10_1;
    $3_1 = $1_1 + 16 | 0;
    $10_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $7_1 = $2_1 + 48 | 0;
    HEAP32[$7_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$7_1 + 4 >> 2] = $10_1;
    $3_1 = $1_1 + 8 | 0;
    $10_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $7_1 = $2_1 + 40 | 0;
    HEAP32[$7_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$7_1 + 4 >> 2] = $10_1;
    $3_1 = $1_1 + 56 | 0;
    $7_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    $10_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $3_1 = $1_1 + 48 | 0;
    $6_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    $8_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $3_1 = $1_1 + 40 | 0;
    $11_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    $3_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $12_1 = HEAPU8[$1_1 + 32 | 0] | HEAPU8[$1_1 + 33 | 0] << 8 | (HEAPU8[$1_1 + 34 | 0] << 16 | HEAPU8[$1_1 + 35 | 0] << 24);
    $13_1 = HEAPU8[$1_1 + 36 | 0] | HEAPU8[$1_1 + 37 | 0] << 8 | (HEAPU8[$1_1 + 38 | 0] << 16 | HEAPU8[$1_1 + 39 | 0] << 24);
    $16_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    $19_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    HEAP32[$9_1 >> 2] = HEAPU8[$1_1 + 64 | 0];
    $1_1 = $2_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = $11_1;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $1_1 = $2_1 + 16 | 0;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[$1_1 + 4 >> 2] = $8_1;
    $1_1 = $2_1 + 24 | 0;
    HEAP32[$1_1 >> 2] = $7_1;
    HEAP32[$1_1 + 4 >> 2] = $10_1;
    HEAP32[$2_1 + 32 >> 2] = $16_1;
    HEAP32[$2_1 + 36 >> 2] = $19_1;
    HEAP32[$2_1 >> 2] = $12_1;
    HEAP32[$2_1 + 4 >> 2] = $13_1;
    $90($4_1, $2_1 + 32 | 0);
    $90($4_1 + 32 | 0, $2_1);
    $1_1 = 1;
   }
   global$0 = $2_1 - -64 | 0;
   if (!$1_1) {
    break label$2
   }
   $2_1 = HEAP32[$5_1 + 396 >> 2];
   $3_1 = $5_1 + 192 | 0;
   $1_1 = $5_1 + 328 | 0;
   $91($3_1, $1_1, 64);
   $91($1_1, $3_1, 64);
   $337($5_1 + 32 | 0, $1_1, 64);
   $3_1 = HEAP32[$5_1 + 40 >> 2];
   if (($3_1 | 0) == HEAP32[$5_1 + 36 >> 2]) {
    $319($5_1 + 32 | 0, $3_1);
    $3_1 = HEAP32[$5_1 + 40 >> 2];
   }
   HEAP8[HEAP32[$5_1 + 32 >> 2] + $3_1 | 0] = $2_1;
   $1_1 = $5_1 + 40 | 0;
   HEAP32[$1_1 >> 2] = $3_1 + 1;
   $392($5_1 + 56 | 0);
   $392($5_1 + 48 | 0);
   HEAP32[$5_1 + 336 >> 2] = HEAP32[$1_1 >> 2];
   $1_1 = HEAP32[$5_1 + 36 >> 2];
   HEAP32[$5_1 + 328 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$5_1 + 332 >> 2] = $1_1;
   $271($5_1 + 8 | 0, $5_1 + 328 | 0);
   $1_1 = HEAP32[$5_1 + 12 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   global$0 = $5_1 + 400 | 0;
   return;
  }
  abort();
 }
 
 function $40($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $8_1 = global$0 - 256 | 0;
  global$0 = $8_1;
  $288($8_1 + 88 | 0, $1_1, $2_1);
  $11_1 = HEAP32[$8_1 + 92 >> 2];
  HEAP32[$8_1 + 100 >> 2] = $11_1;
  $12_1 = HEAP32[$8_1 + 88 >> 2];
  HEAP32[$8_1 + 96 >> 2] = $12_1;
  $288($8_1 + 80 | 0, $3_1, $4_1);
  $1_1 = HEAP32[$8_1 + 84 >> 2];
  HEAP32[$8_1 + 108 >> 2] = $1_1;
  $2_1 = HEAP32[$8_1 + 80 >> 2];
  HEAP32[$8_1 + 104 >> 2] = $2_1;
  label$1 : {
   if (!$6_1 | !$7_1 | (($6_1 & 33554431) != ($6_1 | 0) | ($5_1 & 255) >>> 0 > 31)) {
    break label$1
   }
   $3_1 = $6_1 << 7;
   __wasm_i64_mul($3_1, 0, 1 << $5_1, 0);
   $4_1 = i64toi32_i32$HIGH_BITS;
   __wasm_i64_mul($3_1, 0, $7_1, 0);
   if ($4_1 | i64toi32_i32$HIGH_BITS | (Math_imul($6_1, $7_1) >>> 0 > 1073741823 | ($5_1 & 255) >>> 0 >= $6_1 << 4 >>> 0)) {
    break label$1
   }
   $147($8_1 + 112 | 0, 0, 64);
   $3_1 = $6_1 << 7;
   $6_1 = Math_imul($3_1, $7_1);
   $201($8_1 + 72 | 0, $6_1, 1);
   HEAP32[$8_1 + 184 >> 2] = $6_1;
   HEAP32[$8_1 + 180 >> 2] = HEAP32[$8_1 + 76 >> 2];
   $9_1 = HEAP32[$8_1 + 72 >> 2];
   HEAP32[$8_1 + 176 >> 2] = $9_1;
   $38($12_1, $11_1, $2_1, $1_1, $9_1, $6_1);
   $10_1 = $3_1 << $5_1;
   $201($8_1 - -64 | 0, $10_1, 1);
   HEAP32[$8_1 + 200 >> 2] = $10_1;
   HEAP32[$8_1 + 196 >> 2] = HEAP32[$8_1 + 68 >> 2];
   $13_1 = HEAP32[$8_1 + 64 >> 2];
   HEAP32[$8_1 + 192 >> 2] = $13_1;
   $201($8_1 + 56 | 0, $3_1, 1);
   HEAP32[$8_1 + 216 >> 2] = $3_1;
   HEAP32[$8_1 + 212 >> 2] = HEAP32[$8_1 + 60 >> 2];
   $14_1 = HEAP32[$8_1 + 56 >> 2];
   HEAP32[$8_1 + 208 >> 2] = $14_1;
   if (!$3_1) {
    break label$1
   }
   HEAP32[$8_1 + 232 >> 2] = $3_1;
   HEAP32[$8_1 + 228 >> 2] = $6_1;
   HEAP32[$8_1 + 224 >> 2] = $9_1;
   $1_1 = 1 << $5_1;
   $15_1 = $1_1 - 1 | 0;
   label$2 : while (1) {
    label$3 : {
     $267($8_1 + 48 | 0, $8_1 + 224 | 0);
     $4_1 = HEAP32[$8_1 + 48 >> 2];
     if (!$4_1) {
      break label$3
     }
     $2_1 = HEAP32[$8_1 + 52 >> 2];
     if (!$2_1) {
      break label$1
     }
     HEAP32[$8_1 + 248 >> 2] = $2_1;
     HEAP32[$8_1 + 244 >> 2] = $10_1;
     HEAP32[$8_1 + 240 >> 2] = $13_1;
     while (1) {
      $267($8_1 + 40 | 0, $8_1 + 240 | 0);
      $5_1 = HEAP32[$8_1 + 40 >> 2];
      if (!$5_1) {
       $16_1 = $2_1 - 60 | 0;
       $17_1 = $2_1 + -64 | 0;
       $7_1 = $1_1;
       while (1) {
        if (!$7_1) {
         continue label$2
        }
        $304($8_1 + 32 | 0, $4_1, $2_1, $17_1, $16_1);
        if (HEAPU32[$8_1 + 36 >> 2] <= 3) {
         break label$1
        }
        $5_1 = HEAP32[$8_1 + 32 >> 2];
        $5_1 = $15_1 & (HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24));
        $304($8_1 + 24 | 0, $13_1, $10_1, Math_imul($2_1, $5_1), Math_imul($2_1, $5_1 + 1 | 0));
        $247($4_1, $2_1, HEAP32[$8_1 + 24 >> 2], HEAP32[$8_1 + 28 >> 2], $14_1, $3_1);
        $24($14_1, $3_1, $4_1, $2_1);
        $7_1 = $7_1 - 1 | 0;
        continue;
       };
      }
      $7_1 = HEAP32[$8_1 + 44 >> 2];
      if ($7_1 >>> 0 < $2_1 >>> 0) {
       break label$1
      }
      $24($91($5_1, $4_1, $2_1), $7_1, $4_1, $2_1);
      continue;
     };
    }
    break;
   };
   $1_1 = $8_1 + 112 | 0;
   $38($12_1, $11_1, $9_1, $6_1, $1_1, 64);
   $374($8_1 + 208 | 0);
   $374($8_1 + 192 | 0);
   $374($8_1 + 176 | 0);
   $201($8_1 + 16 | 0, 64, 0);
   $2_1 = HEAP32[$8_1 + 20 >> 2];
   $3_1 = $91(HEAP32[$8_1 + 16 >> 2], $1_1, 64);
   $392($8_1 + 104 | 0);
   $392($8_1 + 96 | 0);
   HEAP32[$8_1 + 120 >> 2] = 64;
   HEAP32[$8_1 + 116 >> 2] = $2_1;
   HEAP32[$8_1 + 112 >> 2] = $3_1;
   $271($8_1 + 8 | 0, $1_1);
   $1_1 = HEAP32[$8_1 + 12 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$8_1 + 8 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   global$0 = $8_1 + 256 | 0;
   return;
  }
  abort();
 }
 
 function $41($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $1_1 = HEAPU8[$0_1 | 0];
  HEAP8[$0_1 | 0] = $1_1 ? $1_1 : 1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = HEAPU8[$0_1 | 0];
   $10_1 = $7_1 + 24 | 0;
   $11_1 = $7_1 + 16 | 0;
   while (1) {
    if (!($1_1 & 1)) {
     $2_1 = $1_1 & 255;
     $4_1 = $1_1 | 1;
     $1_1 = HEAPU8[$0_1 | 0];
     $2_1 = ($2_1 | 0) == ($1_1 | 0);
     HEAP8[$0_1 | 0] = $2_1 ? $4_1 : $1_1;
     if (!$2_1) {
      continue
     }
     break label$1;
    }
    label$4 : {
     if (!($1_1 & 2)) {
      $2_1 = $3_1 + 1 | 0;
      if ($3_1 >>> 0 <= 9) {
       break label$4
      }
      $2_1 = $1_1 & 255;
      $8_1 = $1_1 | 2;
      $1_1 = HEAPU8[$0_1 | 0];
      HEAP8[$0_1 | 0] = ($1_1 | 0) == ($2_1 | 0) ? $8_1 : $1_1;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue
      }
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (HEAPU8[1219516] != 2) {
         break label$8
        }
        $6_1 = HEAP32[305148] + 1 | 0;
        HEAP32[305148] = $6_1;
        $9_1 = Math_imul($6_1, 3);
        label$9 : {
         label$10 : while (1) {
          $4_1 = HEAP32[305149];
          if (!$4_1) {
           $4_1 = $287()
          }
          $1_1 = HEAP32[$4_1 + 4 >> 2];
          if ($1_1 >>> 0 >= $9_1 >>> 0) {
           break label$9
          }
          $3_1 = $1_1 << 6;
          $1_1 = HEAP32[$4_1 >> 2];
          $2_1 = $1_1 + 24 | 0;
          while (1) {
           if ($3_1) {
            $5_1 = HEAP32[$1_1 + 24 >> 2];
            HEAP32[$1_1 + 24 >> 2] = $5_1 ? $5_1 : 1;
            if ($5_1) {
             $236($2_1)
            }
            $1_1 = $1_1 - -64 | 0;
            $3_1 = $3_1 + -64 | 0;
            $2_1 = $2_1 - -64 | 0;
            continue;
           }
           break;
          };
          if (HEAP32[305149] != ($4_1 | 0)) {
           $1_1 = HEAP32[$4_1 + 4 >> 2] << 6;
           $3_1 = HEAP32[$4_1 >> 2];
           while (1) {
            if (!$1_1) {
             continue label$10
            }
            $341($3_1 + 24 | 0);
            $1_1 = $1_1 + -64 | 0;
            $3_1 = $3_1 - -64 | 0;
            continue;
           };
          }
          break;
         };
         $6_1 = $73($6_1, $4_1);
         $1_1 = HEAP32[$4_1 >> 2];
         $9_1 = $1_1 + (HEAP32[$4_1 + 4 >> 2] << 6) | 0;
         label$17 : while (1) {
          if (($1_1 | 0) != ($9_1 | 0)) {
           $3_1 = $1_1 - -64 | 0;
           $13_1 = 0 - HEAP32[$6_1 + 8 >> 2] & 31;
           $14_1 = HEAP32[$6_1 >> 2];
           $8_1 = HEAP32[$6_1 + 4 >> 2];
           $1_1 = HEAP32[$1_1 + 28 >> 2];
           while (1) {
            if (!$1_1) {
             $1_1 = $3_1;
             continue label$17;
            }
            $5_1 = Math_imul(HEAP32[$1_1 >> 2], -1640531527) >>> $13_1 | 0;
            if ($5_1 >>> 0 >= $8_1 >>> 0) {
             break label$7
            }
            $2_1 = HEAP32[$1_1 + 4 >> 2];
            $5_1 = ($5_1 << 6) + $14_1 | 0;
            $12_1 = HEAP32[$5_1 + 32 >> 2];
            HEAP32[($12_1 ? $12_1 + 4 | 0 : $5_1 + 28 | 0) >> 2] = $1_1;
            HEAP32[$5_1 + 32 >> 2] = $1_1;
            HEAP32[$1_1 + 4 >> 2] = 0;
            $1_1 = $2_1;
            continue;
           };
          }
          break;
         };
         HEAP32[305149] = $6_1;
         $1_1 = HEAP32[$4_1 + 4 >> 2] << 6;
         $3_1 = HEAP32[$4_1 >> 2];
         while (1) {
          if (!$1_1) {
           break label$9
          }
          $341($3_1 + 24 | 0);
          $1_1 = $1_1 + -64 | 0;
          $3_1 = $3_1 - -64 | 0;
          continue;
         };
        }
        HEAP8[$10_1 | 0] = 0;
        HEAP32[304875] = 0;
        HEAP32[304876] = 0;
        HEAP32[304877] = 0;
        HEAP32[304878] = 0;
        HEAP32[$11_1 >> 2] = 0;
        HEAP32[$11_1 + 4 >> 2] = 0;
        $1_1 = HEAPU8[1219516];
        HEAP32[304879] = HEAP32[$10_1 >> 2];
        HEAP32[$7_1 + 8 >> 2] = 0;
        HEAP32[$7_1 + 12 >> 2] = 0;
        if (($1_1 | 0) == 2) {
         break label$8
        }
        HEAP32[305148] = HEAP32[305148] - 1;
       }
       $1_1 = $192($0_1);
       if (HEAPU8[$0_1 | 0] != 3) {
        break label$6
       }
       HEAP32[304875] = $0_1;
       HEAP32[304876] = 0;
       HEAP8[1219516] = 0;
       HEAP32[304878] = 0;
      }
      abort();
     }
     $341($1_1 + 24 | 0);
     $2_1 = 0;
    }
    $3_1 = $2_1;
    $1_1 = HEAPU8[$0_1 | 0];
    continue;
   };
  }
  global$0 = $7_1 + 32 | 0;
  return $0_1;
 }
 
 function $42($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1 - $1_1 >>> 0 < $2_1 >>> 0) {
     $4_1 = $1_1 + $2_1 | 0;
     $0_1 = $0_1 + $2_1 | 0;
     if ($2_1 >>> 0 <= 15) {
      break label$2
     }
     $5_1 = $0_1 & -4;
     $3_1 = ($1_1 + $2_1 | 0) - 1 | 0;
     $6_1 = $0_1 & 3;
     $7_1 = 0 - $6_1 | 0;
     while (1) {
      if ($0_1 >>> 0 > $5_1 >>> 0) {
       $0_1 = $0_1 - 1 | 0;
       HEAP8[$0_1 | 0] = HEAPU8[$3_1 | 0];
       $3_1 = $3_1 - 1 | 0;
       continue;
      }
      break;
     };
     $2_1 = $2_1 - $6_1 | 0;
     $0_1 = $2_1 & -4;
     label$6 : {
      $4_1 = $4_1 + $7_1 | 0;
      if ($4_1 & 3) {
       $7_1 = $5_1 - $0_1 | 0;
       $6_1 = 0 - $0_1 | 0;
       $0_1 = $4_1 & -4;
       $1_1 = $0_1 - 4 | 0;
       $3_1 = $4_1 << 3;
       $8_1 = $3_1 & 24;
       $9_1 = 0 - $3_1 & 24;
       $3_1 = HEAP32[$0_1 >> 2];
       $0_1 = $5_1;
       while (1) {
        if ($0_1 >>> 0 <= $7_1 >>> 0) {
         break label$6
        }
        $0_1 = $0_1 - 4 | 0;
        $10_1 = $3_1 << $9_1;
        $3_1 = HEAP32[$1_1 >> 2];
        HEAP32[$0_1 >> 2] = $10_1 | $3_1 >>> $8_1;
        $1_1 = $1_1 - 4 | 0;
        continue;
       };
      }
      $3_1 = $5_1 - $0_1 | 0;
      $6_1 = 0 - $0_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) - 4 | 0;
      $0_1 = $5_1;
      while (1) {
       if ($0_1 >>> 0 <= $3_1 >>> 0) {
        break label$6
       }
       $0_1 = $0_1 - 4 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       $1_1 = $1_1 - 4 | 0;
       continue;
      };
     }
     $2_1 = $2_1 & 3;
     $4_1 = $4_1 + $6_1 | 0;
     $0_1 = $5_1 + $6_1 | 0;
     break label$2;
    }
    if ($2_1 >>> 0 > 15) {
     $4_1 = 0 - $0_1 & 3;
     $5_1 = $4_1 + $0_1 | 0;
     $3_1 = $1_1;
     while (1) {
      if ($0_1 >>> 0 < $5_1 >>> 0) {
       HEAP8[$0_1 | 0] = HEAPU8[$3_1 | 0];
       $3_1 = $3_1 + 1 | 0;
       $0_1 = $0_1 + 1 | 0;
       continue;
      }
      break;
     };
     $2_1 = $2_1 - $4_1 | 0;
     $6_1 = $2_1 & -4;
     label$13 : {
      $4_1 = $1_1 + $4_1 | 0;
      if ($4_1 & 3) {
       $7_1 = $5_1 + $6_1 | 0;
       $0_1 = $4_1 & -4;
       $1_1 = $0_1 + 4 | 0;
       $3_1 = $4_1 << 3;
       $8_1 = $3_1 & 24;
       $9_1 = 0 - $3_1 & 24;
       $3_1 = HEAP32[$0_1 >> 2];
       $0_1 = $5_1;
       while (1) {
        if ($0_1 >>> 0 >= $7_1 >>> 0) {
         break label$13
        }
        $10_1 = $3_1 >>> $8_1 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        HEAP32[$0_1 >> 2] = $10_1 | $3_1 << $9_1;
        $1_1 = $1_1 + 4 | 0;
        $0_1 = $0_1 + 4 | 0;
        continue;
       };
      }
      $3_1 = $5_1 + $6_1 | 0;
      $1_1 = $4_1;
      $0_1 = $5_1;
      while (1) {
       if ($0_1 >>> 0 >= $3_1 >>> 0) {
        break label$13
       }
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       $1_1 = $1_1 + 4 | 0;
       $0_1 = $0_1 + 4 | 0;
       continue;
      };
     }
     $2_1 = $2_1 & 3;
     $1_1 = $4_1 + $6_1 | 0;
     $0_1 = $5_1 + $6_1 | 0;
    }
    $2_1 = $0_1 + $2_1 | 0;
    while (1) {
     if ($0_1 >>> 0 >= $2_1 >>> 0) {
      break label$1
     }
     HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     continue;
    };
   }
   $1_1 = $4_1 - 1 | 0;
   $2_1 = $0_1 - $2_1 | 0;
   while (1) {
    if ($0_1 >>> 0 <= $2_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 - 1 | 0;
    HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
    $1_1 = $1_1 - 1 | 0;
    continue;
   };
  }
 }
 
 function $43($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $14_1 = $3_1 + 56 | 0;
  $11_1 = HEAP32[$0_1 + 4 >> 2];
  $12_1 = HEAP32[$0_1 >> 2];
  $10_1 = HEAP32[$0_1 + 8 >> 2];
  label$1 : {
   label$2 : while (1) {
    if (!$2_1) {
     break label$1
    }
    label$3 : {
     if (HEAPU8[$10_1 | 0]) {
      if (FUNCTION_TABLE[HEAP32[$11_1 + 12 >> 2]]($12_1, 1062644, 4) | 0) {
       break label$3
      }
     }
     HEAP32[$3_1 + 56 >> 2] = 10;
     HEAP32[$3_1 + 48 >> 2] = 10;
     HEAP32[$3_1 + 52 >> 2] = 1;
     HEAP32[$3_1 + 44 >> 2] = $2_1;
     $0_1 = 0;
     HEAP32[$3_1 + 40 >> 2] = 0;
     HEAP32[$3_1 + 36 >> 2] = $2_1;
     HEAP32[$3_1 + 32 >> 2] = $1_1;
     $4_1 = $2_1;
     $5_1 = $4_1;
     while (1) {
      label$6 : {
       label$7 : {
        $15_1 = $3_1 + 8 | 0;
        label$8 : {
         label$9 : {
          label$10 : {
           if ($0_1 >>> 0 > $4_1 >>> 0 | $4_1 >>> 0 > $5_1 >>> 0) {
            break label$10
           }
           $7_1 = HEAP32[$3_1 + 32 >> 2] + $0_1 | 0;
           $9_1 = HEAPU8[(HEAP32[$3_1 + 52 >> 2] + $3_1 | 0) + 55 | 0];
           label$11 : {
            label$12 : {
             $5_1 = $4_1 - $0_1 | 0;
             if ($5_1 >>> 0 >= 8) {
              $0_1 = ($7_1 + 3 & -4) - $7_1 | 0;
              if (!$0_1) {
               $4_1 = 0;
               break label$12;
              }
              $4_1 = $0_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $0_1;
              $302($3_1 + 24 | 0, $7_1, $5_1, $4_1);
              $0_1 = 0;
              $8_1 = HEAP32[$3_1 + 28 >> 2];
              $6_1 = HEAP32[$3_1 + 24 >> 2];
              while (1) {
               if (($0_1 | 0) == ($8_1 | 0)) {
                break label$12
               }
               if (HEAPU8[$0_1 + $6_1 | 0] == ($9_1 | 0)) {
                break label$11
               }
               $0_1 = $0_1 + 1 | 0;
               continue;
              };
             }
             $0_1 = 0;
             while (1) {
              if (($0_1 | 0) == ($5_1 | 0)) {
               break label$10
              }
              if (HEAPU8[$0_1 + $7_1 | 0] == ($9_1 | 0)) {
               break label$11
              }
              $0_1 = $0_1 + 1 | 0;
              continue;
             };
            }
            $8_1 = $5_1 - 8 | 0;
            $0_1 = Math_imul($9_1, 16843009);
            while (1) {
             label$18 : {
              if ($4_1 >>> 0 > $8_1 >>> 0) {
               break label$18
              }
              $6_1 = $4_1 + $7_1 | 0;
              $13_1 = $0_1 ^ HEAP32[$6_1 >> 2];
              $6_1 = $0_1 ^ HEAP32[$6_1 + 4 >> 2];
              if ((($13_1 ^ -1) & $13_1 - 16843009 | ($6_1 ^ -1) & $6_1 - 16843009) & -2139062144) {
               break label$18
              }
              $4_1 = $4_1 + 8 | 0;
              continue;
             }
             break;
            };
            if ($4_1 >>> 0 > $5_1 >>> 0) {
             break label$7
            }
            $8_1 = $4_1 - $5_1 | 0;
            $5_1 = $4_1 + $7_1 | 0;
            $0_1 = 0;
            while (1) {
             if (($0_1 | 0) == ($8_1 | 0)) {
              break label$10
             }
             if (HEAPU8[$5_1 | 0] != ($9_1 | 0)) {
              $0_1 = $0_1 - 1 | 0;
              $5_1 = $5_1 + 1 | 0;
              continue;
             }
             break;
            };
            $0_1 = $4_1 - $0_1 | 0;
           }
           $0_1 = (HEAP32[$3_1 + 40 >> 2] + $0_1 | 0) + 1 | 0;
           HEAP32[$3_1 + 40 >> 2] = $0_1;
           $4_1 = HEAP32[$3_1 + 52 >> 2];
           if (HEAPU32[$3_1 + 36 >> 2] < $0_1 >>> 0 | $4_1 >>> 0 > $0_1 >>> 0) {
            break label$6
           }
           $5_1 = HEAP32[$3_1 + 32 >> 2];
           $310($3_1 + 16 | 0, 0, $4_1, $14_1, 4);
           $0_1 = $0_1 - $4_1 | 0;
           if ($361($0_1 + $5_1 | 0, $4_1, HEAP32[$3_1 + 16 >> 2], HEAP32[$3_1 + 20 >> 2])) {
            break label$9
           }
           $0_1 = HEAP32[$3_1 + 40 >> 2];
           break label$6;
          }
          HEAP8[$10_1 | 0] = 0;
          $0_1 = $2_1;
          break label$8;
         }
         HEAP8[$10_1 | 0] = 1;
         $0_1 = $0_1 + 1 | 0;
        }
        $264($15_1, $1_1, $2_1, $0_1);
        if (FUNCTION_TABLE[HEAP32[$11_1 + 12 >> 2]]($12_1, HEAP32[$3_1 + 8 >> 2], HEAP32[$3_1 + 12 >> 2]) | 0) {
         break label$3
        }
        $256($3_1, $1_1, $2_1, $0_1);
        $2_1 = HEAP32[$3_1 + 4 >> 2];
        $1_1 = HEAP32[$3_1 >> 2];
        continue label$2;
       }
       abort();
      }
      $4_1 = HEAP32[$3_1 + 44 >> 2];
      $5_1 = HEAP32[$3_1 + 36 >> 2];
      continue;
     };
    }
    break;
   };
   $16_1 = 1;
  }
  global$0 = $3_1 - -64 | 0;
  return $16_1 | 0;
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $3_1 = global$0 - 752 | 0;
  global$0 = $3_1;
  $288($3_1 + 32 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$3_1 + 44 >> 2] = $1_1;
  $14_1 = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$3_1 + 40 >> 2] = $14_1;
  label$1 : {
   if (($1_1 | 0) == 32) {
    $302($3_1 + 24 | 0, $14_1, 32, 32);
    if (HEAP32[$3_1 + 28 >> 2] != 32) {
     break label$1
    }
    $1_1 = HEAP32[$3_1 + 24 >> 2];
    $2_1 = $1_1 + 8 | 0;
    $6_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    $7_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $2_1 = $1_1 + 16 | 0;
    $8_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $5_1 = $1_1;
    $2_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    $1_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $5_1 = $5_1 + 24 | 0;
    $9_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $10_1 = $3_1 + 73 | 0;
    $5_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP8[$10_1 | 0] = $5_1;
    HEAP8[$10_1 + 1 | 0] = $5_1 >>> 8;
    HEAP8[$10_1 + 2 | 0] = $5_1 >>> 16;
    HEAP8[$10_1 + 3 | 0] = $5_1 >>> 24;
    HEAP8[$10_1 + 4 | 0] = $9_1;
    HEAP8[$10_1 + 5 | 0] = $9_1 >>> 8;
    HEAP8[$10_1 + 6 | 0] = $9_1 >>> 16;
    HEAP8[$10_1 + 7 | 0] = $9_1 >>> 24;
    $5_1 = $3_1 + 65 | 0;
    HEAP8[$5_1 | 0] = $8_1;
    HEAP8[$5_1 + 1 | 0] = $8_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $8_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $8_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $4_1;
    HEAP8[$5_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $4_1 >>> 24;
    $4_1 = $3_1 + 57 | 0;
    HEAP8[$4_1 | 0] = $6_1;
    HEAP8[$4_1 + 1 | 0] = $6_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $6_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $6_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $7_1;
    HEAP8[$4_1 + 5 | 0] = $7_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $7_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $7_1 >>> 24;
    HEAP8[$3_1 + 49 | 0] = $2_1;
    HEAP8[$3_1 + 50 | 0] = $2_1 >>> 8;
    HEAP8[$3_1 + 51 | 0] = $2_1 >>> 16;
    HEAP8[$3_1 + 52 | 0] = $2_1 >>> 24;
    HEAP8[$3_1 + 53 | 0] = $1_1;
    HEAP8[$3_1 + 54 | 0] = $1_1 >>> 8;
    HEAP8[$3_1 + 55 | 0] = $1_1 >>> 16;
    HEAP8[$3_1 + 56 | 0] = $1_1 >>> 24;
    HEAP8[$3_1 + 48 | 0] = 0;
    $12_1 = $3_1 + 504 | 0;
    $175($12_1);
    $17_1 = $3_1 + 48 | 1;
    $412($12_1, $17_1);
    $11_1 = $3_1 + 280 | 0;
    $91($11_1, $12_1, 216);
    $15_1 = $3_1 + 88 | 0;
    $326($15_1, $11_1);
    $7_1 = $3_1 + 111 | 0;
    $1_1 = $7_1;
    $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $6_1 = $3_1 + 742 | 0;
    $4_1 = $6_1;
    $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP16[$4_1 >> 1] = $1_1;
    HEAP16[$4_1 + 2 >> 1] = $1_1 >>> 16;
    HEAP16[$4_1 + 4 >> 1] = $2_1;
    HEAP16[$4_1 + 6 >> 1] = $2_1 >>> 16;
    $8_1 = $3_1 + 105 | 0;
    $4_1 = $8_1;
    $1_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
    $16_1 = $3_1 + 736 | 0;
    $2_1 = $16_1;
    HEAP32[$2_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $4_1 = $3_1 + 97 | 0;
    $2_1 = $4_1;
    $9_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $1_1 = $3_1 + 728 | 0;
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP32[$1_1 >> 2] = $2_1;
    HEAP32[$1_1 + 4 >> 2] = $9_1;
    $5_1 = HEAPU8[$3_1 + 93 | 0] | HEAPU8[$3_1 + 94 | 0] << 8 | (HEAPU8[$3_1 + 95 | 0] << 16 | HEAPU8[$3_1 + 96 | 0] << 24);
    $1_1 = HEAPU8[$3_1 + 89 | 0] | HEAPU8[$3_1 + 90 | 0] << 8 | (HEAPU8[$3_1 + 91 | 0] << 16 | HEAPU8[$3_1 + 92 | 0] << 24);
    HEAP32[$3_1 + 720 >> 2] = $1_1;
    HEAP32[$3_1 + 724 >> 2] = $5_1;
    $18_1 = HEAPU8[$3_1 + 119 | 0];
    $10_1 = HEAPU8[$3_1 + 88 | 0];
    $13_1 = HEAPU16[$6_1 + 4 >> 1] | HEAPU16[$6_1 + 6 >> 1] << 16;
    $6_1 = HEAPU16[$6_1 >> 1] | HEAPU16[$6_1 + 2 >> 1] << 16;
    HEAP8[$7_1 | 0] = $6_1;
    HEAP8[$7_1 + 1 | 0] = $6_1 >>> 8;
    HEAP8[$7_1 + 2 | 0] = $6_1 >>> 16;
    HEAP8[$7_1 + 3 | 0] = $6_1 >>> 24;
    HEAP8[$7_1 + 4 | 0] = $13_1;
    HEAP8[$7_1 + 5 | 0] = $13_1 >>> 8;
    HEAP8[$7_1 + 6 | 0] = $13_1 >>> 16;
    HEAP8[$7_1 + 7 | 0] = $13_1 >>> 24;
    $6_1 = HEAP32[$16_1 + 4 >> 2];
    $7_1 = HEAP32[$16_1 >> 2];
    HEAP8[$8_1 | 0] = $7_1;
    HEAP8[$8_1 + 1 | 0] = $7_1 >>> 8;
    HEAP8[$8_1 + 2 | 0] = $7_1 >>> 16;
    HEAP8[$8_1 + 3 | 0] = $7_1 >>> 24;
    HEAP8[$8_1 + 4 | 0] = $6_1;
    HEAP8[$8_1 + 5 | 0] = $6_1 >>> 8;
    HEAP8[$8_1 + 6 | 0] = $6_1 >>> 16;
    HEAP8[$8_1 + 7 | 0] = $6_1 >>> 24;
    HEAP8[$4_1 | 0] = $2_1;
    HEAP8[$4_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $9_1;
    HEAP8[$4_1 + 5 | 0] = $9_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $9_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $9_1 >>> 24;
    HEAP8[$3_1 + 89 | 0] = $1_1;
    HEAP8[$3_1 + 90 | 0] = $1_1 >>> 8;
    HEAP8[$3_1 + 91 | 0] = $1_1 >>> 16;
    HEAP8[$3_1 + 92 | 0] = $1_1 >>> 24;
    HEAP8[$3_1 + 93 | 0] = $5_1;
    HEAP8[$3_1 + 94 | 0] = $5_1 >>> 8;
    HEAP8[$3_1 + 95 | 0] = $5_1 >>> 16;
    HEAP8[$3_1 + 96 | 0] = $5_1 >>> 24;
    HEAP8[$3_1 + 119 | 0] = $18_1 & 63 | 64;
    HEAP8[$3_1 + 88 | 0] = $10_1 & 248;
    $413($11_1, $15_1);
    $1_1 = $3_1 + 248 | 0;
    $130($1_1, $11_1);
    $91($15_1, $11_1, 160);
    $52($11_1, $1_1, 32, $14_1, 32);
    $2_1 = $3_1 + 496 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 528 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $2_1 = $3_1 + 488 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 520 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $2_1 = $3_1 + 480 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 512 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $2_1 = $3_1 + 448 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 544 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $2_1 = $3_1 + 456 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 552 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $2_1 = $3_1 + 464 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $3_1 + 560 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$3_1 + 476 >> 2];
    HEAP32[$3_1 + 504 >> 2] = HEAP32[$3_1 + 472 >> 2];
    HEAP32[$3_1 + 508 >> 2] = $1_1;
    $1_1 = HEAP32[$3_1 + 444 >> 2];
    HEAP32[$3_1 + 536 >> 2] = HEAP32[$3_1 + 440 >> 2];
    HEAP32[$3_1 + 540 >> 2] = $1_1;
    $201($3_1 + 16 | 0, 64, 0);
    $2_1 = HEAP32[$3_1 + 20 >> 2];
    $1_1 = $91(HEAP32[$3_1 + 16 >> 2], $12_1, 64);
    $338($3_1 + 472 | 0);
    $338($17_1);
    $392($3_1 + 40 | 0);
    HEAP32[$3_1 + 288 >> 2] = 64;
    HEAP32[$3_1 + 284 >> 2] = $2_1;
    HEAP32[$3_1 + 280 >> 2] = $1_1;
    $271($3_1 + 8 | 0, $11_1);
    $1_1 = HEAP32[$3_1 + 12 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    global$0 = $3_1 + 752 | 0;
    return;
   }
   $0_1 = $3_1 + 288 | 0;
   HEAP32[$0_1 >> 2] = 9;
   HEAP32[$0_1 + 4 >> 2] = 32;
   HEAP32[$3_1 + 284 >> 2] = 1074675;
   HEAP32[$3_1 + 280 >> 2] = 2;
   $303($3_1 + 280 | 0);
   abort();
  }
  abort();
 }
 
 function $45($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 688 | 0;
  global$0 = $2_1;
  $6_1 = $2_1 + 8 | 0;
  $91($6_1, 1065432, 40);
  $4_1 = $2_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $2_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $2_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 56 >> 2] = 0;
  HEAP32[$2_1 + 60 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = 1;
  HEAP32[$2_1 + 52 >> 2] = 0;
  $4_1 = $2_1 + 368 | 0;
  $422($4_1, $1_1);
  $3_1 = $2_1 + 88 | 0;
  $15($3_1, 1065272, $4_1);
  $91($4_1, $3_1, 40);
  $11_1 = $2_1 + 48 | 0;
  $300($4_1, $11_1);
  $5_1 = $2_1 + 128 | 0;
  $15($5_1, $4_1, 1065352);
  $7_1 = $2_1 + 648 | 0;
  $15($7_1, 1065192, $3_1);
  $8_1 = $2_1 + 608 | 0;
  $167($8_1, $6_1, $7_1);
  $91($4_1, $3_1, 40);
  $300($4_1, 1065192);
  $9_1 = $2_1 + 168 | 0;
  $15($9_1, $8_1, $4_1);
  $77($4_1, $5_1, $9_1);
  $12_1 = HEAPU8[$2_1 + 368 | 0];
  $5_1 = $2_1 + 208 | 0;
  $91($5_1, $2_1 + 376 | 0, 40);
  $10_1 = $2_1 + 248 | 0;
  $15($10_1, $5_1, $1_1);
  $301($10_1, $398($334($10_1)));
  $189($5_1, $10_1, $398($12_1));
  $189($6_1, $3_1, $398($12_1));
  $167($4_1, $3_1, $11_1);
  $15($7_1, $6_1, $4_1);
  $15($8_1, $7_1, 1065392);
  $6_1 = $2_1 + 288 | 0;
  $167($6_1, $8_1, $9_1);
  $1_1 = $2_1 + 328 | 0;
  $422($1_1, $5_1);
  $3_1 = $2_1 + 528 | 0;
  $91($3_1, $5_1, 40);
  $300($3_1, $5_1);
  $15($4_1, $3_1, $9_1);
  $5_1 = $2_1 + 568 | 0;
  $15($5_1, $6_1, 1065472);
  $3_1 = $2_1 + 624 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 632 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 640 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 616 >> 2] = 0;
  HEAP32[$2_1 + 620 >> 2] = 0;
  HEAP32[$2_1 + 608 >> 2] = 1;
  HEAP32[$2_1 + 612 >> 2] = 0;
  $167($2_1 + 408 | 0, $8_1, $1_1);
  $3_1 = $2_1 + 680 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 672 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 664 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 656 >> 2] = 0;
  HEAP32[$2_1 + 660 >> 2] = 0;
  HEAP32[$2_1 + 648 >> 2] = 1;
  HEAP32[$2_1 + 652 >> 2] = 0;
  $300($7_1, $1_1);
  $91($2_1 + 448 | 0, $5_1, 40);
  $91($2_1 + 488 | 0, $7_1, 40);
  $281($0_1, $4_1);
  global$0 = $2_1 + 688 | 0;
 }
 
 function $46($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 1056 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $2_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $4_1;
  $50($5_1 + 56 | 0, $2_1, $1_1);
  if (HEAP32[$5_1 + 56 >> 2]) {
   abort()
  }
  $11_1 = $5_1 + 320 | 0;
  $91($11_1, $5_1 - -64 | 0, 256);
  $266($5_1 + 992 | 0, $4_1, $3_1);
  $1_1 = $5_1 + 672 | 0;
  $181($1_1, 1048869, 20);
  $277($1_1, 1105547, 10, 1217612, 0);
  $2_1 = $5_1 + 1016 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $5_1 + 600 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $2_1 = $5_1 + 1008 | 0;
  $7_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $5_1 + 592 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $2_1 = $5_1 + 1e3 | 0;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $7_1 = $5_1 + 584 | 0;
  HEAP32[$7_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $2_1 = HEAPU8[$5_1 + 996 | 0] | HEAPU8[$5_1 + 997 | 0] << 8 | (HEAPU8[$5_1 + 998 | 0] << 16 | HEAPU8[$5_1 + 999 | 0] << 24);
  HEAP32[$5_1 + 576 >> 2] = HEAPU8[$5_1 + 992 | 0] | HEAPU8[$5_1 + 993 | 0] << 8 | (HEAPU8[$5_1 + 994 | 0] << 16 | HEAPU8[$5_1 + 995 | 0] << 24);
  HEAP32[$5_1 + 580 >> 2] = $2_1;
  $2_1 = $5_1 + 576 | 0;
  $277($1_1, 1048899, 10, $2_1, 32);
  $6_1 = $5_1 + 536 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $8_1;
  $6_1 = $5_1 + 528 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $6_1 = $5_1 + 520 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $6_1 = HEAP32[$5_1 + 516 >> 2];
  HEAP32[$5_1 + 576 >> 2] = HEAP32[$5_1 + 512 >> 2];
  HEAP32[$5_1 + 580 >> 2] = $6_1;
  $277($1_1, 1048944, 10, $2_1, 32);
  $6_1 = $5_1 + 1048 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $8_1 = $5_1 + 1040 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $9_1 = $5_1 + 1032 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 1024 >> 2] = 0;
  HEAP32[$5_1 + 1028 >> 2] = 0;
  $290($1_1, 1048954, 9, $5_1 + 1024 | 0, 32);
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 576 >> 2] = 0;
  HEAP32[$5_1 + 580 >> 2] = 0;
  $290($1_1, 1048930, 14, $2_1, 32);
  $12_1 = HEAP32[$6_1 + 4 >> 2];
  $10_1 = $5_1 + 952 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $12_1;
  $10_1 = HEAP32[$8_1 + 4 >> 2];
  $6_1 = $5_1 + 944 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $10_1;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $6_1 = $5_1 + 936 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $6_1 = $5_1 + 968 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $5_1 + 976 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $5_1 + 984 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$5_1 + 1028 >> 2];
  HEAP32[$5_1 + 928 >> 2] = HEAP32[$5_1 + 1024 >> 2];
  HEAP32[$5_1 + 932 >> 2] = $3_1;
  $3_1 = HEAP32[$5_1 + 580 >> 2];
  HEAP32[$5_1 + 960 >> 2] = HEAP32[$5_1 + 576 >> 2];
  HEAP32[$5_1 + 964 >> 2] = $3_1;
  $336($1_1);
  $3_1 = $5_1 + 928 | 0;
  $70($1_1, $3_1);
  $95($2_1, $1_1);
  $201($5_1 + 16 | 0, 96, 0);
  $4_1 = HEAP32[$5_1 + 20 >> 2];
  $2_1 = $91(HEAP32[$5_1 + 16 >> 2], $2_1, 96);
  $383($1_1);
  $338($3_1);
  $383($11_1);
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 64 >> 2] = 96;
  HEAP32[$5_1 + 60 >> 2] = $4_1;
  HEAP32[$5_1 + 56 >> 2] = $2_1;
  $271($5_1 + 8 | 0, $5_1 + 56 | 0);
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 1056 | 0;
 }
 
 function $47($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 480 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAP32[$1_1 + 120 >> 2]) {
    $91($0_1, $2_1, 128);
    break label$1;
   }
   if (HEAP32[$2_1 + 120 >> 2]) {
    $91($0_1, $1_1, 128);
    break label$1;
   }
   HEAP32[$0_1 + 120 >> 2] = 0;
   $4_1 = $3_1 + 440 | 0;
   $10_1 = $2_1 + 80 | 0;
   $17($4_1, $10_1);
   $5_1 = $3_1 + 400 | 0;
   $11_1 = $1_1 + 80 | 0;
   $17($5_1, $11_1);
   $8($3_1 + 360 | 0, $1_1, $4_1);
   $8($3_1 + 320 | 0, $2_1, $5_1);
   $6_1 = $3_1 + 280 | 0;
   $8($6_1, $1_1 + 40 | 0, $4_1);
   $8($6_1, $6_1, $10_1);
   $4_1 = $3_1 + 240 | 0;
   $8($4_1, $2_1 + 40 | 0, $5_1);
   $8($4_1, $4_1, $11_1);
   $2_1 = $3_1;
   $5_1 = HEAP32[$2_1 + 320 >> 2];
   $6_1 = HEAP32[$2_1 + 360 >> 2];
   $4_1 = ($5_1 - $6_1 | 0) - 3908 | 0;
   $7_1 = (HEAP32[$2_1 + 324 >> 2] - (HEAP32[$2_1 + 364 >> 2] + ($5_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 200 >> 2] = $4_1;
   HEAP32[$2_1 + 204 >> 2] = $4_1 >>> 0 < 4294963388 ? $7_1 + 1 | 0 : $7_1;
   $5_1 = HEAP32[$2_1 + 328 >> 2];
   $6_1 = HEAP32[$2_1 + 368 >> 2];
   $4_1 = ($5_1 - $6_1 | 0) - 4 | 0;
   $8_1 = (HEAP32[$2_1 + 332 >> 2] - (HEAP32[$2_1 + 372 >> 2] + ($5_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 208 >> 2] = $4_1;
   HEAP32[$2_1 + 212 >> 2] = $4_1 >>> 0 < 4294967292 ? $8_1 + 1 | 0 : $8_1;
   $5_1 = HEAP32[$2_1 + 336 >> 2];
   $6_1 = HEAP32[$2_1 + 376 >> 2];
   $4_1 = ($5_1 - $6_1 | 0) - 4 | 0;
   $6_1 = (HEAP32[$2_1 + 340 >> 2] - (HEAP32[$2_1 + 380 >> 2] + ($5_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 216 >> 2] = $4_1;
   HEAP32[$2_1 + 220 >> 2] = $4_1 >>> 0 < 4294967292 ? $6_1 + 1 | 0 : $6_1;
   $5_1 = HEAP32[$2_1 + 344 >> 2];
   $6_1 = HEAP32[$2_1 + 384 >> 2];
   $4_1 = ($5_1 - $6_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 348 >> 2] - (HEAP32[$2_1 + 388 >> 2] + ($5_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 224 >> 2] = $4_1;
   HEAP32[$2_1 + 228 >> 2] = $4_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $4_1 = HEAP32[$2_1 + 352 >> 2];
   $6_1 = HEAP32[$2_1 + 392 >> 2];
   $5_1 = ($4_1 - $6_1 | 0) - 4 | 0;
   $4_1 = (HEAP32[$2_1 + 356 >> 2] - (HEAP32[$2_1 + 396 >> 2] + ($4_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 262143 | 0;
   HEAP32[$2_1 + 232 >> 2] = $5_1;
   HEAP32[$2_1 + 236 >> 2] = $5_1 >>> 0 < 4294967292 ? $4_1 + 1 | 0 : $4_1;
   $4_1 = HEAP32[$2_1 + 312 >> 2];
   $13_1 = HEAP32[$2_1 + 316 >> 2];
   $5_1 = HEAP32[$2_1 + 304 >> 2];
   $14_1 = HEAP32[$2_1 + 308 >> 2];
   $6_1 = HEAP32[$2_1 + 296 >> 2];
   $15_1 = HEAP32[$2_1 + 300 >> 2];
   $8_1 = HEAP32[$2_1 + 288 >> 2];
   $16_1 = HEAP32[$2_1 + 292 >> 2];
   $7_1 = HEAP32[$2_1 + 240 >> 2];
   $12_1 = HEAP32[$2_1 + 280 >> 2];
   $9_1 = ($7_1 - $12_1 | 0) - 3908 | 0;
   $7_1 = (HEAP32[$2_1 + 244 >> 2] - (HEAP32[$2_1 + 284 >> 2] + ($7_1 >>> 0 < $12_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$2_1 + 160 >> 2] = $9_1;
   HEAP32[$2_1 + 164 >> 2] = $9_1 >>> 0 < 4294963388 ? $7_1 + 1 | 0 : $7_1;
   $9_1 = HEAP32[$2_1 + 248 >> 2];
   $7_1 = ($9_1 - $8_1 | 0) - 4 | 0;
   $8_1 = (HEAP32[$2_1 + 252 >> 2] - (($8_1 >>> 0 > $9_1 >>> 0) + $16_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 168 >> 2] = $7_1;
   HEAP32[$2_1 + 172 >> 2] = $7_1 >>> 0 < 4294967292 ? $8_1 + 1 | 0 : $8_1;
   $7_1 = HEAP32[$2_1 + 256 >> 2];
   $8_1 = ($7_1 - $6_1 | 0) - 4 | 0;
   $6_1 = (HEAP32[$2_1 + 260 >> 2] - (($6_1 >>> 0 > $7_1 >>> 0) + $15_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 176 >> 2] = $8_1;
   HEAP32[$2_1 + 180 >> 2] = $8_1 >>> 0 < 4294967292 ? $6_1 + 1 | 0 : $6_1;
   $8_1 = HEAP32[$2_1 + 264 >> 2];
   $6_1 = ($8_1 - $5_1 | 0) - 4 | 0;
   $5_1 = (HEAP32[$2_1 + 268 >> 2] - (($5_1 >>> 0 > $8_1 >>> 0) + $14_1 | 0) | 0) + 4194303 | 0;
   HEAP32[$2_1 + 184 >> 2] = $6_1;
   HEAP32[$2_1 + 188 >> 2] = $6_1 >>> 0 < 4294967292 ? $5_1 + 1 | 0 : $5_1;
   $5_1 = HEAP32[$2_1 + 272 >> 2];
   $2_1 = ($5_1 - $4_1 | 0) - 4 | 0;
   $7_1 = (HEAP32[$3_1 + 276 >> 2] - (($4_1 >>> 0 > $5_1 >>> 0) + $13_1 | 0) | 0) + 262143 | 0;
   HEAP32[$3_1 + 192 >> 2] = $2_1;
   HEAP32[$3_1 + 196 >> 2] = $2_1 >>> 0 < 4294967292 ? $7_1 + 1 | 0 : $7_1;
   if ($162($3_1 + 200 | 0)) {
    if ($162($3_1 + 160 | 0)) {
     $230($0_1, $1_1, 0);
     break label$1;
    }
    $370($0_1);
    break label$1;
   }
   $5_1 = $3_1 + 120 | 0;
   $6_1 = $3_1 + 160 | 0;
   $17($5_1, $6_1);
   $4_1 = $3_1 + 80 | 0;
   $1_1 = $3_1 + 200 | 0;
   $17($4_1, $1_1);
   $2_1 = $3_1 + 40 | 0;
   $8($2_1, $1_1, $4_1);
   $8($1_1, $1_1, $10_1);
   $8($0_1 + 80 | 0, $11_1, $1_1);
   $8($3_1, $3_1 + 360 | 0, $4_1);
   $0_1 = $91($0_1, $3_1, 40);
   $280($0_1, 2);
   $269($0_1, $2_1);
   $250($0_1, $0_1, 3);
   $269($0_1, $5_1);
   $1_1 = $0_1 + 40 | 0;
   $250($1_1, $0_1, 5);
   $269($1_1, $3_1);
   $8($1_1, $1_1, $6_1);
   $8($2_1, $2_1, $3_1 + 280 | 0);
   $0_1 = HEAP32[$3_1 + 40 >> 2];
   $4_1 = 4194299 - (HEAP32[$3_1 + 44 >> 2] + ($0_1 >>> 0 > 4294963388) | 0) | 0;
   HEAP32[$3_1 + 40 >> 2] = -3908 - $0_1;
   HEAP32[$3_1 + 44 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 48 >> 2];
   $4_1 = 4194303 - (HEAP32[$3_1 + 52 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$3_1 + 48 >> 2] = -4 - $0_1;
   HEAP32[$3_1 + 52 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 56 >> 2];
   $4_1 = 4194303 - (HEAP32[$3_1 + 60 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$3_1 + 56 >> 2] = -4 - $0_1;
   HEAP32[$3_1 + 60 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 64 >> 2];
   $4_1 = 4194303 - (HEAP32[$3_1 + 68 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$3_1 + 64 >> 2] = -4 - $0_1;
   HEAP32[$3_1 + 68 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 72 >> 2];
   $4_1 = 262143 - (HEAP32[$3_1 + 76 >> 2] + ($0_1 >>> 0 > 4294967292) | 0) | 0;
   HEAP32[$3_1 + 72 >> 2] = -4 - $0_1;
   HEAP32[$3_1 + 76 >> 2] = $4_1;
   $269($1_1, $2_1);
  }
  global$0 = $3_1 + 480 | 0;
 }
 
 function $48($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$0_1 >> 2] - 1 | 0) {
    default:
     HEAP32[$2_1 + 100 >> 2] = 0;
     HEAP32[$2_1 + 96 >> 2] = 1217612;
     HEAP32[$2_1 + 84 >> 2] = 1;
     HEAP32[$2_1 + 88 >> 2] = 0;
     HEAP32[$2_1 + 80 >> 2] = 1073716;
     $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 80 | 0);
     break label$1;
    case 0:
     HEAP32[$2_1 + 100 >> 2] = 0;
     HEAP32[$2_1 + 96 >> 2] = 1217612;
     HEAP32[$2_1 + 84 >> 2] = 1;
     HEAP32[$2_1 + 88 >> 2] = 0;
     HEAP32[$2_1 + 80 >> 2] = 1073676;
     $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 80 | 0);
     break label$1;
    case 1:
     $3_1 = HEAP32[$0_1 + 8 >> 2];
     HEAP32[$2_1 + 40 >> 2] = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$2_1 + 44 >> 2] = $3_1;
     HEAP32[$2_1 + 24 >> 2] = HEAP32[$0_1 + 12 >> 2];
     HEAP32[$2_1 + 100 >> 2] = 2;
     HEAP32[$2_1 + 68 >> 2] = 6;
     HEAP32[$2_1 + 84 >> 2] = 3;
     HEAP32[$2_1 + 88 >> 2] = 0;
     HEAP32[$2_1 + 80 >> 2] = 1073616;
     HEAP32[$2_1 + 60 >> 2] = 2;
     $0_1 = HEAP32[$1_1 + 24 >> 2];
     $1_1 = HEAP32[$1_1 + 28 >> 2];
     HEAP32[$2_1 + 96 >> 2] = $2_1 + 56;
     HEAP32[$2_1 + 64 >> 2] = $2_1 + 24;
     HEAP32[$2_1 + 56 >> 2] = $2_1 + 40;
     $0_1 = $249($0_1, $1_1, $2_1 + 80 | 0);
     break label$1;
    case 2:
     HEAP32[$2_1 + 100 >> 2] = 0;
     HEAP32[$2_1 + 96 >> 2] = 1217612;
     HEAP32[$2_1 + 84 >> 2] = 1;
     HEAP32[$2_1 + 88 >> 2] = 0;
     HEAP32[$2_1 + 80 >> 2] = 1073580;
     $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 80 | 0);
     break label$1;
    case 3:
     $3_1 = HEAP32[$0_1 + 8 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $3_1;
     HEAP32[$2_1 + 20 >> 2] = HEAP32[$0_1 + 12 >> 2];
     $3_1 = $0_1 + 16 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 24 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 28 >> 2] = $4_1;
     HEAP32[$2_1 + 36 >> 2] = HEAP32[$0_1 + 24 >> 2];
     $3_1 = $0_1 + 28 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 40 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 44 >> 2] = $4_1;
     HEAP32[$2_1 + 52 >> 2] = HEAP32[$0_1 + 36 >> 2];
     HEAP32[$2_1 + 76 >> 2] = 6;
     HEAP32[$2_1 + 124 >> 2] = 6;
     HEAP32[$2_1 + 116 >> 2] = 2;
     HEAP32[$2_1 + 108 >> 2] = 6;
     HEAP32[$2_1 + 100 >> 2] = 2;
     HEAP32[$2_1 + 92 >> 2] = 6;
     HEAP32[$2_1 + 60 >> 2] = 7;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 56 >> 2] = 1073484;
     HEAP32[$2_1 + 84 >> 2] = 2;
     $0_1 = HEAP32[$1_1 + 24 >> 2];
     $1_1 = HEAP32[$1_1 + 28 >> 2];
     HEAP32[$2_1 + 72 >> 2] = $2_1 + 80;
     HEAP32[$2_1 + 120 >> 2] = $2_1 + 52;
     HEAP32[$2_1 + 112 >> 2] = $2_1 + 40;
     HEAP32[$2_1 + 104 >> 2] = $2_1 + 36;
     HEAP32[$2_1 + 96 >> 2] = $2_1 + 24;
     HEAP32[$2_1 + 88 >> 2] = $2_1 + 20;
     HEAP32[$2_1 + 80 >> 2] = $2_1 + 8;
     $0_1 = $249($0_1, $1_1, $2_1 + 56 | 0);
     break label$1;
    case 4:
     break label$2;
    };
   }
   HEAP32[$2_1 + 100 >> 2] = 0;
   HEAP32[$2_1 + 96 >> 2] = 1217612;
   HEAP32[$2_1 + 84 >> 2] = 1;
   HEAP32[$2_1 + 88 >> 2] = 0;
   HEAP32[$2_1 + 80 >> 2] = 1073396;
   $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 80 | 0);
  }
  global$0 = $2_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $49($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 848 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $6_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $6_1;
  $7_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $7_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $1_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $2_1;
  $114($5_1 + 56 | 0, $2_1, $1_1);
  label$1 : {
   label$2 : {
    if (HEAPU8[$5_1 + 56 | 0]) {
     break label$2
    }
    $91($5_1 + 128 | 0, $5_1 + 56 | 1, 64);
    $1_1 = $5_1 + 81 | 0;
    $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $2_1 = $5_1 + 448 | 0;
    HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $3_1;
    $1_1 = $5_1 + 73 | 0;
    $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $2_1 = $5_1 + 440 | 0;
    HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $3_1;
    $1_1 = $5_1 + 65 | 0;
    $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $2_1 = $5_1 + 432 | 0;
    HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $3_1;
    $1_1 = HEAPU8[$5_1 + 61 | 0] | HEAPU8[$5_1 + 62 | 0] << 8 | (HEAPU8[$5_1 + 63 | 0] << 16 | HEAPU8[$5_1 + 64 | 0] << 24);
    HEAP32[$5_1 + 424 >> 2] = HEAPU8[$5_1 + 57 | 0] | HEAPU8[$5_1 + 58 | 0] << 8 | (HEAPU8[$5_1 + 59 | 0] << 16 | HEAPU8[$5_1 + 60 | 0] << 24);
    HEAP32[$5_1 + 428 >> 2] = $1_1;
    $2_1 = $5_1 + 424 | 0;
    $4($5_1 + 688 | 0, $2_1);
    $159($2_1, $7_1, $6_1);
    $1_1 = $5_1 + 697 | 0;
    $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $3_1 = $5_1 + 400 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $1_1 = $5_1 + 705 | 0;
    $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $3_1 = $5_1 + 408 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $1_1 = $5_1 + 713 | 0;
    $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $3_1 = $5_1 + 416 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $1_1 = HEAPU8[$5_1 + 693 | 0] | HEAPU8[$5_1 + 694 | 0] << 8 | (HEAPU8[$5_1 + 695 | 0] << 16 | HEAPU8[$5_1 + 696 | 0] << 24);
    HEAP32[$5_1 + 392 >> 2] = HEAPU8[$5_1 + 689 | 0] | HEAPU8[$5_1 + 690 | 0] << 8 | (HEAPU8[$5_1 + 691 | 0] << 16 | HEAPU8[$5_1 + 692 | 0] << 24);
    HEAP32[$5_1 + 396 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 424 >> 2];
    $3_1 = HEAPU8[$5_1 + 688 | 0];
    $91($5_1 + 196 | 0, $2_1 | 4, 196);
    if (!($3_1 & 1)) {
     break label$2
    }
    if (!$1_1) {
     break label$1
    }
   }
   abort();
  }
  $2_1 = $5_1 + 416 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 648 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $2_1 = $5_1 + 408 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 640 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $2_1 = $5_1 + 400 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 632 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $1_1 = HEAP32[$5_1 + 396 >> 2];
  HEAP32[$5_1 + 624 >> 2] = HEAP32[$5_1 + 392 >> 2];
  HEAP32[$5_1 + 628 >> 2] = $1_1;
  $6_1 = $5_1 + 424 | 0;
  $91($6_1, $5_1 + 200 | 0, 192);
  $1_1 = $5_1 + 688 | 0;
  $62($1_1, $5_1 + 624 | 0, $6_1);
  $65($5_1 + 656 | 0, $1_1);
  $201($5_1 + 16 | 0, 32, 0);
  $7_1 = HEAP32[$5_1 + 20 >> 2];
  $3_1 = HEAP32[$5_1 + 660 >> 2];
  $2_1 = HEAP32[$5_1 + 16 >> 2];
  $1_1 = $2_1;
  $4_1 = HEAP32[$5_1 + 656 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $3_1;
  HEAP8[$1_1 + 5 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $3_1 >>> 24;
  $4_1 = $5_1 + 680 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $3_1;
  HEAP8[$1_1 + 5 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $3_1 >>> 24;
  $4_1 = $5_1 + 672 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $2_1 + 16 | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $3_1;
  HEAP8[$1_1 + 5 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $3_1 >>> 24;
  $4_1 = $5_1 + 664 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $3_1;
  HEAP8[$1_1 + 5 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $3_1 >>> 24;
  $391($5_1 + 128 | 0);
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 432 >> 2] = 32;
  HEAP32[$5_1 + 428 >> 2] = $7_1;
  HEAP32[$5_1 + 424 >> 2] = $2_1;
  $271($5_1 + 8 | 0, $6_1);
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 848 | 0;
 }
 
 function $50($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 1152 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) != 96) {
    HEAP8[$0_1 + 4 | 0] = 3;
    HEAP32[$0_1 >> 2] = 1;
    $1_1 = $0_1 + 20 | 0;
    HEAP32[$1_1 >> 2] = 36;
    HEAP32[$1_1 + 4 >> 2] = 96;
    HEAP32[$0_1 + 16 >> 2] = 1105487;
    HEAP32[$0_1 + 12 >> 2] = 7;
    HEAP32[$0_1 + 8 >> 2] = 1105480;
    break label$1;
   }
   $4_1 = $1_1 + 24 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 688 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 16 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 680 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 8 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $10_1 = $3_1 + 672 | 0;
   $5_1 = $10_1;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   HEAP32[$3_1 + 664 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP32[$3_1 + 668 >> 2] = $2_1;
   $11_1 = $3_1 + 664 | 0;
   $276($11_1);
   $4_1 = $1_1 + 40 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 48 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 48 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 56 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 56 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 - -64 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   HEAP8[$3_1 + 10 | 0] = HEAPU8[$3_1 + 666 | 0];
   HEAP16[$3_1 + 8 >> 1] = HEAPU16[$3_1 + 664 >> 1];
   HEAP16[$3_1 + 12 >> 1] = HEAPU16[$3_1 + 668 >> 1];
   HEAP8[$3_1 + 14 | 0] = HEAPU8[$3_1 + 670 | 0];
   $2_1 = HEAPU8[$1_1 + 36 | 0] | HEAPU8[$1_1 + 37 | 0] << 8 | (HEAPU8[$1_1 + 38 | 0] << 16 | HEAPU8[$1_1 + 39 | 0] << 24);
   HEAP32[$3_1 + 40 >> 2] = HEAPU8[$1_1 + 32 | 0] | HEAPU8[$1_1 + 33 | 0] << 8 | (HEAPU8[$1_1 + 34 | 0] << 16 | HEAPU8[$1_1 + 35 | 0] << 24);
   HEAP32[$3_1 + 44 >> 2] = $2_1;
   $6_1 = HEAPU8[$3_1 + 687 | 0] | HEAPU8[$3_1 + 688 | 0] << 8 | (HEAPU8[$3_1 + 689 | 0] << 16 | HEAPU8[$3_1 + 690 | 0] << 24);
   $7_1 = HEAPU8[$3_1 + 691 | 0] | HEAPU8[$3_1 + 692 | 0] << 8 | (HEAPU8[$3_1 + 693 | 0] << 16 | HEAPU8[$3_1 + 694 | 0] << 24);
   $8_1 = HEAPU8[$3_1 + 667 | 0];
   $4_1 = HEAPU8[$3_1 + 671 | 0] | HEAPU8[$3_1 + 672 | 0] << 8 | (HEAPU8[$3_1 + 673 | 0] << 16 | HEAPU8[$3_1 + 674 | 0] << 24);
   $5_1 = HEAPU8[$3_1 + 675 | 0] | HEAPU8[$3_1 + 676 | 0] << 8 | (HEAPU8[$3_1 + 677 | 0] << 16 | HEAPU8[$3_1 + 678 | 0] << 24);
   $2_1 = HEAPU8[$3_1 + 679 | 0] | HEAPU8[$3_1 + 680 | 0] << 8 | (HEAPU8[$3_1 + 681 | 0] << 16 | HEAPU8[$3_1 + 682 | 0] << 24);
   $9_1 = HEAPU8[$3_1 + 683 | 0] | HEAPU8[$3_1 + 684 | 0] << 8 | (HEAPU8[$3_1 + 685 | 0] << 16 | HEAPU8[$3_1 + 686 | 0] << 24);
   HEAP8[$3_1 + 39 | 0] = HEAPU8[$3_1 + 695 | 0] & 127;
   HEAP8[$3_1 + 23 | 0] = $2_1;
   HEAP8[$3_1 + 24 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 25 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 26 | 0] = $2_1 >>> 24;
   HEAP8[$3_1 + 27 | 0] = $9_1;
   HEAP8[$3_1 + 28 | 0] = $9_1 >>> 8;
   HEAP8[$3_1 + 29 | 0] = $9_1 >>> 16;
   HEAP8[$3_1 + 30 | 0] = $9_1 >>> 24;
   HEAP8[$3_1 + 15 | 0] = $4_1;
   HEAP8[$3_1 + 16 | 0] = $4_1 >>> 8;
   HEAP8[$3_1 + 17 | 0] = $4_1 >>> 16;
   HEAP8[$3_1 + 18 | 0] = $4_1 >>> 24;
   HEAP8[$3_1 + 19 | 0] = $5_1;
   HEAP8[$3_1 + 20 | 0] = $5_1 >>> 8;
   HEAP8[$3_1 + 21 | 0] = $5_1 >>> 16;
   HEAP8[$3_1 + 22 | 0] = $5_1 >>> 24;
   HEAP8[$3_1 + 11 | 0] = $8_1;
   HEAP8[$3_1 + 31 | 0] = $6_1;
   HEAP8[$3_1 + 32 | 0] = $6_1 >>> 8;
   HEAP8[$3_1 + 33 | 0] = $6_1 >>> 16;
   HEAP8[$3_1 + 34 | 0] = $6_1 >>> 24;
   HEAP8[$3_1 + 35 | 0] = $7_1;
   HEAP8[$3_1 + 36 | 0] = $7_1 >>> 8;
   HEAP8[$3_1 + 37 | 0] = $7_1 >>> 16;
   HEAP8[$3_1 + 38 | 0] = $7_1 >>> 24;
   $4_1 = $1_1 + 88 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 1144 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 80 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 1136 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $4_1 = $1_1 + 72 | 0;
   $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   $5_1 = $3_1 + 1128 | 0;
   HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $2_1 = HEAPU8[$1_1 + 68 | 0] | HEAPU8[$1_1 + 69 | 0] << 8 | (HEAPU8[$1_1 + 70 | 0] << 16 | HEAPU8[$1_1 + 71 | 0] << 24);
   HEAP32[$3_1 + 1120 >> 2] = HEAPU8[$1_1 + 64 | 0] | HEAPU8[$1_1 + 65 | 0] << 8 | (HEAPU8[$1_1 + 66 | 0] << 16 | HEAPU8[$1_1 + 67 | 0] << 24);
   HEAP32[$3_1 + 1124 >> 2] = $2_1;
   $32($11_1, $3_1 + 1120 | 0);
   if (HEAP32[$3_1 + 664 >> 2] == 1) {
    $1_1 = $3_1 + 676 | 0;
    $8_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $3_1 + 272 | 0;
    $4_1 = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 >> 2] = $4_1;
    HEAP32[$2_1 + 4 >> 2] = $8_1;
    $1_1 = $3_1 + 684 | 0;
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $3_1 + 280 | 0;
    $5_1 = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 >> 2] = $5_1;
    HEAP32[$2_1 + 4 >> 2] = $6_1;
    $7_1 = HEAP32[$3_1 + 672 >> 2];
    $2_1 = HEAP32[$3_1 + 668 >> 2];
    HEAP32[$3_1 + 264 >> 2] = $2_1;
    HEAP32[$3_1 + 268 >> 2] = $7_1;
    $1_1 = $0_1 + 20 | 0;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $1_1 = $0_1 + 12 | 0;
    HEAP32[$1_1 >> 2] = $4_1;
    HEAP32[$1_1 + 4 >> 2] = $8_1;
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $7_1;
    HEAP32[$0_1 >> 2] = 1;
    $391($3_1 + 8 | 0);
    break label$1;
   }
   $2_1 = $3_1 + 72 | 0;
   $91($2_1, $91($3_1 + 268 | 0, $91($3_1 + 468 | 0, $91($3_1 + 924 | 0, $10_1, 192), 192), 192), 192);
   $91($3_1 + 856 | 0, $3_1 + 8 | 0, 64);
   $1_1 = $3_1 + 664 | 0;
   $91($1_1, $2_1, 192);
   $91($0_1 + 8 | 0, $1_1, 256);
   HEAP32[$0_1 >> 2] = 0;
  }
  global$0 = $3_1 + 1152 | 0;
 }
 
 function $51($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 416 | 0;
  global$0 = $8_1;
  $288($8_1 + 32 | 0, $1_1, $2_1);
  $6_1 = HEAP32[$8_1 + 36 >> 2];
  HEAP32[$8_1 + 44 >> 2] = $6_1;
  $12_1 = HEAP32[$8_1 + 32 >> 2];
  HEAP32[$8_1 + 40 >> 2] = $12_1;
  $288($8_1 + 24 | 0, $3_1, $4_1);
  $4_1 = HEAP32[$8_1 + 28 >> 2];
  HEAP32[$8_1 + 52 >> 2] = $4_1;
  $7_1 = HEAP32[$8_1 + 24 >> 2];
  HEAP32[$8_1 + 48 >> 2] = $7_1;
  label$1 : {
   label$2 : {
    if ($5_1 >>> 0 > 3) {
     break label$2
    }
    $3_1 = 1;
    $2_1 = 1;
    $1_1 = 1;
    if (($6_1 | 0) == 32) {
     $2_1 = HEAPU8[$12_1 | 0];
     $42($8_1 + 184 | 0, $12_1 + 1 | 0, 31);
     $1_1 = 0;
    }
    label$4 : {
     if (!$4_1) {
      $12_1 = 3;
      break label$4;
     }
     $147($8_1 + 280 | 0, 0, 65);
     $12_1 = 3;
     if (($4_1 | 0) != 64) {
      break label$4
     }
     $4_1 = HEAP32[304883];
     $10_1 = global$0 - 80 | 0;
     global$0 = $10_1;
     HEAP32[$10_1 + 12 >> 2] = 0;
     $9_1 = $8_1 + 280 | 0;
     label$6 : {
      if (!$9_1) {
       FUNCTION_TABLE[HEAP32[$4_1 + 176 >> 2]](1218268, HEAP32[$4_1 + 180 >> 2]);
       break label$6;
      }
      if (!$7_1) {
       FUNCTION_TABLE[HEAP32[$4_1 + 176 >> 2]](1218280, HEAP32[$4_1 + 180 >> 2]);
       break label$6;
      }
      if ($5_1 >>> 0 >= 4) {
       FUNCTION_TABLE[HEAP32[$4_1 + 176 >> 2]](1218568, HEAP32[$4_1 + 180 >> 2]);
       break label$6;
      }
      $6_1 = $10_1 + 12 | 0;
      $79($10_1 + 48 | 0, $7_1, $6_1);
      $4_1 = HEAP32[$10_1 + 12 >> 2];
      $79($10_1 + 16 | 0, $7_1 + 32 | 0, $6_1);
      if (!(HEAP32[$10_1 + 12 >> 2] | $4_1)) {
       $6_1 = HEAP32[$10_1 + 52 >> 2];
       $4_1 = HEAP32[$10_1 + 48 >> 2];
       HEAP8[$9_1 | 0] = $4_1;
       HEAP8[$9_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$9_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$9_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$9_1 + 4 | 0] = $6_1;
       HEAP8[$9_1 + 5 | 0] = $6_1 >>> 8;
       HEAP8[$9_1 + 6 | 0] = $6_1 >>> 16;
       HEAP8[$9_1 + 7 | 0] = $6_1 >>> 24;
       $6_1 = HEAP32[$10_1 + 20 >> 2];
       $4_1 = HEAP32[$10_1 + 16 >> 2];
       HEAP8[$9_1 + 32 | 0] = $4_1;
       HEAP8[$9_1 + 33 | 0] = $4_1 >>> 8;
       HEAP8[$9_1 + 34 | 0] = $4_1 >>> 16;
       HEAP8[$9_1 + 35 | 0] = $4_1 >>> 24;
       HEAP8[$9_1 + 36 | 0] = $6_1;
       HEAP8[$9_1 + 37 | 0] = $6_1 >>> 8;
       HEAP8[$9_1 + 38 | 0] = $6_1 >>> 16;
       HEAP8[$9_1 + 39 | 0] = $6_1 >>> 24;
       HEAP8[$9_1 + 64 | 0] = $5_1;
       $4_1 = $10_1 + 72 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 24 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $4_1 = $10_1 - -64 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 16 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $4_1 = $10_1 + 56 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 8 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $4_1 = $10_1 + 24 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 40 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $4_1 = $10_1 + 32 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 48 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $4_1 = $10_1 + 40 | 0;
       $5_1 = HEAP32[$4_1 + 4 >> 2];
       $6_1 = $9_1 + 56 | 0;
       $4_1 = HEAP32[$4_1 >> 2];
       HEAP8[$6_1 | 0] = $4_1;
       HEAP8[$6_1 + 1 | 0] = $4_1 >>> 8;
       HEAP8[$6_1 + 2 | 0] = $4_1 >>> 16;
       HEAP8[$6_1 + 3 | 0] = $4_1 >>> 24;
       HEAP8[$6_1 + 4 | 0] = $5_1;
       HEAP8[$6_1 + 5 | 0] = $5_1 >>> 8;
       HEAP8[$6_1 + 6 | 0] = $5_1 >>> 16;
       HEAP8[$6_1 + 7 | 0] = $5_1 >>> 24;
       $14_1 = 1;
       break label$6;
      }
      $147($9_1, 0, 65);
     }
     global$0 = $10_1 + 80 | 0;
     if (!$14_1) {
      break label$4
     }
     $12_1 = HEAPU8[$8_1 + 280 | 0];
     $91($8_1 + 352 | 0, $8_1 + 280 | 1, 64);
     $3_1 = 0;
    }
    $5_1 = $8_1 + 207 | 0;
    $6_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $4_1 = $8_1 + 143 | 0;
    $5_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    HEAP8[$4_1 | 0] = $5_1;
    HEAP8[$4_1 + 1 | 0] = $5_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $5_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $5_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $6_1;
    HEAP8[$4_1 + 5 | 0] = $6_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $6_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $6_1 >>> 24;
    $7_1 = $8_1 + 200 | 0;
    $5_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
    $14_1 = $8_1 + 136 | 0;
    $6_1 = $14_1;
    HEAP32[$6_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
    HEAP32[$6_1 + 4 >> 2] = $5_1;
    $7_1 = $8_1 + 192 | 0;
    $5_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
    $6_1 = $8_1 + 128 | 0;
    HEAP32[$6_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
    HEAP32[$6_1 + 4 >> 2] = $5_1;
    $5_1 = HEAPU8[$8_1 + 188 | 0] | HEAPU8[$8_1 + 189 | 0] << 8 | (HEAPU8[$8_1 + 190 | 0] << 16 | HEAPU8[$8_1 + 191 | 0] << 24);
    HEAP32[$8_1 + 120 >> 2] = HEAPU8[$8_1 + 184 | 0] | HEAPU8[$8_1 + 185 | 0] << 8 | (HEAPU8[$8_1 + 186 | 0] << 16 | HEAPU8[$8_1 + 187 | 0] << 24);
    HEAP32[$8_1 + 124 >> 2] = $5_1;
    $91($8_1 + 56 | 0, $8_1 + 352 | 0, 64);
    if ($1_1 | $3_1) {
     break label$2
    }
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $8_1 + 161 | 0;
    $1_1 = HEAP32[$6_1 >> 2];
    HEAP8[$5_1 | 0] = $1_1;
    HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $3_1;
    HEAP8[$5_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $3_1 >>> 24;
    $3_1 = HEAP32[$14_1 + 4 >> 2];
    $5_1 = $8_1 + 169 | 0;
    $1_1 = HEAP32[$14_1 >> 2];
    HEAP8[$5_1 | 0] = $1_1;
    HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $3_1;
    HEAP8[$5_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $3_1 >>> 24;
    $3_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
    $5_1 = $8_1 + 176 | 0;
    $1_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
    HEAP8[$5_1 | 0] = $1_1;
    HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $3_1;
    HEAP8[$5_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $3_1 >>> 24;
    HEAP8[$8_1 + 152 | 0] = $2_1;
    $2_1 = HEAP32[$8_1 + 124 >> 2];
    $1_1 = HEAP32[$8_1 + 120 >> 2];
    HEAP8[$8_1 + 153 | 0] = $1_1;
    HEAP8[$8_1 + 154 | 0] = $1_1 >>> 8;
    HEAP8[$8_1 + 155 | 0] = $1_1 >>> 16;
    HEAP8[$8_1 + 156 | 0] = $1_1 >>> 24;
    HEAP8[$8_1 + 157 | 0] = $2_1;
    HEAP8[$8_1 + 158 | 0] = $2_1 >>> 8;
    HEAP8[$8_1 + 159 | 0] = $2_1 >>> 16;
    HEAP8[$8_1 + 160 | 0] = $2_1 >>> 24;
    HEAP8[$8_1 + 280 | 0] = $12_1;
    $1_1 = $8_1 + 280 | 0;
    $91($1_1 | 1, $8_1 + 56 | 0, 64);
    $262();
    $19_1 = $8_1 + 352 | 0;
    $147($19_1, 0, 64);
    $12_1 = $8_1 + 152 | 0;
    $11_1 = global$0 - 704 | 0;
    global$0 = $11_1;
    $6_1 = HEAP32[305238];
    label$11 : {
     if (!HEAP32[$6_1 >> 2]) {
      FUNCTION_TABLE[HEAP32[$6_1 + 176 >> 2]](1218313, HEAP32[$6_1 + 180 >> 2]);
      $1_1 = 0;
      break label$11;
     }
     if (!$12_1) {
      FUNCTION_TABLE[HEAP32[$6_1 + 176 >> 2]](1218376, HEAP32[$6_1 + 180 >> 2]);
      $1_1 = 0;
      break label$11;
     }
     if (!$1_1) {
      FUNCTION_TABLE[HEAP32[$6_1 + 176 >> 2]](1218471, HEAP32[$6_1 + 180 >> 2]);
      $1_1 = 0;
      break label$11;
     }
     if (!$19_1) {
      FUNCTION_TABLE[HEAP32[$6_1 + 176 >> 2]](1218064, HEAP32[$6_1 + 180 >> 2]);
      $1_1 = 0;
      break label$11;
     }
     $4_1 = $1_1 + 24 | 0;
     $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
     $14_1 = $11_1 + 96 | 0;
     $3_1 = $14_1;
     HEAP32[$3_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $4_1 = $1_1 + 16 | 0;
     $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
     $5_1 = $11_1 + 88 | 0;
     HEAP32[$5_1 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     $7_1 = $1_1 + 8 | 0;
     $2_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
     $4_1 = $11_1 + 80 | 0;
     HEAP32[$4_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $7_1 = $1_1 + 40 | 0;
     $2_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
     $3_1 = $11_1 + 48 | 0;
     HEAP32[$3_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $7_1 = $1_1 + 48 | 0;
     $2_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
     $3_1 = $11_1 + 56 | 0;
     HEAP32[$3_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $7_1 = $1_1 + 56 | 0;
     $2_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
     $3_1 = $11_1 - -64 | 0;
     HEAP32[$3_1 >> 2] = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
     HEAP32[$11_1 + 72 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
     HEAP32[$11_1 + 76 >> 2] = $2_1;
     $2_1 = HEAPU8[$1_1 + 36 | 0] | HEAPU8[$1_1 + 37 | 0] << 8 | (HEAPU8[$1_1 + 38 | 0] << 16 | HEAPU8[$1_1 + 39 | 0] << 24);
     HEAP32[$11_1 + 40 >> 2] = HEAPU8[$1_1 + 32 | 0] | HEAPU8[$1_1 + 33 | 0] << 8 | (HEAPU8[$1_1 + 34 | 0] << 16 | HEAPU8[$1_1 + 35 | 0] << 24);
     HEAP32[$11_1 + 44 >> 2] = $2_1;
     $10_1 = HEAPU8[$1_1 + 64 | 0];
     $79($11_1 + 8 | 0, $12_1, 0);
     label$16 : {
      if (!(HEAP32[$14_1 >> 2] | (HEAP32[$5_1 >> 2] | (HEAP32[$4_1 >> 2] | HEAP32[$11_1 + 72 >> 2])) | (HEAP32[$14_1 + 4 >> 2] | (HEAP32[$5_1 + 4 >> 2] | (HEAP32[$4_1 + 4 >> 2] | HEAP32[$11_1 + 76 >> 2])))) | !(HEAP32[$11_1 + 64 >> 2] | (HEAP32[$11_1 + 56 >> 2] | (HEAP32[$11_1 + 48 >> 2] | HEAP32[$11_1 + 40 >> 2])) | (HEAP32[$11_1 + 68 >> 2] | (HEAP32[$11_1 + 60 >> 2] | (HEAP32[$11_1 + 52 >> 2] | HEAP32[$11_1 + 44 >> 2]))))) {
       break label$16
      }
      $1_1 = $11_1 + 672 | 0;
      $90($1_1, $11_1 + 72 | 0);
      $83($11_1 + 632 | 0, $1_1);
      if ($10_1 & 2) {
       $7_1 = $11_1 + 632 | 0;
       $2_1 = 32;
       $3_1 = 5;
       label$18 : {
        label$19 : {
         while (1) {
          $3_1 = $3_1 - 1 | 0;
          $1_1 = 0;
          if (($3_1 | 0) < 0) {
           break label$19
          }
          $5_1 = $2_1 + $7_1 | 0;
          $12_1 = HEAP32[$5_1 >> 2];
          $4_1 = $2_1 + 1219040 | 0;
          $14_1 = HEAP32[$4_1 >> 2];
          $5_1 = HEAP32[$5_1 + 4 >> 2];
          $4_1 = HEAP32[$4_1 + 4 >> 2];
          $1_1 = 1;
          if (($5_1 | 0) == ($4_1 | 0) & $12_1 >>> 0 > $14_1 >>> 0 | $4_1 >>> 0 < $5_1 >>> 0) {
           break label$18
          }
          $2_1 = $2_1 - 8 | 0;
          if (($4_1 | 0) == ($5_1 | 0) & $12_1 >>> 0 >= $14_1 >>> 0 | $4_1 >>> 0 < $5_1 >>> 0) {
           continue
          }
          break;
         };
         $1_1 = -1;
        }
       }
       if (($1_1 | 0) >= 0) {
        break label$16
       }
       $269($11_1 + 632 | 0, 1219080);
      }
      if (!$21($11_1 + 544 | 0, $11_1 + 632 | 0, $10_1 & 1)) {
       break label$16
      }
      HEAP32[$11_1 + 536 >> 2] = HEAP32[$11_1 + 624 >> 2];
      $12_1 = $11_1 + 416 | 0;
      $91($12_1, $11_1 + 544 | 0, 40);
      $91($11_1 + 456 | 0, $11_1 + 584 | 0, 40);
      $1_1 = $11_1 + 504 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = $11_1 + 512 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = $11_1 + 520 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = $11_1 + 528 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      HEAP32[$11_1 + 496 >> 2] = 1;
      HEAP32[$11_1 + 500 >> 2] = 0;
      $3_1 = global$0 - 48 | 0;
      global$0 = $3_1;
      $2_1 = $3_1 + 8 | 0;
      $224($2_1, $11_1 + 72 | 0);
      $18($2_1, 1219120);
      $1_1 = $11_1 + 384 | 0;
      $243($1_1, $2_1);
      global$0 = $3_1 + 48 | 0;
      $4_1 = $11_1 + 352 | 0;
      $28($4_1, $1_1, $11_1 + 8 | 0);
      $171($4_1, $4_1);
      $9_1 = $11_1 + 320 | 0;
      $28($9_1, $1_1, $11_1 + 40 | 0);
      $13_1 = $11_1 + 192 | 0;
      $3_1 = 0;
      $14_1 = 0;
      $1_1 = global$0 - 5120 | 0;
      global$0 = $1_1;
      $5_1 = $1_1 + 704 | 0;
      $7_1 = 1;
      while (1) {
       label$22 : {
        if (!($7_1 & 1)) {
         break label$22
        }
        if ($371($9_1) | HEAP32[$12_1 + 120 >> 2]) {
         break label$22
        }
        $7_1 = 0;
        HEAP32[$1_1 + 1808 >> 2] = 0;
        $16_1 = global$0 + -64 | 0;
        global$0 = $16_1;
        $10_1 = $16_1 + 32 | 0;
        $261($10_1, $9_1, 1219320);
        $261($16_1, $9_1, 1219352);
        $28($10_1, $10_1, 1219256);
        $28($16_1, $16_1, 1219288);
        $2_1 = $5_1 + 32 | 0;
        $169($2_1, $10_1, $16_1);
        $28($5_1, $2_1, 1219384);
        $171($5_1, $5_1);
        $169($5_1, $5_1, $9_1);
        global$0 = $16_1 - -64 | 0;
        (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $84($5_1 - -64 | 0, $5_1, 5)), HEAP32[wasm2js_i32$0 + 1800 >> 2] = wasm2js_i32$1;
        $20_1 = $84($5_1 + 580 | 0, $2_1, 5);
        HEAP32[$1_1 + 1804 >> 2] = $20_1;
        $16_1 = HEAP32[$1_1 + 1800 >> 2];
        $2_1 = ($3_1 | 0) < ($16_1 | 0) ? $16_1 : $3_1;
        $3_1 = ($2_1 | 0) < ($20_1 | 0) ? $20_1 : $2_1;
        $5_1 = $5_1 + 1112 | 0;
        $15_1 = $15_1 + 8 | 0;
        $14_1 = $14_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$23 : {
       if ($14_1) {
        $2_1 = $14_1 - 1 | 0;
        $5_1 = $1_1 + 2848 | 0;
        $9_1 = $12_1 + (HEAP32[$1_1 + 1808 >> 2] << 7) | 0;
        $139($5_1, $1_1 + 2528 | 0, $9_1);
        $12_1 = $9_1 + 80 | 0;
        $7_1 = $1_1 + 3872 | 0;
        while (1) {
         if ($2_1) {
          $10_1 = $1_1 + 1824 | 0;
          $91($10_1, $9_1, 128);
          $251($10_1, $7_1 - 48 | 0);
          $139($7_1, $5_1, $10_1);
          $8($5_1, $5_1, $12_1);
          $2_1 = $2_1 - 1 | 0;
          $7_1 = $7_1 + 1024 | 0;
          $5_1 = $5_1 + 320 | 0;
          continue;
         }
         break;
        };
        $9_1 = $1_1 + 1824 | 0;
        $2_1 = $1_1 + 4992 | 0;
        $10_1 = $1_1 + 2848 | 0;
        $12_1 = $1_1 + 2528 | 0;
        $18_1 = global$0 - 48 | 0;
        global$0 = $18_1;
        label$27 : {
         if (!$15_1) {
          break label$27
         }
         $21_1 = $15_1 - 1 | 0;
         $7_1 = $10_1 + ($21_1 << 7) | 0;
         $5_1 = $91($9_1 + Math_imul($21_1, 88) | 0, $7_1, 40);
         $213($91($5_1 + 40 | 0, $7_1 + 40 | 0, 40));
         $91($2_1, $7_1 + 80 | 0, 40);
         $2_1 = 0;
         HEAP32[$5_1 + 80 >> 2] = 0;
         $7_1 = $12_1 + Math_imul($21_1, 40) | 0;
         $91($18_1 + 8 | 0, $7_1, 40);
         $5_1 = $15_1 - 2 | 0;
         $15_1 = $9_1 + Math_imul($5_1, 88) | 0;
         $17_1 = $10_1 + ($5_1 << 7) | 0;
         while (1) {
          if (($2_1 | 0) == ($21_1 | 0)) {
           break label$27
          }
          if ($2_1) {
           $5_1 = $18_1 + 8 | 0;
           $8($5_1, $5_1, $7_1);
          }
          $258($15_1, $17_1, $18_1 + 8 | 0);
          $15_1 = $15_1 - 88 | 0;
          $17_1 = $17_1 - 128 | 0;
          $7_1 = $7_1 - 40 | 0;
          $2_1 = $2_1 + 1 | 0;
          continue;
         };
        }
        global$0 = $18_1 + 48 | 0;
        break label$23;
       }
       $2_1 = $1_1 + 5008 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $1_1 + 5016 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $1_1 + 5024 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       HEAP32[$1_1 + 5e3 >> 2] = 0;
       HEAP32[$1_1 + 5004 >> 2] = 0;
       HEAP32[$1_1 + 4992 >> 2] = 1;
       HEAP32[$1_1 + 4996 >> 2] = 0;
      }
      $15_1 = 0;
      $7_1 = $1_1 + 1824 | 0;
      $2_1 = $1_1;
      while (1) {
       if (($14_1 | 0) != ($15_1 | 0)) {
        $5_1 = 0;
        while (1) {
         if (($5_1 | 0) != 704) {
          $12_1 = $91($2_1 + $5_1 | 0, $5_1 + $7_1 | 0, 88);
          $8($12_1, $12_1, 1219416);
          $5_1 = $5_1 + 88 | 0;
          continue;
         }
         break;
        };
        $2_1 = $2_1 + 704 | 0;
        $7_1 = $7_1 + 704 | 0;
        $15_1 = $15_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$34 : {
       if (!$4_1) {
        $17_1 = 0;
        break label$34;
       }
       $2_1 = $1_1 + 4984 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $1_1 + 4952 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       HEAP32[$1_1 + 4976 >> 2] = 0;
       HEAP32[$1_1 + 4980 >> 2] = 0;
       HEAP32[$1_1 + 4944 >> 2] = 0;
       HEAP32[$1_1 + 4948 >> 2] = 0;
       $2_1 = HEAP32[$4_1 + 4 >> 2];
       HEAP32[$1_1 + 4960 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$1_1 + 4964 >> 2] = $2_1;
       $2_1 = HEAP32[$4_1 + 12 >> 2];
       HEAP32[$1_1 + 4968 >> 2] = HEAP32[$4_1 + 8 >> 2];
       HEAP32[$1_1 + 4972 >> 2] = $2_1;
       $2_1 = HEAP32[$4_1 + 20 >> 2];
       HEAP32[$1_1 + 4928 >> 2] = HEAP32[$4_1 + 16 >> 2];
       HEAP32[$1_1 + 4932 >> 2] = $2_1;
       $2_1 = HEAP32[$4_1 + 28 >> 2];
       HEAP32[$1_1 + 4936 >> 2] = HEAP32[$4_1 + 24 >> 2];
       HEAP32[$1_1 + 4940 >> 2] = $2_1;
       $17_1 = $84($1_1 + 4400 | 0, $1_1 + 4960 | 0, 15);
       $22_1 = $84($1_1 + 3872 | 0, $1_1 + 4928 | 0, 15);
       $2_1 = ($3_1 | 0) < ($17_1 | 0) ? $17_1 : $3_1;
       $3_1 = ($2_1 | 0) < ($22_1 | 0) ? $22_1 : $2_1;
      }
      $370($13_1);
      $12_1 = ($1_1 + ($3_1 << 2) | 0) + 1280 | 0;
      while (1) {
       if (($3_1 | 0) > 0) {
        $4_1 = $3_1 - 1 | 0;
        $230($13_1, $13_1, 0);
        $2_1 = $1_1;
        $15_1 = $1_1 + 1824 | 0;
        $5_1 = $14_1;
        $7_1 = $12_1;
        while (1) {
         if ($5_1) {
          label$40 : {
           if (($3_1 | 0) > ($16_1 | 0)) {
            break label$40
           }
           $10_1 = HEAP32[$7_1 - 516 >> 2];
           if (!$10_1) {
            break label$40
           }
           label$41 : {
            if (($10_1 | 0) > 0) {
             $91($1_1 + 5032 | 0, Math_imul(($10_1 - 1 | 0) / 2 | 0, 88) + $15_1 | 0, 88);
             break label$41;
            }
            $91($1_1 + 5032 | 0, Math_imul(($10_1 ^ -1) / 2 | 0, 88) + $15_1 | 0, 88);
            $9_1 = HEAP32[$1_1 + 5072 >> 2];
            $10_1 = 4194299 - (HEAP32[$1_1 + 5076 >> 2] + ($9_1 >>> 0 > 4294963388) | 0) | 0;
            HEAP32[$1_1 + 5072 >> 2] = -3908 - $9_1;
            HEAP32[$1_1 + 5076 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5080 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5084 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5080 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5084 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5088 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5092 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5088 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5092 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5096 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5100 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5096 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5100 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5104 >> 2];
            $10_1 = 262143 - (HEAP32[$1_1 + 5108 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5104 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5108 >> 2] = $10_1;
           }
           $35($13_1, $13_1, $1_1 + 5032 | 0, 0);
          }
          label$43 : {
           if (($3_1 | 0) > ($20_1 | 0)) {
            break label$43
           }
           $10_1 = HEAP32[$7_1 >> 2];
           if (!$10_1) {
            break label$43
           }
           label$44 : {
            if (($10_1 | 0) > 0) {
             $91($1_1 + 5032 | 0, Math_imul(($10_1 - 1 | 0) / 2 | 0, 88) + $2_1 | 0, 88);
             break label$44;
            }
            $91($1_1 + 5032 | 0, Math_imul(($10_1 ^ -1) / 2 | 0, 88) + $2_1 | 0, 88);
            $9_1 = HEAP32[$1_1 + 5072 >> 2];
            $10_1 = 4194299 - (HEAP32[$1_1 + 5076 >> 2] + ($9_1 >>> 0 > 4294963388) | 0) | 0;
            HEAP32[$1_1 + 5072 >> 2] = -3908 - $9_1;
            HEAP32[$1_1 + 5076 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5080 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5084 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5080 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5084 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5088 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5092 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5088 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5092 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5096 >> 2];
            $10_1 = 4194303 - (HEAP32[$1_1 + 5100 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5096 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5100 >> 2] = $10_1;
            $9_1 = HEAP32[$1_1 + 5104 >> 2];
            $10_1 = 262143 - (HEAP32[$1_1 + 5108 >> 2] + ($9_1 >>> 0 > 4294967292) | 0) | 0;
            HEAP32[$1_1 + 5104 >> 2] = -4 - $9_1;
            HEAP32[$1_1 + 5108 >> 2] = $10_1;
           }
           $35($13_1, $13_1, $1_1 + 5032 | 0, 0);
          }
          $5_1 = $5_1 - 1 | 0;
          $15_1 = $15_1 + 704 | 0;
          $2_1 = $2_1 + 704 | 0;
          $7_1 = $7_1 + 1112 | 0;
          continue;
         }
         break;
        };
        label$46 : {
         if (($3_1 | 0) > ($17_1 | 0)) {
          break label$46
         }
         $5_1 = HEAP32[($1_1 + 4400 | 0) + ($4_1 << 2) >> 2];
         if (!$5_1) {
          break label$46
         }
         $2_1 = HEAP32[$6_1 >> 2];
         label$47 : {
          if (($5_1 | 0) > 0) {
           $369($1_1 + 5032 | 0, $2_1 + (($5_1 - 1 | 0) / 2 << 6) | 0);
           break label$47;
          }
          $369($1_1 + 5032 | 0, $2_1 + (($5_1 ^ -1) / 2 << 6) | 0);
          $5_1 = HEAP32[$1_1 + 5072 >> 2];
          $2_1 = 4194299 - (HEAP32[$1_1 + 5076 >> 2] + ($5_1 >>> 0 > 4294963388) | 0) | 0;
          HEAP32[$1_1 + 5072 >> 2] = -3908 - $5_1;
          HEAP32[$1_1 + 5076 >> 2] = $2_1;
          $5_1 = HEAP32[$1_1 + 5080 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5084 >> 2] + ($5_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5080 >> 2] = -4 - $5_1;
          HEAP32[$1_1 + 5084 >> 2] = $2_1;
          $5_1 = HEAP32[$1_1 + 5088 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5092 >> 2] + ($5_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5088 >> 2] = -4 - $5_1;
          HEAP32[$1_1 + 5092 >> 2] = $2_1;
          $5_1 = HEAP32[$1_1 + 5096 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5100 >> 2] + ($5_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5096 >> 2] = -4 - $5_1;
          HEAP32[$1_1 + 5100 >> 2] = $2_1;
          $5_1 = HEAP32[$1_1 + 5104 >> 2];
          $2_1 = 262143 - (HEAP32[$1_1 + 5108 >> 2] + ($5_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5104 >> 2] = -4 - $5_1;
          HEAP32[$1_1 + 5108 >> 2] = $2_1;
         }
         $37($13_1, $13_1, $1_1 + 5032 | 0, $1_1 + 4992 | 0);
        }
        label$49 : {
         if (($3_1 | 0) > ($22_1 | 0)) {
          break label$49
         }
         $3_1 = HEAP32[($1_1 + 3872 | 0) + ($4_1 << 2) >> 2];
         if (!$3_1) {
          break label$49
         }
         $2_1 = HEAP32[$6_1 + 4 >> 2];
         label$50 : {
          if (($3_1 | 0) > 0) {
           $369($1_1 + 5032 | 0, $2_1 + (($3_1 - 1 | 0) / 2 << 6) | 0);
           break label$50;
          }
          $369($1_1 + 5032 | 0, $2_1 + (($3_1 ^ -1) / 2 << 6) | 0);
          $3_1 = HEAP32[$1_1 + 5072 >> 2];
          $2_1 = 4194299 - (HEAP32[$1_1 + 5076 >> 2] + ($3_1 >>> 0 > 4294963388) | 0) | 0;
          HEAP32[$1_1 + 5072 >> 2] = -3908 - $3_1;
          HEAP32[$1_1 + 5076 >> 2] = $2_1;
          $3_1 = HEAP32[$1_1 + 5080 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5084 >> 2] + ($3_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5080 >> 2] = -4 - $3_1;
          HEAP32[$1_1 + 5084 >> 2] = $2_1;
          $3_1 = HEAP32[$1_1 + 5088 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5092 >> 2] + ($3_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5088 >> 2] = -4 - $3_1;
          HEAP32[$1_1 + 5092 >> 2] = $2_1;
          $3_1 = HEAP32[$1_1 + 5096 >> 2];
          $2_1 = 4194303 - (HEAP32[$1_1 + 5100 >> 2] + ($3_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5096 >> 2] = -4 - $3_1;
          HEAP32[$1_1 + 5100 >> 2] = $2_1;
          $3_1 = HEAP32[$1_1 + 5104 >> 2];
          $2_1 = 262143 - (HEAP32[$1_1 + 5108 >> 2] + ($3_1 >>> 0 > 4294967292) | 0) | 0;
          HEAP32[$1_1 + 5104 >> 2] = -4 - $3_1;
          HEAP32[$1_1 + 5108 >> 2] = $2_1;
         }
         $37($13_1, $13_1, $1_1 + 5032 | 0, $1_1 + 4992 | 0);
        }
        $12_1 = $12_1 - 4 | 0;
        $3_1 = $4_1;
        continue;
       }
       break;
      };
      if (!HEAP32[$13_1 + 120 >> 2]) {
       $2_1 = $13_1 + 80 | 0;
       $8($2_1, $2_1, $1_1 + 4992 | 0);
      }
      global$0 = $1_1 + 5120 | 0;
      $3_1 = $11_1 + 104 | 0;
      $4_1 = global$0 - 80 | 0;
      global$0 = $4_1;
      label$53 : {
       if (HEAP32[$13_1 + 120 >> 2]) {
        $377($3_1);
        break label$53;
       }
       $2_1 = $13_1 + 80 | 0;
       $284($2_1, $2_1);
       $1_1 = $4_1 + 40 | 0;
       $17($1_1, $2_1);
       $8($4_1, $2_1, $1_1);
       $8($13_1, $13_1, $1_1);
       $2_1 = $13_1 + 40 | 0;
       $8($2_1, $2_1, $4_1);
       $1_1 = $13_1 + 88 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       $1_1 = $13_1 + 96 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       $1_1 = $13_1 + 104 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       $1_1 = $13_1 + 112 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       HEAP32[$13_1 + 80 >> 2] = 1;
       HEAP32[$13_1 + 84 >> 2] = 0;
       HEAP32[$3_1 + 80 >> 2] = 0;
       $91($91($3_1, $13_1, 40) + 40 | 0, $2_1, 40);
      }
      global$0 = $4_1 + 80 | 0;
      if (HEAP32[$11_1 + 312 >> 2]) {
       break label$16
      }
      $349($19_1, $11_1 + 104 | 0);
      $1_1 = 1;
      break label$11;
     }
     $147($19_1, 0, 64);
     $1_1 = 0;
    }
    global$0 = $11_1 + 704 | 0;
    if ($1_1) {
     break label$1
    }
   }
   abort();
  }
  $4_1 = HEAPU8[$8_1 + 352 | 0];
  $3_1 = $8_1 + 184 | 0;
  $2_1 = $8_1 + 352 | 0;
  $1_1 = $2_1 | 1;
  $91($3_1, $1_1, 63);
  HEAP8[$8_1 + 352 | 0] = $4_1;
  $91($1_1, $3_1, 63);
  $1_1 = $8_1 + 247 | 0;
  $294($1_1, $2_1);
  $201($8_1 + 16 | 0, 33, 0);
  $2_1 = HEAP32[$8_1 + 20 >> 2];
  $1_1 = $91(HEAP32[$8_1 + 16 >> 2], $1_1, 33);
  $392($8_1 + 48 | 0);
  $392($8_1 + 40 | 0);
  HEAP32[$8_1 + 288 >> 2] = 33;
  HEAP32[$8_1 + 284 >> 2] = $2_1;
  HEAP32[$8_1 + 280 >> 2] = $1_1;
  $271($8_1 + 8 | 0, $8_1 + 280 | 0);
  $1_1 = HEAP32[$8_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$8_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $8_1 + 416 | 0;
 }
 
 function $52($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 672 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 20 >> 2] = 0;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP32[$5_1 + 16 >> 2] = HEAP32[262259];
  $9_1 = $5_1 + 16 | 0;
  $337($9_1, $3_1, $4_1);
  $337($9_1, $1_1, $2_1);
  label$1 : {
   if (HEAP32[$5_1 + 24 >> 2] == 64) {
    $1_1 = HEAP32[$5_1 + 16 >> 2];
    $12_1 = HEAPU8[$1_1 + 2 | 0];
    $2_1 = $1_1 + 19 | 0;
    $8_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    $9_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $2_1 = $1_1 + 27 | 0;
    $11_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    $10_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
    $6_1 = $1_1;
    $4_1 = HEAPU8[$6_1 + 3 | 0] | HEAPU8[$6_1 + 4 | 0] << 8 | (HEAPU8[$6_1 + 5 | 0] << 16 | HEAPU8[$6_1 + 6 | 0] << 24);
    $3_1 = HEAPU8[$6_1 + 7 | 0] | HEAPU8[$6_1 + 8 | 0] << 8 | (HEAPU8[$6_1 + 9 | 0] << 16 | HEAPU8[$6_1 + 10 | 0] << 24);
    $2_1 = HEAPU8[$6_1 + 11 | 0] | HEAPU8[$6_1 + 12 | 0] << 8 | (HEAPU8[$6_1 + 13 | 0] << 16 | HEAPU8[$6_1 + 14 | 0] << 24);
    $1_1 = HEAPU8[$6_1 + 15 | 0] | HEAPU8[$6_1 + 16 | 0] << 8 | (HEAPU8[$6_1 + 17 | 0] << 16 | HEAPU8[$6_1 + 18 | 0] << 24);
    HEAP8[$5_1 + 287 | 0] = HEAPU8[$6_1 + 31 | 0];
    $7_1 = $5_1 + 283 | 0;
    HEAP8[$7_1 | 0] = $11_1;
    HEAP8[$7_1 + 1 | 0] = $11_1 >>> 8;
    HEAP8[$7_1 + 2 | 0] = $11_1 >>> 16;
    HEAP8[$7_1 + 3 | 0] = $11_1 >>> 24;
    $7_1 = $5_1 + 275 | 0;
    HEAP8[$7_1 | 0] = $8_1;
    HEAP8[$7_1 + 1 | 0] = $8_1 >>> 8;
    HEAP8[$7_1 + 2 | 0] = $8_1 >>> 16;
    HEAP8[$7_1 + 3 | 0] = $8_1 >>> 24;
    HEAP8[$7_1 + 4 | 0] = $9_1;
    HEAP8[$7_1 + 5 | 0] = $9_1 >>> 8;
    HEAP8[$7_1 + 6 | 0] = $9_1 >>> 16;
    HEAP8[$7_1 + 7 | 0] = $9_1 >>> 24;
    HEAP8[$5_1 + 267 | 0] = $2_1;
    HEAP8[$5_1 + 268 | 0] = $2_1 >>> 8;
    HEAP8[$5_1 + 269 | 0] = $2_1 >>> 16;
    HEAP8[$5_1 + 270 | 0] = $2_1 >>> 24;
    HEAP8[$5_1 + 271 | 0] = $1_1;
    HEAP8[$5_1 + 272 | 0] = $1_1 >>> 8;
    HEAP8[$5_1 + 273 | 0] = $1_1 >>> 16;
    HEAP8[$5_1 + 274 | 0] = $1_1 >>> 24;
    HEAP8[$5_1 + 259 | 0] = $4_1;
    HEAP8[$5_1 + 260 | 0] = $4_1 >>> 8;
    HEAP8[$5_1 + 261 | 0] = $4_1 >>> 16;
    HEAP8[$5_1 + 262 | 0] = $4_1 >>> 24;
    HEAP8[$5_1 + 263 | 0] = $3_1;
    HEAP8[$5_1 + 264 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 265 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 266 | 0] = $3_1 >>> 24;
    HEAP8[$5_1 + 258 | 0] = $12_1;
    HEAP16[$5_1 + 256 >> 1] = $10_1;
    $3_1 = $6_1 + 56 | 0;
    $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $10_1 = $5_1 + 312 | 0;
    $2_1 = $10_1;
    HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $3_1 = $6_1 + 48 | 0;
    $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $8_1 = $5_1 + 304 | 0;
    $2_1 = $8_1;
    HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $3_1 = $6_1 + 40 | 0;
    $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $4_1 = $5_1 + 296 | 0;
    $2_1 = $4_1;
    HEAP32[$2_1 >> 2] = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAPU8[$6_1 + 36 | 0] | HEAPU8[$6_1 + 37 | 0] << 8 | (HEAPU8[$6_1 + 38 | 0] << 16 | HEAPU8[$6_1 + 39 | 0] << 24);
    HEAP32[$5_1 + 288 >> 2] = HEAPU8[$6_1 + 32 | 0] | HEAPU8[$6_1 + 33 | 0] << 8 | (HEAPU8[$6_1 + 34 | 0] << 16 | HEAPU8[$6_1 + 35 | 0] << 24);
    HEAP32[$5_1 + 292 >> 2] = $1_1;
    $107($5_1 + 480 | 0, $5_1 + 288 | 0);
    if (HEAP32[$5_1 + 480 >> 2] != 1 | HEAP32[$5_1 + 484 >> 2]) {
     HEAP32[$5_1 + 480 >> 2] = 0;
     $295($5_1 + 8 | 0, $5_1 + 480 | 0);
     $338($5_1 + 256 | 0);
     break label$1;
    }
    $9_1 = HEAP32[$5_1 + 488 >> 2];
    $3_1 = $5_1 + 324 | 0;
    $91($3_1, $5_1 + 492 | 0, 156);
    $1_1 = HEAP32[$10_1 + 4 >> 2];
    $2_1 = $5_1 + 660 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$8_1 + 4 >> 2];
    $2_1 = $5_1 + 652 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $5_1 + 644 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 292 >> 2];
    HEAP32[$5_1 + 636 >> 2] = HEAP32[$5_1 + 288 >> 2];
    HEAP32[$5_1 + 640 >> 2] = $1_1;
    $1_1 = $5_1 + 480 | 0;
    $91($1_1, $3_1, 156);
    $4_1 = $5_1 + 68 | 0;
    $91($4_1, $1_1, 188);
    $2_1 = $5_1 + 264 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = $5_1 + 40 | 0;
    $3_1 = $6_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    $2_1 = $5_1 + 272 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $8_1 = $5_1 + 48 | 0;
    $3_1 = $8_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    $2_1 = $5_1 + 280 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $3_1 = $5_1 + 56 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 260 >> 2];
    HEAP32[$5_1 + 32 >> 2] = HEAP32[$5_1 + 256 >> 2];
    HEAP32[$5_1 + 36 >> 2] = $1_1;
    HEAP32[$0_1 >> 2] = $9_1;
    $91($0_1 + 4 | 0, $4_1, 188);
    $1_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 216 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$8_1 + 4 >> 2];
    $2_1 = $0_1 + 208 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = $0_1 + 200 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 36 >> 2];
    HEAP32[$0_1 + 192 >> 2] = HEAP32[$5_1 + 32 >> 2];
    HEAP32[$0_1 + 196 >> 2] = $1_1;
    $374($5_1 + 16 | 0);
    global$0 = $5_1 + 672 | 0;
    return;
   }
   $0_1 = $5_1 + 488 | 0;
   HEAP32[$0_1 >> 2] = 7;
   HEAP32[$0_1 + 4 >> 2] = 64;
   HEAP32[$5_1 + 484 >> 2] = 1105480;
   HEAP32[$5_1 + 480 >> 2] = 2;
   $303($5_1 + 480 | 0);
  }
  abort();
 }
 
 function $53($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $2_1 = global$0 - 640 | 0;
  global$0 = $2_1;
  $5_1 = $2_1 + 512 | 0;
  $230($5_1, $1_1, 0);
  $91($2_1 + 424 | 0, $5_1, 40);
  $91($2_1 + 464 | 0, $2_1 + 552 | 0, 40);
  HEAP32[$2_1 + 504 >> 2] = 0;
  $4_1 = $2_1 + 336 | 0;
  $5_1 = $2_1 + 592 | 0;
  $258($4_1, $1_1, $5_1);
  $91($2_1 + 208 | 0, $4_1, 40);
  $10_1 = $2_1 + 376 | 0;
  $4_1 = $91($2_1 + 248 | 0, $10_1, 40);
  $7_1 = $91($2_1 + 288 | 0, $1_1 + 80 | 0, 40);
  HEAP32[$2_1 + 328 >> 2] = 0;
  while (1) {
   if (($6_1 | 0) != 524224) {
    $128($4_1);
    $8_1 = $0_1 + $6_1 | 0;
    $248($8_1 + 32 | 0, $4_1);
    $1_1 = $2_1 + 208 | 0;
    $3_1 = $1_1;
    $1_1 = $2_1 + 128 | 0;
    $35($3_1, $3_1, $2_1 + 424 | 0, $1_1);
    $128($1_1);
    $248($8_1, $1_1);
    $6_1 = $6_1 - -64 | 0;
    continue;
   }
   break;
  };
  $1_1 = $2_1 + 168 | 0;
  $8($1_1, $7_1, $5_1);
  $284($1_1, $1_1);
  $4_1 = $2_1 + 336 | 0;
  $258($4_1, $2_1 + 208 | 0, $1_1);
  $259($0_1 + 524224 | 0, $4_1);
  $8($5_1, $1_1, $7_1);
  $1_1 = $2_1 + 88 | 0;
  $17($1_1, $5_1);
  $8($1_1, $1_1, $2_1 + 512 | 0);
  $6_1 = 524160;
  $5_1 = HEAP32[$2_1 + 120 >> 2];
  $14_1 = HEAP32[$2_1 + 124 >> 2];
  $4_1 = HEAP32[$2_1 + 112 >> 2];
  $15_1 = HEAP32[$2_1 + 116 >> 2];
  $7_1 = HEAP32[$2_1 + 104 >> 2];
  $16_1 = HEAP32[$2_1 + 108 >> 2];
  $8_1 = HEAP32[$2_1 + 96 >> 2];
  $17_1 = HEAP32[$2_1 + 100 >> 2];
  $11_1 = HEAP32[$2_1 + 88 >> 2];
  $18_1 = HEAP32[$2_1 + 92 >> 2];
  while (1) {
   if (($6_1 | 0) != -64) {
    $9_1 = $2_1 + 336 | 0;
    $12_1 = $0_1 + $6_1 | 0;
    $369($9_1, $12_1);
    $1_1 = $2_1 + 168 | 0;
    $8($1_1, $1_1, $9_1);
    $3_1 = $2_1 + 48 | 0;
    $17($3_1, $1_1);
    $13_1 = $2_1 + 8 | 0;
    $8($13_1, $3_1, $1_1);
    $8($9_1, $9_1, $3_1);
    $3_1 = HEAP32[$2_1 + 368 >> 2];
    $1_1 = ($5_1 - $3_1 | 0) - 4 | 0;
    $3_1 = ($14_1 - (HEAP32[$2_1 + 372 >> 2] + ($3_1 >>> 0 > $5_1 >>> 0) | 0) | 0) + 262143 | 0;
    HEAP32[$2_1 + 368 >> 2] = $1_1;
    HEAP32[$2_1 + 372 >> 2] = $1_1 >>> 0 < 4294967292 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 360 >> 2];
    $1_1 = ($4_1 - $3_1 | 0) - 4 | 0;
    $3_1 = ($15_1 - (HEAP32[$2_1 + 364 >> 2] + ($3_1 >>> 0 > $4_1 >>> 0) | 0) | 0) + 4194303 | 0;
    HEAP32[$2_1 + 360 >> 2] = $1_1;
    HEAP32[$2_1 + 364 >> 2] = $1_1 >>> 0 < 4294967292 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 352 >> 2];
    $1_1 = ($7_1 - $3_1 | 0) - 4 | 0;
    $3_1 = ($16_1 - (HEAP32[$2_1 + 356 >> 2] + ($3_1 >>> 0 > $7_1 >>> 0) | 0) | 0) + 4194303 | 0;
    HEAP32[$2_1 + 352 >> 2] = $1_1;
    HEAP32[$2_1 + 356 >> 2] = $1_1 >>> 0 < 4294967292 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 344 >> 2];
    $1_1 = ($8_1 - $3_1 | 0) - 4 | 0;
    $3_1 = ($17_1 - (HEAP32[$2_1 + 348 >> 2] + ($3_1 >>> 0 > $8_1 >>> 0) | 0) | 0) + 4194303 | 0;
    HEAP32[$2_1 + 344 >> 2] = $1_1;
    HEAP32[$2_1 + 348 >> 2] = $1_1 >>> 0 < 4294967292 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 336 >> 2];
    $1_1 = ($11_1 - $3_1 | 0) - 3908 | 0;
    $3_1 = ($18_1 - (HEAP32[$2_1 + 340 >> 2] + ($3_1 >>> 0 > $11_1 >>> 0) | 0) | 0) + 4194299 | 0;
    HEAP32[$2_1 + 336 >> 2] = $1_1;
    HEAP32[$2_1 + 340 >> 2] = $1_1 >>> 0 < 4294963388 ? $3_1 + 1 | 0 : $3_1;
    $8($10_1, $10_1, $13_1);
    $259($12_1, $9_1);
    $6_1 = $6_1 + -64 | 0;
    continue;
   }
   break;
  };
  global$0 = $2_1 + 640 | 0;
 }
 
 function $54($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1 + 16;
  $7_1 = $1_1 + 84 | 0;
  $10_1 = HEAP32[$1_1 >> 2];
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $9_1 = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  $6_1 = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$5_1 + 28 >> 2] = $5_1 + 24;
  label$1 : {
   label$2 : {
    if (($6_1 | 0) != 128) {
     if ($6_1 >>> 0 < 128) {
      break label$2
     }
     break label$1;
    }
    $406($5_1 + 28 | 0, $7_1);
    $6_1 = 0;
    HEAP32[$1_1 + 80 >> 2] = 0;
   }
   HEAP8[$6_1 + $7_1 | 0] = 128;
   $3_1 = HEAP32[$1_1 + 80 >> 2] + 1 | 0;
   HEAP32[$1_1 + 80 >> 2] = $3_1;
   $345($5_1 + 16 | 0, $7_1, 128, $3_1);
   $6_1 = 0;
   $147(HEAP32[$5_1 + 16 >> 2], 0, HEAP32[$5_1 + 20 >> 2]);
   if (128 - HEAP32[$1_1 + 80 >> 2] >>> 0 < 16) {
    $406($5_1 + 28 | 0, $7_1);
    $302($5_1 + 8 | 0, $7_1, 128, HEAP32[$1_1 + 80 >> 2]);
    $147(HEAP32[$5_1 + 8 >> 2], 0, HEAP32[$5_1 + 12 >> 2]);
   }
   $8_1 = $9_1;
   $9_1 = $8_1 << 8 & 16711680 | $8_1 << 24 | (($2_1 << 24 | $8_1 >>> 8) & 65280 | ($2_1 << 8 | $8_1 >>> 24) & 255);
   $3_1 = $1_1 + 204 | 0;
   $2_1 = (($2_1 & 255) << 24 | $8_1 >>> 8) & -16777216 | (($2_1 & 16777215) << 8 | $8_1 >>> 24) & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
   HEAP8[$3_1 | 0] = $2_1;
   HEAP8[$3_1 + 1 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 2 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 3 | 0] = $2_1 >>> 24;
   $2_1 = $9_1;
   HEAP8[$3_1 + 4 | 0] = $2_1;
   HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
   $2_1 = $4_1;
   $4_1 = $10_1;
   $9_1 = $4_1 << 8 & 16711680 | $4_1 << 24 | (($2_1 << 24 | $4_1 >>> 8) & 65280 | ($2_1 << 8 | $4_1 >>> 24) & 255);
   $3_1 = $1_1 + 196 | 0;
   $2_1 = (($2_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($2_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
   HEAP8[$3_1 | 0] = $2_1;
   HEAP8[$3_1 + 1 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 2 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 3 | 0] = $2_1 >>> 24;
   $2_1 = $9_1;
   HEAP8[$3_1 + 4 | 0] = $2_1;
   HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
   $406($5_1 + 28 | 0, $7_1);
   HEAP32[$1_1 + 80 >> 2] = 0;
   $212($0_1);
   $2_1 = $330(64, 8);
   $9_1 = ($2_1 >>> 0 < 8 ? $2_1 : 8) << 3;
   $7_1 = $1_1 + 16 | 0;
   while (1) {
    if (($6_1 | 0) != ($9_1 | 0)) {
     if (($6_1 | 0) == 64) {
      break label$1
     }
     $2_1 = $6_1 + $7_1 | 0;
     $1_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = HEAP32[$2_1 >> 2];
     $2_1 = $3_1;
     $8_1 = $2_1 << 24 | $2_1 << 8 & 16711680 | (($1_1 << 24 | $2_1 >>> 8) & 65280 | ($1_1 << 8 | $2_1 >>> 24) & 255);
     $4_1 = $0_1 + $6_1 | 0;
     $1_1 = (($1_1 & 255) << 24 | $2_1 >>> 8) & -16777216 | (($1_1 & 16777215) << 8 | $2_1 >>> 24) & 16711680 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
     HEAP8[$4_1 | 0] = $1_1;
     HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
     $1_1 = $8_1;
     HEAP8[$4_1 + 4 | 0] = $1_1;
     HEAP8[$4_1 + 5 | 0] = $1_1 >>> 8;
     HEAP8[$4_1 + 6 | 0] = $1_1 >>> 16;
     HEAP8[$4_1 + 7 | 0] = $1_1 >>> 24;
     $6_1 = $6_1 + 8 | 0;
     continue;
    }
    break;
   };
   global$0 = $5_1 + 32 | 0;
   return;
  }
  abort();
 }
 
 function $55($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 1472 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $8_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $8_1;
  $9_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $9_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $2_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $2_1;
  $1_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $1_1;
  $159($5_1 + 56 | 0, $9_1, $8_1);
  if (HEAP32[$5_1 + 56 >> 2]) {
   abort()
  }
  $8_1 = $5_1 + 256 | 0;
  $91($8_1, $5_1 - -64 | 0, 192);
  $266($5_1 + 672 | 0, $1_1, $2_1);
  $1_1 = $5_1 + 704 | 0;
  $181($1_1, 1048869, 20);
  $277($1_1, 1105547, 10, 1217612, 0);
  $9_1 = $5_1 + 912 | 0;
  $91($9_1, $1_1, 208);
  $2_1 = $5_1 + 696 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1336 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $5_1 + 688 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1328 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $5_1 + 680 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1320 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$5_1 + 676 >> 2];
  HEAP32[$5_1 + 1312 >> 2] = HEAP32[$5_1 + 672 >> 2];
  HEAP32[$5_1 + 1316 >> 2] = $1_1;
  $10_1 = $5_1 + 448 | 0;
  $4_1 = $5_1 + 1312 | 0;
  $174($10_1, $8_1, $9_1, $4_1);
  $2_1 = $5_1 + 472 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1144 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $5_1 + 464 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1136 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $2_1 = $5_1 + 456 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $5_1 + 1128 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$5_1 + 452 >> 2];
  HEAP32[$5_1 + 1120 >> 2] = HEAP32[$5_1 + 448 >> 2];
  HEAP32[$5_1 + 1124 >> 2] = $1_1;
  $66($10_1, $5_1 + 1120 | 0);
  $1_1 = $5_1 + 1152 | 0;
  $318($1_1, $8_1, $10_1);
  $91($4_1, $1_1, 160);
  $351($10_1, $4_1);
  $336($9_1);
  $201($5_1 + 16 | 0, 32, 0);
  $1_1 = $5_1 + 616 | 0;
  $8_1 = HEAP32[$1_1 >> 2];
  $9_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 624 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $5_1 + 632 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $12_1 = HEAP32[$5_1 + 20 >> 2];
  $11_1 = HEAP32[$5_1 + 612 >> 2];
  $7_1 = HEAP32[$5_1 + 16 >> 2];
  $6_1 = HEAP32[$5_1 + 608 >> 2];
  HEAP8[$7_1 | 0] = $6_1;
  HEAP8[$7_1 + 1 | 0] = $6_1 >>> 8;
  HEAP8[$7_1 + 2 | 0] = $6_1 >>> 16;
  HEAP8[$7_1 + 3 | 0] = $6_1 >>> 24;
  HEAP8[$7_1 + 4 | 0] = $11_1;
  HEAP8[$7_1 + 5 | 0] = $11_1 >>> 8;
  HEAP8[$7_1 + 6 | 0] = $11_1 >>> 16;
  HEAP8[$7_1 + 7 | 0] = $11_1 >>> 24;
  $6_1 = $7_1 + 24 | 0;
  HEAP8[$6_1 | 0] = $2_1;
  HEAP8[$6_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$6_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$6_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$6_1 + 4 | 0] = $1_1;
  HEAP8[$6_1 + 5 | 0] = $1_1 >>> 8;
  HEAP8[$6_1 + 6 | 0] = $1_1 >>> 16;
  HEAP8[$6_1 + 7 | 0] = $1_1 >>> 24;
  $1_1 = $7_1 + 16 | 0;
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $3_1;
  HEAP8[$1_1 + 5 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $3_1 >>> 24;
  $1_1 = $7_1 + 8 | 0;
  HEAP8[$1_1 | 0] = $8_1;
  HEAP8[$1_1 + 1 | 0] = $8_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $8_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $8_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $9_1;
  HEAP8[$1_1 + 5 | 0] = $9_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $9_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $9_1 >>> 24;
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 456 >> 2] = 32;
  HEAP32[$5_1 + 452 >> 2] = $12_1;
  HEAP32[$5_1 + 448 >> 2] = $7_1;
  $271($5_1 + 8 | 0, $10_1);
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 1472 | 0;
 }
 
 function $56($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 16 >> 2] = $1_1 + 76;
  $6_1 = $1_1 + 12 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$5_1 + 56 >> 2] = $5_1 + 16;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) != 64) {
     if ($3_1 >>> 0 < 64) {
      break label$2
     }
     break label$1;
    }
    $405($5_1 + 56 | 0, $6_1);
    $3_1 = 0;
    HEAP32[$1_1 + 8 >> 2] = 0;
   }
   HEAP8[$3_1 + $6_1 | 0] = 128;
   $3_1 = HEAP32[$1_1 + 8 >> 2] + 1 | 0;
   HEAP32[$1_1 + 8 >> 2] = $3_1;
   $345($5_1 + 8 | 0, $6_1, 64, $3_1);
   $147(HEAP32[$5_1 + 8 >> 2], 0, HEAP32[$5_1 + 12 >> 2]);
   if (64 - HEAP32[$1_1 + 8 >> 2] >>> 0 < 8) {
    $405($5_1 + 56 | 0, $6_1);
    $302($5_1, $6_1, 64, HEAP32[$1_1 + 8 >> 2]);
    $147(HEAP32[$5_1 >> 2], 0, HEAP32[$5_1 + 4 >> 2]);
   }
   $7_1 = $4_1 << 8 & 16711680 | $4_1 << 24 | (($2_1 << 24 | $4_1 >>> 8) & 65280 | ($2_1 << 8 | $4_1 >>> 24) & 255);
   $3_1 = $1_1 + 68 | 0;
   $2_1 = (($2_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($2_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
   HEAP8[$3_1 | 0] = $2_1;
   HEAP8[$3_1 + 1 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 2 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 3 | 0] = $2_1 >>> 24;
   $2_1 = $7_1;
   HEAP8[$3_1 + 4 | 0] = $2_1;
   HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$3_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$3_1 + 7 | 0] = $2_1 >>> 24;
   $405($5_1 + 56 | 0, $6_1);
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$5_1 + 16 >> 2] = 0;
   $3_1 = $5_1 + 16 | 4;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) != 32) {
     HEAP8[$2_1 + $3_1 | 0] = 0;
     HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 16 >> 2] + 1;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   $91($5_1 + 56 | 0, $5_1 + 16 | 0, 36);
   $4_1 = $5_1 + 84 | 0;
   $3_1 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $0_1 + 24 | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP8[$2_1 | 0] = $4_1;
   HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
   HEAP8[$2_1 + 4 | 0] = $3_1;
   HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
   $4_1 = $5_1 + 76 | 0;
   $3_1 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $0_1 + 16 | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP8[$2_1 | 0] = $4_1;
   HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
   HEAP8[$2_1 + 4 | 0] = $3_1;
   HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
   $4_1 = $5_1 + 68 | 0;
   $3_1 = HEAP32[$4_1 + 4 >> 2];
   $2_1 = $0_1 + 8 | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP8[$2_1 | 0] = $4_1;
   HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
   HEAP8[$2_1 + 4 | 0] = $3_1;
   HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
   HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
   HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
   $2_1 = HEAP32[$5_1 + 64 >> 2];
   $3_1 = HEAP32[$5_1 + 60 >> 2];
   HEAP8[$0_1 | 0] = $3_1;
   HEAP8[$0_1 + 1 | 0] = $3_1 >>> 8;
   HEAP8[$0_1 + 2 | 0] = $3_1 >>> 16;
   HEAP8[$0_1 + 3 | 0] = $3_1 >>> 24;
   HEAP8[$0_1 + 4 | 0] = $2_1;
   HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
   HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
   HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
   $2_1 = $330(32, 4);
   $4_1 = ($2_1 >>> 0 < 8 ? $2_1 : 8) << 2;
   $6_1 = $1_1 + 76 | 0;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) != ($4_1 | 0)) {
     if (($2_1 | 0) == 32) {
      break label$1
     }
     $1_1 = $0_1 + $2_1 | 0;
     $3_1 = HEAP32[$2_1 + $6_1 >> 2];
     $3_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
     HEAP8[$1_1 | 0] = $3_1;
     HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
     HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
     HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
     $2_1 = $2_1 + 4 | 0;
     continue;
    }
    break;
   };
   global$0 = $5_1 + 96 | 0;
   return;
  }
  abort();
 }
 
 function $57($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $14_1 = $1_1 + 20 | 0;
  while (1) {
   label$2 : {
    $8_1 = 0;
    if (HEAPU8[$1_1 + 29 | 0]) {
     break label$2
    }
    $9_1 = HEAP32[$1_1 + 24 >> 2];
    $10_1 = HEAP32[$1_1 + 20 >> 2];
    $15_1 = HEAP32[$1_1 + 8 >> 2];
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       label$6 : {
        $5_1 = $152($14_1);
        if (($5_1 | 0) != 1114112) {
         $12_1 = HEAP32[$1_1 + 16 >> 2];
         $2_1 = $12_1 + ($9_1 - $10_1 | 0) | 0;
         $10_1 = HEAP32[$1_1 + 20 >> 2];
         $9_1 = HEAP32[$1_1 + 24 >> 2];
         $13_1 = ($2_1 + $10_1 | 0) - $9_1 | 0;
         HEAP32[$1_1 + 16 >> 2] = $13_1;
         $2_1 = $5_1 - 9 | 0;
         if (1 << $2_1 & 8388639 ? $2_1 >>> 0 <= 23 : 0) {
          break label$4
         }
         if ($5_1 >>> 0 < 128) {
          continue
         }
         $6_1 = $5_1 << 11;
         $3_1 = 0;
         $4_1 = 4;
         $2_1 = 4;
         while (1) {
          if ($3_1 >>> 0 >= $4_1 >>> 0) {
           $2_1 = $3_1;
           break label$6;
          }
          $2_1 = ($2_1 >>> 1 | 0) + $3_1 | 0;
          $7_1 = HEAP32[($2_1 << 2) + 1065112 >> 2] << 11;
          label$10 : {
           if ($7_1 >>> 0 >= $6_1 >>> 0) {
            if (($6_1 | 0) == ($7_1 | 0)) {
             break label$6
            }
            $4_1 = $2_1;
            break label$10;
           }
           $3_1 = $2_1 + 1 | 0;
          }
          $2_1 = $4_1 - $3_1 | 0;
          continue;
         };
        }
        if (HEAPU8[$1_1 + 29 | 0]) {
         break label$2
        }
        $2_1 = HEAP32[$1_1 >> 2];
        $3_1 = HEAP32[$1_1 + 4 >> 2];
        if (!HEAPU8[$1_1 + 28 | 0] & ($2_1 | 0) == ($3_1 | 0)) {
         break label$2
        }
        HEAP8[$1_1 + 29 | 0] = 1;
        $8_1 = $2_1 + HEAP32[$1_1 + 8 >> 2] | 0;
        $4_1 = $3_1 - $2_1 | 0;
        break label$3;
       }
       label$12 : {
        $3_1 = ($3_1 >>> 0 < $4_1 >>> 0) + $2_1 | 0;
        if ($3_1 >>> 0 > 3) {
         break label$12
        }
        $6_1 = $3_1 << 2;
        $2_1 = ($3_1 | 0) != 3 ? (HEAP32[$6_1 + 1065116 >> 2] >>> 21 | 0) - 1 | 0 : 20;
        $4_1 = 0;
        $7_1 = 0;
        $11_1 = $3_1 - 1 | 0;
        if ($3_1 >>> 0 >= $11_1 >>> 0) {
         if ($11_1 >>> 0 >= 4) {
          break label$12
         }
         $7_1 = HEAP32[($11_1 << 2) + 1065112 >> 2] & 2097151;
        }
        $3_1 = HEAP32[$6_1 + 1065112 >> 2] >>> 21 | 0;
        $6_1 = $3_1 >>> 0 > 21 ? $3_1 : 21;
        $5_1 = $5_1 - $7_1 | 0;
        while (1) {
         label$16 : {
          if (($2_1 | 0) != ($3_1 | 0)) {
           if (($3_1 | 0) == ($6_1 | 0)) {
            break label$12
           }
           $4_1 = HEAPU8[$3_1 + 1065128 | 0] + $4_1 | 0;
           if ($5_1 >>> 0 >= $4_1 >>> 0) {
            break label$16
           }
           $2_1 = $3_1;
          }
          if (!($2_1 & 1)) {
           continue label$5
          }
          break label$4;
         }
         $3_1 = $3_1 + 1 | 0;
         continue;
        };
       }
       break;
      };
      abort();
     }
     $2_1 = HEAP32[$1_1 >> 2];
     HEAP32[$1_1 >> 2] = $13_1;
     $8_1 = $2_1 + $15_1 | 0;
     $4_1 = $12_1 - $2_1 | 0;
    }
    if (!$4_1) {
     continue
    }
   }
   break;
  };
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  HEAP32[$0_1 >> 2] = $8_1;
 }
 
 function $58($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 672 | 0;
  global$0 = $7_1;
  (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $384()), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  $91($7_1 + 24 | 0, $0_1, 200);
  $6_1 = $6_1 << 3;
  $8_1 = $7_1 + 635 | 0;
  $11_1 = HEAPU8[$0_1 + 202 | 0];
  $12_1 = HEAPU8[$0_1 + 201 | 0];
  $0_1 = HEAPU8[$0_1 + 200 | 0];
  while (1) {
   if ($6_1) {
    $10_1 = $7_1 + 432 | 0;
    $13_1 = $7_1 + 24 | 0;
    $91($10_1, $13_1, 200);
    $9_1 = HEAP32[$7_1 + 16 >> 2];
    HEAP8[$8_1 | 0] = $9_1;
    HEAP8[$8_1 + 1 | 0] = $9_1 >>> 8;
    HEAP8[$8_1 + 2 | 0] = $9_1 >>> 16;
    HEAP8[$8_1 + 3 | 0] = $9_1 >>> 24;
    $14_1 = $8_1 + 4 | 0;
    $15_1 = $7_1 + 20 | 0;
    HEAP8[$14_1 | 0] = HEAPU8[$15_1 | 0];
    HEAP8[$7_1 + 634 | 0] = $11_1;
    HEAP8[$7_1 + 633 | 0] = $12_1;
    HEAP8[$7_1 + 632 | 0] = $0_1;
    $9_1 = HEAP32[$5_1 >> 2];
    $0_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$7_1 + 224 >> 2] = $0_1;
    $381($10_1, $1_1, $2_1, 0);
    $381($10_1, $7_1 + 224 | 0, 4, 1);
    $235($10_1, $9_1, $0_1);
    $91($13_1, $10_1, 200);
    HEAP8[$15_1 | 0] = HEAPU8[$14_1 | 0];
    HEAP32[$7_1 + 16 >> 2] = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
    $6_1 = $6_1 - 8 | 0;
    $5_1 = $5_1 + 8 | 0;
    $11_1 = HEAPU8[$7_1 + 634 | 0];
    $12_1 = HEAPU8[$7_1 + 633 | 0];
    $0_1 = HEAPU8[$7_1 + 632 | 0];
    continue;
   }
   break;
  };
  $9_1 = $7_1 + 432 | 0;
  $91($9_1, $7_1 + 24 | 0, 200);
  HEAP8[$7_1 + 639 | 0] = HEAPU8[$7_1 + 20 | 0];
  HEAP8[$7_1 + 634 | 0] = $11_1;
  HEAP8[$7_1 + 633 | 0] = $12_1;
  HEAP8[$7_1 + 632 | 0] = $0_1;
  $0_1 = HEAP32[$7_1 + 16 >> 2];
  HEAP8[$7_1 + 635 | 0] = $0_1;
  HEAP8[$7_1 + 636 | 0] = $0_1 >>> 8;
  HEAP8[$7_1 + 637 | 0] = $0_1 >>> 16;
  HEAP8[$7_1 + 638 | 0] = $0_1 >>> 24;
  $6_1 = $7_1 + 248 | 0;
  $0_1 = $6_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $5_1 = $7_1 + 240 | 0;
  $0_1 = $5_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = $7_1 + 232 | 0;
  $0_1 = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$7_1 + 224 >> 2] = 0;
  HEAP32[$7_1 + 228 >> 2] = 0;
  $8_1 = $7_1 + 224 | 0;
  $150($7_1 + 12 | 0, $8_1, 32);
  $0_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $7_1 + 664 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = $7_1 + 656 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $7_1 + 648 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$7_1 + 228 >> 2];
  HEAP32[$7_1 + 640 >> 2] = HEAP32[$7_1 + 224 >> 2];
  HEAP32[$7_1 + 644 >> 2] = $0_1;
  $381($9_1, 1074672, 3, 0);
  $235($9_1, $7_1 + 640 | 0, 32);
  $91($8_1, $9_1, 208);
  HEAP32[$7_1 + 432 >> 2] = $4_1;
  $381($8_1, $9_1, 4, 0);
  $219($8_1, $3_1, $4_1);
  $336($8_1);
  global$0 = $7_1 + 672 | 0;
 }
 
 function $59($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $3_1 = $0_1;
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  $12_1 = $0_1;
  $13_1 = HEAP32[$1_1 + 32 >> 2];
  $0_1 = __wasm_i64_mul($0_1 >>> 19 | 0, 0, 19, 0);
  $8_1 = HEAP32[$1_1 >> 2];
  $2_1 = $0_1 + $8_1 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = i64toi32_i32$HIGH_BITS + ($4_1 & 524287) | 0;
  $6_1 = $2_1;
  $0_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $8_1 = $0_1;
  $0_1 = $2_1 + 19 >>> 0 < 19 ? $0_1 + 1 | 0 : $0_1;
  $2_1 = $0_1 >>> 19 | 0;
  $10_1 = $4_1 >>> 19 | 0;
  $4_1 = $10_1 + HEAP32[$1_1 + 8 >> 2] | 0;
  $5_1 = HEAP32[$1_1 + 12 >> 2];
  $0_1 = $5_1 & 524287;
  $0_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $10_1 = $4_1;
  $7_1 = $2_1 + $4_1 | 0;
  $14_1 = $0_1;
  $4_1 = ($7_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1) >>> 19 | 0;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  $7_1 = $0_1;
  $11_1 = $5_1 >>> 19 | 0;
  $5_1 = $11_1 + HEAP32[$1_1 + 16 >> 2] | 0;
  $0_1 = $0_1 & 524287;
  $0_1 = $5_1 >>> 0 < $11_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $4_1 = $5_1 + $4_1 | 0;
  $11_1 = $0_1;
  $2_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $0_1 = $2_1 >>> 19 | 0;
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  $9_1 = $2_1;
  $4_1 = $0_1;
  $7_1 = $7_1 >>> 19 | 0;
  $1_1 = $7_1 + HEAP32[$1_1 + 24 >> 2] | 0;
  $0_1 = $2_1 & 524287;
  $0_1 = $1_1 >>> 0 < $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $7_1 = $1_1;
  $2_1 = $1_1;
  $1_1 = $4_1 + $2_1 | 0;
  $15_1 = $0_1;
  $0_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $2_1 = $0_1 >>> 19 | 0;
  $9_1 = $9_1 >>> 19 | 0;
  $1_1 = $9_1 + $13_1 | 0;
  $0_1 = $12_1 & 524287;
  $0_1 = $1_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  $9_1 = $1_1;
  $1_1 = $2_1 + $1_1 | 0;
  $12_1 = $0_1;
  $0_1 = __wasm_i64_mul(($1_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1) >>> 19 | 0, 0, 19, 0) + $6_1 | 0;
  $2_1 = $8_1 + i64toi32_i32$HIGH_BITS | 0;
  $2_1 = $0_1 >>> 0 < $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP8[$3_1 | 0] = $0_1;
  HEAP8[$3_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$3_1 + 4 | 0] = $2_1;
  HEAP8[$3_1 + 3 | 0] = ($2_1 & 16777215) << 8 | $0_1 >>> 24;
  HEAP8[$3_1 + 2 | 0] = ($2_1 & 65535) << 16 | $0_1 >>> 16;
  HEAP8[$3_1 + 1 | 0] = ($2_1 & 255) << 24 | $0_1 >>> 8;
  $1_1 = $2_1;
  $4_1 = $10_1 + ($2_1 >>> 19 | 0) | 0;
  $0_1 = $14_1;
  $2_1 = $4_1;
  $0_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP8[$3_1 + 11 | 0] = $0_1 >>> 5;
  HEAP8[$3_1 + 10 | 0] = ($0_1 & 536870911) << 3 | $2_1 >>> 29;
  HEAP8[$3_1 + 9 | 0] = ($0_1 & 2097151) << 11 | $2_1 >>> 21;
  HEAP8[$3_1 + 8 | 0] = ($0_1 & 8191) << 19 | $2_1 >>> 13;
  HEAP8[$3_1 + 7 | 0] = ($0_1 & 31) << 27 | $2_1 >>> 5;
  $4_1 = $0_1;
  $8_1 = $5_1 + ($0_1 >>> 19 | 0) | 0;
  $0_1 = $11_1;
  $0_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP8[$3_1 + 18 | 0] = $0_1 >>> 10;
  HEAP8[$3_1 + 17 | 0] = $0_1 >>> 2;
  $6_1 = $8_1;
  HEAP8[$3_1 + 16 | 0] = ($0_1 & 67108863) << 6 | $6_1 >>> 26;
  HEAP8[$3_1 + 15 | 0] = ($0_1 & 262143) << 14 | $6_1 >>> 18;
  HEAP8[$3_1 + 14 | 0] = ($0_1 & 1023) << 22 | $6_1 >>> 10;
  HEAP8[$3_1 + 13 | 0] = ($0_1 & 3) << 30 | $6_1 >>> 2;
  $6_1 = $4_1 & 524287;
  HEAP8[$3_1 + 6 | 0] = $1_1 >>> 16 & 7 | $2_1 << 3;
  $5_1 = $0_1;
  $1_1 = $7_1 + ($0_1 >>> 19 | 0) | 0;
  $4_1 = $15_1;
  $4_1 = $1_1 >>> 0 < $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  HEAP8[$3_1 + 24 | 0] = $4_1 >>> 7;
  $0_1 = $1_1;
  HEAP8[$3_1 + 23 | 0] = ($4_1 & 2147483647) << 1 | $0_1 >>> 31;
  HEAP8[$3_1 + 22 | 0] = ($4_1 & 8388607) << 9 | $0_1 >>> 23;
  HEAP8[$3_1 + 21 | 0] = ($4_1 & 32767) << 17 | $0_1 >>> 15;
  HEAP8[$3_1 + 20 | 0] = ($4_1 & 127) << 25 | $0_1 >>> 7;
  $5_1 = $5_1 & 524287;
  $0_1 = $8_1;
  HEAP8[$3_1 + 12 | 0] = $0_1 << 6 | $6_1 >>> 13;
  $0_1 = $12_1;
  $2_1 = $9_1 + ($4_1 >>> 19 | 0) | 0;
  $0_1 = $2_1 >>> 0 < $9_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP8[$3_1 + 30 | 0] = $0_1 >>> 4;
  HEAP8[$3_1 + 29 | 0] = ($0_1 & 268435455) << 4 | $2_1 >>> 28;
  HEAP8[$3_1 + 28 | 0] = ($0_1 & 1048575) << 12 | $2_1 >>> 20;
  HEAP8[$3_1 + 27 | 0] = ($0_1 & 4095) << 20 | $2_1 >>> 12;
  HEAP8[$3_1 + 26 | 0] = ($0_1 & 15) << 28 | $2_1 >>> 4;
  $4_1 = $4_1 & 524287;
  HEAP8[$3_1 + 19 | 0] = $1_1 << 1 | $5_1 >>> 18;
  HEAP8[$3_1 + 31 | 0] = ($0_1 & 524287) >>> 12;
  HEAP8[$3_1 + 25 | 0] = $2_1 << 4 | $4_1 >>> 15;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $184($2_1 + 40 | 0, $1_1);
  label$1 : {
   if (!HEAP32[$2_1 + 40 >> 2]) {
    $1_1 = HEAP32[$2_1 + 44 >> 2];
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $384()), HEAP32[wasm2js_i32$0 + 88 >> 2] = wasm2js_i32$1;
    $1_1 = $1_1 >>> 11 | 0;
    $201($2_1 + 32 | 0, $1_1, 1);
    $7_1 = HEAP32[$2_1 + 36 >> 2];
    $3_1 = $2_1 + 88 | 0;
    $4_1 = HEAP32[$2_1 + 32 >> 2];
    $150($3_1, $4_1, $1_1);
    $217();
    HEAP32[$2_1 + 80 >> 2] = 1219456;
    (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $260($4_1, $1_1)), HEAP8[wasm2js_i32$0 + 87 | 0] = wasm2js_i32$1;
    HEAP32[$2_1 + 104 >> 2] = 1;
    HEAP32[$2_1 + 100 >> 2] = $1_1 + $4_1;
    HEAP32[$2_1 + 112 >> 2] = 0;
    HEAP32[$2_1 + 108 >> 2] = $2_1 + 87;
    HEAP32[$2_1 + 96 >> 2] = $4_1;
    HEAP32[$2_1 + 88 >> 2] = 0;
    HEAP32[$2_1 + 92 >> 2] = 0;
    HEAP32[$2_1 + 120 >> 2] = $2_1 + 80;
    $118($2_1 + 24 | 0, $3_1);
    $6_1 = HEAP32[$2_1 + 24 >> 2];
    if (!$6_1) {
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 56 >> 2] = HEAP32[262259];
     break label$1;
    }
    $8_1 = HEAP32[$2_1 + 28 >> 2];
    $5_1 = HEAP32[$2_1 + 104 >> 2];
    $9_1 = $2_1 + 16 | 0;
    $3_1 = HEAP32[$2_1 + 96 >> 2];
    label$4 : {
     if (!$3_1) {
      $3_1 = 0;
      if (!$5_1) {
       break label$4
      }
      $3_1 = HEAP32[$2_1 + 108 >> 2] != 0;
      break label$4;
     }
     $3_1 = HEAP32[$2_1 + 100 >> 2] - $3_1 | 0;
     if (!$5_1) {
      break label$4
     }
     $5_1 = $3_1 + (HEAP32[$2_1 + 108 >> 2] != 0) | 0;
     $3_1 = $3_1 >>> 0 > $5_1 >>> 0 ? -1 : $5_1;
    }
    $3_1 = $3_1 << 3;
    $201($9_1, $3_1 - (($3_1 >>> 0) % 11 | 0) | 0, 0);
    HEAP32[$2_1 + 136 >> 2] = 0;
    $3_1 = HEAP32[$2_1 + 20 >> 2];
    HEAP32[$2_1 + 128 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$2_1 + 132 >> 2] = $3_1;
    $337($2_1 + 128 | 0, $6_1, $8_1);
    while (1) {
     $118($2_1 + 8 | 0, $2_1 + 88 | 0);
     $3_1 = HEAP32[$2_1 + 8 >> 2];
     if ($3_1) {
      $5_1 = HEAP32[$2_1 + 12 >> 2];
      $6_1 = $2_1 + 128 | 0;
      $337($6_1, 1062236, 1);
      $337($6_1, $3_1, $5_1);
      continue;
     } else {
      HEAP32[$2_1 - -64 >> 2] = HEAP32[$2_1 + 136 >> 2];
      $3_1 = HEAP32[$2_1 + 132 >> 2];
      HEAP32[$2_1 + 56 >> 2] = HEAP32[$2_1 + 128 >> 2];
      HEAP32[$2_1 + 60 >> 2] = $3_1;
      break label$1;
     }
    };
   }
   abort();
  }
  HEAP32[$2_1 + 76 >> 2] = $1_1;
  HEAP32[$2_1 + 72 >> 2] = $7_1;
  $1_1 = $2_1 + 136 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 - -64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 60 >> 2];
  HEAP32[$2_1 + 128 >> 2] = HEAP32[$2_1 + 56 >> 2];
  HEAP32[$2_1 + 132 >> 2] = $4_1;
  $374($2_1 + 68 | 0);
  HEAP32[$2_1 + 96 >> 2] = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$2_1 + 132 >> 2];
  HEAP32[$2_1 + 88 >> 2] = HEAP32[$2_1 + 128 >> 2];
  HEAP32[$2_1 + 92 >> 2] = $1_1;
  $270($2_1, $2_1 + 88 | 0);
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 144 | 0;
 }
 
 function $61($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  $7_1 = $4_1 + 24 | 2;
  $3_1 = HEAP32[$0_1 >> 2];
  while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       default:
        if (($3_1 & 3) != 2) {
         break label$4
        }
        while (1) {
         if (($3_1 & 3) != 2) {
          break label$3
         }
         $6_1 = $146();
         $5_1 = HEAP32[$0_1 >> 2];
         HEAP32[$0_1 >> 2] = ($3_1 | 0) == ($5_1 | 0) ? $7_1 : $5_1;
         HEAP8[$4_1 + 32 | 0] = 0;
         HEAP32[$4_1 + 24 >> 2] = $6_1;
         HEAP32[$4_1 + 28 >> 2] = $3_1 & -4;
         if (($3_1 | 0) != ($5_1 | 0)) {
          $388($4_1 + 24 | 0);
          $3_1 = $5_1;
          continue;
         }
         break;
        };
        while (1) {
         if (HEAPU8[$4_1 + 32 | 0]) {
          $388($4_1 + 24 | 0);
          break label$3;
         }
         $3_1 = $146();
         $6_1 = HEAP32[$3_1 + 24 >> 2];
         $5_1 = ($6_1 | 0) == 2;
         HEAP32[$3_1 + 24 >> 2] = $5_1 ? 0 : $6_1;
         HEAP32[$4_1 + 36 >> 2] = $3_1;
         if (!$5_1) {
          $5_1 = $4_1 + 48 | 0;
          $3_1 = $3_1 + 24 | 0;
          $352($5_1, $3_1 + 4 | 0);
          $335($4_1 + 8 | 0, $5_1);
          HEAP8[$4_1 + 44 | 0] = HEAPU8[$4_1 + 12 | 0];
          HEAP32[$4_1 + 40 >> 2] = HEAP32[$4_1 + 8 >> 2];
          $5_1 = HEAP32[$3_1 >> 2];
          HEAP32[$3_1 >> 2] = $5_1 ? $5_1 : 1;
          if (!$5_1 | ($5_1 | 0) != 2) {
           break label$4
          }
          $5_1 = HEAP32[$3_1 >> 2];
          HEAP32[$3_1 >> 2] = 0;
          if (($5_1 | 0) != 2) {
           break label$4
          }
          $355($4_1 + 40 | 0);
         }
         $354($4_1 + 36 | 0);
         continue;
        };
       case 3:
        break label$2;
       case 1:
        break label$4;
       case 0:
        break label$5;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2];
      HEAP32[$0_1 >> 2] = $3_1 ? $3_1 : 2;
      if ($3_1) {
       continue
      }
      HEAP8[$4_1 + 52 | 0] = 0;
      HEAP32[$4_1 + 48 >> 2] = 3;
      FUNCTION_TABLE[HEAP32[$2_1 + 16 >> 2]]($1_1, $4_1 + 48 | 0);
      $1_1 = HEAP32[$0_1 >> 2];
      HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 48 >> 2];
      if (($1_1 & 3) != 2) {
       break label$4
      }
      $3_1 = $1_1 & -4;
      while (1) {
       if (!$3_1) {
        break label$2
       }
       $0_1 = HEAP32[$3_1 + 4 >> 2];
       $1_1 = HEAP32[$3_1 >> 2];
       HEAP32[$3_1 >> 2] = 0;
       if (!$1_1) {
        break label$4
       }
       HEAP8[$3_1 + 8 | 0] = 1;
       $2_1 = $1_1 + 24 | 0;
       $3_1 = HEAP32[$2_1 >> 2];
       HEAP32[$2_1 >> 2] = 2;
       HEAP32[$4_1 + 24 >> 2] = $1_1;
       label$13 : {
        switch ($3_1 | 0) {
        case 1:
         $2_1 = $4_1 + 48 | 0;
         $352($2_1, $1_1 + 28 | 0);
         $335($4_1 + 16 | 0, $2_1);
         $1_1 = HEAP32[$4_1 + 16 >> 2];
         HEAP8[$4_1 + 52 | 0] = HEAP8[$4_1 + 20 | 0] & 1;
         HEAP32[$4_1 + 48 >> 2] = $1_1;
         $355($2_1);
         break;
        case 0:
        case 2:
         break label$13;
        default:
         break label$4;
        };
       }
       $354($4_1 + 24 | 0);
       $3_1 = $0_1;
       continue;
      };
     }
     abort();
    }
    $3_1 = HEAP32[$0_1 >> 2];
    continue;
   }
   break;
  };
  global$0 = $4_1 - -64 | 0;
 }
 
 function $62($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 3232 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  $91($4_1, $2_1, 160);
  $223($3_1 + 168 | 0, $4_1);
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 1280) {
    $91(($3_1 + 1632 | 0) + $2_1 | 0, $3_1 + 168 | 0, 160);
    $2_1 = $2_1 + 160 | 0;
    continue;
   }
   break;
  };
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 1120) {
    $4_1 = $3_1 + 168 | 0;
    $5_1 = ($3_1 + 1632 | 0) + $2_1 | 0;
    $108($4_1, $3_1 + 8 | 0, $5_1);
    $6_1 = $3_1 + 3072 | 0;
    $281($6_1, $4_1);
    $4_1 = $3_1 + 2912 | 0;
    $223($4_1, $6_1);
    $91($5_1 + 160 | 0, $4_1, 160);
    $2_1 = $2_1 + 160 | 0;
    continue;
   }
   break;
  };
  $4_1 = $3_1 + 168 | 0;
  $2_1 = $3_1 + 1632 | 0;
  $91($4_1, $2_1, 1280);
  $166($3_1 + 1448 | 0, $1_1);
  $1_1 = $3_1 + 2912 | 0;
  $147($1_1, 0, 40);
  $5_1 = $3_1 + 2984 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 2976 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 2968 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 2960 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $147($3_1 + 3e3 | 0, 0, 72);
  HEAP32[$3_1 + 2992 >> 2] = 1;
  HEAP32[$3_1 + 2996 >> 2] = 0;
  HEAP32[$3_1 + 2952 >> 2] = 1;
  HEAP32[$3_1 + 2956 >> 2] = 0;
  $100($2_1, $4_1, HEAPU8[$3_1 + 1511 | 0]);
  $108($3_1 + 3072 | 0, $1_1, $2_1);
  $2_1 = 62;
  while (1) {
   if (($2_1 | 0) != -1) {
    $4_1 = $3_1 + 1512 | 0;
    $1_1 = $3_1 + 3072 | 0;
    $313($4_1, $1_1);
    $120($1_1, $4_1);
    $313($4_1, $1_1);
    $120($1_1, $4_1);
    $313($4_1, $1_1);
    $120($1_1, $4_1);
    $313($4_1, $1_1);
    $120($1_1, $4_1);
    $4_1 = $3_1 + 2912 | 0;
    $281($4_1, $1_1);
    $5_1 = $3_1 + 1632 | 0;
    $100($5_1, $3_1 + 168 | 0, HEAPU8[($3_1 + 1448 | 0) + $2_1 | 0]);
    $2_1 = $2_1 - 1 | 0;
    $108($1_1, $4_1, $5_1);
    continue;
   }
   break;
  };
  $281($0_1, $3_1 + 3072 | 0);
  global$0 = $3_1 + 3232 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 56 >> 2] = 1062236;
  HEAP32[$1_1 + 52 >> 2] = 1049120;
  $2_1 = $1_1 + 44 | 0;
  HEAP32[$2_1 >> 2] = 13116;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP16[$1_1 + 60 >> 1] = 1;
  HEAP32[$1_1 + 40 >> 2] = 1049120;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 13116;
  $57($1_1 + 24 | 0, $1_1 + 32 | 0);
  label$1 : {
   $2_1 = HEAP32[$1_1 + 24 >> 2];
   if (!$2_1) {
    $5_1 = HEAP32[304401];
    break label$1;
   }
   $3_1 = HEAP32[$1_1 + 28 >> 2];
   $346($1_1 + 16 | 0, 8, 4);
   $5_1 = HEAP32[$1_1 + 16 >> 2];
   if ($5_1) {
    $6_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$5_1 >> 2] = $2_1;
    HEAP32[$5_1 + 4 >> 2] = $3_1;
    $3_1 = $1_1 + 56 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $1_1 + 88 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $1_1 + 48 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $1_1 + 80 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $1_1 + 40 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $1_1 + 72 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $2_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$1_1 + 64 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$1_1 + 68 >> 2] = $2_1;
    $3_1 = $6_1 >>> 3 | 0;
    $4_1 = 12;
    $6_1 = 1;
    while (1) {
     $57($1_1 + 8 | 0, $1_1 - -64 | 0);
     $7_1 = HEAP32[$1_1 + 8 >> 2];
     if (!$7_1) {
      break label$1
     }
     $13_1 = HEAP32[$1_1 + 12 >> 2];
     if (($3_1 | 0) == ($6_1 | 0)) {
      $8_1 = 1;
      $2_1 = $3_1 + 1 | 0;
      label$6 : {
       if ($2_1 >>> 0 < $3_1 >>> 0) {
        $9_1 = $2_1;
        $10_1 = 0;
        break label$6;
       }
       $11_1 = $3_1 << 1;
       $2_1 = $2_1 >>> 0 < $11_1 >>> 0 ? $11_1 : $2_1;
       $2_1 = $2_1 >>> 0 > 4 ? $2_1 : 4;
       $12_1 = $3_1 ? $3_1 << 3 : $12_1;
       $156($1_1 + 96 | 0, $2_1 << 3, (($2_1 | 0) == ($2_1 & 536870911)) << 2, $3_1 ? $5_1 : 0, $12_1);
       if (HEAP32[$1_1 + 96 >> 2] != 1) {
        $3_1 = HEAP32[$1_1 + 104 >> 2] >>> 3 | 0;
        $5_1 = HEAP32[$1_1 + 100 >> 2];
        $8_1 = 0;
        break label$6;
       }
       $10_1 = HEAP32[$1_1 + 104 >> 2];
       $9_1 = HEAP32[$1_1 + 100 >> 2];
      }
      $331($8_1, $9_1, $10_1);
     }
     $2_1 = $4_1 + $5_1 | 0;
     HEAP32[$2_1 >> 2] = $13_1;
     HEAP32[$2_1 - 4 >> 2] = $7_1;
     $4_1 = $4_1 + 8 | 0;
     $6_1 = $6_1 + 1 | 0;
     continue;
    };
   }
   $0_1 = HEAP32[305241];
   FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](8, 4);
   abort();
  }
  HEAP32[$0_1 + 8 >> 2] = $6_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $5_1;
  global$0 = $1_1 + 112 | 0;
 }
 
 function $64($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 1824 | 0;
  global$0 = $7_1;
  $93($7_1 + 560 | 0, $0_1, $1_1);
  label$1 : {
   if (HEAP32[$7_1 + 560 >> 2] != 1 | HEAP32[$7_1 + 564 >> 2]) {
    $6_1 = $91($7_1, $7_1 + 568 | 0, 560);
    $11_1 = $4_1 >>> 0 > 1 ? $4_1 : 1;
    $9_1 = 64;
    while (1) {
     if (($8_1 | 0) == 1) {
      break label$1
     }
     $7_1 = $9_1 >>> 0 < 64 ? $9_1 : 64;
     $9_1 = $9_1 - $7_1 | 0;
     $12_1 = $5_1 + $7_1 | 0;
     $1_1 = $7_1;
     $4_1 = $5_1;
     while (1) {
      if ($1_1) {
       HEAP8[$4_1 | 0] = 0;
       $1_1 = $1_1 - 1 | 0;
       $4_1 = $4_1 + 1 | 0;
       continue;
      } else {
       label$7 : {
        $0_1 = $6_1 + 1264 | 0;
        $344($0_1, $6_1);
        $409($0_1, $2_1, $3_1);
        $8_1 = $8_1 + 1 | 0;
        HEAP32[$6_1 + 1196 >> 2] = $8_1 << 24 | $8_1 << 8 & 16711680 | ($8_1 >>> 8 & 65280 | $8_1 >>> 24);
        $409($0_1, $6_1 + 1196 | 0, 4);
        $1_1 = $6_1 + 560 | 0;
        $91($1_1, $0_1, 560);
        $0_1 = $6_1 + 1200 | 0;
        $161($0_1, $1_1);
        $4_1 = $7_1;
        $1_1 = $5_1;
        while (1) {
         if (!$4_1) {
          break label$7
         }
         HEAP8[$1_1 | 0] = HEAPU8[$1_1 | 0] ^ HEAPU8[$0_1 | 0];
         $0_1 = $0_1 + 1 | 0;
         $4_1 = $4_1 - 1 | 0;
         $1_1 = $1_1 + 1 | 0;
         continue;
        };
       }
      }
      break;
     };
     $91($6_1 + 1128 | 0, $6_1 + 1200 | 0, 64);
     $10_1 = 1;
     while (1) {
      if (($10_1 | 0) != ($11_1 | 0)) {
       $1_1 = $6_1 + 1264 | 0;
       $344($1_1, $6_1);
       $0_1 = $6_1 + 1128 | 0;
       $409($1_1, $0_1, 64);
       $4_1 = $6_1 + 560 | 0;
       $91($4_1, $1_1, 560);
       $161($0_1, $4_1);
       $4_1 = $7_1;
       $1_1 = $5_1;
       while (1) {
        if ($4_1) {
         HEAP8[$1_1 | 0] = HEAPU8[$1_1 | 0] ^ HEAPU8[$0_1 | 0];
         $4_1 = $4_1 - 1 | 0;
         $1_1 = $1_1 + 1 | 0;
         $0_1 = $0_1 + 1 | 0;
         continue;
        }
        break;
       };
       $10_1 = $10_1 + 1 | 0;
       continue;
      }
      break;
     };
     $5_1 = $12_1;
     continue;
    };
   }
   abort();
  }
  global$0 = $6_1 + 1824 | 0;
 }
 
 function $65($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 576 | 0;
  global$0 = $2_1;
  $9_1 = $2_1 + 8 | 0;
  $91($9_1, $1_1, 40);
  $6_1 = $2_1 + 48 | 0;
  $91($6_1, $1_1 + 40 | 0, 40);
  $5_1 = $2_1 + 536 | 0;
  $11_1 = $1_1 + 80 | 0;
  $91($5_1, $11_1, 40);
  $300($5_1, $6_1);
  $4_1 = $2_1 + 208 | 0;
  $167($4_1, $11_1, $6_1);
  $3_1 = $2_1 + 88 | 0;
  $15($3_1, $5_1, $4_1);
  $8_1 = $2_1 + 128 | 0;
  $15($8_1, $9_1, $6_1);
  $422($5_1, $8_1);
  $10_1 = $2_1 + 496 | 0;
  $15($10_1, $3_1, $5_1);
  $265($4_1, $10_1);
  $7_1 = $2_1 + 168 | 0;
  $91($7_1, $2_1 + 216 | 0, 40);
  $12_1 = $2_1 + 256 | 0;
  $15($12_1, $7_1, $3_1);
  $3_1 = $2_1 + 296 | 0;
  $15($3_1, $7_1, $8_1);
  $7_1 = $1_1 + 120 | 0;
  $15($4_1, $3_1, $7_1);
  $1_1 = $2_1 + 336 | 0;
  $15($1_1, $12_1, $4_1);
  $8_1 = $2_1 + 376 | 0;
  $91($8_1, $3_1, 40);
  $13_1 = $2_1 + 416 | 0;
  $15($13_1, $9_1, 1065272);
  $3_1 = $2_1 + 456 | 0;
  $15($3_1, $6_1, 1065272);
  $15($10_1, $12_1, 1065312);
  $15($4_1, $7_1, $1_1);
  $7_1 = $3_1;
  $3_1 = $334($4_1);
  $189($9_1, $7_1, $3_1);
  $189($6_1, $13_1, $3_1);
  $189($8_1, $10_1, $3_1);
  $15($4_1, $9_1, $1_1);
  $301($6_1, $334($4_1));
  $167($4_1, $11_1, $6_1);
  $15($5_1, $8_1, $4_1);
  $301($5_1, $334($5_1));
  $59($0_1, $5_1);
  global$0 = $2_1 + 576 | 0;
 }
 
 function $66($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 512 | 0;
  global$0 = $4_1;
  $166($4_1 + 8 | 0, $1_1);
  $1_1 = 0;
  $0_1 = $147($0_1, 0, 40);
  $2_1 = $0_1 + 72 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 - -64 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 48 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $147($0_1 + 88 | 0, 0, 72);
  HEAP32[$0_1 + 80 >> 2] = 1;
  HEAP32[$0_1 + 84 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  $2_1 = $4_1 + 7 | 0;
  while (1) {
   $3_1 = $1_1 >>> 0 > 64 ? $1_1 : 64;
   label$2 : {
    label$3 : {
     label$4 : {
      while (1) {
       if (($1_1 | 0) == ($3_1 | 0)) {
        break label$4
       }
       $5_1 = $1_1 & 1;
       $1_1 = $1_1 + 1 | 0;
       if (!$5_1) {
        continue
       }
       break;
      };
      $3_1 = $1_1 - 1 | 0;
      if ($3_1 >>> 0 < 64) {
       break label$3
      }
     }
     $91($4_1 + 232 | 0, $0_1, 40);
     $91($4_1 + 272 | 0, $0_1 + 40 | 0, 40);
     $91($4_1 + 312 | 0, $0_1 + 80 | 0, 40);
     $1_1 = 3;
     while (1) {
      if (!$1_1) {
       break label$2
      }
      $1_1 = $1_1 - 1 | 0;
      $2_1 = $4_1 + 72 | 0;
      $3_1 = $4_1 + 232 | 0;
      $120($2_1, $3_1);
      $313($3_1, $2_1);
      continue;
     };
    }
    $5_1 = $4_1 + 72 | 0;
    $135($5_1, Math_imul($3_1 >>> 1 | 0, 960) + 1074760 | 0, HEAPU8[$1_1 + $2_1 | 0]);
    $3_1 = $4_1 + 352 | 0;
    $122($3_1, $0_1, $5_1);
    $281($0_1, $3_1);
    continue;
   }
   break;
  };
  $1_1 = $4_1 + 352 | 0;
  $120($1_1, $4_1 + 232 | 0);
  $281($0_1, $1_1);
  $2_1 = $4_1 + 7 | 0;
  $1_1 = 0;
  while (1) {
   $3_1 = $1_1 >>> 0 > 64 ? $1_1 : 64;
   label$8 : {
    while (1) {
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$8
     }
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 1)) {
      continue
     }
     break;
    };
    $3_1 = $1_1 - 1 | 0;
    if ($3_1 >>> 0 > 63) {
     break label$8
    }
    $5_1 = $4_1 + 72 | 0;
    $135($5_1, Math_imul($3_1 >>> 1 | 0, 960) + 1074760 | 0, HEAPU8[$1_1 + $2_1 | 0]);
    $3_1 = $4_1 + 352 | 0;
    $122($3_1, $0_1, $5_1);
    $281($0_1, $3_1);
    continue;
   }
   break;
  };
  global$0 = $4_1 + 512 | 0;
 }
 
 function $67($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 272 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 56 >> 2] = $1_1 + $2_1;
  HEAP32[$3_1 + 52 >> 2] = $1_1;
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP32[$3_1 + 44 >> 2] = $2_1;
  HEAP16[$3_1 + 60 >> 1] = 1;
  HEAP32[$3_1 + 40 >> 2] = $1_1;
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  HEAP32[$3_1 + 32 >> 2] = 0;
  $160($3_1 + 208 | 0, $3_1 + 32 | 0);
  label$1 : {
   if (HEAP32[$3_1 + 216 >> 2] == 2) {
    HEAP32[$3_1 + 20 >> 2] = 0;
    HEAP32[$3_1 + 24 >> 2] = 0;
    $1_1 = HEAP32[262259];
    HEAP32[$3_1 + 16 >> 2] = $1_1;
    break label$1;
   }
   $2_1 = $3_1 - -64 | 0;
   $1_1 = $3_1 + 208 | 0;
   $91($2_1, $1_1, 60);
   $201($3_1 + 8 | 0, 0, 0);
   HEAP32[$3_1 + 136 >> 2] = 0;
   $4_1 = HEAP32[$3_1 + 12 >> 2];
   HEAP32[$3_1 + 128 >> 2] = HEAP32[$3_1 + 8 >> 2];
   HEAP32[$3_1 + 132 >> 2] = $4_1;
   $91($1_1, $2_1, 60);
   $222($1_1, $3_1 + 128 | 0);
   while (1) {
    $160($3_1 + 144 | 0, $3_1 + 32 | 0);
    if (HEAP32[$3_1 + 152 >> 2] == 2) {
     $4_1 = HEAP32[$3_1 + 136 >> 2];
     HEAP32[$3_1 + 24 >> 2] = $4_1;
     $2_1 = HEAP32[$3_1 + 132 >> 2];
     $1_1 = HEAP32[$3_1 + 128 >> 2];
     HEAP32[$3_1 + 16 >> 2] = $1_1;
     HEAP32[$3_1 + 20 >> 2] = $2_1;
    } else {
     $1_1 = $3_1 + 128 | 0;
     $337($1_1, 1062236, 1);
     $2_1 = $3_1 + 208 | 0;
     $91($2_1, $3_1 + 144 | 0, 60);
     $222($2_1, $1_1);
     continue;
    }
    break;
   };
  }
  $14($3_1 + 208 | 0, $1_1, $4_1);
  $1_1 = 1;
  $2_1 = HEAP32[$3_1 + 216 >> 2];
  $4_1 = HEAP32[$3_1 + 212 >> 2];
  label$6 : {
   if (HEAP32[$3_1 + 208 >> 2] != 1) {
    $1_1 = HEAP32[$3_1 + 220 >> 2];
    HEAP32[$0_1 + 12 >> 2] = HEAP32[$3_1 + 24 >> 2];
    $5_1 = HEAP32[$3_1 + 20 >> 2];
    HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP32[$0_1 + 8 >> 2] = $5_1;
    HEAP32[$0_1 + 24 >> 2] = $1_1;
    HEAP32[$0_1 + 20 >> 2] = $2_1;
    HEAP32[$0_1 + 16 >> 2] = $4_1;
    $1_1 = 0;
    break label$6;
   }
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $2_1;
   $374($3_1 + 16 | 0);
  }
  HEAP32[$0_1 >> 2] = $1_1;
  global$0 = $3_1 + 272 | 0;
 }
 
 function $68($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 52 >> 2] = $1_1;
  HEAP8[$3_1 + 56 | 0] = 3;
  HEAP32[$3_1 + 24 >> 2] = 0;
  HEAP32[$3_1 + 28 >> 2] = 32;
  HEAP32[$3_1 + 48 >> 2] = $0_1;
  $1_1 = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0_1 = HEAP32[$2_1 + 8 >> 2];
     if (!$0_1) {
      $6_1 = HEAP32[$2_1 + 20 >> 2] & 536870911;
      $7_1 = $6_1 + 1 | 0;
      $4_1 = HEAP32[$2_1 + 16 >> 2];
      $0_1 = 0;
      while (1) {
       $7_1 = $7_1 - 1 | 0;
       if (!$7_1) {
        break label$3
       }
       $1_1 = HEAP32[$2_1 >> 2] + $0_1 | 0;
       $5_1 = HEAP32[$1_1 + 4 >> 2];
       if ($5_1) {
        if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 + 52 >> 2] + 12 >> 2]](HEAP32[$3_1 + 48 >> 2], HEAP32[$1_1 >> 2], $5_1) | 0) {
         break label$2
        }
       }
       $1_1 = $0_1 + $4_1 | 0;
       $0_1 = $0_1 + 8 | 0;
       if (!(FUNCTION_TABLE[HEAP32[$1_1 + 4 >> 2]](HEAP32[$1_1 >> 2], $3_1 + 24 | 0) | 0)) {
        continue
       }
       break;
      };
      break label$2;
     }
     $6_1 = HEAP32[$2_1 + 12 >> 2];
     $7_1 = $6_1 << 5;
     $6_1 = $6_1 & 134217727;
     while (1) {
      if (!$7_1) {
       break label$3
      }
      $4_1 = HEAP32[$2_1 >> 2] + $1_1 | 0;
      $5_1 = HEAP32[$4_1 + 4 >> 2];
      if ($5_1) {
       if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 + 52 >> 2] + 12 >> 2]](HEAP32[$3_1 + 48 >> 2], HEAP32[$4_1 >> 2], $5_1) | 0) {
        break label$2
       }
      }
      HEAP8[$3_1 + 56 | 0] = HEAPU8[$0_1 + 28 | 0];
      (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_rotl_i64(HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 8 >> 2], 32)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
      HEAP32[$3_1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
      $4_1 = HEAP32[$2_1 + 16 >> 2];
      $252($3_1 + 16 | 0, $4_1, $0_1 + 20 | 0);
      $5_1 = HEAP32[$3_1 + 20 >> 2];
      HEAP32[$3_1 + 32 >> 2] = HEAP32[$3_1 + 16 >> 2];
      HEAP32[$3_1 + 36 >> 2] = $5_1;
      $252($3_1 + 8 | 0, $4_1, $0_1 + 12 | 0);
      $5_1 = HEAP32[$3_1 + 12 >> 2];
      HEAP32[$3_1 + 40 >> 2] = HEAP32[$3_1 + 8 >> 2];
      HEAP32[$3_1 + 44 >> 2] = $5_1;
      $1_1 = $1_1 + 8 | 0;
      $7_1 = $7_1 - 32 | 0;
      $5_1 = HEAP32[$0_1 >> 2];
      $0_1 = $0_1 + 32 | 0;
      $4_1 = $4_1 + ($5_1 << 3) | 0;
      if (!(FUNCTION_TABLE[HEAP32[$4_1 + 4 >> 2]](HEAP32[$4_1 >> 2], $3_1 + 24 | 0) | 0)) {
       continue
      }
      break;
     };
     break label$2;
    }
    $0_1 = 0;
    $1_1 = HEAPU32[$2_1 + 4 >> 2] > $6_1 >>> 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = $1_1 ? HEAP32[$2_1 >> 2] + ($6_1 << 3) | 0 : 0;
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 + 52 >> 2] + 12 >> 2]](HEAP32[$3_1 + 48 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]) | 0)) {
     break label$1
    }
   }
   $0_1 = 1;
  }
  global$0 = $3_1 - -64 | 0;
  return $0_1;
 }
 
 function $69($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $9_1 = $1_1 - 1 | 0;
  $10_1 = 0 - $1_1 | 0;
  $7_1 = $0_1 << 2;
  $5_1 = HEAP32[$2_1 >> 2];
  label$1 : while (1) {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $1_1 = $5_1;
    while (1) {
     label$4 : {
      label$5 : {
       $5_1 = HEAP32[$1_1 + 8 >> 2];
       if (!($5_1 & 1)) {
        $8_1 = HEAP32[$1_1 >> 2] & -4;
        $6_1 = $1_1 + 8 | 0;
        if ($8_1 - $6_1 >>> 0 < $7_1 >>> 0) {
         break label$5
        }
        $5_1 = $8_1 - $7_1 & $10_1;
        label$7 : {
         if ($5_1 >>> 0 < ((FUNCTION_TABLE[HEAP32[$4_1 + 16 >> 2]]($3_1, $0_1) << 2) + $6_1 | 0) + 8 >>> 0) {
          $5_1 = HEAP32[$6_1 >> 2];
          if ($6_1 & $9_1) {
           break label$5
          }
          HEAP32[$2_1 >> 2] = $5_1 & -4;
          HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 1;
          $5_1 = $1_1;
          break label$7;
         }
         HEAP32[$5_1 >> 2] = 0;
         $5_1 = $5_1 - 8 | 0;
         HEAP32[$5_1 >> 2] = 0;
         HEAP32[$5_1 + 4 >> 2] = 0;
         HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2] & -4;
         $0_1 = HEAP32[$1_1 >> 2];
         $2_1 = $0_1 & -4;
         label$9 : {
          if (!$2_1) {
           break label$9
          }
          $0_1 = $0_1 & 2 ? 0 : $2_1;
          if (!$0_1) {
           break label$9
          }
          HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] & 3 | $5_1;
         }
         HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] & 3 | $1_1;
         HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2] & -2;
         $0_1 = HEAP32[$1_1 >> 2];
         $2_1 = $0_1 & 3 | $5_1;
         HEAP32[$1_1 >> 2] = $2_1;
         label$10 : {
          if (!($0_1 & 2)) {
           $1_1 = HEAP32[$5_1 >> 2];
           break label$10;
          }
          HEAP32[$1_1 >> 2] = $2_1 & -3;
          $1_1 = HEAP32[$5_1 >> 2] | 2;
          HEAP32[$5_1 >> 2] = $1_1;
         }
         HEAP32[$5_1 >> 2] = $1_1 | 1;
        }
        $11_1 = $5_1 + 8 | 0;
        break label$2;
       }
       HEAP32[$1_1 + 8 >> 2] = $5_1 & -2;
       $5_1 = HEAP32[$1_1 + 4 >> 2] & -4;
       if ($5_1) {
        $5_1 = HEAP8[$5_1 | 0] & 1 ? 0 : $5_1
       } else {
        $5_1 = 0
       }
       $196($1_1);
       if (!(HEAPU8[$1_1 | 0] & 2)) {
        break label$4
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = $5_1;
      continue label$1;
     }
     HEAP32[$2_1 >> 2] = $5_1;
     $1_1 = $5_1;
     continue;
    };
   }
   break;
  };
  return $11_1;
 }
 
 function $70($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 560 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 - -64 | 0;
  $175($3_1);
  $101($3_1, $1_1, 32);
  $7_1 = $2_1 + 344 | 0;
  $91($7_1, $3_1, 216);
  $54($2_1 + 280 | 0, $7_1);
  $3_1 = $2_1 + 304 | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $2_1 + 368 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $3_1 = $2_1 + 296 | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  $8_1 = $2_1 + 360 | 0;
  $4_1 = $8_1;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $3_1 = $2_1 + 288 | 0;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  $9_1 = $2_1 + 352 | 0;
  $4_1 = $9_1;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $3_1 = HEAP32[$2_1 + 284 >> 2];
  $1_1 = HEAP32[$2_1 + 280 >> 2];
  HEAP32[$2_1 + 344 >> 2] = $1_1;
  HEAP32[$2_1 + 348 >> 2] = $3_1;
  HEAP8[$2_1 + 344 | 0] = $1_1 & 248;
  HEAP8[$2_1 + 375 | 0] = HEAPU8[$2_1 + 375 | 0] & 63 | 64;
  $276($7_1);
  $1_1 = $2_1 + 367 | 0;
  $5_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $3_1 = $2_1 + 55 | 0;
  $4_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$3_1 | 0] = $4_1;
  HEAP8[$3_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$3_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$3_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$3_1 + 4 | 0] = $5_1;
  HEAP8[$3_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$3_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$3_1 + 7 | 0] = $5_1 >>> 24;
  $4_1 = HEAP32[$8_1 + 4 >> 2];
  $10_1 = $2_1 + 48 | 0;
  $5_1 = $10_1;
  HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$9_1 + 4 >> 2];
  $11_1 = $2_1 + 40 | 0;
  $5_1 = $11_1;
  HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $5_1 = $2_1 + 320 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $12_1 = $2_1 + 8 | 0;
  $6_1 = $12_1;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $5_1 = $2_1 + 328 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $13_1 = $2_1 + 16 | 0;
  $6_1 = $13_1;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $5_1 = $2_1 + 336 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $2_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 348 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$2_1 + 344 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 316 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$2_1 + 312 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = HEAPU8[$2_1 + 375 | 0];
  $5_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $1_1 = HEAP32[$10_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$11_1 + 4 >> 2];
  HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$12_1 + 4 >> 2];
  $3_1 = $2_1 + 384 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$13_1 + 4 >> 2];
  $3_1 = $2_1 + 392 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  $3_1 = $2_1 + 400 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$2_1 + 344 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$2_1 + 348 >> 2] = $1_1;
  HEAP8[$2_1 + 375 | 0] = $4_1 & 127;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$2_1 + 376 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 + 380 >> 2] = $1_1;
  $350($0_1, $7_1);
  $91($0_1 + 192 | 0, $7_1, 64);
  global$0 = $2_1 + 560 | 0;
 }
 
 function $71($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $2_1 = global$0 - 192 | 0;
  global$0 = $2_1;
  $147($2_1 + 8 | 0, 0, 64);
  while (1) {
   label$2 : {
    if (($7_1 | 0) != 8) {
     $8_1 = ($2_1 + 8 | 0) + ($7_1 << 3) | 0;
     $3_1 = $8_1;
     $11_1 = HEAP32[$3_1 >> 2];
     $9_1 = HEAP32[$3_1 + 4 >> 2];
     $4_1 = 0;
     $5_1 = $1_1;
     while (1) {
      if (($4_1 | 0) == 64) {
       break label$2
      }
      $10_1 = HEAPU8[$5_1 | 0];
      $3_1 = $4_1 & 56;
      $6_1 = $3_1 & 31;
      if (($3_1 & 63) >>> 0 >= 32) {
       $3_1 = $10_1 << $6_1;
       $6_1 = 0;
      } else {
       $3_1 = (1 << $6_1) - 1 & $10_1 >>> 32 - $6_1;
       $6_1 = $10_1 << $6_1;
      }
      $11_1 = $6_1 | $11_1;
      $9_1 = $3_1 | $9_1;
      $4_1 = $4_1 + 8 | 0;
      $5_1 = $5_1 + 1 | 0;
      continue;
     };
    }
    $1_1 = HEAP32[$2_1 + 12 >> 2];
    $4_1 = $1_1;
    HEAP32[$2_1 + 72 >> 2] = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$2_1 + 76 >> 2] = $1_1 & 1048575;
    $3_1 = HEAP32[$2_1 + 68 >> 2];
    $10_1 = HEAP32[$2_1 + 64 >> 2];
    HEAP32[$2_1 + 144 >> 2] = ($3_1 & 1048575) << 12 | $10_1 >>> 20;
    HEAP32[$2_1 + 148 >> 2] = $3_1 >>> 20;
    $3_1 = HEAP32[$2_1 + 44 >> 2];
    $5_1 = $3_1;
    $9_1 = HEAP32[$2_1 + 40 >> 2];
    HEAP32[$2_1 + 112 >> 2] = ($3_1 & 15) << 28 | $9_1 >>> 4;
    HEAP32[$2_1 + 116 >> 2] = $3_1 >>> 4 & 1048575;
    $3_1 = HEAP32[$2_1 + 20 >> 2];
    $7_1 = $3_1;
    $1_1 = HEAP32[$2_1 + 16 >> 2];
    $3_1 = $3_1 << 12 | $1_1 >>> 20;
    HEAP32[$2_1 + 80 >> 2] = $1_1 << 12 | $4_1 >>> 20;
    HEAP32[$2_1 + 84 >> 2] = $3_1 & 1048575;
    $3_1 = HEAP32[$2_1 + 28 >> 2];
    $4_1 = $3_1;
    $6_1 = HEAP32[$2_1 + 24 >> 2];
    $1_1 = $6_1;
    $3_1 = $3_1 << 24 | $1_1 >>> 8;
    HEAP32[$2_1 + 88 >> 2] = $1_1 << 24 | $7_1 >>> 8;
    HEAP32[$2_1 + 92 >> 2] = $3_1 & 1048575;
    $7_1 = HEAP32[$2_1 + 36 >> 2];
    $8_1 = HEAP32[$2_1 + 32 >> 2];
    $3_1 = $8_1 << 4;
    $11_1 = $3_1;
    $3_1 = $4_1;
    $4_1 = $6_1;
    HEAP32[$2_1 + 96 >> 2] = ($3_1 & 268435455) << 4 | $4_1 >>> 28;
    HEAP32[$2_1 + 100 >> 2] = ($3_1 >>> 28 | $11_1) & 1048575;
    $3_1 = $5_1;
    $1_1 = $9_1 << 16;
    $5_1 = $7_1;
    $7_1 = $8_1;
    HEAP32[$2_1 + 104 >> 2] = ($5_1 & 65535) << 16 | $7_1 >>> 16;
    HEAP32[$2_1 + 108 >> 2] = ($5_1 >>> 16 | $1_1) & 1048575;
    $1_1 = HEAP32[$2_1 + 52 >> 2];
    $5_1 = $1_1;
    $4_1 = HEAP32[$2_1 + 48 >> 2];
    $1_1 = $1_1 << 8 | $4_1 >>> 24;
    HEAP32[$2_1 + 120 >> 2] = $4_1 << 8 | $3_1 >>> 24;
    HEAP32[$2_1 + 124 >> 2] = $1_1 & 1048575;
    $1_1 = HEAP32[$2_1 + 60 >> 2];
    $3_1 = $1_1;
    $4_1 = HEAP32[$2_1 + 56 >> 2];
    $1_1 = $3_1 << 20 | $4_1 >>> 12;
    HEAP32[$2_1 + 128 >> 2] = $4_1 << 20 | $5_1 >>> 12;
    HEAP32[$2_1 + 132 >> 2] = $1_1 & 1048575;
    HEAP32[$2_1 + 136 >> 2] = $3_1;
    HEAP32[$2_1 + 140 >> 2] = $10_1 & 1048575;
    $1_1 = $2_1 + 152 | 0;
    $3_1 = $2_1 + 72 | 0;
    $6($1_1, $3_1, 1065152);
    $91($3_1, $1_1, 40);
    $5_1 = $2_1 + 112 | 0;
    $6($1_1, $5_1, 1065512);
    $91($5_1, $1_1, 40);
    $204($1_1, $5_1, $3_1);
    $92($0_1, $1_1);
    global$0 = $2_1 + 192 | 0;
    return;
   }
   HEAP32[$8_1 >> 2] = $11_1;
   HEAP32[$8_1 + 4 >> 2] = $9_1;
   $1_1 = $1_1 + 8 | 0;
   $7_1 = $7_1 + 1 | 0;
   continue;
  };
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$0_1 >> 2] - 1 | 0) {
    default:
     HEAP32[$2_1 + 28 >> 2] = 0;
     HEAP32[$2_1 + 24 >> 2] = 1217612;
     HEAP32[$2_1 + 12 >> 2] = 1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 8 >> 2] = 1062572;
     $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 8 | 0);
     break label$1;
    case 0:
     HEAP32[$2_1 + 28 >> 2] = 0;
     HEAP32[$2_1 + 24 >> 2] = 1217612;
     HEAP32[$2_1 + 12 >> 2] = 1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 8 >> 2] = 1062548;
     $0_1 = $249(HEAP32[$1_1 + 24 >> 2], HEAP32[$1_1 + 28 >> 2], $2_1 + 8 | 0);
     break label$1;
    case 1:
     HEAP32[$2_1 + 4 >> 2] = $0_1 + 4;
     HEAP32[$2_1 + 28 >> 2] = 1;
     HEAP32[$2_1 + 12 >> 2] = 1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 8 >> 2] = 1062516;
     HEAP32[$2_1 + 36 >> 2] = 3;
     $0_1 = HEAP32[$1_1 + 24 >> 2];
     $1_1 = HEAP32[$1_1 + 28 >> 2];
     HEAP32[$2_1 + 24 >> 2] = $2_1 + 32;
     HEAP32[$2_1 + 32 >> 2] = $2_1 + 4;
     $0_1 = $249($0_1, $1_1, $2_1 + 8 | 0);
     break label$1;
    case 2:
     HEAP32[$2_1 + 4 >> 2] = $0_1 + 4;
     HEAP32[$2_1 + 28 >> 2] = 1;
     HEAP32[$2_1 + 12 >> 2] = 1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 8 >> 2] = 1062488;
     HEAP32[$2_1 + 36 >> 2] = 3;
     $0_1 = HEAP32[$1_1 + 24 >> 2];
     $1_1 = HEAP32[$1_1 + 28 >> 2];
     HEAP32[$2_1 + 24 >> 2] = $2_1 + 32;
     HEAP32[$2_1 + 32 >> 2] = $2_1 + 4;
     $0_1 = $249($0_1, $1_1, $2_1 + 8 | 0);
     break label$1;
    case 3:
     break label$2;
    };
   }
   HEAP32[$2_1 >> 2] = $0_1 + 4;
   HEAP32[$2_1 + 4 >> 2] = $0_1 + 8;
   HEAP32[$2_1 + 28 >> 2] = 2;
   HEAP32[$2_1 + 44 >> 2] = 4;
   HEAP32[$2_1 + 12 >> 2] = 2;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 8 >> 2] = 1062436;
   HEAP32[$2_1 + 36 >> 2] = 3;
   $0_1 = HEAP32[$1_1 + 24 >> 2];
   $1_1 = HEAP32[$1_1 + 28 >> 2];
   HEAP32[$2_1 + 24 >> 2] = $2_1 + 32;
   HEAP32[$2_1 + 40 >> 2] = $2_1 + 4;
   HEAP32[$2_1 + 32 >> 2] = $2_1;
   $0_1 = $249($0_1, $1_1, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $73($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   $0_1 = Math_imul($0_1, 3);
   $7_1 = $0_1 >>> 0 > 1 ? (-1 >>> Math_clz32($0_1 - 1 | 0) | 0) + 1 | 0 : 1;
   label$2 : {
    if (($7_1 | 0) != ($7_1 & 67108863)) {
     break label$2
    }
    $0_1 = $7_1 << 6;
    if (($0_1 | 0) < 0) {
     break label$2
    }
    $346($4_1 + 8 | 0, $0_1, 64);
    $3_1 = HEAP32[$4_1 + 8 >> 2];
    if (!$3_1) {
     $1_1 = $0_1;
     $0_1 = HEAP32[305241];
     FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0]($1_1, 64);
     break label$2;
    }
    $0_1 = HEAP32[$4_1 + 12 >> 2];
    HEAP32[$4_1 + 24 >> 2] = 0;
    HEAP32[$4_1 + 16 >> 2] = $3_1;
    HEAP32[$4_1 + 20 >> 2] = $0_1 >>> 6;
    $0_1 = 0;
    label$4 : {
     label$5 : {
      while (1) {
       if (($7_1 | 0) == ($8_1 | 0)) {
        label$8 : {
         $3_1 = HEAP32[$4_1 + 16 >> 2];
         $2_1 = HEAP32[$4_1 + 20 >> 2];
         if ($2_1 >>> 0 <= $0_1 >>> 0) {
          break label$4
         }
         $2_1 = $2_1 << 6;
         $6_1 = $0_1 << 6;
         label$9 : {
          if (!$6_1) {
           $379($3_1, $2_1, 64);
           $3_1 = 64;
           break label$9;
          }
          $5_1 = $323($3_1, $2_1, 64, $6_1);
          $2_1 = $5_1 ? $5_1 : $6_1;
          if (!$5_1) {
           break label$8
          }
          $3_1 = $2_1;
         }
         $5_1 = 0;
         break label$5;
        }
       } else {
        $8_1 = $8_1 + 1 | 0;
        if (HEAP32[$4_1 + 20 >> 2] == ($0_1 | 0)) {
         $6_1 = $4_1 + 16 | 0;
         $5_1 = 0;
         $3_1 = global$0 - 16 | 0;
         global$0 = $3_1;
         $9_1 = 1;
         $2_1 = $0_1 + 1 | 0;
         label$13 : {
          if ($2_1 >>> 0 < $0_1 >>> 0) {
           break label$13
          }
          $9_1 = 0;
          $0_1 = HEAP32[$6_1 + 4 >> 2];
          $5_1 = $0_1 << 1;
          $2_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $2_1;
          $2_1 = $2_1 >>> 0 > 4 ? $2_1 : 4;
          $156($3_1, $2_1 << 6, (($2_1 | 0) == ($2_1 & 67108863)) << 6, $0_1 ? HEAP32[$6_1 >> 2] : 0, $0_1 << 6);
          if (HEAP32[$3_1 >> 2] != 1) {
           $2_1 = HEAP32[$3_1 + 4 >> 2];
           HEAP32[$6_1 + 4 >> 2] = HEAP32[$3_1 + 8 >> 2] >>> 6;
           HEAP32[$6_1 >> 2] = $2_1;
           break label$13;
          }
          $5_1 = HEAP32[$3_1 + 8 >> 2];
          $2_1 = HEAP32[$3_1 + 4 >> 2];
          $9_1 = 1;
         }
         $331($9_1, $2_1, $5_1);
         global$0 = $3_1 + 16 | 0;
         $3_1 = HEAP32[$4_1 + 16 >> 2];
         $0_1 = HEAP32[$4_1 + 24 >> 2];
        }
        $0_1 = ($0_1 << 6) + $3_1 | 0;
        HEAP32[$0_1 + 32 >> 2] = 0;
        HEAP32[$0_1 + 24 >> 2] = 0;
        HEAP32[$0_1 + 28 >> 2] = 0;
        HEAP32[$0_1 + 16 >> 2] = $8_1;
        HEAP32[$0_1 + 8 >> 2] = 0;
        HEAP32[$0_1 >> 2] = 0;
        HEAP32[$0_1 + 4 >> 2] = 0;
        $0_1 = HEAP32[$4_1 + 24 >> 2] + 1 | 0;
        HEAP32[$4_1 + 24 >> 2] = $0_1;
        continue;
       }
       break;
      };
      $5_1 = 1;
     }
     $331($5_1, $2_1, 64);
    }
    $346($4_1, 16, 4);
    $2_1 = HEAP32[$4_1 >> 2];
    if ($2_1) {
     break label$1
    }
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](16, 4);
   }
   abort();
  }
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[$2_1 + 8 >> 2] = 31 - Math_clz32($7_1);
  global$0 = $4_1 + 32 | 0;
  return $2_1;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $288($2_1, $0_1, $1_1);
  $0_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $14($2_1 + 32 | 0, $1_1, $0_1);
  $0_1 = 1;
  $3_1 = HEAP32[$2_1 + 36 >> 2];
  label$1 : {
   if (HEAP32[$2_1 + 32 >> 2] != 1) {
    $1_1 = HEAP32[$2_1 + 44 >> 2];
    HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 40 >> 2];
    HEAP32[$2_1 + 24 >> 2] = $1_1;
    HEAP32[$2_1 + 16 >> 2] = $3_1;
    $374($2_1 + 16 | 0);
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[$2_1 + 40 >> 2];
   label$3 : {
    if (HEAPU8[$3_1 + 16 | 0] == 2) {
     break label$3
    }
    $5_1 = HEAP32[$3_1 >> 2];
    $8_1 = $5_1 + Math_imul(HEAP32[$3_1 + 8 >> 2], 24) | 0;
    while (1) {
     $1_1 = $5_1 - 12 | 0;
     label$5 : {
      while (1) {
       if (($1_1 + 12 | 0) == ($8_1 | 0)) {
        break label$5
       }
       $1_1 = $1_1 + 24 | 0;
       $0_1 = HEAP32[$1_1 >> 2];
       if (!$0_1) {
        continue
       }
       break;
      };
      $5_1 = $1_1 + 12 | 0;
      $6_1 = Math_imul(HEAP32[$1_1 + 8 >> 2], 40);
      while (1) {
       if ($6_1) {
        if (HEAP32[$0_1 >> 2]) {
         $374($0_1)
        }
        if (HEAP32[$0_1 + 20 >> 2]) {
         $374($0_1 + 20 | 0)
        }
        $0_1 = $0_1 + 40 | 0;
        $6_1 = $6_1 - 40 | 0;
        continue;
       }
       break;
      };
      $0_1 = HEAP32[$1_1 + 4 >> 2];
      if ($0_1) {
       $7_1 = Math_imul($0_1, 40);
       $0_1 = HEAP32[$1_1 >> 2];
      } else {
       $0_1 = 0
      }
      if (!$0_1 | !$7_1) {
       continue
      }
      $168($0_1, $7_1, 4);
      continue;
     }
     break;
    };
    $0_1 = HEAP32[$3_1 + 4 >> 2];
    if (!$0_1) {
     break label$3
    }
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1) {
     break label$3
    }
    $0_1 = Math_imul($0_1, 24);
    if (!$0_1) {
     break label$3
    }
    $168($1_1, $0_1, 4);
   }
   $1_1 = HEAP32[$4_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[$4_1 >> 2]]((($1_1 - 1 & -20) + $3_1 | 0) + 20 | 0);
   $0_1 = 0;
   $1_1 = $1_1 >>> 0 > 4 ? $1_1 : 4;
   $379($3_1, ($1_1 + HEAP32[$4_1 + 4 >> 2] | 0) + 19 & 0 - $1_1, $1_1);
  }
  $392($2_1 + 8 | 0);
  global$0 = $2_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $75($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   if ($1_1) {
    $1_1 = HEAP32[$0_1 >> 2];
    $6_1 = $1_1 & 1;
    $8_1 = $6_1 ? 43 : 1114112;
    $6_1 = $5_1 + $6_1 | 0;
    break label$1;
   }
   $1_1 = HEAP32[$0_1 >> 2];
   $8_1 = 45;
   $6_1 = $5_1 + 1 | 0;
  }
  label$3 : {
   if (!($1_1 & 4)) {
    $2_1 = 0;
    break label$3;
   }
   $6_1 = $327($2_1, $2_1 + $3_1 | 0) + $6_1 | 0;
  }
  $1_1 = 1;
  label$5 : {
   if (HEAP32[$0_1 + 8 >> 2] != 1) {
    if ($268($0_1, $8_1, $2_1, $3_1)) {
     break label$5
    }
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $4_1, $5_1) | 0;
    break label$5;
   }
   label$7 : {
    $9_1 = HEAP32[$0_1 + 12 >> 2];
    if ($9_1 >>> 0 > $6_1 >>> 0) {
     if (HEAPU8[$0_1 | 0] & 8) {
      break label$7
     }
     $182($7_1, $0_1, $9_1 - $6_1 | 0, 1);
     $6_1 = HEAP32[$7_1 >> 2];
     if (($6_1 | 0) == 1114112) {
      break label$5
     }
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     if ($268($0_1, $8_1, $2_1, $3_1)) {
      break label$5
     }
     if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $4_1, $5_1) | 0) {
      break label$5
     }
     $1_1 = $255($6_1, $9_1, $0_1);
     break label$5;
    }
    if ($268($0_1, $8_1, $2_1, $3_1)) {
     break label$5
    }
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $4_1, $5_1) | 0;
    break label$5;
   }
   $10_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$0_1 + 4 >> 2] = 48;
   $11_1 = HEAPU8[$0_1 + 32 | 0];
   HEAP8[$0_1 + 32 | 0] = 1;
   if ($268($0_1, $8_1, $2_1, $3_1)) {
    break label$5
   }
   $182($7_1 + 8 | 0, $0_1, $9_1 - $6_1 | 0, 1);
   $2_1 = HEAP32[$7_1 + 8 >> 2];
   if (($2_1 | 0) == 1114112) {
    break label$5
   }
   $3_1 = HEAP32[$7_1 + 12 >> 2];
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $4_1, $5_1) | 0) {
    break label$5
   }
   if ($255($2_1, $3_1, $0_1)) {
    break label$5
   }
   HEAP8[$0_1 + 32 | 0] = $11_1;
   HEAP32[$0_1 + 4 >> 2] = $10_1;
   $1_1 = 0;
  }
  global$0 = $7_1 + 16 | 0;
  return $1_1;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $8_1 = HEAP32[$1_1 + 8 >> 2];
  $17_1 = $8_1 - 1 | 0;
  $18_1 = 0 - $8_1 | 0;
  $15_1 = HEAP32[$1_1 + 16 >> 2];
  $19_1 = $5_1 - $15_1 | 0;
  $7_1 = HEAP32[$1_1 + 20 >> 2];
  $20_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $12_1 = $0_1;
  $12_1 = $0_1;
  label$1 : {
   label$2 : while (1) {
    $9_1 = $5_1 + $7_1 | 0;
    $0_1 = $9_1 - 1 | 0;
    if ($0_1 >>> 0 >= $3_1 >>> 0) {
     HEAP32[$1_1 + 20 >> 2] = $3_1;
     $0_1 = 0;
     break label$1;
    }
    label$4 : {
     $10_1 = HEAPU8[$0_1 + $2_1 | 0];
     $0_1 = $10_1 & 31;
     label$5 : {
      if ((($10_1 & 63) >>> 0 >= 32 ? $16_1 >>> $0_1 | 0 : ((1 << $0_1) - 1 & $16_1) << 32 - $0_1 | $20_1 >>> $0_1) & 1) {
       $11_1 = HEAP32[$1_1 + 28 >> 2];
       $0_1 = $6_1 ? $8_1 : $8_1 >>> 0 > $11_1 >>> 0 ? $8_1 : $11_1;
       $13_1 = $0_1 >>> 0 > $5_1 >>> 0 ? $0_1 : $5_1;
       $10_1 = $2_1 + $7_1 | 0;
       label$7 : {
        while (1) {
         if (($0_1 | 0) == ($13_1 | 0)) {
          $11_1 = $6_1 ? 0 : $11_1;
          $0_1 = $17_1;
          label$10 : {
           while (1) {
            if ($11_1 >>> 0 >= $0_1 + 1 >>> 0) {
             HEAP32[$1_1 + 20 >> 2] = $9_1;
             if (!$6_1) {
              break label$10
             }
             break label$4;
            }
            if ($0_1 >>> 0 >= $5_1 >>> 0 | $0_1 + $7_1 >>> 0 >= $3_1 >>> 0) {
             break label$7
            }
            $13_1 = $0_1 + $10_1 | 0;
            $14_1 = $0_1 + $4_1 | 0;
            $0_1 = $0_1 - 1 | 0;
            if (HEAPU8[$14_1 | 0] == HEAPU8[$13_1 | 0]) {
             continue
            }
            break;
           };
           $7_1 = $7_1 + $15_1 | 0;
           HEAP32[$1_1 + 20 >> 2] = $7_1;
           $0_1 = $19_1;
           if ($6_1) {
            continue label$2
           }
           break label$5;
          }
          HEAP32[$1_1 + 28 >> 2] = 0;
          break label$4;
         }
         if ($0_1 + $7_1 >>> 0 >= $3_1 >>> 0) {
          break label$7
         }
         $14_1 = $0_1 + $10_1 | 0;
         $21_1 = $0_1 + $4_1 | 0;
         $0_1 = $0_1 + 1 | 0;
         if (HEAPU8[$21_1 | 0] == HEAPU8[$14_1 | 0]) {
          continue
         }
         break;
        };
        $7_1 = ($7_1 + $18_1 | 0) + $0_1 | 0;
        HEAP32[$1_1 + 20 >> 2] = $7_1;
        if ($6_1) {
         continue
        }
        $0_1 = 0;
        break label$5;
       }
       abort();
      }
      HEAP32[$1_1 + 20 >> 2] = $9_1;
      $0_1 = 0;
      $7_1 = $9_1;
      if ($6_1) {
       continue
      }
     }
     HEAP32[$1_1 + 28 >> 2] = $0_1;
     continue;
    }
    break;
   };
   HEAP32[$12_1 + 4 >> 2] = $7_1;
   HEAP32[$12_1 + 8 >> 2] = $9_1;
   $0_1 = 1;
  }
  HEAP32[$12_1 >> 2] = $0_1;
 }
 
 function $77($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  $3_1 = $5_1 + 288 | 0;
  $422($3_1, $2_1);
  $4_1 = $5_1 + 8 | 0;
  $15($4_1, $3_1, $2_1);
  $422($3_1, $4_1);
  $6_1 = $5_1 + 48 | 0;
  $15($6_1, $3_1, $2_1);
  $7_1 = $5_1 + 128 | 0;
  $15($7_1, $1_1, $4_1);
  $4_1 = $5_1 + 208 | 0;
  $15($4_1, $1_1, $6_1);
  $80($3_1, $4_1);
  $8_1 = $5_1 + 248 | 0;
  $91($8_1, $3_1, 40);
  $30($3_1, $8_1, 2);
  $9_1 = $5_1 + 168 | 0;
  $15($9_1, $4_1, $3_1);
  $6_1 = $5_1 + 88 | 0;
  $15($6_1, $7_1, $9_1);
  $422($3_1, $6_1);
  $15($4_1, $2_1, $3_1);
  $7_1 = $312($4_1, $1_1);
  $91($3_1, $1_1, 40);
  $186($3_1);
  $2_1 = $312($4_1, $3_1);
  $91($3_1, $1_1, 40);
  $186($3_1);
  $15($8_1, $3_1, 1065272);
  $1_1 = $312($4_1, $8_1);
  $15($3_1, 1065272, $6_1);
  $189($6_1, $3_1, $380($1_1 | $2_1));
  $301($6_1, $334($6_1));
  $1_1 = $380($2_1 | $7_1);
  $91($0_1 + 8 | 0, $6_1, 40);
  HEAP8[$0_1 | 0] = $1_1;
  global$0 = $5_1 + 368 | 0;
 }
 
 function $78($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 432 | 0;
  global$0 = $3_1;
  $288($3_1 + 24 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$3_1 + 28 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 24 >> 2];
  HEAP32[$3_1 + 32 >> 2] = $1_1;
  label$1 : {
   if (($2_1 | 0) == 32) {
    HEAP8[$3_1 + 178 | 0] = 0;
    HEAP16[$3_1 + 176 >> 1] = 0;
    $302($3_1 + 16 | 0, $1_1, 32, 32);
    if (HEAP32[$3_1 + 20 >> 2] != 32) {
     break label$1
    }
    $4_1 = HEAP32[$3_1 + 16 >> 2];
    $9_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
    $10_1 = HEAPU8[$4_1 + 2 | 0];
    HEAP8[$3_1 + 46 | 0] = $10_1;
    $11_1 = $3_1 + 42 | 0;
    HEAP8[$11_1 | 0] = HEAPU8[$4_1 + 6 | 0];
    HEAP16[$3_1 + 44 >> 1] = $9_1;
    HEAP16[$3_1 + 40 >> 1] = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8;
    $7_1 = HEAPU8[$4_1 + 7 | 0] | HEAPU8[$4_1 + 8 | 0] << 8 | (HEAPU8[$4_1 + 9 | 0] << 16 | HEAPU8[$4_1 + 10 | 0] << 24);
    $8_1 = HEAPU8[$4_1 + 11 | 0] | HEAPU8[$4_1 + 12 | 0] << 8 | (HEAPU8[$4_1 + 13 | 0] << 16 | HEAPU8[$4_1 + 14 | 0] << 24);
    $5_1 = HEAPU8[$4_1 + 15 | 0] | HEAPU8[$4_1 + 16 | 0] << 8 | (HEAPU8[$4_1 + 17 | 0] << 16 | HEAPU8[$4_1 + 18 | 0] << 24);
    $6_1 = HEAPU8[$4_1 + 19 | 0] | HEAPU8[$4_1 + 20 | 0] << 8 | (HEAPU8[$4_1 + 21 | 0] << 16 | HEAPU8[$4_1 + 22 | 0] << 24);
    $2_1 = HEAPU8[$4_1 + 23 | 0] | HEAPU8[$4_1 + 24 | 0] << 8 | (HEAPU8[$4_1 + 25 | 0] << 16 | HEAPU8[$4_1 + 26 | 0] << 24);
    $1_1 = HEAPU8[$4_1 + 27 | 0] | HEAPU8[$4_1 + 28 | 0] << 8 | (HEAPU8[$4_1 + 29 | 0] << 16 | HEAPU8[$4_1 + 30 | 0] << 24);
    $12_1 = HEAPU8[$4_1 + 3 | 0];
    HEAP8[$3_1 + 79 | 0] = HEAPU8[$4_1 + 31 | 0];
    HEAP8[$3_1 + 50 | 0] = $10_1;
    HEAP16[$3_1 + 48 >> 1] = $9_1;
    HEAP8[$3_1 + 51 | 0] = $12_1;
    HEAP8[$3_1 + 71 | 0] = $2_1;
    HEAP8[$3_1 + 72 | 0] = $2_1 >>> 8;
    HEAP8[$3_1 + 73 | 0] = $2_1 >>> 16;
    HEAP8[$3_1 + 74 | 0] = $2_1 >>> 24;
    HEAP8[$3_1 + 75 | 0] = $1_1;
    HEAP8[$3_1 + 76 | 0] = $1_1 >>> 8;
    HEAP8[$3_1 + 77 | 0] = $1_1 >>> 16;
    HEAP8[$3_1 + 78 | 0] = $1_1 >>> 24;
    HEAP8[$3_1 + 63 | 0] = $5_1;
    HEAP8[$3_1 + 64 | 0] = $5_1 >>> 8;
    HEAP8[$3_1 + 65 | 0] = $5_1 >>> 16;
    HEAP8[$3_1 + 66 | 0] = $5_1 >>> 24;
    HEAP8[$3_1 + 67 | 0] = $6_1;
    HEAP8[$3_1 + 68 | 0] = $6_1 >>> 8;
    HEAP8[$3_1 + 69 | 0] = $6_1 >>> 16;
    HEAP8[$3_1 + 70 | 0] = $6_1 >>> 24;
    HEAP8[$3_1 + 55 | 0] = $7_1;
    HEAP8[$3_1 + 56 | 0] = $7_1 >>> 8;
    HEAP8[$3_1 + 57 | 0] = $7_1 >>> 16;
    HEAP8[$3_1 + 58 | 0] = $7_1 >>> 24;
    HEAP8[$3_1 + 59 | 0] = $8_1;
    HEAP8[$3_1 + 60 | 0] = $8_1 >>> 8;
    HEAP8[$3_1 + 61 | 0] = $8_1 >>> 16;
    HEAP8[$3_1 + 62 | 0] = $8_1 >>> 24;
    HEAP16[$3_1 + 52 >> 1] = HEAPU16[$3_1 + 40 >> 1];
    HEAP8[$3_1 + 54 | 0] = HEAPU8[$11_1 | 0];
    $5_1 = $3_1 + 176 | 0;
    $6_1 = $3_1 + 48 | 0;
    $70($5_1, $6_1);
    $1_1 = $3_1 + 80 | 0;
    $95($1_1, $5_1);
    $201($3_1 + 8 | 0, 96, 0);
    $2_1 = HEAP32[$3_1 + 12 >> 2];
    $1_1 = $91(HEAP32[$3_1 + 8 >> 2], $1_1, 96);
    $383($5_1);
    $338($6_1);
    $392($3_1 + 32 | 0);
    HEAP32[$3_1 + 184 >> 2] = 96;
    HEAP32[$3_1 + 180 >> 2] = $2_1;
    HEAP32[$3_1 + 176 >> 2] = $1_1;
    $271($3_1, $5_1);
    $1_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    global$0 = $3_1 + 432 | 0;
    return;
   }
   abort();
  }
  abort();
 }
 
 function $79($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = $1_1;
  $1_1 = HEAPU8[$3_1 + 28 | 0] | HEAPU8[$3_1 + 29 | 0] << 8 | (HEAPU8[$3_1 + 30 | 0] << 16 | HEAPU8[$3_1 + 31 | 0] << 24);
  $4_1 = HEAPU8[$3_1 + 24 | 0] | HEAPU8[$3_1 + 25 | 0] << 8 | (HEAPU8[$3_1 + 26 | 0] << 16 | HEAPU8[$3_1 + 27 | 0] << 24);
  $5_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | (($1_1 << 24 | $4_1 >>> 8) & 65280 | ($1_1 << 8 | $4_1 >>> 24) & 255);
  HEAP32[$0_1 >> 2] = (($1_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($1_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  $4_1 = HEAPU8[$3_1 + 16 | 0] | HEAPU8[$3_1 + 17 | 0] << 8 | (HEAPU8[$3_1 + 18 | 0] << 16 | HEAPU8[$3_1 + 19 | 0] << 24);
  $1_1 = HEAPU8[$3_1 + 20 | 0] | HEAPU8[$3_1 + 21 | 0] << 8 | (HEAPU8[$3_1 + 22 | 0] << 16 | HEAPU8[$3_1 + 23 | 0] << 24);
  $5_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | (($1_1 << 24 | $4_1 >>> 8) & 65280 | ($1_1 << 8 | $4_1 >>> 24) & 255);
  HEAP32[$0_1 + 8 >> 2] = (($1_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($1_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  $4_1 = HEAPU8[$3_1 + 8 | 0] | HEAPU8[$3_1 + 9 | 0] << 8 | (HEAPU8[$3_1 + 10 | 0] << 16 | HEAPU8[$3_1 + 11 | 0] << 24);
  $1_1 = HEAPU8[$3_1 + 12 | 0] | HEAPU8[$3_1 + 13 | 0] << 8 | (HEAPU8[$3_1 + 14 | 0] << 16 | HEAPU8[$3_1 + 15 | 0] << 24);
  $5_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | (($1_1 << 24 | $4_1 >>> 8) & 65280 | ($1_1 << 8 | $4_1 >>> 24) & 255);
  HEAP32[$0_1 + 16 >> 2] = (($1_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($1_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
  HEAP32[$0_1 + 20 >> 2] = $5_1;
  $1_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  $4_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | (($1_1 << 24 | $3_1 >>> 8) & 65280 | ($1_1 << 8 | $3_1 >>> 24) & 255);
  HEAP32[$0_1 + 24 >> 2] = (($1_1 & 255) << 24 | $3_1 >>> 8) & -16777216 | (($1_1 & 16777215) << 8 | $3_1 >>> 24) & 16711680 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
  HEAP32[$0_1 + 28 >> 2] = $4_1;
  $0_1 = $199($0_1, $253($0_1));
  if ($2_1) {
   HEAP32[$2_1 >> 2] = $0_1
  }
 }
 
 function $80($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 768 | 0;
  global$0 = $2_1;
  $4_1 = $2_1 + 8 | 0;
  $422($4_1, $1_1);
  $7_1 = $2_1 + 728 | 0;
  $422($7_1, $4_1);
  $5_1 = $2_1 + 48 | 0;
  $422($5_1, $7_1);
  $3_1 = $2_1 + 88 | 0;
  $15($3_1, $1_1, $5_1);
  $5_1 = $2_1 + 128 | 0;
  $15($5_1, $4_1, $3_1);
  $1_1 = $2_1 + 168 | 0;
  $422($1_1, $5_1);
  $4_1 = $2_1 + 208 | 0;
  $15($4_1, $3_1, $1_1);
  $3_1 = $2_1 + 248 | 0;
  $30($3_1, $4_1, 5);
  $1_1 = $2_1 + 288 | 0;
  $15($1_1, $3_1, $4_1);
  $3_1 = $2_1 + 328 | 0;
  $30($3_1, $1_1, 10);
  $4_1 = $2_1 + 368 | 0;
  $15($4_1, $3_1, $1_1);
  $3_1 = $2_1 + 408 | 0;
  $30($3_1, $4_1, 20);
  $6_1 = $2_1 + 448 | 0;
  $15($6_1, $3_1, $4_1);
  $3_1 = $2_1 + 488 | 0;
  $30($3_1, $6_1, 10);
  $4_1 = $2_1 + 528 | 0;
  $15($4_1, $3_1, $1_1);
  $3_1 = $2_1 + 568 | 0;
  $30($3_1, $4_1, 50);
  $1_1 = $2_1 + 608 | 0;
  $15($1_1, $3_1, $4_1);
  $3_1 = $2_1 + 648 | 0;
  $30($3_1, $1_1, 100);
  $6_1 = $2_1 + 688 | 0;
  $15($6_1, $3_1, $1_1);
  $30($7_1, $6_1, 50);
  $15($0_1, $7_1, $4_1);
  $91($0_1 + 40 | 0, $5_1, 40);
  global$0 = $2_1 + 768 | 0;
 }
 
 function $81($0_1, $1_1) {
  HEAP8[$0_1 | 0] = HEAP32[$1_1 + 36 >> 2] >>> 8;
  HEAP8[$0_1 + 1 | 0] = HEAP32[$1_1 + 36 >> 2];
  HEAP8[$0_1 + 2 | 0] = (HEAP32[$1_1 + 36 >> 2] & 16777215) << 8 | HEAP32[$1_1 + 32 >> 2] >>> 24;
  HEAP8[$0_1 + 3 | 0] = (HEAP32[$1_1 + 36 >> 2] & 65535) << 16 | HEAP32[$1_1 + 32 >> 2] >>> 16;
  HEAP8[$0_1 + 4 | 0] = (HEAP32[$1_1 + 36 >> 2] & 255) << 24 | HEAP32[$1_1 + 32 >> 2] >>> 8;
  HEAP8[$0_1 + 5 | 0] = HEAP32[$1_1 + 32 >> 2];
  HEAP8[$0_1 + 6 | 0] = HEAP32[$1_1 + 28 >> 2] >>> 12;
  HEAP8[$0_1 + 7 | 0] = HEAP32[$1_1 + 28 >> 2] >>> 4;
  HEAP8[$0_1 + 8 | 0] = (HEAP32[$1_1 + 28 >> 2] & 268435455) << 4 | HEAP32[$1_1 + 24 >> 2] >>> 28;
  HEAP8[$0_1 + 9 | 0] = (HEAP32[$1_1 + 28 >> 2] & 1048575) << 12 | HEAP32[$1_1 + 24 >> 2] >>> 20;
  HEAP8[$0_1 + 10 | 0] = (HEAP32[$1_1 + 28 >> 2] & 4095) << 20 | HEAP32[$1_1 + 24 >> 2] >>> 12;
  HEAP8[$0_1 + 11 | 0] = (HEAP32[$1_1 + 28 >> 2] & 15) << 28 | HEAP32[$1_1 + 24 >> 2] >>> 4;
  HEAP8[$0_1 + 12 | 0] = HEAPU16[$1_1 + 22 >> 1] & 15 | HEAP32[$1_1 + 24 >> 2] << 4;
  HEAP8[$0_1 + 13 | 0] = HEAP32[$1_1 + 20 >> 2] >>> 8;
  HEAP8[$0_1 + 14 | 0] = HEAP32[$1_1 + 20 >> 2];
  HEAP8[$0_1 + 15 | 0] = (HEAP32[$1_1 + 20 >> 2] & 16777215) << 8 | HEAP32[$1_1 + 16 >> 2] >>> 24;
  HEAP8[$0_1 + 16 | 0] = (HEAP32[$1_1 + 20 >> 2] & 65535) << 16 | HEAP32[$1_1 + 16 >> 2] >>> 16;
  HEAP8[$0_1 + 17 | 0] = (HEAP32[$1_1 + 20 >> 2] & 255) << 24 | HEAP32[$1_1 + 16 >> 2] >>> 8;
  HEAP8[$0_1 + 18 | 0] = HEAP32[$1_1 + 16 >> 2];
  HEAP8[$0_1 + 19 | 0] = HEAP32[$1_1 + 12 >> 2] >>> 12;
  HEAP8[$0_1 + 20 | 0] = HEAP32[$1_1 + 12 >> 2] >>> 4;
  HEAP8[$0_1 + 21 | 0] = (HEAP32[$1_1 + 12 >> 2] & 268435455) << 4 | HEAP32[$1_1 + 8 >> 2] >>> 28;
  HEAP8[$0_1 + 22 | 0] = (HEAP32[$1_1 + 12 >> 2] & 1048575) << 12 | HEAP32[$1_1 + 8 >> 2] >>> 20;
  HEAP8[$0_1 + 23 | 0] = (HEAP32[$1_1 + 12 >> 2] & 4095) << 20 | HEAP32[$1_1 + 8 >> 2] >>> 12;
  HEAP8[$0_1 + 24 | 0] = (HEAP32[$1_1 + 12 >> 2] & 15) << 28 | HEAP32[$1_1 + 8 >> 2] >>> 4;
  HEAP8[$0_1 + 25 | 0] = HEAPU16[$1_1 + 6 >> 1] & 15 | HEAP32[$1_1 + 8 >> 2] << 4;
  HEAP8[$0_1 + 26 | 0] = HEAP32[$1_1 + 4 >> 2] >>> 8;
  HEAP8[$0_1 + 27 | 0] = HEAP32[$1_1 + 4 >> 2];
  HEAP8[$0_1 + 28 | 0] = (HEAP32[$1_1 + 4 >> 2] & 16777215) << 8 | HEAP32[$1_1 >> 2] >>> 24;
  HEAP8[$0_1 + 29 | 0] = (HEAP32[$1_1 + 4 >> 2] & 65535) << 16 | HEAP32[$1_1 >> 2] >>> 16;
  HEAP8[$0_1 + 30 | 0] = (HEAP32[$1_1 + 4 >> 2] & 255) << 24 | HEAP32[$1_1 >> 2] >>> 8;
  HEAP8[$0_1 + 31 | 0] = HEAP32[$1_1 >> 2];
 }
 
 function $82($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$0_1 >> 2] - 1 | 0) {
    default:
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1073898, 23) | 0;
     break label$1;
    case 0:
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1073881, 17) | 0;
     break label$1;
    case 1:
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $353($1_1, 1073855, 16)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     HEAP32[$2_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 4;
     $1_1 = $2_1 + 12 | 0;
     $3_1 = $85($2_1, 1073871, 4, $1_1, 1073776);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 12;
     $0_1 = $215($85($3_1, 1073875, 6, $1_1, 1073800));
     break label$1;
    case 2:
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1073844, 11) | 0;
     break label$1;
    case 3:
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $353($1_1, 1073751, 16)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     HEAP32[$2_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 4;
     $1_1 = $2_1 + 12 | 0;
     $3_1 = $85($2_1, 1073767, 6, $1_1, 1073776);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 12;
     $3_1 = $85($3_1, 1073792, 8, $1_1, 1073800);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 16;
     $3_1 = $85($3_1, 1073816, 6, $1_1, 1073776);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 24;
     $3_1 = $85($3_1, 1073822, 8, $1_1, 1073800);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 28;
     $3_1 = $85($3_1, 1073830, 6, $1_1, 1073776);
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 36;
     $0_1 = $215($85($3_1, 1073836, 8, $1_1, 1073800));
     break label$1;
    case 4:
     break label$2;
    };
   }
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1073724, 27) | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $83($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $4_1 = $0_1;
  $3_1 = HEAPU8[$1_1 + 30 | 0];
  $0_1 = $3_1 >>> 24 | 0;
  $2_1 = HEAPU8[$1_1 + 31 | 0] | $3_1 << 8;
  $3_1 = $0_1;
  $7_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 29 | 0];
  $0_1 = $2_1 >>> 16 | 0;
  $2_1 = $7_1 | $2_1 << 16;
  $3_1 = $0_1 | $3_1;
  $7_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 28 | 0];
  $0_1 = $2_1 >>> 8 | 0;
  $2_1 = $7_1 | $2_1 << 24;
  $0_1 = HEAPU8[$1_1 + 27 | 0] | ($0_1 | $3_1) | HEAPU8[$1_1 + 26 | 0] << 8 | (HEAPU8[$1_1 + 25 | 0] & 15) << 16;
  $7_1 = $0_1;
  $10_1 = 0 | $2_1;
  HEAP32[$4_1 >> 2] = $10_1;
  HEAP32[$4_1 + 4 >> 2] = $0_1;
  $3_1 = HEAPU8[$1_1 + 24 | 0];
  $0_1 = $3_1 >>> 28 | 0;
  $2_1 = $3_1 << 4 | HEAPU8[$1_1 + 25 | 0] >>> 4;
  $3_1 = $0_1;
  $5_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 23 | 0];
  $0_1 = $2_1 >>> 20 | 0;
  $2_1 = $5_1 | $2_1 << 12;
  $3_1 = $0_1 | $3_1;
  $5_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 22 | 0];
  $0_1 = $2_1 >>> 12 | 0;
  $2_1 = $5_1 | $2_1 << 20;
  $3_1 = $0_1 | $3_1;
  $5_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 21 | 0];
  $0_1 = $2_1 >>> 4 | 0;
  $2_1 = $5_1 | $2_1 << 28;
  $0_1 = $0_1 | $3_1 | HEAPU8[$1_1 + 20 | 0] << 4 | HEAPU8[$1_1 + 19 | 0] << 12;
  $5_1 = $0_1;
  $11_1 = $2_1;
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  $3_1 = HEAPU8[$1_1 + 17 | 0];
  $0_1 = $3_1 >>> 24 | 0;
  $2_1 = HEAPU8[$1_1 + 18 | 0] | $3_1 << 8;
  $3_1 = $0_1;
  $8_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 16 | 0];
  $0_1 = $2_1 >>> 16 | 0;
  $2_1 = $8_1 | $2_1 << 16;
  $3_1 = $0_1 | $3_1;
  $8_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 15 | 0];
  $0_1 = $2_1 >>> 8 | 0;
  $2_1 = $8_1 | $2_1 << 24;
  $0_1 = HEAPU8[$1_1 + 14 | 0] | ($0_1 | $3_1) | HEAPU8[$1_1 + 13 | 0] << 8 | (HEAPU8[$1_1 + 12 | 0] & 15) << 16;
  $8_1 = $0_1;
  $12_1 = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $2_1;
  HEAP32[$4_1 + 20 >> 2] = $0_1;
  $3_1 = HEAPU8[$1_1 + 11 | 0];
  $0_1 = $3_1 >>> 28 | 0;
  $2_1 = $3_1 << 4 | HEAPU8[$1_1 + 12 | 0] >>> 4;
  $3_1 = $0_1;
  $6_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 10 | 0];
  $0_1 = $2_1 >>> 20 | 0;
  $2_1 = $6_1 | $2_1 << 12;
  $3_1 = $0_1 | $3_1;
  $6_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 9 | 0];
  $0_1 = $2_1 >>> 12 | 0;
  $2_1 = $6_1 | $2_1 << 20;
  $3_1 = $0_1 | $3_1;
  $6_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 8 | 0];
  $0_1 = $2_1 >>> 4 | 0;
  $2_1 = $6_1 | $2_1 << 28;
  $0_1 = $0_1 | $3_1 | HEAPU8[$1_1 + 7 | 0] << 4 | HEAPU8[$1_1 + 6 | 0] << 12;
  $6_1 = $0_1;
  $13_1 = $2_1;
  HEAP32[$4_1 + 24 >> 2] = $2_1;
  HEAP32[$4_1 + 28 >> 2] = $0_1;
  $3_1 = HEAPU8[$1_1 + 4 | 0];
  $0_1 = $3_1 >>> 24 | 0;
  $2_1 = HEAPU8[$1_1 + 5 | 0] | $3_1 << 8;
  $3_1 = $0_1;
  $9_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 3 | 0];
  $0_1 = $2_1 >>> 16 | 0;
  $2_1 = $9_1 | $2_1 << 16;
  $3_1 = $0_1 | $3_1;
  $9_1 = $2_1;
  $2_1 = HEAPU8[$1_1 + 2 | 0];
  $0_1 = $2_1 >>> 8 | 0;
  $2_1 = $9_1 | $2_1 << 24;
  $3_1 = HEAPU8[$1_1 + 1 | 0] | ($0_1 | $3_1);
  $0_1 = HEAPU8[$1_1 | 0] << 8;
  HEAP32[$4_1 + 32 >> 2] = $2_1;
  $0_1 = $0_1 | $3_1;
  HEAP32[$4_1 + 36 >> 2] = $0_1;
  return ($13_1 & ($11_1 & $12_1)) != -1 | ($6_1 & ($5_1 & $8_1)) != 1048575 | (($2_1 | 0) != -1 | ($0_1 | 0) != 65535) | (($7_1 | 0) == 1048574 & $10_1 >>> 0 < 4294966319 | $7_1 >>> 0 < 1048574);
 }
 
 function $84($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $14_1 = $147($0_1, 0, 516);
  $4_1 = $1_1 + 24 | 0;
  $0_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $5_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
  $4_1 = $1_1 + 16 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $5_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $4_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $5_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $3_1;
  $12_1 = 1;
  if (($0_1 | 0) < 0) {
   $171($5_1, $5_1);
   $12_1 = -1;
  }
  $15_1 = $2_1 - 1 | 0;
  $4_1 = -1;
  while (1) {
   $0_1 = 129 - $7_1 | 0;
   $10_1 = ($7_1 << 2) + $14_1 | 0;
   $1_1 = $7_1;
   label$3 : {
    while (1) {
     if (($1_1 | 0) > 128) {
      break label$3
     }
     $9_1 = $1_1 >>> 6 | 0;
     $13_1 = $9_1 << 3;
     $3_1 = $13_1 + $5_1 | 0;
     $6_1 = HEAP32[$3_1 >> 2];
     $7_1 = HEAP32[$3_1 + 4 >> 2];
     $8_1 = $6_1;
     $6_1 = $1_1 & 63;
     $3_1 = $6_1 & 31;
     if (($6_1 & 63) >>> 0 >= 32) {
      $8_1 = $7_1 >>> $3_1 | 0
     } else {
      $8_1 = ((1 << $3_1) - 1 & $7_1) << 32 - $3_1 | $8_1 >>> $3_1
     }
     if (($8_1 & 1) == ($11_1 | 0)) {
      $10_1 = $10_1 + 4 | 0;
      $0_1 = $0_1 - 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue;
     }
     break;
    };
    $7_1 = (($0_1 | 0) > ($2_1 | 0) ? $2_1 : $0_1) + $1_1 | 0;
    if (($7_1 - 1 >>> 6 | 0) != ($9_1 | 0)) {
     $0_1 = ($5_1 + $13_1 | 0) + 8 | 0;
     $4_1 = HEAP32[$0_1 >> 2];
     $9_1 = 64 - $6_1 | 0;
     $0_1 = $9_1 & 31;
     $8_1 = $8_1 | (($9_1 & 63) >>> 0 >= 32 ? 0 : $4_1 << $0_1);
    }
    $0_1 = 129 - $1_1 | 0;
    $0_1 = ($0_1 | 0) < ($2_1 | 0) ? $0_1 : $2_1;
    $0_1 = (((($0_1 & 63) >>> 0 >= 32 ? 0 : -1 << $0_1) ^ -1) & $8_1) + $11_1 | 0;
    $11_1 = $0_1 >>> $15_1 & 1;
    HEAP32[$10_1 >> 2] = Math_imul($0_1 - ($11_1 << $2_1) | 0, $12_1);
    $4_1 = $1_1;
    continue;
   }
   break;
  };
  global$0 = $5_1 + 32 | 0;
  return $4_1 + 1 | 0;
 }
 
 function $85($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  $9_1 = 1;
  label$1 : {
   if (HEAPU8[$0_1 + 4 | 0]) {
    break label$1
   }
   $7_1 = HEAPU8[$0_1 + 5 | 0];
   $5_1 = HEAP32[$0_1 >> 2];
   $8_1 = HEAP32[$5_1 >> 2];
   if (!($8_1 & 4)) {
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], $7_1 ? 1073480 : 1062653, $7_1 ? 2 : 3) | 0) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], $1_1, $2_1) | 0) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], 1062615, 2) | 0) {
     break label$1
    }
    $9_1 = FUNCTION_TABLE[HEAP32[$4_1 + 12 >> 2]]($3_1, $5_1) | 0;
    break label$1;
   }
   if (!$7_1) {
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], 1062648, 3) | 0) {
     break label$1
    }
    $8_1 = HEAP32[$5_1 >> 2];
   }
   HEAP8[$6_1 + 23 | 0] = 1;
   HEAP32[$6_1 + 52 >> 2] = 1062620;
   HEAP32[$6_1 + 16 >> 2] = $6_1 + 23;
   HEAP32[$6_1 + 24 >> 2] = $8_1;
   $7_1 = HEAP32[$5_1 + 28 >> 2];
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$5_1 + 24 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $7_1;
   $7_1 = HEAP32[$5_1 + 8 >> 2];
   $8_1 = HEAP32[$5_1 + 12 >> 2];
   $10_1 = HEAP32[$5_1 + 20 >> 2];
   $11_1 = HEAP32[$5_1 + 16 >> 2];
   HEAP8[$6_1 + 56 | 0] = HEAPU8[$5_1 + 32 | 0];
   HEAP32[$6_1 + 28 >> 2] = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$6_1 + 40 >> 2] = $11_1;
   HEAP32[$6_1 + 44 >> 2] = $10_1;
   HEAP32[$6_1 + 32 >> 2] = $7_1;
   HEAP32[$6_1 + 36 >> 2] = $8_1;
   $5_1 = $6_1 + 8 | 0;
   HEAP32[$6_1 + 48 >> 2] = $5_1;
   if ($43($5_1, $1_1, $2_1)) {
    break label$1
   }
   if ($43($6_1 + 8 | 0, 1062615, 2)) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[$4_1 + 12 >> 2]]($3_1, $6_1 + 24 | 0) | 0) {
    break label$1
   }
   $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 + 52 >> 2] + 12 >> 2]](HEAP32[$6_1 + 48 >> 2], 1062651, 2) | 0;
  }
  HEAP8[$0_1 + 5 | 0] = 1;
  HEAP8[$0_1 + 4 | 0] = $9_1;
  global$0 = $6_1 - -64 | 0;
  return $0_1;
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 240 | 0;
  global$0 = $3_1;
  $288($3_1 + 8 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$3_1 + 32 >> 2] = $2_1;
  $200($3_1 + 40 | 0, $2_1, $1_1);
  if (HEAPU8[$3_1 + 40 | 0]) {
   abort()
  }
  $1_1 = $3_1 + 65 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $8_1 = $3_1 + 104 | 0;
  $2_1 = $8_1;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $3_1 + 57 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $9_1 = $3_1 + 96 | 0;
  $2_1 = $9_1;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = $3_1 + 49 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $10_1 = $3_1 + 88 | 0;
  $2_1 = $10_1;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $1_1 = HEAPU8[$3_1 + 45 | 0] | HEAPU8[$3_1 + 46 | 0] << 8 | (HEAPU8[$3_1 + 47 | 0] << 16 | HEAPU8[$3_1 + 48 | 0] << 24);
  HEAP32[$3_1 + 80 >> 2] = HEAPU8[$3_1 + 41 | 0] | HEAPU8[$3_1 + 42 | 0] << 8 | (HEAPU8[$3_1 + 43 | 0] << 16 | HEAPU8[$3_1 + 44 | 0] << 24);
  HEAP32[$3_1 + 84 >> 2] = $1_1;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = HEAP32[262259];
  $262();
  $6_1 = $3_1 + 176 | 0;
  $147($6_1, 0, 64);
  $2_1 = HEAP32[305238];
  $7_1 = $3_1 + 80 | 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  label$2 : {
   if (!$6_1) {
    FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218064, HEAP32[$2_1 + 180 >> 2]);
    break label$2;
   }
   $1_1 = $147($6_1, 0, 64);
   if (!HEAP32[$2_1 + 8 >> 2]) {
    FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218400, HEAP32[$2_1 + 180 >> 2]);
    break label$2;
   }
   if (!$7_1) {
    FUNCTION_TABLE[HEAP32[$2_1 + 176 >> 2]](1218489, HEAP32[$2_1 + 180 >> 2]);
    break label$2;
   }
   $5_1 = global$0 - 128 | 0;
   global$0 = $5_1;
   $11_1 = $4_1 + 8 | 0;
   $7_1 = $309($11_1, $7_1);
   $228($11_1, 1218536, !$7_1);
   $136($2_1 + 8 | 0, $5_1, $11_1);
   $2_1 = $4_1 + 40 | 0;
   $154($2_1, $5_1);
   global$0 = $5_1 + 128 | 0;
   $349($1_1, $2_1);
   $2_1 = 64;
   $5_1 = global$0 - 16 | 0;
   HEAP32[$5_1 + 12 >> 2] = !$7_1;
   $5_1 = HEAP32[$5_1 + 12 >> 2] - 1 | 0;
   while (1) {
    if ($2_1) {
     HEAP8[$1_1 | 0] = $5_1 & HEAPU8[$1_1 | 0];
     $2_1 = $2_1 - 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   $1_1 = $4_1 + 32 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $4_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $4_1 + 16 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 8 >> 2] = 0;
   HEAP32[$4_1 + 12 >> 2] = 0;
  }
  global$0 = $4_1 + 128 | 0;
  $1_1 = $3_1 + 112 | 0;
  $91($1_1, $6_1, 64);
  $4_1 = HEAP32[$8_1 + 4 >> 2];
  $2_1 = $3_1 + 200 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$9_1 + 4 >> 2];
  $2_1 = $3_1 + 192 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$10_1 + 4 >> 2];
  $2_1 = $3_1 + 184 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$3_1 + 84 >> 2];
  HEAP32[$3_1 + 176 >> 2] = HEAP32[$3_1 + 80 >> 2];
  HEAP32[$3_1 + 180 >> 2] = $4_1;
  $4_1 = $3_1 + 16 | 0;
  $337($4_1, $6_1, 32);
  $294($6_1, $1_1);
  $337($4_1, $6_1, 33);
  $392($3_1 + 32 | 0);
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 24 >> 2];
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 176 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 180 >> 2] = $1_1;
  $271($3_1, $6_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 240 | 0;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $217();
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1074564;
  HEAP32[$0_1 >> 2] = 0;
  $4_1 = HEAP32[304864];
  $1_1 = HEAP32[304866];
  $332($0_1, $1_1);
  $10_1 = ($1_1 << 3) + $4_1 | 0;
  while (1) {
   if (($4_1 | 0) != ($10_1 | 0)) {
    $7_1 = HEAP32[$4_1 + 4 >> 2];
    $8_1 = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 24 >> 2] = 0;
    $418($8_1, $7_1, $2_1 + 24 | 0);
    $6_1 = HEAP32[$2_1 + 24 >> 2];
    $240($2_1, $0_1, $6_1);
    $3_1 = $2_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $1_1 = $2_1 + 40 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    $3_1 = $2_1 + 8 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $1_1 = $2_1 + 32 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 + 28 >> 2] = $1_1;
    $4_1 = $4_1 + 8 | 0;
    label$3 : {
     label$4 : {
      while (1) {
       $1_1 = $140($2_1 + 24 | 0);
       if (!$1_1) {
        break label$4
       }
       if (!$361($8_1, $7_1, HEAP32[$1_1 - 12 >> 2], HEAP32[$1_1 - 8 >> 2])) {
        continue
       }
       break;
      };
      HEAP16[$1_1 - 4 >> 1] = $9_1;
      break label$3;
     }
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     $3_1 = $177($0_1, $6_1, 0);
     $5_1 = HEAP8[$1_1 + $3_1 | 0] & 1;
     $1_1 = HEAP32[$0_1 + 8 >> 2];
     if (!($1_1 | !$5_1)) {
      $332($0_1, 1);
      $3_1 = $177($0_1, $6_1, 0);
      $1_1 = HEAP32[$0_1 + 8 >> 2];
     }
     HEAP32[$0_1 + 8 >> 2] = $1_1 - $5_1;
     $320($0_1, $3_1, $6_1);
     HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] + 1;
     $1_1 = HEAP32[$0_1 + 4 >> 2] + Math_imul($3_1 ^ -1, 12) | 0;
     HEAP16[$1_1 + 8 >> 1] = $9_1;
     HEAP32[$1_1 + 4 >> 2] = $7_1;
     HEAP32[$1_1 >> 2] = $8_1;
    }
    $9_1 = $9_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $2_1 + 48 | 0;
 }
 
 function $88($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $2_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $4_1;
  $67($5_1 + 56 | 0, $2_1, $1_1);
  if (HEAP32[$5_1 + 56 >> 2]) {
   abort()
  }
  $2_1 = $5_1 + 76 | 0;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 104 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $2_1 = $5_1 + 68 | 0;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 96 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$5_1 + 64 >> 2];
  HEAP32[$5_1 + 88 >> 2] = HEAP32[$5_1 + 60 >> 2];
  HEAP32[$5_1 + 92 >> 2] = $1_1;
  $1_1 = $5_1 + 112 | 0;
  $147($1_1, 0, 64);
  HEAP32[$5_1 + 180 >> 2] = 0;
  HEAP32[$5_1 + 184 >> 2] = 0;
  HEAP32[$5_1 + 176 >> 2] = HEAP32[262259];
  $2_1 = $5_1 + 176 | 0;
  $337($2_1, 1062237, 8);
  $337($2_1, $4_1, $3_1);
  $64(HEAP32[$5_1 + 100 >> 2], HEAP32[$5_1 + 108 >> 2], HEAP32[$5_1 + 176 >> 2], HEAP32[$5_1 + 184 >> 2], 2048, $1_1);
  $302($5_1 + 16 | 0, $1_1, 64, 32);
  $4_1 = HEAP32[$5_1 + 16 >> 2];
  $3_1 = HEAP32[$5_1 + 20 >> 2];
  $201($5_1 + 8 | 0, $3_1, 0);
  $6_1 = HEAP32[$5_1 + 12 >> 2];
  $4_1 = $91(HEAP32[$5_1 + 8 >> 2], $4_1, $3_1);
  $374($2_1);
  $390($5_1 + 88 | 0);
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 120 >> 2] = $3_1;
  HEAP32[$5_1 + 116 >> 2] = $6_1;
  HEAP32[$5_1 + 112 >> 2] = $4_1;
  $271($5_1, $1_1);
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 192 | 0;
 }
 
 function $89($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $12_1 = $147($0_1, 0, 256);
  $0_1 = $1_1 + 8 | 0;
  $4_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = $1_1 + 16 | 0;
  $4_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = $1_1 + 24 | 0;
  $4_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
  $3_1 = $7_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  HEAP32[$7_1 + 40 >> 2] = 0;
  HEAP32[$7_1 + 44 >> 2] = 0;
  $0_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  HEAP32[$7_1 + 8 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$7_1 + 12 >> 2] = $0_1;
  $13_1 = 64 - $2_1 | 0;
  $0_1 = $2_1 & 63;
  $1_1 = $0_1 & 31;
  if (($0_1 & 63) >>> 0 >= 32) {
   $0_1 = 1 << $1_1;
   $1_1 = 0;
  } else {
   $3_1 = 1 << $1_1;
   $0_1 = $3_1 - 1 & 1 >>> 32 - $1_1;
   $1_1 = $3_1;
  }
  $3_1 = $0_1;
  $0_1 = $0_1 >>> 1 | 0;
  $10_1 = ($3_1 & 1) << 31 | $1_1 >>> 1;
  $14_1 = $1_1 - 1 | 0;
  $15_1 = $3_1 - !$1_1 | 0;
  $16_1 = $1_1;
  $1_1 = 0;
  while (1) {
   $17_1 = $1_1 >>> 0 > 256 ? $1_1 : 256;
   while (1) {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) != ($17_1 | 0)) {
       $3_1 = $1_1 >>> 6 | 0;
       $4_1 = $1_1 & 63;
       if ($13_1 >>> 0 <= $4_1 >>> 0) {
        break label$4
       }
       $3_1 = ($7_1 + 8 | 0) + ($3_1 << 3) | 0;
       $5_1 = HEAP32[$3_1 >> 2];
       $6_1 = HEAP32[$3_1 + 4 >> 2];
       $8_1 = $5_1;
       $5_1 = $4_1 & 31;
       if (($4_1 & 63) >>> 0 >= 32) {
        $3_1 = 0;
        $4_1 = $6_1 >>> $5_1 | 0;
       } else {
        $3_1 = $6_1 >>> $5_1 | 0;
        $4_1 = ((1 << $5_1) - 1 & $6_1) << 32 - $5_1 | $8_1 >>> $5_1;
       }
       break label$3;
      }
      global$0 = $7_1 + 48 | 0;
      return;
     }
     $9_1 = ($7_1 + 8 | 0) + ($3_1 << 3) | 0;
     $3_1 = $9_1 + 8 | 0;
     $5_1 = HEAP32[$3_1 >> 2];
     $3_1 = HEAP32[$3_1 + 4 >> 2];
     $6_1 = $5_1;
     $8_1 = 0 - $1_1 & 63;
     $5_1 = $8_1 & 31;
     if (($8_1 & 63) >>> 0 >= 32) {
      $3_1 = $6_1 << $5_1;
      $6_1 = 0;
     } else {
      $3_1 = (1 << $5_1) - 1 & $6_1 >>> 32 - $5_1 | $3_1 << $5_1;
      $6_1 = $6_1 << $5_1;
     }
     $5_1 = $3_1;
     $18_1 = $6_1;
     $8_1 = HEAP32[$9_1 + 4 >> 2];
     $9_1 = HEAP32[$9_1 >> 2];
     $6_1 = $4_1 & 31;
     if (($4_1 & 63) >>> 0 >= 32) {
      $3_1 = 0;
      $6_1 = $8_1 >>> $6_1 | 0;
     } else {
      $3_1 = $8_1 >>> $6_1 | 0;
      $6_1 = ((1 << $6_1) - 1 & $8_1) << 32 - $6_1 | $9_1 >>> $6_1;
     }
     $4_1 = $18_1 | $6_1;
     $3_1 = $3_1 | $5_1;
    }
    $3_1 = $3_1 & $15_1;
    $4_1 = $11_1 + ($4_1 & $14_1) | 0;
    $3_1 = $4_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    if (!($4_1 & 1)) {
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = ($0_1 | 0) == ($3_1 | 0);
   HEAP8[$1_1 + $12_1 | 0] = $4_1 - ($5_1 & $4_1 >>> 0 < $10_1 >>> 0 | $0_1 >>> 0 > $3_1 >>> 0 ? 0 : $16_1);
   $1_1 = $1_1 + $2_1 | 0;
   $11_1 = $4_1 >>> 0 >= $10_1 >>> 0 & $5_1 | $0_1 >>> 0 < $3_1 >>> 0;
   continue;
  };
 }
 
 function $90($0_1, $1_1) {
  HEAP8[$0_1 | 0] = HEAPU8[$1_1 + 31 | 0];
  HEAP8[$0_1 + 1 | 0] = HEAPU16[$1_1 + 30 >> 1];
  HEAP8[$0_1 + 2 | 0] = HEAP32[$1_1 + 28 >> 2] >>> 8;
  HEAP8[$0_1 + 3 | 0] = HEAP32[$1_1 + 28 >> 2];
  HEAP8[$0_1 + 4 | 0] = (HEAP32[$1_1 + 28 >> 2] & 16777215) << 8 | HEAP32[$1_1 + 24 >> 2] >>> 24;
  HEAP8[$0_1 + 5 | 0] = (HEAP32[$1_1 + 28 >> 2] & 65535) << 16 | HEAP32[$1_1 + 24 >> 2] >>> 16;
  HEAP8[$0_1 + 6 | 0] = (HEAP32[$1_1 + 28 >> 2] & 255) << 24 | HEAP32[$1_1 + 24 >> 2] >>> 8;
  HEAP8[$0_1 + 7 | 0] = HEAP32[$1_1 + 24 >> 2];
  HEAP8[$0_1 + 8 | 0] = HEAPU8[$1_1 + 23 | 0];
  HEAP8[$0_1 + 9 | 0] = HEAPU16[$1_1 + 22 >> 1];
  HEAP8[$0_1 + 10 | 0] = HEAP32[$1_1 + 20 >> 2] >>> 8;
  HEAP8[$0_1 + 11 | 0] = HEAP32[$1_1 + 20 >> 2];
  HEAP8[$0_1 + 12 | 0] = (HEAP32[$1_1 + 20 >> 2] & 16777215) << 8 | HEAP32[$1_1 + 16 >> 2] >>> 24;
  HEAP8[$0_1 + 13 | 0] = (HEAP32[$1_1 + 20 >> 2] & 65535) << 16 | HEAP32[$1_1 + 16 >> 2] >>> 16;
  HEAP8[$0_1 + 14 | 0] = (HEAP32[$1_1 + 20 >> 2] & 255) << 24 | HEAP32[$1_1 + 16 >> 2] >>> 8;
  HEAP8[$0_1 + 15 | 0] = HEAP32[$1_1 + 16 >> 2];
  HEAP8[$0_1 + 16 | 0] = HEAPU8[$1_1 + 15 | 0];
  HEAP8[$0_1 + 17 | 0] = HEAPU16[$1_1 + 14 >> 1];
  HEAP8[$0_1 + 18 | 0] = HEAP32[$1_1 + 12 >> 2] >>> 8;
  HEAP8[$0_1 + 19 | 0] = HEAP32[$1_1 + 12 >> 2];
  HEAP8[$0_1 + 20 | 0] = (HEAP32[$1_1 + 12 >> 2] & 16777215) << 8 | HEAP32[$1_1 + 8 >> 2] >>> 24;
  HEAP8[$0_1 + 21 | 0] = (HEAP32[$1_1 + 12 >> 2] & 65535) << 16 | HEAP32[$1_1 + 8 >> 2] >>> 16;
  HEAP8[$0_1 + 22 | 0] = (HEAP32[$1_1 + 12 >> 2] & 255) << 24 | HEAP32[$1_1 + 8 >> 2] >>> 8;
  HEAP8[$0_1 + 23 | 0] = HEAP32[$1_1 + 8 >> 2];
  HEAP8[$0_1 + 24 | 0] = HEAPU8[$1_1 + 7 | 0];
  HEAP8[$0_1 + 25 | 0] = HEAPU16[$1_1 + 6 >> 1];
  HEAP8[$0_1 + 26 | 0] = HEAP32[$1_1 + 4 >> 2] >>> 8;
  HEAP8[$0_1 + 27 | 0] = HEAP32[$1_1 + 4 >> 2];
  HEAP8[$0_1 + 28 | 0] = (HEAP32[$1_1 + 4 >> 2] & 16777215) << 8 | HEAP32[$1_1 >> 2] >>> 24;
  HEAP8[$0_1 + 29 | 0] = (HEAP32[$1_1 + 4 >> 2] & 65535) << 16 | HEAP32[$1_1 >> 2] >>> 16;
  HEAP8[$0_1 + 30 | 0] = (HEAP32[$1_1 + 4 >> 2] & 255) << 24 | HEAP32[$1_1 >> 2] >>> 8;
  HEAP8[$0_1 + 31 | 0] = HEAP32[$1_1 >> 2];
 }
 
 function $91($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if ($2_1 >>> 0 <= 15) {
   $3_1 = $0_1
  } else {
   $5_1 = 0 - $0_1 & 3;
   $6_1 = $5_1 + $0_1 | 0;
   $4_1 = $1_1;
   $3_1 = $0_1;
   while (1) {
    if ($3_1 >>> 0 < $6_1 >>> 0) {
     HEAP8[$3_1 | 0] = HEAPU8[$4_1 | 0];
     $4_1 = $4_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   $2_1 = $2_1 - $5_1 | 0;
   $7_1 = $2_1 & -4;
   label$5 : {
    $5_1 = $1_1 + $5_1 | 0;
    if ($5_1 & 3) {
     $8_1 = $6_1 + $7_1 | 0;
     $3_1 = $5_1 & -4;
     $1_1 = $3_1 + 4 | 0;
     $4_1 = $5_1 << 3;
     $9_1 = $4_1 & 24;
     $10_1 = 0 - $4_1 & 24;
     $4_1 = HEAP32[$3_1 >> 2];
     $3_1 = $6_1;
     while (1) {
      if ($3_1 >>> 0 >= $8_1 >>> 0) {
       break label$5
      }
      $11_1 = $4_1 >>> $9_1 | 0;
      $4_1 = HEAP32[$1_1 >> 2];
      HEAP32[$3_1 >> 2] = $11_1 | $4_1 << $10_1;
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    }
    $4_1 = $6_1 + $7_1 | 0;
    $1_1 = $5_1;
    $3_1 = $6_1;
    while (1) {
     if ($3_1 >>> 0 >= $4_1 >>> 0) {
      break label$5
     }
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   }
   $2_1 = $2_1 & 3;
   $1_1 = $5_1 + $7_1 | 0;
   $3_1 = $6_1 + $7_1 | 0;
  }
  $2_1 = $2_1 + $3_1 | 0;
  while (1) {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    HEAP8[$3_1 | 0] = HEAPU8[$1_1 | 0];
    $1_1 = $1_1 + 1 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0_1;
 }
 
 function $92($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  HEAP8[$0_1 + 26 | 0] = $2_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  $6_1 = HEAP32[$1_1 + 16 >> 2];
  HEAP8[$0_1 + 13 | 0] = $6_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  HEAP8[$0_1 | 0] = $7_1;
  HEAP8[$0_1 + 31 | 0] = $3_1 >>> 8;
  HEAP8[$0_1 + 30 | 0] = $3_1;
  HEAP8[$0_1 + 29 | 0] = ($3_1 & 16777215) << 8 | $2_1 >>> 24;
  HEAP8[$0_1 + 28 | 0] = ($3_1 & 65535) << 16 | $2_1 >>> 16;
  HEAP8[$0_1 + 27 | 0] = ($3_1 & 255) << 24 | $2_1 >>> 8;
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP8[$0_1 + 25 | 0] = $3_1 >>> 12;
  HEAP8[$0_1 + 24 | 0] = $3_1 >>> 4;
  $8_1 = $2_1;
  HEAP8[$0_1 + 23 | 0] = ($3_1 & 268435455) << 4 | $2_1 >>> 28;
  HEAP8[$0_1 + 22 | 0] = ($3_1 & 1048575) << 12 | $2_1 >>> 20;
  HEAP8[$0_1 + 21 | 0] = ($3_1 & 4095) << 20 | $2_1 >>> 12;
  HEAP8[$0_1 + 20 | 0] = ($3_1 & 15) << 28 | $2_1 >>> 4;
  HEAP8[$0_1 + 18 | 0] = $4_1 >>> 8;
  HEAP8[$0_1 + 17 | 0] = $4_1;
  $2_1 = $6_1;
  HEAP8[$0_1 + 16 | 0] = ($4_1 & 16777215) << 8 | $2_1 >>> 24;
  HEAP8[$0_1 + 15 | 0] = ($4_1 & 65535) << 16 | $2_1 >>> 16;
  HEAP8[$0_1 + 14 | 0] = ($4_1 & 255) << 24 | $2_1 >>> 8;
  $6_1 = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP8[$0_1 + 12 | 0] = $2_1 >>> 12;
  $1_1 = $2_1;
  HEAP8[$0_1 + 11 | 0] = $2_1 >>> 4;
  $2_1 = $6_1;
  HEAP8[$0_1 + 10 | 0] = ($1_1 & 268435455) << 4 | $2_1 >>> 28;
  HEAP8[$0_1 + 9 | 0] = ($1_1 & 1048575) << 12 | $2_1 >>> 20;
  HEAP8[$0_1 + 8 | 0] = ($1_1 & 4095) << 20 | $2_1 >>> 12;
  HEAP8[$0_1 + 7 | 0] = ($1_1 & 15) << 28 | $2_1 >>> 4;
  HEAP8[$0_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$0_1 + 4 | 0] = $5_1;
  $1_1 = $7_1;
  HEAP8[$0_1 + 3 | 0] = ($5_1 & 16777215) << 8 | $1_1 >>> 24;
  HEAP8[$0_1 + 2 | 0] = ($5_1 & 65535) << 16 | $1_1 >>> 16;
  HEAP8[$0_1 + 1 | 0] = ($5_1 & 255) << 24 | $1_1 >>> 8;
  HEAP8[$0_1 + 19 | 0] = $8_1 << 4 | $4_1 >>> 16;
  HEAP8[$0_1 + 6 | 0] = $2_1 << 4 | $5_1 >>> 16;
 }
 
 function $93($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 1184 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 968 | 0;
  $175($4_1);
  $208($3_1 + 688 | 0);
  $7_1 = $3_1 + 216 | 0;
  $175($7_1);
  $4_1 = $91($3_1, $4_1, 216);
  $6_1 = $91($4_1 + 432 | 0, $4_1 + 688 | 0, 128);
  $209($4_1 + 560 | 0);
  label$1 : {
   if ($2_1 >>> 0 >= 129) {
    $3_1 = $4_1 + 688 | 0;
    $175($3_1);
    $409($3_1, $1_1, $2_1);
    $1_1 = $4_1 + 968 | 0;
    $91($1_1, $3_1, 216);
    $54($4_1 + 904 | 0, $1_1);
    $3_1 = 0;
    while (1) {
     if (($3_1 | 0) == 64) {
      break label$1
     }
     $1_1 = $3_1 + $6_1 | 0;
     $2_1 = $1_1;
     $5_1 = HEAPU8[$1_1 | 0];
     $1_1 = HEAPU8[($4_1 + 904 | 0) + $3_1 | 0];
     HEAP8[$2_1 | 0] = $5_1 ^ $1_1;
     $2_1 = ($4_1 + 560 | 0) + $3_1 | 0;
     HEAP8[$2_1 | 0] = $1_1 ^ HEAPU8[$2_1 | 0];
     $3_1 = $3_1 + 1 | 0;
     continue;
    };
   }
   $3_1 = 0;
   while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    if (($3_1 | 0) != 128) {
     $5_1 = $3_1 + $6_1 | 0;
     $8_1 = HEAPU8[$1_1 + $3_1 | 0];
     HEAP8[$5_1 | 0] = $8_1 ^ HEAPU8[$5_1 | 0];
     $5_1 = ($4_1 + 560 | 0) + $3_1 | 0;
     HEAP8[$5_1 | 0] = HEAPU8[$5_1 | 0] ^ $8_1;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   abort();
  }
  $410($4_1, $6_1);
  $410($7_1, $4_1 + 560 | 0);
  $91($0_1 + 8 | 0, $4_1, 560);
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  global$0 = $4_1 + 1184 | 0;
 }
 
 function $94($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (HEAP32[305144] == 1) {
    break label$1
   }
   $2_1 = HEAP32[305144];
   $4_1 = HEAP32[305145];
   HEAP32[305144] = 1;
   HEAP32[305145] = 0;
   $5_1 = HEAP32[305147];
   $6_1 = HEAP32[305146];
   HEAP32[305146] = 2;
   $3_1 = $1_1 + 8 | 0;
   HEAP32[$3_1 >> 2] = $6_1;
   HEAP32[$3_1 + 4 >> 2] = $5_1;
   HEAP32[$1_1 >> 2] = $2_1;
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   if (!$2_1) {
    break label$1
   }
   $376($3_1);
  }
  global$0 = $1_1 + 16 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (!HEAP32[305145]) {
       HEAP32[305145] = -1;
       $1_1 = HEAP32[305146];
       if (($1_1 | 0) != 2) {
        break label$2
       }
       $1_1 = 0;
       $2_1 = fimport$2() | 0;
       $3_1 = HEAP32[305248];
       $4_1 = HEAP32[305247];
       HEAP32[305247] = 0;
       HEAP32[305248] = 0;
       $5_1 = $2_1;
       $2_1 = ($4_1 | 0) == 1;
       $3_1 = $2_1 ? $3_1 : $5_1;
       if ($2_1) {
        break label$5
       }
       $1_1 = -2147483641;
       label$7 : {
        label$8 : {
         $2_1 = fimport$3($3_1 | 0) | 0;
         if ($423($2_1)) {
          break label$8
         }
         $1_1 = fimport$4($2_1 | 0) | 0;
         $4_1 = $423($1_1);
         $387($1_1);
         $1_1 = -2147483640;
         if ($4_1) {
          break label$8
         }
         $1_1 = 1;
         $4_1 = 0;
         break label$7;
        }
        $387($2_1);
        $4_1 = 1;
       }
       $387($3_1);
       if (!$4_1) {
        break label$3
       }
       HEAP32[305145] = HEAP32[305145] + 1;
       $0_1 = $172(4, 4);
       if (!$0_1) {
        break label$4
       }
       HEAP32[$0_1 >> 2] = $1_1;
       return $0_1;
      }
      abort();
     }
     $387($3_1);
     $2_1 = fimport$5(1074557, 6) | 0;
     break label$3;
    }
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](4, 4);
    abort();
   }
   $376(1220584);
   HEAP32[305147] = $2_1;
   HEAP32[305146] = $1_1;
  }
  label$9 : {
   if (($1_1 | 0) == 1) {
    $3_1 = HEAP32[305147];
    $1_1 = 32;
    while (1) {
     if (!$1_1) {
      break label$9
     }
     $2_1 = $1_1 >>> 0 < 65536 ? $1_1 : 65536;
     fimport$6($3_1 | 0, $0_1 | 0, $2_1 | 0);
     $0_1 = $0_1 + $2_1 | 0;
     $1_1 = $1_1 - $2_1 | 0;
     continue;
    };
   }
   fimport$7(HEAP32[305147], $0_1 | 0, 32);
  }
  HEAP32[305145] = HEAP32[305145] + 1;
  return 0;
 }
 
 function $95($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $2_1 = $1_1 + 216 | 0;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $5_1 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $2_1 = $1_1 + 208 | 0;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $5_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $2_1 = $1_1 + 200 | 0;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $5_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $2_1 = HEAPU8[$1_1 + 196 | 0] | HEAPU8[$1_1 + 197 | 0] << 8 | (HEAPU8[$1_1 + 198 | 0] << 16 | HEAPU8[$1_1 + 199 | 0] << 24);
  HEAP32[$5_1 + 64 >> 2] = HEAPU8[$1_1 + 192 | 0] | HEAPU8[$1_1 + 193 | 0] << 8 | (HEAPU8[$1_1 + 194 | 0] << 16 | HEAPU8[$1_1 + 195 | 0] << 24);
  HEAP32[$5_1 + 68 >> 2] = $2_1;
  while (1) {
   if (($3_1 | 0) != 32) {
    $4_1 = ($5_1 - -64 | 0) + $3_1 | 0;
    $2_1 = HEAPU8[$4_1 | 0];
    HEAP8[$4_1 | 0] = $2_1 << 3 | $7_1;
    $3_1 = $3_1 + 1 | 0;
    $7_1 = $2_1 >>> 5 | 0;
    continue;
   }
   break;
  };
  $3_1 = $5_1 + 88 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $5_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $5_1 + 80 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $5_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $5_1 + 72 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $5_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 232 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $5_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 240 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $5_1 + 48 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 248 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $5_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$5_1 + 68 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 64 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = $1_1 + 224 | 0;
  $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  HEAP32[$5_1 + 32 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$5_1 + 36 >> 2] = $3_1;
  $0_1 = $91($0_1, $5_1, 64);
  $2_1 = $0_1 + 88 | 0;
  $3_1 = $1_1 + 184 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $3_1 = $1_1 + 176 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $2_1 = $0_1 + 80 | 0;
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $3_1 = $1_1 + 168 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $2_1 = $0_1 + 72 | 0;
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $2_1 = HEAPU8[$1_1 + 164 | 0] | HEAPU8[$1_1 + 165 | 0] << 8 | (HEAPU8[$1_1 + 166 | 0] << 16 | HEAPU8[$1_1 + 167 | 0] << 24);
  $1_1 = HEAPU8[$1_1 + 160 | 0] | HEAPU8[$1_1 + 161 | 0] << 8 | (HEAPU8[$1_1 + 162 | 0] << 16 | HEAPU8[$1_1 + 163 | 0] << 24);
  HEAP8[$0_1 + 64 | 0] = $1_1;
  HEAP8[$0_1 + 65 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 66 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 67 | 0] = $1_1 >>> 24;
  HEAP8[$0_1 + 68 | 0] = $2_1;
  HEAP8[$0_1 + 69 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 70 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 71 | 0] = $2_1 >>> 24;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $96($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $12_1 = ($2_1 << 1) + $1_1 | 0;
  $10_1 = ($0_1 & 65280) >>> 8 | 0;
  $2_1 = 0;
  $13_1 = $0_1 & 255;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      if (($1_1 | 0) != ($12_1 | 0)) {
       $11_1 = $1_1 + 2 | 0;
       $9_1 = HEAPU8[$1_1 + 1 | 0] + $2_1 | 0;
       $8_1 = HEAPU8[$1_1 | 0];
       if (($10_1 | 0) == ($8_1 | 0)) {
        break label$4
       }
       $1_1 = $11_1;
       $2_1 = $9_1;
       if ($8_1 >>> 0 <= $10_1 >>> 0) {
        continue
       }
      }
      $3_1 = $5_1 + $6_1 | 0;
      $0_1 = $0_1 & 65535;
      $2_1 = 1;
      while (1) {
       if (($3_1 | 0) == ($5_1 | 0)) {
        break label$2
       }
       $1_1 = $5_1 + 1 | 0;
       $4_1 = HEAPU8[$5_1 | 0];
       $6_1 = $4_1 << 24 >> 24;
       if (($6_1 | 0) < 0) {
        if (($1_1 | 0) == ($3_1 | 0)) {
         break label$1
        }
        $4_1 = HEAPU8[$5_1 + 1 | 0] | ($6_1 & 127) << 8;
        $1_1 = $5_1 + 2 | 0;
       }
       $0_1 = $0_1 - $4_1 | 0;
       if (($0_1 | 0) < 0) {
        break label$2
       }
       $2_1 = $2_1 ^ 1;
       $5_1 = $1_1;
       continue;
      };
     }
     $310($7_1 + 8 | 0, $2_1, $9_1, $3_1, $4_1);
     $2_1 = HEAP32[$7_1 + 8 >> 2];
     $1_1 = HEAP32[$7_1 + 12 >> 2];
     while (1) {
      if (!$1_1) {
       $1_1 = $11_1;
       $2_1 = $9_1;
       continue label$3;
      }
      $1_1 = $1_1 - 1 | 0;
      $8_1 = HEAPU8[$2_1 | 0];
      $2_1 = $2_1 + 1 | 0;
      if (($8_1 | 0) != ($13_1 | 0)) {
       continue
      }
      break;
     };
     break;
    };
    $2_1 = 0;
   }
   global$0 = $7_1 + 16 | 0;
   return $2_1 & 1;
  }
  abort();
 }
 
 function $97($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 944 | 0;
  global$0 = $4_1;
  $3_1 = $4_1 + 208 | 0;
  $91($3_1, $2_1, 208);
  $389($3_1, 1048963, 9, $1_1 + 160 | 0);
  $1_1 = $91($4_1, $3_1, 208);
  $147($1_1 + 416 | 0, 0, 64);
  $290($1_1, 1048576, 7, $1_1 + 416 | 0, 64);
  $2_1 = $1_1 + 440 | 0;
  $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $1_1 + 664 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 432 | 0;
  $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $1_1 + 656 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 424 | 0;
  $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $1_1 + 648 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = HEAPU8[$1_1 + 420 | 0] | HEAPU8[$1_1 + 421 | 0] << 8 | (HEAPU8[$1_1 + 422 | 0] << 16 | HEAPU8[$1_1 + 423 | 0] << 24);
  HEAP32[$1_1 + 640 >> 2] = HEAPU8[$1_1 + 416 | 0] | HEAPU8[$1_1 + 417 | 0] << 8 | (HEAPU8[$1_1 + 418 | 0] << 16 | HEAPU8[$1_1 + 419 | 0] << 24);
  HEAP32[$1_1 + 644 >> 2] = $2_1;
  $2_1 = $1_1 + 672 | 0;
  $214($2_1, $1_1 + 640 | 0);
  $4_1 = $1_1 + 712 | 0;
  $45($4_1, $2_1);
  $2_1 = $1_1 + 472 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $1_1 + 896 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $2_1 = $1_1 + 464 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $1_1 + 888 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $2_1 = $1_1 + 456 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $3_1 = $1_1 + 880 | 0;
  HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $2_1 = HEAPU8[$1_1 + 452 | 0] | HEAPU8[$1_1 + 453 | 0] << 8 | (HEAPU8[$1_1 + 454 | 0] << 16 | HEAPU8[$1_1 + 455 | 0] << 24);
  HEAP32[$1_1 + 872 >> 2] = HEAPU8[$1_1 + 448 | 0] | HEAPU8[$1_1 + 449 | 0] << 8 | (HEAPU8[$1_1 + 450 | 0] << 16 | HEAPU8[$1_1 + 451 | 0] << 24);
  HEAP32[$1_1 + 876 >> 2] = $2_1;
  $2_1 = $1_1 + 904 | 0;
  $214($2_1, $1_1 + 872 | 0);
  $3_1 = $1_1 + 208 | 0;
  $45($3_1, $2_1);
  $2_1 = $1_1 + 480 | 0;
  $318($2_1, $4_1, $3_1);
  $373($0_1, $2_1);
  $336($1_1);
  global$0 = $1_1 + 944 | 0;
 }
 
 function $98($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!$2_1) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218093, HEAP32[$0_1 + 180 >> 2]);
    break label$1;
   }
   $6_1 = HEAP32[$2_1 >> 2];
   $7_1 = $4_1 & 256;
   if ($6_1 >>> 0 < ($7_1 ? 33 : 65) >>> 0) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218111, HEAP32[$0_1 + 180 >> 2]);
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 0;
   if (!$1_1) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218181, HEAP32[$0_1 + 180 >> 2]);
    break label$1;
   }
   $6_1 = $147($1_1, 0, $6_1);
   if (!$3_1) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218064, HEAP32[$0_1 + 180 >> 2]);
    break label$1;
   }
   if (($4_1 & 255) != 2) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218196, HEAP32[$0_1 + 180 >> 2]);
    break label$1;
   }
   $4_1 = global$0 + -64 | 0;
   global$0 = $4_1;
   $1_1 = $5_1 + 8 | 0;
   $4_1 = $91($4_1, $3_1, 64);
   $369($1_1, $4_1);
   $3_1 = 1;
   if (!(HEAP32[$1_1 + 32 >> 2] | (HEAP32[$1_1 + 24 >> 2] | (HEAP32[$1_1 + 16 >> 2] | (HEAP32[$1_1 + 8 >> 2] | HEAP32[$1_1 >> 2]))) | (HEAP32[$1_1 + 36 >> 2] | (HEAP32[$1_1 + 28 >> 2] | (HEAP32[$1_1 + 20 >> 2] | (HEAP32[$1_1 + 12 >> 2] | HEAP32[$1_1 + 4 >> 2])))))) {
    FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218992, HEAP32[$0_1 + 180 >> 2]);
    $3_1 = 0;
   }
   global$0 = $4_1 - -64 | 0;
   if (HEAP32[$5_1 + 88 >> 2] | !$3_1) {
    break label$1
   }
   $0_1 = $5_1 + 8 | 0;
   $128($0_1);
   $1_1 = $5_1 + 48 | 0;
   $128($1_1);
   $81($6_1 + 1 | 0, $0_1);
   label$8 : {
    if ($7_1) {
     HEAP8[$6_1 | 0] = HEAP32[$5_1 + 48 >> 2] & 1 ? 3 : 2;
     $0_1 = 33;
     break label$8;
    }
    HEAP8[$6_1 | 0] = 4;
    $81($6_1 + 33 | 0, $1_1);
    $0_1 = 65;
   }
   HEAP32[$2_1 >> 2] = $0_1;
  }
  global$0 = $5_1 + 96 | 0;
 }
 
 function $99($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 192 | 0;
  global$0 = $7_1;
  $6_1 = $2_1 + 16 | 0;
  $9_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
  $8_1 = $7_1 + 96 | 0;
  HEAP32[$8_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $6_1 = $2_1 + 24 | 0;
  $9_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
  $8_1 = $7_1 + 104 | 0;
  HEAP32[$8_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $6_1 = $1_1 + 8 | 0;
  $9_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
  $8_1 = $7_1 + 120 | 0;
  HEAP32[$8_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $6_1 = $1_1 + 16 | 0;
  $9_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
  $8_1 = $7_1 + 128 | 0;
  HEAP32[$8_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $6_1 = $1_1 + 24 | 0;
  $9_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
  $8_1 = $7_1 + 136 | 0;
  HEAP32[$8_1 >> 2] = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  HEAP32[$7_1 + 80 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$7_1 + 84 >> 2] = $6_1;
  $2_1 = $2_1 + 8 | 0;
  $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  HEAP32[$7_1 + 88 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$7_1 + 92 >> 2] = $6_1;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  HEAP32[$7_1 + 112 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$7_1 + 116 >> 2] = $2_1;
  if ($4_1) {
   $1_1 = $4_1 + 24 | 0;
   $6_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   $2_1 = $7_1 + 168 | 0;
   HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   $1_1 = $4_1 + 16 | 0;
   $6_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   $2_1 = $7_1 + 160 | 0;
   HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   $1_1 = $4_1 + 8 | 0;
   $6_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
   $2_1 = $7_1 + 152 | 0;
   HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   $1_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
   HEAP32[$7_1 + 144 >> 2] = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
   HEAP32[$7_1 + 148 >> 2] = $1_1;
   $1_1 = 96;
  } else {
   $1_1 = 64
  }
  $8_1 = $7_1 + 8 | 0;
  $9_1 = $7_1 + 80 | 0;
  if ($3_1) {
   $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
   $2_1 = $1_1 + ($7_1 + 80 | 0) | 0;
   $6_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
   HEAP8[$2_1 | 0] = $6_1;
   HEAP8[$2_1 + 1 | 0] = $6_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $6_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $6_1 >>> 24;
   HEAP8[$2_1 + 4 | 0] = $4_1;
   HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
   $3_1 = $3_1 + 8 | 0;
   $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
   $2_1 = $2_1 + 8 | 0;
   $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
   HEAP8[$2_1 | 0] = $3_1;
   HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
   HEAP8[$2_1 + 4 | 0] = $4_1;
   HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
   HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
   HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
   $1_1 = $1_1 | 16;
  }
  $116($8_1, $9_1, $1_1);
  $1_1 = 0;
  $147($9_1, 0, 112);
  while (1) {
   if ($1_1 >>> 0 <= $5_1 >>> 0) {
    $148($7_1 + 8 | 0, $0_1);
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $7_1 + 192 | 0;
  return 1;
 }
 
 function $100($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = $0_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 48 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 - -64 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $147($0_1 + 88 | 0, 0, 72);
  HEAP32[$0_1 + 80 >> 2] = 1;
  HEAP32[$0_1 + 84 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $3_1 = $2_1 << 24 >> 31;
  $5_1 = $3_1 + $2_1 ^ $3_1;
  $2_1 = 1;
  while (1) {
   if (($2_1 | 0) == 9) {
    $2_1 = $380($3_1 & 1);
    $3_1 = $4_1 + 8 | 0;
    $91($3_1, $0_1 + 40 | 0, 40);
    $91($4_1 + 48 | 0, $0_1, 40);
    $91($4_1 + 88 | 0, $0_1 + 80 | 0, 40);
    $1_1 = $4_1 + 168 | 0;
    $91($1_1, $0_1 + 120 | 0, 40);
    $186($1_1);
    $91($4_1 + 128 | 0, $1_1, 40);
    $293($0_1, $3_1, $2_1);
    global$0 = $4_1 + 208 | 0;
   } else {
    $293($0_1, $1_1, $356($5_1, $2_1));
    $1_1 = $1_1 + 160 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $101($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = $3_1;
  $8_1 = HEAP32[$0_1 + 8 >> 2];
  $9_1 = $2_1 << 3;
  $6_1 = $8_1 + $9_1 | 0;
  $3_1 = ($2_1 >>> 29 | 0) + $3_1 | 0;
  $3_1 = $6_1 >>> 0 < $9_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 + 8 >> 2] = $6_1;
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  if (($3_1 | 0) == ($5_1 | 0) & $6_1 >>> 0 < $8_1 >>> 0 | $3_1 >>> 0 < $5_1 >>> 0) {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   $5_1 = HEAP32[$0_1 >> 2] + 1 | 0;
   $3_1 = $5_1 ? $3_1 : $3_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $5_1;
   HEAP32[$0_1 + 4 >> 2] = $3_1;
  }
  HEAP32[$4_1 + 24 >> 2] = $0_1 + 16;
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $4_1 + 24;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$5_1) {
      break label$4
     }
     $3_1 = 128 - $5_1 | 0;
     if ($3_1 >>> 0 > $2_1 >>> 0) {
      break label$4
     }
     $7_1 = $0_1 + 84 | 0;
     $345($4_1 + 16 | 0, $7_1, 128, $5_1);
     if (($3_1 | 0) != HEAP32[$4_1 + 20 >> 2]) {
      break label$2
     }
     $91(HEAP32[$4_1 + 16 >> 2], $1_1, $3_1);
     HEAP32[$0_1 + 80 >> 2] = 0;
     $2_1 = $2_1 - $3_1 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $3_1 = 0;
     break label$3;
    }
    $3_1 = 1;
   }
   while (1) {
    if (!$3_1) {
     $406($4_1 + 28 | 0, $7_1);
     $3_1 = 1;
     continue;
    }
    label$7 : {
     if ($2_1 >>> 0 >= 128) {
      $2_1 = $2_1 - 128 | 0;
      $7_1 = $1_1;
      $1_1 = $1_1 + 128 | 0;
      break label$7;
     }
     $3_1 = HEAP32[$0_1 + 80 >> 2];
     $310($4_1 + 8 | 0, $3_1, $2_1 + $3_1 | 0, $0_1 + 84 | 0, 128);
     if (HEAP32[$4_1 + 12 >> 2] != ($2_1 | 0)) {
      break label$2
     }
     $91(HEAP32[$4_1 + 8 >> 2], $1_1, $2_1);
     HEAP32[$0_1 + 80 >> 2] = HEAP32[$0_1 + 80 >> 2] + $2_1;
     global$0 = $4_1 + 32 | 0;
     return;
    }
    $3_1 = 0;
    continue;
   };
  }
  abort();
 }
 
 function $102($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  $91($3_1 + 40 | 0, $0_1, 216);
  label$1 : {
   if (!HEAPU8[$3_1 + 249 | 0]) {
    HEAP8[$3_1 + 249 | 0] = 1;
    $0_1 = HEAPU8[$3_1 + 248 | 0];
    $5_1 = HEAP32[$3_1 + 244 >> 2];
    $316($3_1 + 32 | 0, $3_1 + 40 | 0, HEAP32[$3_1 + 240 >> 2]);
    $365($3_1 + 24 | 0, HEAP32[$3_1 + 32 >> 2], HEAP32[$3_1 + 36 >> 2], 1);
    if (!HEAP32[$3_1 + 28 >> 2]) {
     break label$1
    }
    $4_1 = HEAP32[$3_1 + 24 >> 2];
    HEAP8[$4_1 | 0] = $0_1 ^ HEAPU8[$4_1 | 0];
    $316($3_1 + 16 | 0, $3_1 + 40 | 0, $5_1 - 1 | 0);
    $365($3_1 + 8 | 0, HEAP32[$3_1 + 16 >> 2], HEAP32[$3_1 + 20 >> 2], 1);
    if (!HEAP32[$3_1 + 12 >> 2]) {
     break label$1
    }
    $0_1 = HEAP32[$3_1 + 8 >> 2];
    HEAP8[$0_1 | 0] = HEAPU8[$0_1 | 0] ^ 128;
    $407($3_1 + 40 | 0);
   }
   $4_1 = HEAP32[$3_1 + 240 >> 2];
   $0_1 = HEAP32[$3_1 + 244 >> 2] - $4_1 | 0;
   $5_1 = $2_1;
   while (1) {
    $345($3_1, $1_1, $2_1, $6_1);
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $8_1 = HEAP32[$3_1 >> 2];
    if ($0_1 >>> 0 <= $5_1 >>> 0) {
     $9_1 = $3_1 + 40 | 0;
     $229($9_1, $8_1, $7_1, $4_1, $0_1);
     $5_1 = $5_1 - $0_1 | 0;
     $6_1 = $0_1 + $6_1 | 0;
     $22($9_1);
     $4_1 = 0;
     $0_1 = HEAP32[$3_1 + 244 >> 2];
     continue;
    }
    break;
   };
   $229($3_1 + 40 | 0, $8_1, $7_1, $4_1, $5_1);
   global$0 = $3_1 + 256 | 0;
   return;
  }
  abort();
 }
 
 function $103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$0_1 >> 2] - 1 | 0) {
    default:
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062350, 15) | 0;
     break label$1;
    case 0:
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062339, 11) | 0;
     break label$1;
    case 1:
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062325, 14) | 0), HEAP8[wasm2js_i32$0 + 8 | 0] = wasm2js_i32$1;
     HEAP32[$2_1 >> 2] = $1_1;
     HEAP8[$2_1 + 9 | 0] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 4;
     $0_1 = $185($104($2_1, $2_1 + 12 | 0, 1062276));
     break label$1;
    case 2:
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062308, 17) | 0), HEAP8[wasm2js_i32$0 + 8 | 0] = wasm2js_i32$1;
     HEAP32[$2_1 >> 2] = $1_1;
     HEAP8[$2_1 + 9 | 0] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = $0_1 + 4;
     $0_1 = $185($104($2_1, $2_1 + 12 | 0, 1062276));
     break label$1;
    case 3:
     break label$2;
    };
   }
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062256, 20) | 0), HEAP8[wasm2js_i32$0 + 8 | 0] = wasm2js_i32$1;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP8[$2_1 + 9 | 0] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 12 >> 2] = $0_1 + 4;
   $1_1 = $2_1 + 12 | 0;
   $3_1 = $104($2_1, $1_1, 1062276);
   HEAP32[$2_1 + 12 >> 2] = $0_1 + 8;
   $0_1 = $185($104($3_1, $1_1, 1062292));
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $104($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  label$1 : {
   if (HEAPU8[$0_1 + 8 | 0]) {
    $6_1 = HEAP32[$0_1 + 4 >> 2];
    $4_1 = 1;
    break label$1;
   }
   $6_1 = HEAP32[$0_1 + 4 >> 2];
   $5_1 = HEAP32[$0_1 >> 2];
   $4_1 = HEAP32[$5_1 >> 2];
   if (!($4_1 & 4)) {
    $4_1 = 1;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], $6_1 ? 1073480 : 1062659, $6_1 ? 2 : 1) | 0) {
     break label$1
    }
    $4_1 = FUNCTION_TABLE[HEAP32[$2_1 + 12 >> 2]]($1_1, $5_1) | 0;
    break label$1;
   }
   if (!$6_1) {
    if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 28 >> 2] + 12 >> 2]](HEAP32[$5_1 + 24 >> 2], 1062657, 2) | 0) {
     $6_1 = 0;
     $4_1 = 1;
     break label$1;
    }
    $4_1 = HEAP32[$5_1 >> 2];
   }
   HEAP8[$3_1 + 23 | 0] = 1;
   HEAP32[$3_1 + 52 >> 2] = 1062620;
   HEAP32[$3_1 + 16 >> 2] = $3_1 + 23;
   HEAP32[$3_1 + 24 >> 2] = $4_1;
   $4_1 = HEAP32[$5_1 + 28 >> 2];
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$5_1 + 24 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $4_1;
   $4_1 = HEAP32[$5_1 + 8 >> 2];
   $7_1 = HEAP32[$5_1 + 12 >> 2];
   $8_1 = HEAP32[$5_1 + 20 >> 2];
   $9_1 = HEAP32[$5_1 + 16 >> 2];
   HEAP8[$3_1 + 56 | 0] = HEAPU8[$5_1 + 32 | 0];
   HEAP32[$3_1 + 28 >> 2] = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$3_1 + 40 >> 2] = $9_1;
   HEAP32[$3_1 + 44 >> 2] = $8_1;
   HEAP32[$3_1 + 32 >> 2] = $4_1;
   HEAP32[$3_1 + 36 >> 2] = $7_1;
   HEAP32[$3_1 + 48 >> 2] = $3_1 + 8;
   $4_1 = 1;
   if (FUNCTION_TABLE[HEAP32[$2_1 + 12 >> 2]]($1_1, $3_1 + 24 | 0) | 0) {
    break label$1
   }
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 + 52 >> 2] + 12 >> 2]](HEAP32[$3_1 + 48 >> 2], 1062651, 2) | 0;
  }
  HEAP8[$0_1 + 8 | 0] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $6_1 + 1;
  global$0 = $3_1 - -64 | 0;
  return $0_1;
 }
 
 function $105($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  $6_1 = 39;
  label$1 : {
   while (1) {
    if (!$1_1 & $0_1 >>> 0 <= 9999) {
     if (($0_1 | 0) <= 99) {
      break label$1
     }
    } else {
     $13_1 = ($9_1 + 9 | 0) + $6_1 | 0;
     $14_1 = $13_1 - 4 | 0;
     $7_1 = $0_1;
     $12_1 = 0;
     __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
      if (!$1_1) {
       i64toi32_i32$HIGH_BITS = 0;
       $0_1 = ($0_1 >>> 0) / 1e4 | 0;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $5_1 = 51 - Math_clz32($1_1) | 0;
      $10_1 = 0 - $5_1 | 0;
      $8_1 = $5_1 & 63;
      $4_1 = $8_1 & 31;
      if ($8_1 >>> 0 >= 32) {
       $8_1 = 0;
       $11_1 = $1_1 >>> $4_1 | 0;
      } else {
       $8_1 = $1_1 >>> $4_1 | 0;
       $11_1 = ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | $0_1 >>> $4_1;
      }
      $10_1 = $10_1 & 63;
      $4_1 = $10_1 & 31;
      if ($10_1 >>> 0 >= 32) {
       $1_1 = $0_1 << $4_1;
       $0_1 = 0;
      } else {
       $1_1 = (1 << $4_1) - 1 & $0_1 >>> 32 - $4_1 | $1_1 << $4_1;
       $0_1 = $0_1 << $4_1;
      }
      if ($5_1) {
       while (1) {
        $4_1 = $11_1 << 1 | $1_1 >>> 31;
        $8_1 = $8_1 << 1 | $11_1 >>> 31;
        $10_1 = 0 - ($8_1 + ($4_1 >>> 0 > 9999) | 0) >> 31;
        $15_1 = $10_1 & 1e4;
        $11_1 = $4_1 - $15_1 | 0;
        $8_1 = $8_1 - ($4_1 >>> 0 < $15_1 >>> 0) | 0;
        $1_1 = $1_1 << 1 | $0_1 >>> 31;
        $0_1 = $12_1 | $0_1 << 1;
        $12_1 = $10_1 & 1;
        $5_1 = $5_1 - 1 | 0;
        if ($5_1) {
         continue
        }
        break;
       }
      }
      i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0_1 >>> 31;
      $0_1 = $12_1 | $0_1 << 1;
     }
     $1_1 = i64toi32_i32$HIGH_BITS;
     $7_1 = __wasm_i64_mul($0_1, $1_1, -1e4, -1) + $7_1 | 0;
     $4_1 = (($7_1 & 65535) >>> 0) / 100 | 0;
     $5_1 = ($4_1 << 1) + 1062663 | 0;
     $5_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8;
     HEAP8[$14_1 | 0] = $5_1;
     HEAP8[$14_1 + 1 | 0] = $5_1 >>> 8;
     $5_1 = $13_1 - 2 | 0;
     $7_1 = (($7_1 + Math_imul($4_1, -100) & 65535) << 1) + 1062663 | 0;
     $7_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8;
     HEAP8[$5_1 | 0] = $7_1;
     HEAP8[$5_1 + 1 | 0] = $7_1 >>> 8;
     $6_1 = $6_1 - 4 | 0;
     continue;
    }
    break;
   };
   $7_1 = ($6_1 + $9_1 | 0) + 7 | 0;
   $1_1 = $0_1;
   $0_1 = (($0_1 & 65535) >>> 0) / 100 | 0;
   $1_1 = ((Math_imul($0_1, -100) + $1_1 & 65535) << 1) + 1062663 | 0;
   $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
   HEAP8[$7_1 | 0] = $1_1;
   HEAP8[$7_1 + 1 | 0] = $1_1 >>> 8;
   $6_1 = $6_1 - 2 | 0;
  }
  label$6 : {
   if (($0_1 | 0) >= 10) {
    $6_1 = $6_1 - 2 | 0;
    $1_1 = $6_1 + ($9_1 + 9 | 0) | 0;
    $0_1 = ($0_1 << 1) + 1062663 | 0;
    $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8;
    HEAP8[$1_1 | 0] = $0_1;
    HEAP8[$1_1 + 1 | 0] = $0_1 >>> 8;
    break label$6;
   }
   $6_1 = $6_1 - 1 | 0;
   HEAP8[$6_1 + ($9_1 + 9 | 0) | 0] = $0_1 + 48;
  }
  $0_1 = $75($3_1, $2_1, 1217612, 0, ($9_1 + 9 | 0) + $6_1 | 0, 39 - $6_1 | 0);
  global$0 = $9_1 + 48 | 0;
  return $0_1;
 }
 
 function $106($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0;
  $5_1 = HEAP32[$0_1 + 36 >> 2];
  $20_1 = $5_1;
  $22_1 = HEAP32[$2_1 + 12 >> 2];
  $5_1 = $5_1 >> 31;
  $11_1 = $5_1;
  $8_1 = HEAP32[$0_1 + 12 >> 2] + ($22_1 & $5_1) | 0;
  $1_1 = $1_1 >> 31;
  $23_1 = HEAP32[$2_1 + 8 >> 2];
  $6_1 = $5_1 & $23_1;
  $16_1 = $6_1 + HEAP32[$0_1 + 8 >> 2] | 0;
  $12_1 = $1_1 ^ $16_1;
  $3_1 = $12_1 - $1_1 | 0;
  $24_1 = HEAP32[$2_1 >> 2];
  $9_1 = $5_1 & $24_1;
  $4_1 = $9_1 + HEAP32[$0_1 >> 2] | 0;
  $13_1 = $4_1 ^ $1_1;
  $10_1 = $13_1 - $1_1 | 0;
  $25_1 = HEAP32[$2_1 + 4 >> 2];
  $14_1 = HEAP32[$0_1 + 4 >> 2] + ($5_1 & $25_1) | 0;
  $9_1 = (($4_1 >>> 0 < $9_1 >>> 0 ? $14_1 + 1 | 0 : $14_1) ^ $1_1) - (($1_1 >>> 0 > $13_1 >>> 0) + $1_1 | 0) | 0;
  $4_1 = $9_1 >> 31;
  $13_1 = $9_1 >> 30;
  $3_1 = $3_1 + $13_1 | 0;
  $8_1 = $4_1 + ((($6_1 >>> 0 > $16_1 >>> 0 ? $8_1 + 1 | 0 : $8_1) ^ $1_1) - (($1_1 >>> 0 > $12_1 >>> 0) + $1_1 | 0) | 0) | 0;
  $16_1 = $3_1 >>> 0 < $13_1 >>> 0 ? $8_1 + 1 | 0 : $8_1;
  $6_1 = $16_1 >> 31;
  $13_1 = HEAP32[$2_1 + 16 >> 2];
  $12_1 = $5_1 & $13_1;
  $4_1 = $12_1 + HEAP32[$0_1 + 16 >> 2] | 0;
  $14_1 = $4_1 ^ $1_1;
  $15_1 = $14_1 - $1_1 | 0;
  $8_1 = $15_1 + ($16_1 >> 30) | 0;
  $7_1 = $6_1;
  $26_1 = HEAP32[$2_1 + 20 >> 2];
  $6_1 = HEAP32[$0_1 + 20 >> 2] + ($5_1 & $26_1) | 0;
  $6_1 = $7_1 + ((($4_1 >>> 0 < $12_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) ^ $1_1) - (($1_1 >>> 0 > $14_1 >>> 0) + $1_1 | 0) | 0) | 0;
  $12_1 = $8_1 >>> 0 < $15_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
  $4_1 = $12_1 >> 31;
  $14_1 = HEAP32[$2_1 + 24 >> 2];
  $15_1 = $5_1 & $14_1;
  $17_1 = $15_1 + HEAP32[$0_1 + 24 >> 2] | 0;
  $18_1 = $17_1 ^ $1_1;
  $19_1 = $18_1 - $1_1 | 0;
  $6_1 = $19_1 + ($12_1 >> 30) | 0;
  $7_1 = $4_1;
  $27_1 = HEAP32[$2_1 + 28 >> 2];
  $4_1 = HEAP32[$0_1 + 28 >> 2] + ($5_1 & $27_1) | 0;
  $4_1 = $7_1 + ((($15_1 >>> 0 > $17_1 >>> 0 ? $4_1 + 1 | 0 : $4_1) ^ $1_1) - (($1_1 >>> 0 > $18_1 >>> 0) + $1_1 | 0) | 0) | 0;
  $4_1 = $6_1 >>> 0 < $19_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $15_1 = $4_1 >> 31;
  $17_1 = HEAP32[$0_1 + 32 >> 2];
  $18_1 = HEAP32[$2_1 + 32 >> 2];
  $19_1 = $17_1 + ($5_1 & $18_1) | 0;
  $28_1 = $1_1 ^ $19_1;
  $21_1 = $28_1 - $1_1 | 0;
  $5_1 = $21_1 + ($4_1 >> 30) | 0;
  $7_1 = $11_1;
  $11_1 = HEAP32[$2_1 + 36 >> 2];
  $2_1 = $20_1 + ($7_1 & $11_1) | 0;
  $1_1 = ((($17_1 >>> 0 > $19_1 >>> 0 ? $2_1 + 1 | 0 : $2_1) ^ $1_1) - (($1_1 >>> 0 > $28_1 >>> 0) + $1_1 | 0) | 0) + $15_1 | 0;
  $20_1 = $5_1 >>> 0 < $21_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = $20_1 >> 31;
  $2_1 = $10_1 + ($24_1 & $1_1) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  $9_1 = ($1_1 & $25_1) + ($9_1 & 1073741823) | 0;
  $2_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1 & 1073741823;
  $10_1 = ($1_1 & $22_1) + ($16_1 & 1073741823) | 0;
  $7_1 = $3_1;
  $3_1 = $3_1 + ($1_1 & $23_1) | 0;
  $10_1 = $7_1 >>> 0 > $3_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
  $7_1 = $3_1;
  $3_1 = $2_1 >> 30;
  $9_1 = $7_1 + $3_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $9_1;
  $2_1 = ($2_1 >> 31) + $10_1 | 0;
  $2_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1 & 1073741823;
  $3_1 = ($1_1 & $26_1) + ($12_1 & 1073741823) | 0;
  $21_1 = $3_1 + 1 | 0;
  $7_1 = $3_1;
  $3_1 = $8_1 + ($1_1 & $13_1) | 0;
  $8_1 = $3_1 >>> 0 < $8_1 >>> 0 ? $21_1 : $7_1;
  $7_1 = $3_1;
  $3_1 = $2_1 >> 30;
  $10_1 = $7_1 + $3_1 | 0;
  HEAP32[$0_1 + 16 >> 2] = $10_1;
  $2_1 = ($2_1 >> 31) + $8_1 | 0;
  $2_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$0_1 + 20 >> 2] = $2_1 & 1073741823;
  $3_1 = ($1_1 & $27_1) + ($4_1 & 1073741823) | 0;
  $4_1 = $3_1 + 1 | 0;
  $7_1 = $3_1;
  $3_1 = $6_1 + ($1_1 & $14_1) | 0;
  $8_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $4_1 : $7_1;
  $7_1 = $3_1;
  $3_1 = $2_1 >> 30;
  $6_1 = $7_1 + $3_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $6_1;
  $2_1 = ($2_1 >> 31) + $8_1 | 0;
  $2_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$0_1 + 28 >> 2] = $2_1 & 1073741823;
  $11_1 = $20_1 + ($1_1 & $11_1) | 0;
  $1_1 = $5_1 + ($1_1 & $18_1) | 0;
  $11_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
  $3_1 = $1_1;
  $1_1 = $2_1 >> 30;
  $5_1 = $3_1 + $1_1 | 0;
  HEAP32[$0_1 + 32 >> 2] = $5_1;
  $3_1 = $0_1;
  $0_1 = ($2_1 >> 31) + $11_1 | 0;
  HEAP32[$3_1 + 36 >> 2] = $1_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
 }
 
 function $107($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 400 | 0;
  global$0 = $2_1;
  $214($2_1, $1_1);
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 - -64 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = 0;
  HEAP32[$2_1 + 52 >> 2] = 0;
  $3_1 = 1;
  HEAP32[$2_1 + 40 >> 2] = 1;
  HEAP32[$2_1 + 44 >> 2] = 0;
  $4_1 = $2_1 + 80 | 0;
  $422($4_1, $2_1);
  $6_1 = $2_1 + 120 | 0;
  $7_1 = $2_1 + 40 | 0;
  $167($6_1, $4_1, $7_1);
  $5_1 = $2_1 + 160 | 0;
  $15($5_1, $4_1, 1065192);
  $300($5_1, $7_1);
  $77($2_1 + 240 | 0, $6_1, $5_1);
  $4_1 = HEAPU8[$2_1 + 240 | 0];
  $91($2_1 + 200 | 0, $2_1 + 248 | 0, 40);
  label$1 : {
   if (($4_1 | 0) == 1) {
    $4_1 = $2_1 + 200 | 0;
    $301($4_1, $380(HEAPU8[$1_1 + 31 | 0] >>> 7 | 0));
    $1_1 = $2_1 + 240 | 0;
    $91($1_1, $4_1, 40);
    $91($2_1 + 280 | 0, $2_1, 40);
    $91($2_1 + 320 | 0, $2_1 + 40 | 0, 40);
    $15($2_1 + 360 | 0, $4_1, $2_1);
    $91($0_1 + 8 | 0, $1_1, 160);
    break label$1;
   }
   $3_1 = 0;
  }
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  global$0 = $2_1 + 400 | 0;
 }
 
 function $108($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  $5_1 = $1_1 + 40 | 0;
  $91($4_1, $5_1, 40);
  $300($4_1, $1_1);
  $6_1 = $3_1 + 48 | 0;
  $167($6_1, $5_1, $1_1);
  $5_1 = $3_1 + 88 | 0;
  $15($5_1, $4_1, $2_1);
  $4_1 = $3_1 + 128 | 0;
  $15($4_1, $6_1, $2_1 + 40 | 0);
  $6_1 = $3_1 + 168 | 0;
  $15($6_1, $1_1 + 120 | 0, $2_1 + 120 | 0);
  $7_1 = $3_1 + 208 | 0;
  $15($7_1, $1_1 + 80 | 0, $2_1 + 80 | 0);
  $1_1 = $3_1 + 248 | 0;
  $91($1_1, $7_1, 40);
  $300($1_1, $7_1);
  $167($0_1, $5_1, $4_1);
  $2_1 = $3_1 + 288 | 0;
  $91($2_1, $5_1, 40);
  $300($2_1, $4_1);
  $4_1 = $3_1 + 328 | 0;
  $91($4_1, $1_1, 40);
  $300($4_1, $6_1);
  $167($0_1 + 120 | 0, $1_1, $6_1);
  $91($0_1 + 40 | 0, $2_1, 40);
  $91($0_1 + 80 | 0, $4_1, 40);
  global$0 = $3_1 + 368 | 0;
 }
 
 function $109($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  $5_1 = $1_1 + 40 | 0;
  $91($4_1, $5_1, 40);
  $300($4_1, $1_1);
  $6_1 = $3_1 + 48 | 0;
  $167($6_1, $5_1, $1_1);
  $5_1 = $3_1 + 88 | 0;
  $15($5_1, $4_1, $2_1 + 40 | 0);
  $4_1 = $3_1 + 128 | 0;
  $15($4_1, $6_1, $2_1);
  $6_1 = $3_1 + 168 | 0;
  $15($6_1, $1_1 + 120 | 0, $2_1 + 120 | 0);
  $7_1 = $3_1 + 208 | 0;
  $15($7_1, $1_1 + 80 | 0, $2_1 + 80 | 0);
  $1_1 = $3_1 + 248 | 0;
  $91($1_1, $7_1, 40);
  $300($1_1, $7_1);
  $167($0_1, $5_1, $4_1);
  $2_1 = $3_1 + 288 | 0;
  $91($2_1, $5_1, 40);
  $300($2_1, $4_1);
  $167($0_1 + 80 | 0, $1_1, $6_1);
  $4_1 = $3_1 + 328 | 0;
  $91($4_1, $1_1, 40);
  $300($4_1, $6_1);
  $91($0_1 + 40 | 0, $2_1, 40);
  $91($0_1 + 120 | 0, $4_1, 40);
  global$0 = $3_1 + 368 | 0;
 }
 
 function $110($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 + 4 >> 2] + ($2_1 >>> 29 | 0) | 0;
  $3_1 = $2_1 << 3;
  $7_1 = $3_1 + HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $7_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1 >>> 0 > $7_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  HEAP32[$4_1 + 24 >> 2] = $0_1 + 76;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $4_1 + 24;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $5_1 = 64 - $3_1 | 0;
     if ($5_1 >>> 0 > $2_1 >>> 0) {
      break label$3
     }
     $6_1 = $0_1 + 12 | 0;
     $345($4_1 + 16 | 0, $6_1, 64, $3_1);
     if (($5_1 | 0) != HEAP32[$4_1 + 20 >> 2]) {
      break label$1
     }
     $91(HEAP32[$4_1 + 16 >> 2], $1_1, $5_1);
     HEAP32[$0_1 + 8 >> 2] = 0;
     $2_1 = $2_1 - $5_1 | 0;
     $1_1 = $1_1 + $5_1 | 0;
     $3_1 = 0;
     break label$2;
    }
    $3_1 = 1;
   }
   while (1) {
    if (!$3_1) {
     $405($4_1 + 28 | 0, $6_1);
     $3_1 = 1;
     continue;
    }
    label$6 : {
     if ($2_1 >>> 0 >= 64) {
      $2_1 = $2_1 + -64 | 0;
      $6_1 = $1_1;
      $1_1 = $1_1 - -64 | 0;
      break label$6;
     }
     $3_1 = HEAP32[$0_1 + 8 >> 2];
     $310($4_1 + 8 | 0, $3_1, $2_1 + $3_1 | 0, $0_1 + 12 | 0, 64);
     if (HEAP32[$4_1 + 12 >> 2] != ($2_1 | 0)) {
      break label$1
     }
     $91(HEAP32[$4_1 + 8 >> 2], $1_1, $2_1);
     HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + $2_1;
     global$0 = $4_1 + 32 | 0;
     return;
    }
    $3_1 = 0;
    continue;
   };
  }
  abort();
 }
 
 function $111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[$1_1 >> 2];
    if (!($3_1 & 16)) {
     if ($3_1 & 32) {
      break label$2
     }
     $0_1 = $401($0_1, $1_1);
     break label$1;
    }
    $0_1 = HEAP32[$0_1 >> 2];
    $3_1 = 127;
    while (1) {
     $4_1 = $0_1 & 15;
     HEAP8[($2_1 + 16 | 0) + $3_1 | 0] = ($4_1 >>> 0 < 10 ? 48 : 87) + $4_1;
     $3_1 = $3_1 - 1 | 0;
     $4_1 = $0_1 >>> 0 > 15;
     $0_1 = $0_1 >>> 4 | 0;
     if ($4_1) {
      continue
     }
     break;
    };
    $348($2_1 + 8 | 0, $2_1 + 16 | 0, $3_1 + 1 | 0);
    $0_1 = $75($1_1, 1, 1062661, 2, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
    break label$1;
   }
   $0_1 = HEAP32[$0_1 >> 2];
   $3_1 = 127;
   while (1) {
    $4_1 = $0_1 & 15;
    HEAP8[($2_1 + 16 | 0) + $3_1 | 0] = ($4_1 >>> 0 < 10 ? 48 : 55) + $4_1;
    $3_1 = $3_1 - 1 | 0;
    $4_1 = $0_1 >>> 0 > 15;
    $0_1 = $0_1 >>> 4 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
   $348($2_1, $2_1 + 16 | 0, $3_1 + 1 | 0);
   $0_1 = $75($1_1, 1, 1062661, 2, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2]);
  }
  global$0 = $2_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 496 | 0;
  global$0 = $3_1;
  $288($3_1 + 16 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $2_1;
  $5_1 = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $5_1;
  $1_1 = $3_1 + 32 | 0;
  $147($1_1, 0, 204);
  HEAP16[$3_1 + 240 >> 1] = 1;
  HEAP32[$3_1 + 236 >> 2] = 136;
  $6_1 = $3_1 + 272 | 0;
  $4_1 = $6_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $7_1 = $3_1 + 264 | 0;
  $4_1 = $7_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $8_1 = $3_1 + 256 | 0;
  $4_1 = $8_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 248 >> 2] = 0;
  HEAP32[$3_1 + 252 >> 2] = 0;
  $165($1_1, $5_1, $2_1);
  $9_1 = $3_1 + 280 | 0;
  $91($9_1, $1_1, 216);
  $102($9_1, $3_1 + 248 | 0, 32);
  $201($3_1 + 8 | 0, 32, 0);
  $10_1 = HEAP32[$3_1 + 12 >> 2];
  $5_1 = HEAP32[$3_1 + 252 >> 2];
  $2_1 = HEAP32[$3_1 + 8 >> 2];
  $1_1 = $2_1;
  $4_1 = HEAP32[$3_1 + 248 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$6_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $1_1 = $2_1 + 16 | 0;
  $4_1 = HEAP32[$7_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $5_1 = HEAP32[$8_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$8_1 >> 2];
  HEAP8[$1_1 | 0] = $4_1;
  HEAP8[$1_1 + 1 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $4_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $392($3_1 + 24 | 0);
  HEAP32[$3_1 + 288 >> 2] = 32;
  HEAP32[$3_1 + 284 >> 2] = $10_1;
  HEAP32[$3_1 + 280 >> 2] = $2_1;
  $271($3_1, $9_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 496 | 0;
 }
 
 function $113($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if (($4_1 | 0) == 32) {
     $4_1 = $5_1 + 40 | 0;
     $1_1 = $4_1;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $6_1 = $5_1 + 32 | 0;
     $1_1 = $6_1;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $7_1 = $5_1 + 24 | 0;
     $1_1 = $7_1;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$5_1 + 16 >> 2] = 0;
     HEAP32[$5_1 + 20 >> 2] = 0;
     $302($5_1 + 8 | 0, $3_1, 32, 32);
     if (HEAP32[$5_1 + 12 >> 2] != 32) {
      break label$1
     }
     $1_1 = HEAP32[$5_1 + 8 >> 2];
     $2_1 = $1_1 + 24 | 0;
     $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
     $8_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
     HEAP32[$4_1 >> 2] = $8_1;
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $2_1 = $1_1 + 16 | 0;
     $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
     $9_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
     HEAP32[$6_1 >> 2] = $9_1;
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     $2_1 = $1_1 + 8 | 0;
     $6_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
     $10_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
     HEAP32[$7_1 >> 2] = $10_1;
     HEAP32[$7_1 + 4 >> 2] = $6_1;
     $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
     $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
     HEAP32[$5_1 + 16 >> 2] = $1_1;
     HEAP32[$5_1 + 20 >> 2] = $2_1;
     $7_1 = $5_1 + 72 | 0;
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[$7_1 + 4 >> 2] = $3_1;
     $3_1 = $5_1 - -64 | 0;
     HEAP32[$3_1 >> 2] = $9_1;
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3_1 = $5_1 + 56 | 0;
     HEAP32[$3_1 >> 2] = $10_1;
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     HEAP32[$5_1 + 48 >> 2] = $1_1;
     HEAP32[$5_1 + 52 >> 2] = $2_1;
     $32($0_1, $5_1 + 48 | 0);
     break label$2;
    }
    HEAP8[$0_1 + 4 | 0] = 3;
    HEAP32[$0_1 >> 2] = 1;
    $3_1 = $0_1 + 20 | 0;
    HEAP32[$3_1 >> 2] = 82;
    HEAP32[$3_1 + 4 >> 2] = 32;
    HEAP32[$0_1 + 16 >> 2] = $2_1;
    HEAP32[$0_1 + 12 >> 2] = 9;
    HEAP32[$0_1 + 8 >> 2] = $1_1;
   }
   global$0 = $5_1 + 80 | 0;
   return;
  }
  abort();
 }
 
 function $114($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) == 64) {
    $2_1 = $1_1 + 24 | 0;
    $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $3_1 = $5_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $2_1 = $1_1 + 16 | 0;
    $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $6_1 = $5_1 + 16 | 0;
    $3_1 = $6_1;
    HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $2_1 = $1_1 + 8 | 0;
    $7_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $4_1 = $5_1 + 8 | 0;
    $3_1 = $4_1;
    HEAP32[$3_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP32[$3_1 + 4 >> 2] = $7_1;
    $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    HEAP32[$5_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $276($5_1);
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    $3_1 = HEAP32[$5_1 >> 2];
    HEAP8[$0_1 + 1 | 0] = $3_1;
    HEAP8[$0_1 + 2 | 0] = $3_1 >>> 8;
    HEAP8[$0_1 + 3 | 0] = $3_1 >>> 16;
    HEAP8[$0_1 + 4 | 0] = $3_1 >>> 24;
    HEAP8[$0_1 + 5 | 0] = $2_1;
    HEAP8[$0_1 + 6 | 0] = $2_1 >>> 8;
    HEAP8[$0_1 + 7 | 0] = $2_1 >>> 16;
    HEAP8[$0_1 + 8 | 0] = $2_1 >>> 24;
    $3_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $0_1 + 9 | 0;
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP8[$2_1 | 0] = $4_1;
    HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $3_1;
    HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = $0_1 + 17 | 0;
    $4_1 = HEAP32[$6_1 >> 2];
    HEAP8[$2_1 | 0] = $4_1;
    HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $3_1;
    HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
    $3_1 = $5_1 + 23 | 0;
    $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $2_1 = $0_1 + 24 | 0;
    $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP8[$2_1 | 0] = $3_1;
    HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $4_1;
    HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
    $3_1 = HEAPU8[$1_1 + 36 | 0] | HEAPU8[$1_1 + 37 | 0] << 8 | (HEAPU8[$1_1 + 38 | 0] << 16 | HEAPU8[$1_1 + 39 | 0] << 24);
    $2_1 = $0_1 + 33 | 0;
    $4_1 = HEAPU8[$1_1 + 32 | 0] | HEAPU8[$1_1 + 33 | 0] << 8 | (HEAPU8[$1_1 + 34 | 0] << 16 | HEAPU8[$1_1 + 35 | 0] << 24);
    HEAP8[$2_1 | 0] = $4_1;
    HEAP8[$2_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $4_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $3_1;
    HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
    $3_1 = $1_1 + 40 | 0;
    $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $2_1 = $0_1 + 41 | 0;
    $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP8[$2_1 | 0] = $3_1;
    HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $4_1;
    HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
    $3_1 = $1_1 + 48 | 0;
    $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $2_1 = $0_1 + 49 | 0;
    $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    HEAP8[$2_1 | 0] = $3_1;
    HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $4_1;
    HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
    $1_1 = $1_1 + 56 | 0;
    $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $2_1 = $0_1 + 57 | 0;
    $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP8[$2_1 | 0] = $1_1;
    HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$2_1 + 4 | 0] = $3_1;
    HEAP8[$2_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$2_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$2_1 + 7 | 0] = $3_1 >>> 24;
    HEAP8[$0_1 + 32 | 0] = HEAPU8[$5_1 + 31 | 0] & 127;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $0_1 + 20 | 0;
   HEAP32[$1_1 >> 2] = 73;
   HEAP32[$1_1 + 4 >> 2] = 64;
   HEAP32[$0_1 + 16 >> 2] = 1074684;
   HEAP32[$0_1 + 12 >> 2] = 9;
   HEAP32[$0_1 + 8 >> 2] = 1074675;
   HEAP8[$0_1 + 4 | 0] = 3;
   $1_1 = 1;
  }
  HEAP8[$0_1 | 0] = $1_1;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if ($1_1 >>> 0 <= 127) {
    $3_1 = HEAP32[$0_1 + 8 >> 2];
    if (($3_1 | 0) == HEAP32[$0_1 + 4 >> 2]) {
     $319($0_1, $3_1);
     $3_1 = HEAP32[$0_1 + 8 >> 2];
    }
    HEAP32[$0_1 + 8 >> 2] = $3_1 + 1;
    HEAP8[HEAP32[$0_1 >> 2] + $3_1 | 0] = $1_1;
    break label$1;
   }
   HEAP32[$2_1 + 12 >> 2] = 0;
   $3_1 = $2_1 + 12 | 0;
   label$4 : {
    if ($1_1 >>> 0 >= 2048) {
     if ($1_1 >>> 0 < 65536) {
      HEAP8[$2_1 + 14 | 0] = $1_1 & 63 | 128;
      HEAP8[$2_1 + 12 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$2_1 + 13 | 0] = $1_1 >>> 6 & 63 | 128;
      $1_1 = 3;
      break label$4;
     }
     HEAP8[$2_1 + 15 | 0] = $1_1 & 63 | 128;
     HEAP8[$2_1 + 12 | 0] = $1_1 >>> 18 | 240;
     HEAP8[$2_1 + 14 | 0] = $1_1 >>> 6 & 63 | 128;
     HEAP8[$2_1 + 13 | 0] = $1_1 >>> 12 & 63 | 128;
     $1_1 = 4;
     break label$4;
    }
    HEAP8[$2_1 + 13 | 0] = $1_1 & 63 | 128;
    HEAP8[$2_1 + 12 | 0] = $1_1 >>> 6 | 192;
    $1_1 = 2;
   }
   $337($0_1, $3_1, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
  return 0;
 }
 
 function $116($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[$0_1 >> 2] = 16843009;
  HEAP32[$0_1 + 4 >> 2] = 16843009;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  $3_1 = $0_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = 16843009;
  HEAP32[$3_1 + 4 >> 2] = 16843009;
  $3_1 = $0_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = 16843009;
  HEAP32[$3_1 + 4 >> 2] = 16843009;
  $3_1 = $0_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 16843009;
  HEAP32[$3_1 + 4 >> 2] = 16843009;
  $3_1 = $0_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 48 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $5_1 + 8 | 0;
  $4_1 = $0_1 + 32 | 0;
  $142($3_1, $4_1);
  $216($3_1, $0_1, 32);
  $216($3_1, 1219168, 1);
  $216($3_1, $1_1, $2_1);
  $325($3_1, $4_1);
  $142($3_1, $4_1);
  $216($3_1, $0_1, 32);
  $325($3_1, $0_1);
  $142($3_1, $4_1);
  $216($3_1, $0_1, 32);
  $216($3_1, 1219169, 1);
  $216($3_1, $1_1, $2_1);
  $325($3_1, $4_1);
  $142($3_1, $4_1);
  $216($3_1, $0_1, 32);
  $325($3_1, $0_1);
  HEAP32[$0_1 + 64 >> 2] = 0;
  global$0 = $5_1 + 208 | 0;
 }
 
 function $117($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $4_1 = $2_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $0_1 = 2;
  label$1 : {
   label$2 : {
    switch (HEAP32[305143]) {
    default:
     $3_1 = $2_1 - -64 | 0;
     $0_1 = global$0 - 16 | 0;
     global$0 = $0_1;
     label$4 : {
      label$5 : {
       $5_1 = HEAPU8[1219528];
       $1_1 = 2;
       label$6 : {
        if (($5_1 & 3) == 3) {
         break label$6
        }
        $1_1 = 2;
        if (($5_1 | 0) == 1) {
         break label$6
        }
        HEAP8[1219528] = 1;
        if (HEAP32[305142] != 3) {
         HEAP8[$0_1 + 15 | 0] = 1;
         HEAP32[$0_1 >> 2] = $0_1 + 15;
         $61(1220568, $0_1, 1049016);
        }
        $352($0_1, HEAP32[305141]);
        if (HEAP32[$0_1 >> 2] == 1) {
         break label$5
        }
        $6_1 = HEAP32[$0_1 + 4 >> 2];
        $1_1 = HEAPU8[$0_1 + 8 | 0];
       }
       HEAP32[$0_1 >> 2] = $6_1;
       HEAP8[$0_1 + 4 | 0] = $1_1;
       if (($1_1 | 0) != 2) {
        label$9 : {
         $1_1 = HEAPU8[1219528];
         if (($1_1 & 3) == 3) {
          break label$9
         }
         label$10 : {
          switch ($1_1 - 1 | 0) {
          case 1:
           HEAP8[1219528] = 0;
           break;
          case 0:
           break label$9;
          default:
           break label$10;
          };
         }
         abort();
        }
        HEAP8[1219528] = 0;
        $1_1 = HEAP32[$0_1 >> 2];
        label$12 : {
         if (HEAPU8[$0_1 + 4 | 0] | !(HEAP32[305242] & 2147483647)) {
          break label$12
         }
         if ($360()) {
          break label$12
         }
         HEAP8[$1_1 + 1 | 0] = 1;
        }
        HEAP8[$1_1 | 0] = 0;
       }
       HEAP32[$3_1 + 12 >> 2] = 0;
       HEAP32[$3_1 + 4 >> 2] = 0;
       HEAP32[$3_1 + 8 >> 2] = 0;
       HEAP32[$3_1 >> 2] = HEAP32[304401];
       global$0 = $0_1 + 16 | 0;
       break label$4;
      }
      abort();
     }
     $0_1 = 0;
     break label$1;
    case 1:
     break label$1;
    case 0:
     break label$2;
    };
   }
   HEAP32[$2_1 + 48 >> 2] = 0;
   HEAP32[$2_1 + 64 >> 2] = 0;
   $386($2_1 - -64 | 0);
   $386($2_1 + 48 | 0);
   HEAP32[305143] = 1;
  }
  $1_1 = $2_1 + 72 | 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $3_1 = $2_1 + 44 | 0;
  $1_1 = HEAP32[$4_1 >> 2];
  HEAP8[$3_1 | 0] = $1_1;
  HEAP8[$3_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$3_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$3_1 + 3 | 0] = $1_1 >>> 24;
  $3_1 = HEAP32[$2_1 + 68 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$2_1 + 64 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 + 20 >> 2];
  $1_1 = HEAP32[$2_1 + 16 >> 2];
  HEAP8[$2_1 + 36 | 0] = $1_1;
  HEAP8[$2_1 + 37 | 0] = $1_1 >>> 8;
  HEAP8[$2_1 + 38 | 0] = $1_1 >>> 16;
  HEAP8[$2_1 + 39 | 0] = $1_1 >>> 24;
  HEAP8[$2_1 + 40 | 0] = $3_1;
  HEAP8[$2_1 + 41 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 42 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 43 | 0] = $3_1 >>> 24;
  $346($2_1 + 8 | 0, 32, 4);
  $3_1 = HEAP32[$2_1 + 8 >> 2];
  if (!$3_1) {
   $0_1 = HEAP32[305241];
   FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](32, 4);
   abort();
  }
  $1_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $4_1 = $2_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  HEAP16[$3_1 + 16 >> 1] = $0_1;
  HEAP8[$3_1 + 18 | 0] = 0;
  $0_1 = HEAPU8[$2_1 + 39 | 0] | HEAPU8[$2_1 + 40 | 0] << 8 | (HEAPU8[$2_1 + 41 | 0] << 16 | HEAPU8[$2_1 + 42 | 0] << 24);
  $1_1 = HEAPU8[$2_1 + 35 | 0] | HEAPU8[$2_1 + 36 | 0] << 8 | (HEAPU8[$2_1 + 37 | 0] << 16 | HEAPU8[$2_1 + 38 | 0] << 24);
  HEAP8[$3_1 + 19 | 0] = $1_1;
  HEAP8[$3_1 + 20 | 0] = $1_1 >>> 8;
  HEAP8[$3_1 + 21 | 0] = $1_1 >>> 16;
  HEAP8[$3_1 + 22 | 0] = $1_1 >>> 24;
  HEAP8[$3_1 + 23 | 0] = $0_1;
  HEAP8[$3_1 + 24 | 0] = $0_1 >>> 8;
  HEAP8[$3_1 + 25 | 0] = $0_1 >>> 16;
  HEAP8[$3_1 + 26 | 0] = $0_1 >>> 24;
  $1_1 = $2_1 + 40 | 0;
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $0_1 = $3_1 + 24 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$0_1 | 0] = $1_1;
  HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $4_1;
  HEAP8[$0_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $4_1 >>> 24;
  global$0 = $2_1 + 80 | 0;
  return $3_1;
 }
 
 function $118($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = HEAP32[$1_1 + 24 >> 2];
  $6_1 = $4_1 - 11 | 0;
  $5_1 = 56 - $4_1 | 0;
  $8_1 = 0 - ($4_1 >>> 0 > 56) | 0;
  $10_1 = HEAP32[$1_1 + 12 >> 2];
  $11_1 = HEAP32[$1_1 + 16 >> 2] != 1;
  label$1 : {
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (!$3_1 & $4_1 >>> 0 <= 10) {
         $2_1 = HEAP32[$1_1 + 8 >> 2];
         if ($2_1) {
          if (($2_1 | 0) != ($10_1 | 0)) {
           break label$6
          }
          HEAP32[$1_1 + 8 >> 2] = 0;
         }
         if ($11_1) {
          break label$3
         }
         $2_1 = HEAP32[$1_1 + 20 >> 2];
         HEAP32[$1_1 + 20 >> 2] = 0;
         break label$4;
        }
        HEAP32[$1_1 + 24 >> 2] = $6_1;
        $3_1 = HEAP32[$1_1 + 4 >> 2];
        $5_1 = HEAP32[$1_1 >> 2];
        $4_1 = $3_1 << 11 | $5_1 >>> 21;
        HEAP32[$1_1 >> 2] = $5_1 << 11;
        HEAP32[$1_1 + 4 >> 2] = $4_1;
        $3_1 = $3_1 >>> 21 | 0;
        $1_1 = HEAP32[HEAP32[$1_1 + 32 >> 2] >> 2];
        if ($3_1 >>> 0 >= HEAPU32[$1_1 + 8 >> 2]) {
         break label$5
        }
        $3_1 = HEAP32[$1_1 >> 2] + ($3_1 << 3) | 0;
        $1_1 = HEAP32[$3_1 >> 2];
        $2_1 = HEAP32[$3_1 + 4 >> 2];
        break label$1;
       }
       HEAP32[$1_1 + 8 >> 2] = $2_1 + 1;
       break label$4;
      }
      abort();
     }
     if (!$2_1) {
      break label$3
     }
     HEAP32[$1_1 + 24 >> 2] = $6_1 + 19;
     $12_1 = HEAP32[$1_1 + 4 >> 2];
     $7_1 = HEAPU8[$2_1 | 0];
     $2_1 = $5_1 & 31;
     if (($5_1 & 63) >>> 0 >= 32) {
      $9_1 = $7_1 << $2_1;
      $2_1 = 0;
     } else {
      $9_1 = (1 << $2_1) - 1 & $7_1 >>> 32 - $2_1;
      $2_1 = $7_1 << $2_1;
     }
     HEAP32[$1_1 >> 2] = $2_1 | HEAP32[$1_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1 | $12_1;
     $2_1 = $5_1;
     $5_1 = $2_1 - 8 | 0;
     $8_1 = $8_1 - ($2_1 >>> 0 < 8) | 0;
     $6_1 = $6_1 + 8 | 0;
     $4_1 = $4_1 + 8 | 0;
     $3_1 = $4_1 >>> 0 < 8 ? $3_1 + 1 | 0 : $3_1;
     continue;
    }
    break;
   };
   $1_1 = 0;
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $119($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  if ($1_1 >>> 0 >= 257) {
   $5_1 = 256;
   while (1) {
    label$3 : {
     if (!$5_1) {
      $5_1 = 0;
      break label$3;
     }
     if (HEAP8[$0_1 + $5_1 | 0] > -65) {
      break label$3
     }
     $5_1 = $5_1 - 1 | 0;
     continue;
    }
    break;
   };
   $264($4_1 + 16 | 0, $0_1, $1_1, $5_1);
  }
  label$5 : {
   if ($1_1 >>> 0 < $2_1 >>> 0 | $1_1 >>> 0 < $3_1 >>> 0 | $2_1 >>> 0 > $3_1 >>> 0) {
    break label$5
   }
   label$6 : {
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$7
      }
      break label$6;
     }
     if (HEAP8[$0_1 + $2_1 | 0] < -64) {
      break label$6
     }
    }
    $2_1 = $3_1;
   }
   while (1) {
    label$10 : {
     label$11 : {
      if (!$2_1) {
       $2_1 = 0;
       break label$11;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       if (($1_1 | 0) != ($2_1 | 0)) {
        break label$10
       }
       $2_1 = $1_1;
       break label$11;
      }
      if (HEAP8[$0_1 + $2_1 | 0] < -64) {
       break label$10
      }
     }
     $256($4_1 + 8 | 0, $0_1, $1_1, $2_1);
     $0_1 = HEAP32[$4_1 + 8 >> 2];
     HEAP32[$4_1 + 24 >> 2] = $0_1;
     HEAP32[$4_1 + 28 >> 2] = $0_1 + HEAP32[$4_1 + 12 >> 2];
     $152($4_1 + 24 | 0);
     break label$5;
    }
    $2_1 = $2_1 - 1 | 0;
    continue;
   };
  }
  abort();
 }
 
 function $120($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 288 | 0;
  global$0 = $2_1;
  $422($2_1 + 8 | 0, $1_1);
  $5_1 = $1_1 + 40 | 0;
  $422($2_1 + 48 | 0, $5_1);
  $30($2_1 + 88 | 0, $1_1 + 80 | 0, 1);
  while (1) {
   if (($3_1 | 0) != 40) {
    $4_1 = ($2_1 + 88 | 0) + $3_1 | 0;
    $6_1 = $4_1;
    $7_1 = HEAP32[$4_1 + 4 >> 2];
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP32[$6_1 >> 2] = $4_1 << 1;
    HEAP32[$6_1 + 4 >> 2] = $7_1 << 1 | $4_1 >>> 31;
    $3_1 = $3_1 + 8 | 0;
    continue;
   }
   break;
  };
  $3_1 = $2_1 + 128 | 0;
  $91($3_1, $1_1, 40);
  $300($3_1, $5_1);
  $4_1 = $2_1 + 168 | 0;
  $422($4_1, $3_1);
  $1_1 = $2_1 + 208 | 0;
  $5_1 = $2_1 + 48 | 0;
  $91($1_1, $5_1, 40);
  $6_1 = $2_1 + 8 | 0;
  $300($1_1, $6_1);
  $3_1 = $2_1 + 248 | 0;
  $167($3_1, $5_1, $6_1);
  $167($0_1, $4_1, $1_1);
  $91($0_1 + 40 | 0, $1_1, 40);
  $91($0_1 + 80 | 0, $3_1, 40);
  $167($0_1 + 120 | 0, $2_1 + 88 | 0, $3_1);
  global$0 = $2_1 + 288 | 0;
 }
 
 function $121($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $3_1 = HEAP32[$0_1 >> 2];
  $4_1 = HEAPU8[$3_1 | 0];
  $0_1 = ($4_1 | 0) == 1;
  HEAP8[$3_1 | 0] = $0_1 ? 0 : $4_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     HEAP32[$1_1 + 12 >> 2] = $3_1;
     $5_1 = $192($3_1);
     $0_1 = $5_1 + 28 | 0;
     label$4 : {
      while (1) {
       $4_1 = $2_1;
       $6_1 = $0_1;
       $2_1 = HEAP32[$0_1 >> 2];
       if (!$2_1) {
        break label$4
       }
       $0_1 = $2_1 + 4 | 0;
       if (HEAP32[$2_1 >> 2] != ($3_1 | 0)) {
        continue
       }
       break;
      };
      $0_1 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = $0_1;
      if (HEAP32[$5_1 + 32 >> 2] == ($2_1 | 0)) {
       HEAP32[$5_1 + 32 >> 2] = $4_1;
       break label$2;
      }
      while (1) {
       if (!$0_1) {
        break label$2
       }
       if (HEAP32[$0_1 >> 2] != ($3_1 | 0)) {
        $0_1 = HEAP32[$0_1 + 4 >> 2];
        continue;
       }
       break;
      };
      $0_1 = 1;
      break label$1;
     }
     HEAP16[$1_1 + 24 >> 1] = 0;
     HEAP32[$1_1 + 16 >> 2] = 0;
     HEAP32[$1_1 + 20 >> 2] = 0;
     $239($1_1 + 12 | 0, $1_1 + 16 | 0);
     $341($5_1 + 24 | 0);
    }
    global$0 = $1_1 + 32 | 0;
    return;
   }
   $0_1 = 0;
  }
  HEAP8[$1_1 + 25 | 0] = 0;
  HEAP8[$1_1 + 24 | 0] = $0_1;
  HEAP32[$1_1 + 16 >> 2] = 1;
  HEAP32[$1_1 + 20 >> 2] = 0;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $239($1_1 + 12 | 0, $1_1 + 16 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  abort();
 }
 
 function $122($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 320 | 0;
  global$0 = $3_1;
  $4_1 = $1_1 + 40 | 0;
  $3_1 = $91($3_1, $4_1, 40);
  $300($3_1, $1_1);
  $5_1 = $3_1 + 40 | 0;
  $167($5_1, $4_1, $1_1);
  $4_1 = $3_1 + 80 | 0;
  $15($4_1, $3_1, $2_1);
  $6_1 = $3_1 + 120 | 0;
  $15($6_1, $5_1, $2_1 + 40 | 0);
  $5_1 = $3_1 + 160 | 0;
  $15($5_1, $1_1 + 120 | 0, $2_1 + 80 | 0);
  $2_1 = $3_1 + 200 | 0;
  $1_1 = $1_1 + 80 | 0;
  $91($2_1, $1_1, 40);
  $300($2_1, $1_1);
  $167($0_1, $4_1, $6_1);
  $1_1 = $3_1 + 240 | 0;
  $91($1_1, $4_1, 40);
  $300($1_1, $6_1);
  $4_1 = $3_1 + 280 | 0;
  $91($4_1, $2_1, 40);
  $300($4_1, $5_1);
  $167($0_1 + 120 | 0, $2_1, $5_1);
  $91($0_1 + 40 | 0, $1_1, 40);
  $91($0_1 + 80 | 0, $4_1, 40);
  global$0 = $3_1 + 320 | 0;
 }
 
 function $123($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 1920 | 0;
  global$0 = $2_1;
  $223($2_1 + 1760 | 0, $1_1);
  while (1) {
   if (($3_1 | 0) != 1280) {
    $91($2_1 + $3_1 | 0, $2_1 + 1760 | 0, 160);
    $3_1 = $3_1 + 160 | 0;
    continue;
   }
   break;
  };
  $3_1 = $2_1 + 1600 | 0;
  $91($3_1, $1_1, 40);
  $91($2_1 + 1640 | 0, $1_1 + 40 | 0, 40);
  $91($2_1 + 1680 | 0, $1_1 + 80 | 0, 40);
  $1_1 = $2_1 + 1760 | 0;
  $120($1_1, $3_1);
  $281($2_1 + 1280 | 0, $1_1);
  $3_1 = 0;
  while (1) {
   if (($3_1 | 0) == 1120) {
    $91($0_1, $2_1, 1280);
    global$0 = $2_1 + 1920 | 0;
   } else {
    $1_1 = $2_1 + 1760 | 0;
    $4_1 = $2_1 + $3_1 | 0;
    $108($1_1, $2_1 + 1280 | 0, $4_1);
    $5_1 = $2_1 + 1600 | 0;
    $281($5_1, $1_1);
    $1_1 = $2_1 + 1440 | 0;
    $223($1_1, $5_1);
    $91($4_1 + 160 | 0, $1_1, 160);
    $3_1 = $3_1 + 160 | 0;
    continue;
   }
   break;
  };
 }
 
 function $124($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 32 | 0;
  $2_1 = $3_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  while (1) {
   label$2 : {
    if (($8_1 | 0) != 4) {
     $9_1 = ($8_1 << 3) + $3_1 | 0;
     $2_1 = $9_1;
     $7_1 = HEAP32[$2_1 >> 2];
     $10_1 = HEAP32[$2_1 + 4 >> 2];
     $4_1 = 0;
     $2_1 = $1_1;
     while (1) {
      if (($4_1 | 0) == 64) {
       break label$2
      }
      $11_1 = HEAPU8[$2_1 | 0];
      $5_1 = $4_1 & 56;
      $6_1 = $5_1 & 31;
      if (($5_1 & 63) >>> 0 >= 32) {
       $5_1 = $11_1 << $6_1;
       $6_1 = 0;
      } else {
       $5_1 = (1 << $6_1) - 1 & $11_1 >>> 32 - $6_1;
       $6_1 = $11_1 << $6_1;
      }
      $7_1 = $6_1 | $7_1;
      $10_1 = $5_1 | $10_1;
      $4_1 = $4_1 + 8 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    $1_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $1_1;
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1 & 1048575;
    $4_1 = HEAP32[$3_1 + 28 >> 2];
    $1_1 = $4_1 >>> 16 | 0;
    $7_1 = HEAP32[$3_1 + 24 >> 2];
    HEAP32[$0_1 + 32 >> 2] = ($4_1 & 65535) << 16 | $7_1 >>> 16;
    HEAP32[$0_1 + 36 >> 2] = $1_1;
    $1_1 = HEAP32[$3_1 + 12 >> 2];
    $6_1 = $1_1;
    $5_1 = HEAP32[$3_1 + 8 >> 2];
    $1_1 = $1_1 << 12 | $5_1 >>> 20;
    HEAP32[$0_1 + 8 >> 2] = $5_1 << 12 | $2_1 >>> 20;
    HEAP32[$0_1 + 12 >> 2] = $1_1 & 1048575;
    $1_1 = HEAP32[$3_1 + 20 >> 2];
    $2_1 = $1_1;
    $5_1 = HEAP32[$3_1 + 16 >> 2];
    $3_1 = $5_1;
    $1_1 = $2_1 << 24 | $3_1 >>> 8;
    HEAP32[$0_1 + 16 >> 2] = $3_1 << 24 | $6_1 >>> 8;
    HEAP32[$0_1 + 20 >> 2] = $1_1 & 1048575;
    $4_1 = $0_1;
    $0_1 = $2_1;
    HEAP32[$4_1 + 24 >> 2] = ($0_1 & 268435455) << 4 | $3_1 >>> 28;
    HEAP32[$4_1 + 28 >> 2] = ($7_1 << 4 | $0_1 >>> 28) & 1048575;
    return;
   }
   HEAP32[$9_1 >> 2] = $7_1;
   HEAP32[$9_1 + 4 >> 2] = $10_1;
   $1_1 = $1_1 + 8 | 0;
   $8_1 = $8_1 + 1 | 0;
   continue;
  };
 }
 
 function $125($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 1808 | 0;
  global$0 = $5_1;
  $288($5_1 + 32 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$5_1 + 36 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 + 32 >> 2];
  HEAP32[$5_1 + 40 >> 2] = $2_1;
  $288($5_1 + 24 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 52 >> 2] = $3_1;
  $4_1 = HEAP32[$5_1 + 24 >> 2];
  HEAP32[$5_1 + 48 >> 2] = $4_1;
  $93($5_1 + 56 | 0, $2_1, $1_1);
  if (HEAP32[$5_1 + 56 >> 2] | HEAP32[$5_1 + 60 >> 2]) {
   abort()
  }
  $1_1 = $5_1 + 624 | 0;
  $91($1_1, $5_1 - -64 | 0, 560);
  $409($1_1, $4_1, $3_1);
  $2_1 = $5_1 + 1248 | 0;
  $91($2_1, $1_1, 560);
  $1_1 = $5_1 + 1184 | 0;
  $161($1_1, $2_1);
  $201($5_1 + 16 | 0, 64, 0);
  $2_1 = HEAP32[$5_1 + 20 >> 2];
  $1_1 = $91(HEAP32[$5_1 + 16 >> 2], $1_1, 64);
  $392($5_1 + 48 | 0);
  $392($5_1 + 40 | 0);
  HEAP32[$5_1 + 64 >> 2] = 64;
  HEAP32[$5_1 + 60 >> 2] = $2_1;
  HEAP32[$5_1 + 56 >> 2] = $1_1;
  $271($5_1 + 8 | 0, $5_1 + 56 | 0);
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $5_1 + 1808 | 0;
 }
 
 function $126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if (($0_1 | 0) >= 0) {
    HEAP32[$2_1 + 44 >> 2] = $0_1;
    HEAP32[$2_1 + 28 >> 2] = 1;
    HEAP32[$2_1 + 12 >> 2] = 1;
    HEAP32[$2_1 + 16 >> 2] = 0;
    HEAP32[$2_1 + 8 >> 2] = 1074096;
    HEAP32[$2_1 + 36 >> 2] = 7;
    $0_1 = HEAP32[$1_1 + 24 >> 2];
    $1_1 = HEAP32[$1_1 + 28 >> 2];
    HEAP32[$2_1 + 24 >> 2] = $2_1 + 32;
    HEAP32[$2_1 + 32 >> 2] = $2_1 + 44;
    $0_1 = $249($0_1, $1_1, $2_1 + 8 | 0);
    break label$1;
   }
   $283($2_1, $0_1);
   $3_1 = HEAP32[$2_1 >> 2];
   if ($3_1) {
    $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], $3_1, HEAP32[$2_1 + 4 >> 2]) | 0;
    break label$1;
   }
   HEAP32[$2_1 + 28 >> 2] = 1;
   HEAP32[$2_1 + 12 >> 2] = 1;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 8 >> 2] = 1074076;
   HEAP32[$2_1 + 36 >> 2] = 8;
   HEAP32[$2_1 + 44 >> 2] = $0_1;
   $0_1 = HEAP32[$1_1 + 24 >> 2];
   $1_1 = HEAP32[$1_1 + 28 >> 2];
   HEAP32[$2_1 + 24 >> 2] = $2_1 + 32;
   HEAP32[$2_1 + 32 >> 2] = $2_1 + 44;
   $0_1 = $249($0_1, $1_1, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 48 | 0;
  return $0_1 | 0;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAPU8[$0_1 | 0];
  HEAP8[$0_1 | 0] = 0;
  label$1 : {
   if (!($2_1 & 1) | HEAPU8[1217756] != 4 | (HEAPU8[1217757] != 4 | HEAPU8[1217758] != 4)) {
    break label$1
   }
   if (HEAPU8[1217759] != 4 | HEAPU8[1217760] != 4 | (HEAPU8[1217761] != 4 | HEAPU8[1217762] != 1)) {
    break label$1
   }
   if (HEAPU8[1217763] != 1 | HEAPU8[1217764] != 4 | HEAPU8[1217765] != 4) {
    break label$1
   }
   $0_1 = $317(769);
   $366($1_1 + 8 | 0, $0_1, ($0_1 >>> 0 < 4294967281) << 4);
   $2_1 = $16($172(HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2]), 769);
   if (HEAP32[305237]) {
    $3_1 = HEAP32[305238];
    $232($3_1);
    $4_1 = HEAP32[305239];
    $366($1_1, $4_1, ($4_1 >>> 0 < 4294967281) << 4);
    $168($3_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
   }
   HEAP32[305239] = $0_1;
   HEAP32[305238] = $2_1;
   HEAP32[305237] = 1;
   global$0 = $1_1 + 16 | 0;
   return;
  }
  abort();
 }
 
 function $128($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  $11_1 = HEAP32[$0_1 + 12 >> 2];
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 36 >> 2];
  $14_1 = $2_1;
  $7_1 = HEAP32[$0_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 >> 2];
  $8_1 = __wasm_i64_mul($2_1 >>> 16 | 0, 0, 977, 1);
  $2_1 = $1_1 + $8_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
  $9_1 = $2_1;
  $3_1 = $6_1;
  $10_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $10_1 >>> 20 | 0;
  $2_1 = $3_1 + $6_1 | 0;
  $1_1 = $11_1;
  $12_1 = $2_1;
  $1_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $1_1 & 1048575;
  $4_1 = HEAP32[$0_1 + 28 >> 2];
  $3_1 = $1_1;
  $5_1 = $1_1 >>> 20 | 0;
  $2_1 = $5_1 + HEAP32[$0_1 + 16 >> 2] | 0;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  $6_1 = $2_1;
  $5_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $5_1 >>> 20 | 0;
  $2_1 = $8_1 + HEAP32[$0_1 + 24 >> 2] | 0;
  $1_1 = $4_1;
  $13_1 = $2_1;
  $1_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $1_1 & 1048575;
  $4_1 = $0_1;
  $2_1 = $14_1 & 65535;
  $0_1 = $7_1;
  $14_1 = $1_1;
  $7_1 = $1_1 >>> 20 | 0;
  $0_1 = $0_1 + $7_1 | 0;
  $1_1 = $2_1;
  $1_1 = $0_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $10_1 & 1048575;
  $10_1 = $5_1 & 1048575;
  $2_1 = $1_1;
  if (($13_1 & ($6_1 & $12_1)) == -1 & ($14_1 & ($10_1 & $3_1)) == 1048575 & (($0_1 | 0) == -1 & ($1_1 | 0) == 65535) & (($7_1 | 0) == 1048574 & $9_1 >>> 0 > 4294966318 | $7_1 >>> 0 > 1048574) | $1_1 >>> 16) {
   $1_1 = $7_1 + 1 | 0;
   $9_1 = $9_1 + 977 | 0;
   $1_1 = $9_1 >>> 0 < 977 ? $1_1 + 1 | 0 : $1_1;
   $7_1 = $1_1 & 1048575;
   $5_1 = $1_1 >>> 20 | 0;
   $3_1 = $5_1 + $12_1 | 0;
   $1_1 = $11_1;
   $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $12_1 = $3_1;
   $11_1 = $1_1 & 1048575;
   $3_1 = $1_1 >>> 20 | 0;
   $6_1 = $3_1 + $6_1 | 0;
   $1_1 = $10_1;
   $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $10_1 = $1_1 & 1048575;
   $5_1 = $1_1 >>> 20 | 0;
   $3_1 = $5_1 + $13_1 | 0;
   $1_1 = $8_1;
   $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $13_1 = $3_1;
   $8_1 = $1_1 & 1048575;
   $3_1 = $0_1 + ($1_1 >>> 20 | 0) | 0;
   $1_1 = $2_1;
   $1_1 = $0_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $0_1 = $3_1;
   $2_1 = $1_1 & 65535;
  }
  HEAP32[$4_1 + 32 >> 2] = $0_1;
  HEAP32[$4_1 + 36 >> 2] = $2_1;
  HEAP32[$4_1 + 24 >> 2] = $13_1;
  HEAP32[$4_1 + 28 >> 2] = $8_1;
  HEAP32[$4_1 + 16 >> 2] = $6_1;
  HEAP32[$4_1 + 20 >> 2] = $10_1;
  HEAP32[$4_1 + 8 >> 2] = $12_1;
  HEAP32[$4_1 + 12 >> 2] = $11_1;
  HEAP32[$4_1 >> 2] = $9_1;
  HEAP32[$4_1 + 4 >> 2] = $7_1;
 }
 
 function $129($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $2_1 = HEAP32[$0_1 + 96 >> 2];
  $3_1 = $2_1 >>> 5 | 0;
  HEAP32[$4_1 + 40 >> 2] = $3_1 & 117440512;
  HEAP32[$4_1 + 44 >> 2] = $2_1 >>> 21 & 255 | ($3_1 & 65280 | ($2_1 << 11 & 16711680 | $2_1 << 27));
  $216($0_1, 1218704, (55 - $2_1 & 63) + 1 | 0);
  $216($0_1, $4_1 + 40 | 0, 8);
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 32) {
    $5_1 = $0_1 + $2_1 | 0;
    $3_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$2_1 + $4_1 >> 2] = $3_1 << 8 & 16711680 | $3_1 << 24 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
  $0_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = HEAP32[$4_1 >> 2];
  HEAP8[$1_1 | 0] = $2_1;
  HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $0_1;
  HEAP8[$1_1 + 5 | 0] = $0_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $0_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $0_1 >>> 24;
  $2_1 = HEAP32[$4_1 + 12 >> 2];
  $0_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$4_1 + 8 >> 2];
  HEAP8[$0_1 | 0] = $3_1;
  HEAP8[$0_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $2_1;
  HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
  $3_1 = $4_1 + 24 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP8[$0_1 | 0] = $3_1;
  HEAP8[$0_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $2_1;
  HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
  $0_1 = $1_1 + 16 | 0;
  $2_1 = $4_1 + 16 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP8[$0_1 | 0] = $2_1;
  HEAP8[$0_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $1_1;
  HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $130($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  $2_1 = $3_1 + 128 | 0;
  $80($2_1, $1_1 + 80 | 0);
  $4_1 = $3_1 + 48 | 0;
  $91($4_1, $2_1, 40);
  $5_1 = $3_1 + 88 | 0;
  $91($5_1, $3_1 + 168 | 0, 40);
  $30($2_1, $4_1, 5);
  $6_1 = $3_1 + 8 | 0;
  $15($6_1, $2_1, $5_1);
  $15($5_1, $1_1, $6_1);
  $15($2_1, $1_1 + 40 | 0, $6_1);
  $59($4_1, $2_1);
  $2_1 = $3_1 + 71 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $1_1 = $0_1 + 23 | 0;
  $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP8[$1_1 | 0] = $2_1;
  HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $4_1;
  HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
  $2_1 = $3_1 - -64 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $1_1 = $0_1 + 16 | 0;
  $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP8[$1_1 | 0] = $2_1;
  HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $4_1;
  HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
  $2_1 = $3_1 + 56 | 0;
  $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $1_1 = $0_1 + 8 | 0;
  $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP8[$1_1 | 0] = $2_1;
  HEAP8[$1_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $4_1;
  HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
  $1_1 = HEAPU8[$3_1 + 52 | 0] | HEAPU8[$3_1 + 53 | 0] << 8 | (HEAPU8[$3_1 + 54 | 0] << 16 | HEAPU8[$3_1 + 55 | 0] << 24);
  $2_1 = HEAPU8[$3_1 + 48 | 0] | HEAPU8[$3_1 + 49 | 0] << 8 | (HEAPU8[$3_1 + 50 | 0] << 16 | HEAPU8[$3_1 + 51 | 0] << 24);
  HEAP8[$0_1 | 0] = $2_1;
  HEAP8[$0_1 + 1 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $2_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $1_1;
  HEAP8[$0_1 + 5 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $1_1 >>> 24;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAPU8[$3_1 + 79 | 0] ^ $334($5_1) << 7), HEAP8[wasm2js_i32$0 + 31 | 0] = wasm2js_i32$1;
  global$0 = $3_1 + 208 | 0;
 }
 
 function $131($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $5_1 = HEAP32[$2_1 >> 2];
  label$1 : {
   label$2 : {
    while (1) {
     label$4 : {
      if ($1_1 >>> 0 <= 3) {
       if ($1_1 >>> 0 > 1) {
        break label$4
       }
       break label$1;
      }
      $365($3_1 + 8 | 0, $0_1, $1_1, 4);
      if (HEAP32[$3_1 + 12 >> 2] != 4) {
       break label$2
      }
      $4_1 = HEAP32[$3_1 + 8 >> 2];
      $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
      $345($3_1, $0_1, $1_1, 4);
      $5_1 = Math_imul(__wasm_rotl_i32($5_1, 5) ^ $4_1, -1640531527);
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      $0_1 = HEAP32[$3_1 >> 2];
      continue;
     }
     break;
    };
    $365($3_1 + 24 | 0, $0_1, $1_1, 2);
    if (HEAP32[$3_1 + 28 >> 2] != 2) {
     break label$2
    }
    $4_1 = HEAP32[$3_1 + 24 >> 2];
    $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
    $345($3_1 + 16 | 0, $0_1, $1_1, 2);
    $5_1 = Math_imul(__wasm_rotl_i32($5_1, 5) ^ $4_1, -1640531527);
    $1_1 = HEAP32[$3_1 + 20 >> 2];
    $0_1 = HEAP32[$3_1 + 16 >> 2];
    break label$1;
   }
   abort();
  }
  if ($1_1) {
   $5_1 = Math_imul(HEAPU8[$0_1 | 0] ^ __wasm_rotl_i32($5_1, 5), -1640531527)
  }
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = Math_imul(__wasm_rotl_i32($5_1, 5) ^ 255, -1640531527)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $132($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = $4_1;
  $4_1 = HEAP32[$2_1 + 8 >> 2];
  $6_1 = HEAP32[$1_1 + 12 >> 2] + ($5_1 + (__wasm_rotl_i32($4_1, 26) ^ __wasm_rotl_i32($4_1, 21) ^ __wasm_rotl_i32($4_1, 7)) | 0) | 0;
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  $8_1 = HEAP32[$2_1 + 12 >> 2];
  $5_1 = ($7_1 ^ $4_1 & ($8_1 ^ $7_1)) + $6_1 | 0;
  $6_1 = $5_1 + HEAP32[$1_1 + 4 >> 2] | 0;
  HEAP32[$0_1 + 12 >> 2] = $6_1;
  $11_1 = $5_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$2_1 >> 2];
  $10_1 = $5_1 & $2_1;
  $9_1 = HEAP32[$1_1 >> 2];
  $1_1 = $11_1 + (($10_1 ^ $2_1 & $9_1 ^ $5_1 & $9_1) + (__wasm_rotl_i32($2_1, 30) ^ __wasm_rotl_i32($2_1, 19) ^ __wasm_rotl_i32($2_1, 10)) | 0) | 0;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $3_1 = (($3_1 + $7_1 | 0) + (($4_1 ^ $8_1) & $6_1 ^ $8_1) | 0) + (__wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21) ^ __wasm_rotl_i32($6_1, 7)) | 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1 + $9_1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $3_1 + ((__wasm_rotl_i32($1_1, 30) ^ __wasm_rotl_i32($1_1, 19) ^ __wasm_rotl_i32($1_1, 10)) + ($1_1 & ($2_1 ^ $5_1) ^ $10_1) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $133($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $17_1 = global$0 - 32 | 0;
  global$0 = $17_1;
  $18_1 = $2_1 << 3;
  $2_1 = 0;
  while (1) {
   $19_1 = $2_1 + 32 | 0;
   if ($19_1 >>> 0 > $18_1 >>> 0) {
    if ($2_1 >>> 0 < $18_1 >>> 0) {
     $0_1 = $0_1 + $2_1 | 0;
     $4_1 = $18_1 - $2_1 | 0;
     $3_1 = $91($17_1, $0_1, $4_1);
     $9_1 = $0_1;
     $0_1 = $1_1 + $2_1 | 0;
     $91($9_1, $0_1, $4_1);
     $91($0_1, $3_1, $4_1);
    }
    global$0 = $17_1 + 32 | 0;
   } else {
    $3_1 = $0_1 + $2_1 | 0;
    $12_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
    $13_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
    $9_1 = $1_1 + $2_1 | 0;
    $2_1 = $9_1;
    $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP8[$3_1 | 0] = $2_1;
    HEAP8[$3_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$3_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$3_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$3_1 + 4 | 0] = $4_1;
    HEAP8[$3_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$3_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$3_1 + 7 | 0] = $4_1 >>> 24;
    $5_1 = $3_1 + 24 | 0;
    $14_1 = HEAPU8[$5_1 | 0] | HEAPU8[$5_1 + 1 | 0] << 8 | (HEAPU8[$5_1 + 2 | 0] << 16 | HEAPU8[$5_1 + 3 | 0] << 24);
    $15_1 = HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 5 | 0] << 8 | (HEAPU8[$5_1 + 6 | 0] << 16 | HEAPU8[$5_1 + 7 | 0] << 24);
    $10_1 = $9_1 + 24 | 0;
    $2_1 = $10_1;
    $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP8[$5_1 | 0] = $2_1;
    HEAP8[$5_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $4_1;
    HEAP8[$5_1 + 5 | 0] = $4_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $4_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $4_1 >>> 24;
    $6_1 = $3_1 + 16 | 0;
    $16_1 = HEAPU8[$6_1 | 0] | HEAPU8[$6_1 + 1 | 0] << 8 | (HEAPU8[$6_1 + 2 | 0] << 16 | HEAPU8[$6_1 + 3 | 0] << 24);
    $5_1 = HEAPU8[$6_1 + 4 | 0] | HEAPU8[$6_1 + 5 | 0] << 8 | (HEAPU8[$6_1 + 6 | 0] << 16 | HEAPU8[$6_1 + 7 | 0] << 24);
    $4_1 = $9_1 + 16 | 0;
    $2_1 = $4_1;
    $11_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP8[$6_1 | 0] = $2_1;
    HEAP8[$6_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$6_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$6_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$6_1 + 4 | 0] = $11_1;
    HEAP8[$6_1 + 5 | 0] = $11_1 >>> 8;
    HEAP8[$6_1 + 6 | 0] = $11_1 >>> 16;
    HEAP8[$6_1 + 7 | 0] = $11_1 >>> 24;
    $7_1 = $3_1 + 8 | 0;
    $3_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
    $2_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
    $8_1 = $9_1 + 8 | 0;
    $6_1 = HEAPU8[$8_1 + 4 | 0] | HEAPU8[$8_1 + 5 | 0] << 8 | (HEAPU8[$8_1 + 6 | 0] << 16 | HEAPU8[$8_1 + 7 | 0] << 24);
    $11_1 = HEAPU8[$8_1 | 0] | HEAPU8[$8_1 + 1 | 0] << 8 | (HEAPU8[$8_1 + 2 | 0] << 16 | HEAPU8[$8_1 + 3 | 0] << 24);
    HEAP8[$7_1 | 0] = $11_1;
    HEAP8[$7_1 + 1 | 0] = $11_1 >>> 8;
    HEAP8[$7_1 + 2 | 0] = $11_1 >>> 16;
    HEAP8[$7_1 + 3 | 0] = $11_1 >>> 24;
    HEAP8[$7_1 + 4 | 0] = $6_1;
    HEAP8[$7_1 + 5 | 0] = $6_1 >>> 8;
    HEAP8[$7_1 + 6 | 0] = $6_1 >>> 16;
    HEAP8[$7_1 + 7 | 0] = $6_1 >>> 24;
    HEAP8[$8_1 | 0] = $3_1;
    HEAP8[$8_1 + 1 | 0] = $3_1 >>> 8;
    HEAP8[$8_1 + 2 | 0] = $3_1 >>> 16;
    HEAP8[$8_1 + 3 | 0] = $3_1 >>> 24;
    HEAP8[$8_1 + 4 | 0] = $2_1;
    HEAP8[$8_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$8_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$8_1 + 7 | 0] = $2_1 >>> 24;
    HEAP8[$4_1 | 0] = $16_1;
    HEAP8[$4_1 + 1 | 0] = $16_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $16_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $16_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $5_1;
    HEAP8[$4_1 + 5 | 0] = $5_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $5_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $5_1 >>> 24;
    HEAP8[$10_1 | 0] = $14_1;
    HEAP8[$10_1 + 1 | 0] = $14_1 >>> 8;
    HEAP8[$10_1 + 2 | 0] = $14_1 >>> 16;
    HEAP8[$10_1 + 3 | 0] = $14_1 >>> 24;
    HEAP8[$10_1 + 4 | 0] = $15_1;
    HEAP8[$10_1 + 5 | 0] = $15_1 >>> 8;
    HEAP8[$10_1 + 6 | 0] = $15_1 >>> 16;
    HEAP8[$10_1 + 7 | 0] = $15_1 >>> 24;
    HEAP8[$9_1 | 0] = $12_1;
    HEAP8[$9_1 + 1 | 0] = $12_1 >>> 8;
    HEAP8[$9_1 + 2 | 0] = $12_1 >>> 16;
    HEAP8[$9_1 + 3 | 0] = $12_1 >>> 24;
    HEAP8[$9_1 + 4 | 0] = $13_1;
    HEAP8[$9_1 + 5 | 0] = $13_1 >>> 8;
    HEAP8[$9_1 + 6 | 0] = $13_1 >>> 16;
    HEAP8[$9_1 + 7 | 0] = $13_1 >>> 24;
    $2_1 = $19_1;
    continue;
   }
   break;
  };
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3_1 = $2_1 + 12 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 >= 128) {
      if ($1_1 >>> 0 < 2048) {
       break label$3
      }
      if ($1_1 >>> 0 >= 65536) {
       break label$2
      }
      HEAP8[$2_1 + 14 | 0] = $1_1 & 63 | 128;
      HEAP8[$2_1 + 12 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$2_1 + 13 | 0] = $1_1 >>> 6 & 63 | 128;
      $1_1 = 3;
      break label$1;
     }
     HEAP8[$2_1 + 12 | 0] = $1_1;
     $1_1 = 1;
     break label$1;
    }
    HEAP8[$2_1 + 13 | 0] = $1_1 & 63 | 128;
    HEAP8[$2_1 + 12 | 0] = $1_1 >>> 6 | 192;
    $1_1 = 2;
    break label$1;
   }
   HEAP8[$2_1 + 15 | 0] = $1_1 & 63 | 128;
   HEAP8[$2_1 + 12 | 0] = $1_1 >>> 18 | 240;
   HEAP8[$2_1 + 14 | 0] = $1_1 >>> 6 & 63 | 128;
   HEAP8[$2_1 + 13 | 0] = $1_1 >>> 12 & 63 | 128;
   $1_1 = 4;
  }
  $0_1 = $43($0_1, $3_1, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $135($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = $0_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $147($0_1 + 48 | 0, 0, 72);
  HEAP32[$0_1 + 40 >> 2] = 1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $3_1 = $2_1 << 24 >> 31;
  $5_1 = $3_1 + $2_1 ^ $3_1;
  $2_1 = 1;
  while (1) {
   if (($2_1 | 0) == 9) {
    $3_1 = $380($3_1 & 1);
    $1_1 = $91($4_1, $0_1 + 40 | 0, 40);
    $91($1_1 + 40 | 0, $0_1, 40);
    $2_1 = $1_1 + 120 | 0;
    $91($2_1, $0_1 + 80 | 0, 40);
    $186($2_1);
    $91($1_1 + 80 | 0, $2_1, 40);
    $329($0_1, $1_1, $3_1);
    global$0 = $1_1 + 160 | 0;
   } else {
    $329($0_1, $1_1, $356($5_1, $2_1));
    $1_1 = $1_1 + 120 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $136($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $17_1 = global$0 - 192 | 0;
  global$0 = $17_1;
  $147($17_1 + 40 | 0, 0, 64);
  $20_1 = $91($1_1, $0_1 + 40 | 0, 128);
  $169($17_1 + 8 | 0, $2_1, $0_1 + 8 | 0);
  HEAP32[$17_1 + 184 >> 2] = 0;
  $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 64) {
    $2_1 = ($17_1 + 8 | 0) + ($1_1 >>> 1 & 2147483640) | 0;
    $5_1 = HEAP32[$2_1 >> 2];
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = $1_1 << 2 & 60;
    $2_1 = $6_1 & 31;
    $4_1 = ((($6_1 & 63) >>> 0 >= 32 ? $4_1 >>> $2_1 | 0 : ((1 << $2_1) - 1 & $4_1) << 32 - $2_1 | $5_1 >>> $2_1) & 15) << 6;
    $2_1 = 0;
    while (1) {
     if (($2_1 | 0) != 1024) {
      $5_1 = $17_1 + 40 | 0;
      $6_1 = (HEAP32[$0_1 >> 2] + $25_1 | 0) + $2_1 | 0;
      $8_1 = ($2_1 | 0) == ($4_1 | 0);
      $228($5_1, $6_1, $8_1);
      $228($5_1 + 32 | 0, $6_1 + 32 | 0, $8_1);
      $2_1 = $2_1 - -64 | 0;
      continue;
     }
     break;
    };
    $24_1 = $17_1 + 104 | 0;
    $369($24_1, $17_1 + 40 | 0);
    $2_1 = global$0 - 528 | 0;
    global$0 = $2_1;
    $5_1 = $2_1 + 488 | 0;
    $4_1 = $20_1 + 80 | 0;
    $17($5_1, $4_1);
    $13_1 = $2_1 + 448 | 0;
    $91($13_1, $20_1, 40);
    $213($13_1);
    $8($2_1 + 408 | 0, $24_1, $5_1);
    $9_1 = $2_1 + 368 | 0;
    $91($9_1, $20_1 + 40 | 0, 40);
    $213($9_1);
    $6_1 = $2_1 + 328 | 0;
    $26_1 = $24_1 + 40 | 0;
    $8($6_1, $26_1, $5_1);
    $8($6_1, $6_1, $4_1);
    $18_1 = $2_1 + 288 | 0;
    $91($18_1, $13_1, 40);
    $16_1 = HEAP32[$2_1 + 412 >> 2];
    $3_1 = $16_1 + HEAP32[$2_1 + 292 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 408 >> 2];
    $8_1 = HEAP32[$2_1 + 288 >> 2];
    $6_1 = $5_1 + $8_1 | 0;
    HEAP32[$2_1 + 288 >> 2] = $6_1;
    HEAP32[$2_1 + 292 >> 2] = $6_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $21_1 = HEAP32[$2_1 + 420 >> 2];
    $3_1 = $21_1 + HEAP32[$2_1 + 300 >> 2] | 0;
    $6_1 = HEAP32[$2_1 + 416 >> 2];
    $10_1 = HEAP32[$2_1 + 296 >> 2];
    $8_1 = $6_1 + $10_1 | 0;
    HEAP32[$2_1 + 296 >> 2] = $8_1;
    HEAP32[$2_1 + 300 >> 2] = $8_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $22_1 = HEAP32[$2_1 + 428 >> 2];
    $3_1 = $22_1 + HEAP32[$2_1 + 308 >> 2] | 0;
    $8_1 = HEAP32[$2_1 + 424 >> 2];
    $15_1 = HEAP32[$2_1 + 304 >> 2];
    $10_1 = $8_1 + $15_1 | 0;
    HEAP32[$2_1 + 304 >> 2] = $10_1;
    HEAP32[$2_1 + 308 >> 2] = $10_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $23_1 = HEAP32[$2_1 + 436 >> 2];
    $3_1 = $23_1 + HEAP32[$2_1 + 316 >> 2] | 0;
    $10_1 = HEAP32[$2_1 + 432 >> 2];
    $7_1 = HEAP32[$2_1 + 312 >> 2];
    $15_1 = $10_1 + $7_1 | 0;
    HEAP32[$2_1 + 312 >> 2] = $15_1;
    HEAP32[$2_1 + 316 >> 2] = $7_1 >>> 0 > $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $11_1 = HEAP32[$2_1 + 444 >> 2];
    $3_1 = $11_1 + HEAP32[$2_1 + 324 >> 2] | 0;
    $15_1 = HEAP32[$2_1 + 440 >> 2];
    $19_1 = HEAP32[$2_1 + 320 >> 2];
    $7_1 = $15_1 + $19_1 | 0;
    HEAP32[$2_1 + 320 >> 2] = $7_1;
    HEAP32[$2_1 + 324 >> 2] = $7_1 >>> 0 < $19_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $19_1 = $2_1 + 208 | 0;
    $91($19_1, $9_1, 40);
    $3_1 = HEAP32[$2_1 + 212 >> 2] + HEAP32[$2_1 + 332 >> 2] | 0;
    $12_1 = HEAP32[$2_1 + 328 >> 2];
    $7_1 = $12_1 + HEAP32[$2_1 + 208 >> 2] | 0;
    HEAP32[$2_1 + 208 >> 2] = $7_1;
    HEAP32[$2_1 + 212 >> 2] = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 220 >> 2] + HEAP32[$2_1 + 340 >> 2] | 0;
    $12_1 = HEAP32[$2_1 + 336 >> 2];
    $7_1 = $12_1 + HEAP32[$2_1 + 216 >> 2] | 0;
    HEAP32[$2_1 + 216 >> 2] = $7_1;
    HEAP32[$2_1 + 220 >> 2] = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 228 >> 2] + HEAP32[$2_1 + 348 >> 2] | 0;
    $12_1 = HEAP32[$2_1 + 344 >> 2];
    $7_1 = $12_1 + HEAP32[$2_1 + 224 >> 2] | 0;
    HEAP32[$2_1 + 224 >> 2] = $7_1;
    HEAP32[$2_1 + 228 >> 2] = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 236 >> 2] + HEAP32[$2_1 + 356 >> 2] | 0;
    $12_1 = HEAP32[$2_1 + 352 >> 2];
    $7_1 = $12_1 + HEAP32[$2_1 + 232 >> 2] | 0;
    HEAP32[$2_1 + 232 >> 2] = $7_1;
    HEAP32[$2_1 + 236 >> 2] = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 244 >> 2] + HEAP32[$2_1 + 364 >> 2] | 0;
    $12_1 = HEAP32[$2_1 + 360 >> 2];
    $7_1 = $12_1 + HEAP32[$2_1 + 240 >> 2] | 0;
    HEAP32[$2_1 + 240 >> 2] = $7_1;
    HEAP32[$2_1 + 244 >> 2] = $7_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $12_1 = $2_1 + 88 | 0;
    $17($12_1, $18_1);
    $7_1 = 262143 - (($15_1 >>> 0 > 4294967292) + $11_1 | 0) | 0;
    $15_1 = -4 - $15_1 | 0;
    HEAP32[$2_1 + 80 >> 2] = $15_1;
    HEAP32[$2_1 + 84 >> 2] = $7_1;
    $23_1 = 4194303 - (($10_1 >>> 0 > 4294967292) + $23_1 | 0) | 0;
    $10_1 = -4 - $10_1 | 0;
    HEAP32[$2_1 + 72 >> 2] = $10_1;
    HEAP32[$2_1 + 76 >> 2] = $23_1;
    $22_1 = 4194303 - (($8_1 >>> 0 > 4294967292) + $22_1 | 0) | 0;
    $8_1 = -4 - $8_1 | 0;
    HEAP32[$2_1 + 64 >> 2] = $8_1;
    HEAP32[$2_1 + 68 >> 2] = $22_1;
    $21_1 = 4194303 - (($6_1 >>> 0 > 4294967292) + $21_1 | 0) | 0;
    $6_1 = -4 - $6_1 | 0;
    HEAP32[$2_1 + 56 >> 2] = $6_1;
    HEAP32[$2_1 + 60 >> 2] = $21_1;
    $16_1 = 4194299 - (($5_1 >>> 0 > 4294963388) + $16_1 | 0) | 0;
    $5_1 = -3908 - $5_1 | 0;
    HEAP32[$2_1 + 48 >> 2] = $5_1;
    HEAP32[$2_1 + 52 >> 2] = $16_1;
    $14_1 = $13_1;
    $13_1 = $2_1 + 48 | 0;
    $8($2_1 + 248 | 0, $14_1, $13_1);
    $3_1 = HEAP32[$2_1 + 92 >> 2] + HEAP32[$2_1 + 252 >> 2] | 0;
    $14_1 = HEAP32[$2_1 + 248 >> 2];
    $11_1 = $14_1 + HEAP32[$2_1 + 88 >> 2] | 0;
    HEAP32[$2_1 + 88 >> 2] = $11_1;
    HEAP32[$2_1 + 92 >> 2] = $11_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 100 >> 2] + HEAP32[$2_1 + 260 >> 2] | 0;
    $14_1 = HEAP32[$2_1 + 256 >> 2];
    $11_1 = $14_1 + HEAP32[$2_1 + 96 >> 2] | 0;
    HEAP32[$2_1 + 96 >> 2] = $11_1;
    HEAP32[$2_1 + 100 >> 2] = $11_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 108 >> 2] + HEAP32[$2_1 + 268 >> 2] | 0;
    $14_1 = HEAP32[$2_1 + 264 >> 2];
    $11_1 = $14_1 + HEAP32[$2_1 + 104 >> 2] | 0;
    HEAP32[$2_1 + 104 >> 2] = $11_1;
    HEAP32[$2_1 + 108 >> 2] = $11_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 116 >> 2] + HEAP32[$2_1 + 276 >> 2] | 0;
    $14_1 = HEAP32[$2_1 + 272 >> 2];
    $11_1 = $14_1 + HEAP32[$2_1 + 112 >> 2] | 0;
    HEAP32[$2_1 + 112 >> 2] = $11_1;
    HEAP32[$2_1 + 116 >> 2] = $11_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 124 >> 2] + HEAP32[$2_1 + 284 >> 2] | 0;
    $14_1 = HEAP32[$2_1 + 280 >> 2];
    $11_1 = $14_1 + HEAP32[$2_1 + 120 >> 2] | 0;
    HEAP32[$2_1 + 120 >> 2] = $11_1;
    HEAP32[$2_1 + 124 >> 2] = $11_1 >>> 0 < $14_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $14_1 = $198($19_1);
    $27_1 = $198($12_1);
    $11_1 = $2_1 + 8 | 0;
    $91($11_1, $9_1, 40);
    $9_1 = HEAP32[$2_1 + 8 >> 2];
    $3_1 = HEAP32[$2_1 + 12 >> 2] << 1 | $9_1 >>> 31;
    HEAP32[$2_1 + 8 >> 2] = $9_1 << 1;
    HEAP32[$2_1 + 12 >> 2] = $3_1;
    $9_1 = HEAP32[$2_1 + 16 >> 2];
    $3_1 = HEAP32[$2_1 + 20 >> 2] << 1 | $9_1 >>> 31;
    HEAP32[$2_1 + 16 >> 2] = $9_1 << 1;
    HEAP32[$2_1 + 20 >> 2] = $3_1;
    $9_1 = HEAP32[$2_1 + 24 >> 2];
    $3_1 = HEAP32[$2_1 + 28 >> 2] << 1 | $9_1 >>> 31;
    HEAP32[$2_1 + 24 >> 2] = $9_1 << 1;
    HEAP32[$2_1 + 28 >> 2] = $3_1;
    $9_1 = HEAP32[$2_1 + 32 >> 2];
    $3_1 = HEAP32[$2_1 + 36 >> 2] << 1 | $9_1 >>> 31;
    HEAP32[$2_1 + 32 >> 2] = $9_1 << 1;
    HEAP32[$2_1 + 36 >> 2] = $3_1;
    $9_1 = HEAP32[$2_1 + 40 >> 2];
    $3_1 = HEAP32[$2_1 + 44 >> 2] << 1 | $9_1 >>> 31;
    HEAP32[$2_1 + 40 >> 2] = $9_1 << 1;
    HEAP32[$2_1 + 44 >> 2] = $3_1;
    $3_1 = $16_1 + HEAP32[$2_1 + 452 >> 2] | 0;
    $9_1 = $5_1 + HEAP32[$2_1 + 448 >> 2] | 0;
    $3_1 = $9_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 48 >> 2] = $9_1;
    HEAP32[$2_1 + 52 >> 2] = $3_1;
    $3_1 = $21_1 + HEAP32[$2_1 + 460 >> 2] | 0;
    $5_1 = $6_1 + HEAP32[$2_1 + 456 >> 2] | 0;
    $3_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 56 >> 2] = $5_1;
    HEAP32[$2_1 + 60 >> 2] = $3_1;
    $3_1 = $22_1 + HEAP32[$2_1 + 468 >> 2] | 0;
    $5_1 = $8_1 + HEAP32[$2_1 + 464 >> 2] | 0;
    $3_1 = $5_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 64 >> 2] = $5_1;
    HEAP32[$2_1 + 68 >> 2] = $3_1;
    $3_1 = $23_1 + HEAP32[$2_1 + 476 >> 2] | 0;
    $5_1 = $10_1 + HEAP32[$2_1 + 472 >> 2] | 0;
    $3_1 = $5_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 72 >> 2] = $5_1;
    HEAP32[$2_1 + 76 >> 2] = $3_1;
    $3_1 = $7_1 + HEAP32[$2_1 + 484 >> 2] | 0;
    $5_1 = $15_1 + HEAP32[$2_1 + 480 >> 2] | 0;
    $3_1 = $5_1 >>> 0 < $15_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 80 >> 2] = $5_1;
    HEAP32[$2_1 + 84 >> 2] = $3_1;
    $6_1 = $14_1 & $27_1;
    $5_1 = !$6_1;
    $197($11_1, $12_1, $5_1);
    $197($13_1, $19_1, $5_1);
    $5_1 = $2_1 + 168 | 0;
    $17($5_1, $13_1);
    $8($2_1 + 128 | 0, $5_1, $18_1);
    $17($5_1, $5_1);
    $197($5_1, $19_1, $6_1);
    $17($18_1, $11_1);
    $15_1 = $4_1;
    $8($4_1, $4_1, $13_1);
    $9_1 = $198($4_1);
    $19_1 = HEAP32[$20_1 + 120 >> 2];
    $280($4_1, 2);
    $5_1 = HEAP32[$2_1 + 160 >> 2];
    $13_1 = -4 - $5_1 | 0;
    $6_1 = HEAP32[$2_1 + 320 >> 2];
    $4_1 = $13_1 + $6_1 | 0;
    $7_1 = 262143 - (HEAP32[$2_1 + 164 >> 2] + ($5_1 >>> 0 > 4294967292) | 0) | 0;
    $3_1 = $7_1 + HEAP32[$2_1 + 324 >> 2] | 0;
    HEAP32[$2_1 + 320 >> 2] = $4_1;
    HEAP32[$2_1 + 324 >> 2] = $4_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $5_1 = HEAP32[$2_1 + 128 >> 2];
    $4_1 = -3908 - $5_1 | 0;
    $5_1 = 4194299 - (HEAP32[$2_1 + 132 >> 2] + ($5_1 >>> 0 > 4294963388) | 0) | 0;
    HEAP32[$2_1 + 128 >> 2] = $4_1;
    HEAP32[$2_1 + 132 >> 2] = $5_1;
    $3_1 = $5_1 + HEAP32[$2_1 + 292 >> 2] | 0;
    $23_1 = $4_1;
    $4_1 = $4_1 + HEAP32[$2_1 + 288 >> 2] | 0;
    HEAP32[$2_1 + 288 >> 2] = $4_1;
    HEAP32[$2_1 + 292 >> 2] = $4_1 >>> 0 < $23_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $6_1 = HEAP32[$2_1 + 136 >> 2];
    $4_1 = -4 - $6_1 | 0;
    $6_1 = 4194303 - (HEAP32[$2_1 + 140 >> 2] + ($6_1 >>> 0 > 4294967292) | 0) | 0;
    HEAP32[$2_1 + 136 >> 2] = $4_1;
    HEAP32[$2_1 + 140 >> 2] = $6_1;
    $3_1 = $6_1 + HEAP32[$2_1 + 300 >> 2] | 0;
    $22_1 = $4_1;
    $4_1 = $4_1 + HEAP32[$2_1 + 296 >> 2] | 0;
    HEAP32[$2_1 + 296 >> 2] = $4_1;
    HEAP32[$2_1 + 300 >> 2] = $4_1 >>> 0 < $22_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $8_1 = HEAP32[$2_1 + 144 >> 2];
    $4_1 = -4 - $8_1 | 0;
    $8_1 = 4194303 - (HEAP32[$2_1 + 148 >> 2] + ($8_1 >>> 0 > 4294967292) | 0) | 0;
    HEAP32[$2_1 + 144 >> 2] = $4_1;
    HEAP32[$2_1 + 148 >> 2] = $8_1;
    $3_1 = $8_1 + HEAP32[$2_1 + 308 >> 2] | 0;
    $21_1 = $4_1;
    $4_1 = $4_1 + HEAP32[$2_1 + 304 >> 2] | 0;
    HEAP32[$2_1 + 304 >> 2] = $4_1;
    HEAP32[$2_1 + 308 >> 2] = $4_1 >>> 0 < $21_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $10_1 = HEAP32[$2_1 + 152 >> 2];
    $4_1 = -4 - $10_1 | 0;
    $10_1 = 4194303 - (HEAP32[$2_1 + 156 >> 2] + ($10_1 >>> 0 > 4294967292) | 0) | 0;
    HEAP32[$2_1 + 152 >> 2] = $4_1;
    HEAP32[$2_1 + 156 >> 2] = $10_1;
    $3_1 = $10_1 + HEAP32[$2_1 + 316 >> 2] | 0;
    $16_1 = $4_1 + HEAP32[$2_1 + 312 >> 2] | 0;
    $3_1 = $16_1 >>> 0 < $4_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    HEAP32[$2_1 + 312 >> 2] = $16_1;
    HEAP32[$2_1 + 316 >> 2] = $3_1;
    $213($18_1);
    $16_1 = $91($20_1, $18_1, 40);
    $14_1 = $13_1;
    $13_1 = HEAP32[$2_1 + 320 >> 2];
    $3_1 = HEAP32[$2_1 + 324 >> 2] << 1 | $13_1 >>> 31;
    $12_1 = $13_1 << 1;
    $13_1 = $14_1 + $12_1 | 0;
    $3_1 = $3_1 + $7_1 | 0;
    HEAP32[$2_1 + 320 >> 2] = $13_1;
    HEAP32[$2_1 + 324 >> 2] = $13_1 >>> 0 < $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $13_1 = $4_1;
    $4_1 = HEAP32[$2_1 + 312 >> 2];
    $3_1 = HEAP32[$2_1 + 316 >> 2] << 1 | $4_1 >>> 31;
    $7_1 = $4_1 << 1;
    $4_1 = $13_1 + $7_1 | 0;
    $3_1 = $3_1 + $10_1 | 0;
    HEAP32[$2_1 + 312 >> 2] = $4_1;
    HEAP32[$2_1 + 316 >> 2] = $4_1 >>> 0 < $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $4_1 = HEAP32[$2_1 + 304 >> 2];
    $3_1 = HEAP32[$2_1 + 308 >> 2] << 1 | $4_1 >>> 31;
    $10_1 = $4_1 << 1;
    $4_1 = $10_1 + $21_1 | 0;
    $3_1 = $3_1 + $8_1 | 0;
    HEAP32[$2_1 + 304 >> 2] = $4_1;
    HEAP32[$2_1 + 308 >> 2] = $4_1 >>> 0 < $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $4_1 = HEAP32[$2_1 + 296 >> 2];
    $3_1 = HEAP32[$2_1 + 300 >> 2] << 1 | $4_1 >>> 31;
    $8_1 = $4_1 << 1;
    $4_1 = $8_1 + $22_1 | 0;
    $3_1 = $3_1 + $6_1 | 0;
    HEAP32[$2_1 + 296 >> 2] = $4_1;
    HEAP32[$2_1 + 300 >> 2] = $4_1 >>> 0 < $8_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $4_1 = HEAP32[$2_1 + 288 >> 2];
    $3_1 = HEAP32[$2_1 + 292 >> 2] << 1 | $4_1 >>> 31;
    $6_1 = $4_1 << 1;
    $4_1 = $6_1 + $23_1 | 0;
    $3_1 = $3_1 + $5_1 | 0;
    HEAP32[$2_1 + 288 >> 2] = $4_1;
    HEAP32[$2_1 + 292 >> 2] = $4_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $8($18_1, $18_1, $11_1);
    $3_1 = HEAP32[$2_1 + 292 >> 2] + HEAP32[$2_1 + 172 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 168 >> 2];
    $4_1 = $5_1 + HEAP32[$2_1 + 288 >> 2] | 0;
    HEAP32[$2_1 + 288 >> 2] = $4_1;
    HEAP32[$2_1 + 292 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 300 >> 2] + HEAP32[$2_1 + 180 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 176 >> 2];
    $4_1 = $5_1 + HEAP32[$2_1 + 296 >> 2] | 0;
    HEAP32[$2_1 + 296 >> 2] = $4_1;
    HEAP32[$2_1 + 300 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 308 >> 2] + HEAP32[$2_1 + 188 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 184 >> 2];
    $4_1 = $5_1 + HEAP32[$2_1 + 304 >> 2] | 0;
    HEAP32[$2_1 + 304 >> 2] = $4_1;
    HEAP32[$2_1 + 308 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 316 >> 2] + HEAP32[$2_1 + 196 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 192 >> 2];
    $4_1 = $5_1 + HEAP32[$2_1 + 312 >> 2] | 0;
    HEAP32[$2_1 + 312 >> 2] = $4_1;
    HEAP32[$2_1 + 316 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $3_1 = HEAP32[$2_1 + 324 >> 2] + HEAP32[$2_1 + 204 >> 2] | 0;
    $5_1 = HEAP32[$2_1 + 200 >> 2];
    $4_1 = $5_1 + HEAP32[$2_1 + 320 >> 2] | 0;
    HEAP32[$2_1 + 320 >> 2] = $4_1;
    HEAP32[$2_1 + 324 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
    $4_1 = $16_1 + 40 | 0;
    $250($4_1, $18_1, 3);
    $213($4_1);
    $280($16_1, 4);
    $280($4_1, 4);
    $197($16_1, $24_1, HEAP32[$20_1 + 120 >> 2]);
    $197($4_1, $26_1, HEAP32[$20_1 + 120 >> 2]);
    $197($15_1, 1219216, HEAP32[$20_1 + 120 >> 2]);
    HEAP32[$16_1 + 120 >> 2] = $9_1 & ($19_1 ^ -1);
    global$0 = $2_1 + 528 | 0;
    $25_1 = $25_1 + 1024 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $378($17_1 + 104 | 0);
  global$0 = $17_1 + 192 | 0;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 288 | 0;
  global$0 = $4_1;
  $288($4_1 + 16 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $2_1;
  $5_1 = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$4_1 + 24 >> 2] = $5_1;
  $1_1 = $4_1 + 32 | 0;
  $226($1_1);
  $414($1_1, $5_1, $2_1);
  $6_1 = $4_1 + 176 | 0;
  $91($6_1, $1_1, 112);
  $56($4_1 + 144 | 0, $6_1);
  $201($4_1 + 8 | 0, 32, 0);
  $7_1 = HEAP32[$4_1 + 12 >> 2];
  $5_1 = HEAP32[$4_1 + 148 >> 2];
  $2_1 = HEAP32[$4_1 + 8 >> 2];
  $1_1 = $2_1;
  $3_1 = HEAP32[$4_1 + 144 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $3_1 = $4_1 + 168 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $3_1 = $4_1 + 160 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 16 | 0;
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $3_1 = $4_1 + 152 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $5_1;
  HEAP8[$1_1 + 5 | 0] = $5_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $5_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $5_1 >>> 24;
  $392($4_1 + 24 | 0);
  HEAP32[$4_1 + 184 >> 2] = 32;
  HEAP32[$4_1 + 180 >> 2] = $7_1;
  HEAP32[$4_1 + 176 >> 2] = $2_1;
  $271($4_1, $6_1);
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $4_1 + 288 | 0;
 }
 
 function $138($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($1_1 >>> 0 <= 127) {
    $306($0_1, $1_1);
    break label$1;
   }
   HEAP32[$2_1 + 12 >> 2] = 0;
   $3_1 = $2_1 + 12 | 0;
   label$3 : {
    if ($1_1 >>> 0 >= 2048) {
     if ($1_1 >>> 0 < 65536) {
      HEAP8[$2_1 + 14 | 0] = $1_1 & 63 | 128;
      HEAP8[$2_1 + 12 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$2_1 + 13 | 0] = $1_1 >>> 6 & 63 | 128;
      $1_1 = 3;
      break label$3;
     }
     HEAP8[$2_1 + 15 | 0] = $1_1 & 63 | 128;
     HEAP8[$2_1 + 12 | 0] = $1_1 >>> 18 | 240;
     HEAP8[$2_1 + 14 | 0] = $1_1 >>> 6 & 63 | 128;
     HEAP8[$2_1 + 13 | 0] = $1_1 >>> 12 & 63 | 128;
     $1_1 = 4;
     break label$3;
    }
    HEAP8[$2_1 + 13 | 0] = $1_1 & 63 | 128;
    HEAP8[$2_1 + 12 | 0] = $1_1 >>> 6 | 192;
    $1_1 = 2;
   }
   $337($0_1, $3_1, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $139($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 176 | 0;
  $230($4_1, $2_1, 0);
  $4_1 = $91($3_1, $4_1, 40);
  $91($4_1 + 40 | 0, $4_1 + 216 | 0, 40);
  HEAP32[$4_1 + 80 >> 2] = 0;
  $3_1 = $4_1 + 88 | 0;
  $5_1 = $4_1 + 256 | 0;
  $258($3_1, $2_1, $5_1);
  $3_1 = $91($0_1, $3_1, 40);
  $91($3_1 + 40 | 0, $4_1 + 128 | 0, 40);
  $91($3_1 + 80 | 0, $2_1 + 80 | 0, 40);
  HEAP32[$3_1 + 120 >> 2] = 0;
  $6_1 = $91($1_1, $5_1, 40);
  $0_1 = $3_1;
  $2_1 = 40;
  while (1) {
   if (($2_1 | 0) != 320) {
    $1_1 = $0_1 + 128 | 0;
    $35($1_1, $0_1, $4_1, $2_1 + $6_1 | 0);
    $2_1 = $2_1 + 40 | 0;
    $0_1 = $1_1;
    continue;
   }
   break;
  };
  $0_1 = $3_1 + 976 | 0;
  $8($0_1, $0_1, $5_1);
  global$0 = $4_1 + 304 | 0;
 }
 
 function $140($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = Math_imul(HEAPU8[$0_1 + 20 | 0], 16843009);
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  $3_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   while (1) {
    label$3 : {
     $372($2_1 + 8 | 0, $1_1);
     if (HEAP32[$2_1 + 8 >> 2]) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 + 12 >> 2];
     $5_1 = 0;
     if ($1_1 << 1 & $1_1 & -2139062144) {
      break label$1
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2] + 4 | 0;
     HEAP32[$0_1 + 8 >> 2] = $1_1;
     $1_1 = HEAP32[$3_1 >> 2] & $1_1 + HEAP32[$0_1 + 4 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     $1_1 = $1_1 + HEAP32[$3_1 + 4 >> 2] | 0;
     $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
     HEAP32[$0_1 + 12 >> 2] = $1_1;
     $1_1 = $1_1 ^ $4_1;
     $1_1 = ($1_1 ^ -1) & $1_1 - 16843009 & -2139062144;
     HEAP32[$0_1 + 16 >> 2] = $1_1;
     continue;
    }
    break;
   };
   $4_1 = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$0_1 + 16 >> 2] = $1_1 - 1 & $1_1;
   $5_1 = HEAP32[$3_1 + 4 >> 2] + Math_imul(HEAP32[$3_1 >> 2] & $4_1 + HEAP32[$0_1 + 4 >> 2], -12) | 0;
  }
  $1_1 = $5_1;
  global$0 = $2_1 + 16 | 0;
  return $1_1;
 }
 
 function $141($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $4_1 = HEAP32[$0_1 + 24 >> 2];
  $10_1 = HEAP32[$0_1 + 28 >> 2];
  $5_1 = HEAP32[$0_1 + 16 >> 2];
  $7_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $11_1 = HEAP32[$0_1 + 12 >> 2];
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 36 >> 2];
  $9_1 = $2_1;
  $12_1 = HEAP32[$0_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 >> 2];
  $6_1 = __wasm_i64_mul($2_1 >>> 16 | 0, 0, 977, 1);
  $2_1 = $1_1 + $6_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + $8_1 | 0;
  $1_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $8_1 = $1_1;
  $6_1 = $1_1 >>> 20 | 0;
  $3_1 = $6_1 + $3_1 | 0;
  $1_1 = $11_1;
  $1_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $3_1;
  $3_1 = $5_1;
  $11_1 = $1_1;
  $5_1 = $1_1 >>> 20 | 0;
  $3_1 = $3_1 + $5_1 | 0;
  $1_1 = $7_1;
  $1_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $1_1;
  $7_1 = $1_1 >>> 20 | 0;
  $4_1 = $7_1 + $4_1 | 0;
  $1_1 = $10_1;
  $1_1 = $4_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $4_1;
  $10_1 = $1_1;
  $4_1 = $12_1 + ($1_1 >>> 20 | 0) | 0;
  $1_1 = $9_1 & 65535;
  $1_1 = $4_1 >>> 0 < $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = $8_1 & 1048575;
  $13_1 = $5_1 & 1048575;
  $12_1 = $1_1;
  $5_1 = __wasm_i64_mul(($7_1 & ($3_1 & $6_1)) == -1 & ($10_1 & ($11_1 & $13_1)) == 1048575 & (($4_1 | 0) == -1 & ($1_1 | 0) == 65535) & (($9_1 | 0) == 1048574 & $2_1 >>> 0 > 4294966318 | $9_1 >>> 0 > 1048574) | $1_1 >>> 16, 0, 977, 1) + $2_1 | 0;
  $1_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
  $1_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 & 1048575;
  $8_1 = $1_1 >>> 20 | 0;
  $2_1 = $8_1 + $6_1 | 0;
  $1_1 = $11_1 & 1048575;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $1_1 = $2_1 >>> 0 < $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1 & 1048575;
  $2_1 = $3_1 + ($1_1 >>> 20 | 0) | 0;
  $1_1 = $13_1;
  $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 16 >> 2] = $2_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1 & 1048575;
  $3_1 = $1_1 >>> 20 | 0;
  $2_1 = $3_1 + $7_1 | 0;
  $1_1 = $10_1 & 1048575;
  $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 28 >> 2] = $1_1 & 1048575;
  $2_1 = $4_1 + ($1_1 >>> 20 | 0) | 0;
  $1_1 = $12_1;
  HEAP32[$0_1 + 32 >> 2] = $2_1;
  HEAP32[$0_1 + 36 >> 2] = ($2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1) & 65535;
 }
 
 function $142($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $2_1 = $3_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 48 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 24 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $3_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $2_1 = $1_1 + 16 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $4_1 = $3_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  HEAP32[$3_1 + 32 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  HEAP32[$3_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  HEAP32[$3_1 + 8 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  $2_1 = $0_1 + 100 | 0;
  $358($2_1);
  $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 64) {
    $4_1 = $1_1 + $3_1 | 0;
    HEAP8[$4_1 | 0] = HEAPU8[$4_1 | 0] ^ 92;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $216($2_1, $3_1, 64);
  $358($0_1);
  $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 64) {
    $2_1 = $1_1 + $3_1 | 0;
    HEAP8[$2_1 | 0] = HEAPU8[$2_1 | 0] ^ 106;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $216($0_1, $3_1, 64);
  global$0 = $3_1 - -64 | 0;
 }
 
 function $143($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $288($3_1 + 24 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 28 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 24 >> 2];
  HEAP32[$3_1 + 32 >> 2] = $2_1;
  $67($3_1 + 40 | 0, $2_1, $1_1);
  if (HEAP32[$3_1 + 40 >> 2]) {
   abort()
  }
  $2_1 = $3_1 + 60 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $3_1 + 88 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = $3_1 + 52 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $3_1 + 80 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$3_1 + 72 >> 2] = HEAP32[$3_1 + 44 >> 2];
  HEAP32[$3_1 + 76 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 84 >> 2];
  $1_1 = HEAP32[$3_1 + 92 >> 2];
  $201($3_1 + 16 | 0, $1_1, 0);
  $4_1 = HEAP32[$3_1 + 20 >> 2];
  $2_1 = $91(HEAP32[$3_1 + 16 >> 2], $2_1, $1_1);
  $390($3_1 + 72 | 0);
  $392($3_1 + 32 | 0);
  HEAP32[$3_1 + 48 >> 2] = $1_1;
  HEAP32[$3_1 + 44 >> 2] = $4_1;
  HEAP32[$3_1 + 40 >> 2] = $2_1;
  $271($3_1 + 8 | 0, $3_1 + 40 | 0);
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 96 | 0;
 }
 
 function $144($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 240 | 0;
  global$0 = $3_1;
  $288($3_1 + 16 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $2_1;
  $221($3_1 + 32 | 0, $2_1, $1_1);
  if (HEAPU8[$3_1 + 32 | 0]) {
   abort()
  }
  $2_1 = $3_1 + 104 | 0;
  $91($2_1, $3_1 + 32 | 1, 64);
  $1_1 = $3_1 + 168 | 0;
  $147($1_1, 0, 65);
  HEAP32[$3_1 + 236 >> 2] = 65;
  $98(HEAP32[304883], $1_1, $3_1 + 236 | 0, $2_1, 2);
  $201($3_1 + 8 | 0, 65, 0);
  $2_1 = HEAP32[$3_1 + 12 >> 2];
  $4_1 = $91(HEAP32[$3_1 + 8 >> 2], $1_1, 65);
  $392($3_1 + 24 | 0);
  HEAP32[$3_1 + 176 >> 2] = 65;
  HEAP32[$3_1 + 172 >> 2] = $2_1;
  HEAP32[$3_1 + 168 >> 2] = $4_1;
  $271($3_1, $1_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 240 | 0;
 }
 
 function $145($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 528 | 0;
  global$0 = $3_1;
  $288($3_1 + 16 | 0, $1_1, $2_1);
  $4_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $4_1;
  $5_1 = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $5_1;
  $1_1 = $3_1 + 32 | 0;
  $147($1_1, 0, 204);
  HEAP16[$3_1 + 240 >> 1] = 1;
  HEAP32[$3_1 + 236 >> 2] = 72;
  $2_1 = $3_1 + 248 | 0;
  $147($2_1, 0, 64);
  $165($1_1, $5_1, $4_1);
  $4_1 = $3_1 + 312 | 0;
  $91($4_1, $1_1, 216);
  $102($4_1, $2_1, 64);
  $201($3_1 + 8 | 0, 64, 0);
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  $2_1 = $91(HEAP32[$3_1 + 8 >> 2], $2_1, 64);
  $392($3_1 + 24 | 0);
  HEAP32[$3_1 + 320 >> 2] = 64;
  HEAP32[$3_1 + 316 >> 2] = $1_1;
  HEAP32[$3_1 + 312 >> 2] = $2_1;
  $271($3_1, $4_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 528 | 0;
 }
 
 function $146() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!HEAP32[305243]) {
     HEAP32[305243] = -1;
     $0_1 = HEAP32[305244];
     if (!$0_1) {
      $367(1220960);
      label$5 : {
       $2_1 = HEAP32[304880];
       $1_1 = HEAP32[304881];
       if (($2_1 | 0) != -1 | ($1_1 | 0) != -1) {
        $0_1 = $1_1;
        $3_1 = $2_1 + 1 | 0;
        $0_1 = $3_1 ? $0_1 : $0_1 + 1 | 0;
        HEAP32[304880] = $3_1;
        HEAP32[304881] = $0_1;
        if ($1_1 | $2_1) {
         break label$5
        }
        break label$1;
       }
       HEAP8[1220960] = 0;
       break label$1;
      }
      HEAP8[1220960] = 0;
      $0_1 = $172(32, 8);
      if (!$0_1) {
       $1_1 = HEAP32[305241];
       FUNCTION_TABLE[($1_1 ? $1_1 : 1) | 0](32, 8);
       break label$1;
      }
      HEAP32[$0_1 >> 2] = 1;
      HEAP32[$0_1 + 4 >> 2] = 1;
      HEAP32[$0_1 + 24 >> 2] = 0;
      HEAP32[$0_1 + 28 >> 2] = 0;
      HEAP32[$0_1 + 16 >> 2] = 0;
      HEAP32[$0_1 + 8 >> 2] = $2_1;
      HEAP32[$0_1 + 12 >> 2] = $1_1;
      if (HEAP32[305244]) {
       $354(1220976)
      }
      HEAP32[305244] = $0_1;
     }
     $1_1 = HEAP32[$0_1 >> 2];
     HEAP32[$0_1 >> 2] = $1_1 + 1;
     if (($1_1 | 0) < 0) {
      break label$1
     }
     HEAP32[305243] = HEAP32[305243] + 1;
     if (!$0_1) {
      break label$2
     }
     return $0_1;
    }
    abort();
   }
   abort();
  }
  abort();
 }
 
 function $147($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 <= 15) {
    $3_1 = $0_1;
    break label$1;
   }
   $6_1 = 0 - $0_1 & 3;
   $4_1 = $6_1 + $0_1 | 0;
   $3_1 = $0_1;
   while (1) {
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     HEAP8[$3_1 | 0] = $1_1;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = $1_1 & 255;
   $3_1 = 8;
   while (1) {
    if ($3_1 >>> 0 >= 32) {
     $2_1 = $2_1 - $6_1 | 0;
     $3_1 = ($2_1 & -4) + $4_1 | 0;
     while (1) {
      if ($3_1 >>> 0 > $4_1 >>> 0) {
       HEAP32[$4_1 >> 2] = $5_1;
       $4_1 = $4_1 + 4 | 0;
       continue;
      }
      break;
     };
     $2_1 = $2_1 & 3;
    } else {
     $5_1 = $5_1 << ($3_1 & 24) | $5_1;
     $3_1 = $3_1 << 1;
     continue;
    }
    break;
   };
  }
  $2_1 = $2_1 + $3_1 | 0;
  while (1) {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    HEAP8[$3_1 | 0] = $1_1;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0_1;
 }
 
 function $148($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  if (HEAP32[$0_1 + 64 >> 2]) {
   $2_1 = $4_1 + 8 | 0;
   $3_1 = $0_1 + 32 | 0;
   $142($2_1, $3_1);
   $216($2_1, $0_1, 32);
   $216($2_1, 1219170, 1);
   $325($2_1, $3_1);
   $142($2_1, $3_1);
   $216($2_1, $0_1, 32);
   $325($2_1, $0_1);
  }
  $5_1 = $0_1 + 32 | 0;
  $2_1 = 32;
  while (1) {
   if ($2_1) {
    $3_1 = $4_1 + 8 | 0;
    $142($3_1, $5_1);
    $216($3_1, $0_1, 32);
    $325($3_1, $0_1);
    $3_1 = ($2_1 | 0) < 32 ? $2_1 : 32;
    $2_1 = $2_1 - $3_1 | 0;
    $1_1 = $91($1_1, $0_1, $3_1) + $3_1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0_1 + 64 >> 2] = 1;
  global$0 = $4_1 + 208 | 0;
 }
 
 function $149($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  $288($6_1 + 24 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 36 >> 2] = $2_1;
  $7_1 = HEAP32[$6_1 + 24 >> 2];
  HEAP32[$6_1 + 32 >> 2] = $7_1;
  $288($6_1 + 16 | 0, $3_1, $4_1);
  $3_1 = HEAP32[$6_1 + 20 >> 2];
  HEAP32[$6_1 + 44 >> 2] = $3_1;
  $4_1 = HEAP32[$6_1 + 16 >> 2];
  HEAP32[$6_1 + 40 >> 2] = $4_1;
  $1_1 = $6_1 + 48 | 0;
  $147($1_1, 0, 64);
  $64($7_1, $2_1, $4_1, $3_1, $5_1, $1_1);
  $201($6_1 + 8 | 0, 64, 0);
  $2_1 = HEAP32[$6_1 + 12 >> 2];
  $3_1 = $91(HEAP32[$6_1 + 8 >> 2], $1_1, 64);
  $392($6_1 + 40 | 0);
  $392($6_1 + 32 | 0);
  HEAP32[$6_1 + 56 >> 2] = 64;
  HEAP32[$6_1 + 52 >> 2] = $2_1;
  HEAP32[$6_1 + 48 >> 2] = $3_1;
  $271($6_1, $1_1);
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $6_1 + 112 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = HEAP32[$0_1 >> 2];
  $7_1 = $5_1 + 264 | 0;
  $0_1 = 0;
  while (1) {
   label$2 : {
    if ($0_1 >>> 0 < $2_1 >>> 0) {
     $3_1 = HEAP32[$5_1 + 256 >> 2];
     if ($3_1 >>> 0 <= 63) {
      break label$2
     }
     $3_1 = HEAP32[$5_1 + 320 >> 2];
     $4_1 = HEAP32[$5_1 + 324 >> 2];
     label$4 : {
      if (!(!$3_1 & ($4_1 | 0) <= 0 | ($4_1 | 0) < 0 | HEAP32[$5_1 + 328 >> 2] < 0)) {
       HEAP32[$5_1 + 320 >> 2] = $3_1 - 256;
       HEAP32[$5_1 + 324 >> 2] = $4_1 - ($3_1 >>> 0 < 256);
       $2($7_1, $5_1);
       break label$4;
      }
      $4_1 = global$0 - 128 | 0;
      global$0 = $4_1;
      $3_1 = $4_1 + 88 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $6_1 = $4_1 + 80 | 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[$6_1 + 4 >> 2] = 0;
      $8_1 = $4_1 + 72 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      HEAP32[$4_1 + 64 >> 2] = 0;
      HEAP32[$4_1 + 68 >> 2] = 0;
      $9_1 = $94($4_1 - -64 | 0);
      label$6 : {
       if (!$9_1) {
        $10_1 = HEAP32[$3_1 + 4 >> 2];
        $9_1 = $4_1 + 120 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $10_1;
        $9_1 = HEAP32[$6_1 + 4 >> 2];
        $3_1 = $4_1 + 112 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $9_1;
        $6_1 = HEAP32[$8_1 + 4 >> 2];
        $3_1 = $4_1 + 104 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $6_1;
        $3_1 = HEAP32[$4_1 + 68 >> 2];
        HEAP32[$4_1 + 96 >> 2] = HEAP32[$4_1 + 64 >> 2];
        HEAP32[$4_1 + 100 >> 2] = $3_1;
        $8_1 = $4_1 + 16 | 0;
        $275($8_1, $4_1 + 96 | 0);
        $3_1 = HEAP32[$7_1 + 48 >> 2];
        $6_1 = HEAP32[$7_1 + 52 >> 2];
        $91($7_1, $8_1, 48);
        break label$6;
       }
       FUNCTION_TABLE[HEAP32[268657]]($9_1);
       $3_1 = HEAP32[268658];
       if ($3_1) {
        $168($9_1, $3_1, HEAP32[268659])
       }
       $3_1 = HEAP32[$7_1 + 48 >> 2];
       $6_1 = HEAP32[$7_1 + 52 >> 2];
      }
      HEAP32[$7_1 + 64 >> 2] = 0;
      HEAP32[$7_1 + 56 >> 2] = $3_1 - 256;
      HEAP32[$7_1 + 60 >> 2] = $6_1 - ($3_1 >>> 0 < 256);
      $2($7_1, $5_1);
      global$0 = $4_1 + 128 | 0;
     }
     $3_1 = 0;
     HEAP32[$5_1 + 256 >> 2] = 0;
     break label$2;
    }
    return;
   }
   if ($0_1 >>> 0 <= $2_1 >>> 0) {
    $4_1 = $2_1 - $0_1 | 0;
    $6_1 = $3_1 << 2;
    $8_1 = 256 - $6_1 | 0;
    $4_1 = $4_1 >>> 0 < $8_1 >>> 0 ? $4_1 : $8_1;
    $91($0_1 + $1_1 | 0, $5_1 + $6_1 | 0, $4_1);
    HEAP32[$5_1 + 256 >> 2] = ($4_1 + 3 >>> 2 | 0) + $3_1;
    $0_1 = $0_1 + $4_1 | 0;
    continue;
   }
   break;
  };
  abort();
 }
 
 function $151($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $353($1_1, 1073961, 5)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$2_1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  $0_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if (($0_1 | 0) >= 0) {
    HEAP32[$2_1 + 16 >> 2] = $0_1;
    $85($2_1 + 8 | 0, 1074036, 8, $2_1 + 16 | 0, 1074044);
    break label$1;
   }
   $283($2_1, $0_1);
   $1_1 = HEAP32[$2_1 >> 2];
   if ($1_1) {
    $3_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$2_1 + 16 >> 2] = $1_1;
    HEAP32[$2_1 + 20 >> 2] = $3_1;
    HEAP32[$2_1 + 28 >> 2] = $0_1;
    $85($85($2_1 + 8 | 0, 1073996, 13, $2_1 + 28 | 0, 1073980), 1074009, 11, $2_1 + 16 | 0, 1074020);
    break label$1;
   }
   HEAP32[$2_1 + 16 >> 2] = $0_1;
   $85($2_1 + 8 | 0, 1073966, 12, $2_1 + 16 | 0, 1073980);
  }
  $0_1 = $215($2_1 + 8 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $152($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  if (($1_1 | 0) == HEAP32[$0_1 + 4 >> 2]) {
   return 1114112
  }
  HEAP32[$0_1 >> 2] = $1_1 + 1;
  $2_1 = HEAPU8[$1_1 | 0];
  if ($2_1 << 24 >> 24 < 0) {
   HEAP32[$0_1 >> 2] = $1_1 + 2;
   $3_1 = HEAPU8[$1_1 + 1 | 0] & 63;
   $4_1 = $2_1 & 31;
   if ($2_1 >>> 0 <= 223) {
    return $3_1 | $4_1 << 6
   }
   HEAP32[$0_1 >> 2] = $1_1 + 3;
   $3_1 = HEAPU8[$1_1 + 2 | 0] & 63 | $3_1 << 6;
   if ($2_1 >>> 0 < 240) {
    return $3_1 | $4_1 << 12
   }
   HEAP32[$0_1 >> 2] = $1_1 + 4;
   $2_1 = $4_1 << 18 & 1835008 | (HEAPU8[$1_1 + 3 | 0] & 63 | $3_1 << 6);
  }
  return $2_1;
 }
 
 function $153($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = 1;
  $3_1 = $1_1;
  $1_1 = $1_1 + 1 | 0;
  label$1 : {
   if ($1_1 >>> 0 < $3_1 >>> 0) {
    break label$1
   }
   $5_1 = 0;
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   $4_1 = $3_1 << 1;
   $1_1 = $1_1 >>> 0 < $4_1 >>> 0 ? $4_1 : $1_1;
   $1_1 = $1_1 >>> 0 > 4 ? $1_1 : 4;
   $156($2_1, $1_1 << 3, (($1_1 | 0) == ($1_1 & 536870911)) << 2, $3_1 ? HEAP32[$0_1 >> 2] : 0, $3_1 << 3);
   if (HEAP32[$2_1 >> 2] != 1) {
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$0_1 + 4 >> 2] = HEAP32[$2_1 + 8 >> 2] >>> 3;
    HEAP32[$0_1 >> 2] = $1_1;
    break label$1;
   }
   $4_1 = HEAP32[$2_1 + 8 >> 2];
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = 1;
  }
  $331($5_1, $1_1, $4_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $154($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 80 >> 2] = HEAP32[$1_1 + 120 >> 2];
  $3_1 = $4_1 + 40 | 0;
  $2_1 = $1_1 + 80 | 0;
  $91($3_1, $2_1, 40);
  $141($3_1);
  $202($4_1, $3_1);
  $10($4_1, 1218904);
  $203($2_1, $4_1);
  $17($3_1, $2_1);
  $8($4_1, $2_1, $3_1);
  $8($1_1, $1_1, $3_1);
  $3_1 = $1_1 + 40 | 0;
  $8($3_1, $3_1, $4_1);
  $2_1 = $1_1 + 88 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 80 >> 2] = 1;
  HEAP32[$1_1 + 84 >> 2] = 0;
  $2_1 = $1_1 + 96 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 104 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 112 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $91($91($0_1, $1_1, 40) + 40 | 0, $3_1, 40);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $155($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  $288($3_1 + 16 | 0, $1_1, $2_1);
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $1_1;
  $2_1 = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $2_1;
  $221($3_1 + 32 | 0, $2_1, $1_1);
  if (HEAPU8[$3_1 + 32 | 0]) {
   abort()
  }
  $1_1 = $3_1 + 104 | 0;
  $2_1 = $3_1 + 32 | 0;
  $91($1_1, $2_1 | 1, 64);
  $4_1 = $3_1 + 175 | 0;
  $294($4_1, $1_1);
  $201($3_1 + 8 | 0, 33, 0);
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  $4_1 = $91(HEAP32[$3_1 + 8 >> 2], $4_1, 33);
  $392($3_1 + 24 | 0);
  HEAP32[$3_1 + 40 >> 2] = 33;
  HEAP32[$3_1 + 36 >> 2] = $1_1;
  HEAP32[$3_1 + 32 >> 2] = $4_1;
  $271($3_1, $2_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 208 | 0;
 }
 
 function $156($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1) {
      $7_1 = 1;
      if (($1_1 | 0) < 0) {
       break label$1
      }
      if ($3_1) {
       break label$3
      }
      $314($5_1, $1_1, $2_1);
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $3_1 = HEAP32[$5_1 >> 2];
      break label$2;
     }
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     $7_1 = 1;
     break label$1;
    }
    if (!$4_1) {
     $292($5_1 + 8 | 0, $1_1, $2_1, 0);
     $6_1 = HEAP32[$5_1 + 12 >> 2];
     $3_1 = HEAP32[$5_1 + 8 >> 2];
     break label$2;
    }
    $6_1 = $1_1;
    $3_1 = $323($3_1, $4_1, $2_1, $1_1);
   }
   if ($3_1) {
    HEAP32[$0_1 + 4 >> 2] = $3_1;
    $7_1 = 0;
    break label$1;
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   $6_1 = $2_1;
  }
  HEAP32[$0_1 >> 2] = $7_1;
  HEAP32[$0_1 + 8 >> 2] = $6_1;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $157($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = HEAP32[$0_1 >> 2];
  HEAP32[$4_1 >> 2] = 0;
  $0_1 = $4_1 - 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] & -2;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[$3_1 + 20 >> 2]]($2_1) | 0)) {
    break label$1
   }
   $2_1 = HEAP32[$4_1 - 4 >> 2] & -4;
   label$2 : {
    if (!(!$2_1 | HEAP8[$2_1 | 0] & 1)) {
     $196($0_1);
     if (!(HEAPU8[$0_1 | 0] & 2)) {
      break label$2
     }
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2;
     return;
    }
    $2_1 = HEAP32[$0_1 >> 2];
    $3_1 = $2_1 & -4;
    if (!$3_1) {
     break label$1
    }
    $2_1 = $2_1 & 2 ? 0 : $3_1;
    if (!$2_1 | HEAP8[$2_1 | 0] & 1) {
     break label$1
    }
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 8 >> 2] & -4;
    HEAP32[$2_1 + 8 >> 2] = $0_1 | 1;
   }
   return;
  }
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
 }
 
 function $158($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 528 | 0;
  global$0 = $3_1;
  $288($3_1 + 16 | 0, $1_1, $2_1);
  $2_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$3_1 + 28 >> 2] = $2_1;
  $4_1 = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$3_1 + 24 >> 2] = $4_1;
  $1_1 = $3_1 + 32 | 0;
  $175($1_1);
  $409($1_1, $4_1, $2_1);
  $2_1 = $3_1 + 312 | 0;
  $91($2_1, $1_1, 216);
  $1_1 = $3_1 + 248 | 0;
  $326($1_1, $2_1);
  $201($3_1 + 8 | 0, 64, 0);
  $4_1 = HEAP32[$3_1 + 12 >> 2];
  $1_1 = $91(HEAP32[$3_1 + 8 >> 2], $1_1, 64);
  $392($3_1 + 24 | 0);
  HEAP32[$3_1 + 320 >> 2] = 64;
  HEAP32[$3_1 + 316 >> 2] = $4_1;
  HEAP32[$3_1 + 312 >> 2] = $1_1;
  $271($3_1, $2_1);
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 528 | 0;
 }
 
 function $159($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 400 | 0;
  global$0 = $3_1;
  $113($3_1 + 200 | 0, 1048732, 1048741, $1_1, $2_1);
  $1_1 = 1;
  label$1 : {
   if (HEAP32[$3_1 + 200 >> 2] != 1) {
    $91($0_1 + 8 | 0, $91($3_1 + 4 | 0, $3_1 + 208 | 0, 192), 192);
    $1_1 = 0;
    break label$1;
   }
   $4_1 = $3_1 + 220 | 0;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = $3_1 + 16 | 0;
   $7_1 = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 >> 2] = $7_1;
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $6_1 = $3_1 + 212 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $3_1 + 8 | 0;
   $6_1 = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 >> 2] = $6_1;
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $4_1 = HEAP32[$3_1 + 208 >> 2];
   $8_1 = HEAP32[$3_1 + 204 >> 2];
   HEAP32[$3_1 >> 2] = $8_1;
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   $9_1 = $0_1 + 20 | 0;
   HEAP32[$9_1 >> 2] = $7_1;
   HEAP32[$9_1 + 4 >> 2] = $2_1;
   $2_1 = $0_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = $6_1;
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   HEAP32[$0_1 + 4 >> 2] = $8_1;
   HEAP32[$0_1 + 8 >> 2] = $4_1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  global$0 = $3_1 + 400 | 0;
 }
 
 function $160($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $57($2_1 + 8 | 0, $1_1);
  $1_1 = HEAP32[$2_1 + 8 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 + 8 >> 2] = 2;
    break label$1;
   }
   $4_1 = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 >> 2] = $1_1;
   HEAP8[$0_1 + 16 | 0] = 0;
   HEAP8[$0_1 + 56 | 0] = 1;
   HEAP32[$0_1 + 52 >> 2] = 0;
   $3_1 = $0_1 + 44 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP8[$0_1 + 40 | 0] = 0;
   HEAP32[$0_1 + 36 >> 2] = 0;
   HEAP8[$0_1 + 32 | 0] = 0;
   HEAP32[$0_1 + 28 >> 2] = 0;
   HEAP8[$0_1 + 24 | 0] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = $1_1 + $4_1;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $161($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 496 | 0;
  global$0 = $2_1;
  $3_1 = $1_1 + 224 | 0;
  $4_1 = HEAP32[$3_1 >> 2];
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 + 216 >> 2];
  $7_1 = HEAP32[$1_1 + 220 >> 2];
  $3_1 = $2_1 + 280 | 0;
  $178($3_1 | 4, $1_1 + 300 | 0);
  HEAP32[$2_1 + 280 >> 2] = HEAP32[$1_1 + 296 >> 2];
  $91($2_1 + 16 | 0, $1_1 + 232 | 0, 64);
  $91($2_1 + 80 | 0, $3_1, 132);
  HEAP32[$2_1 + 8 >> 2] = $4_1;
  HEAP32[$2_1 + 12 >> 2] = $5_1;
  HEAP32[$2_1 >> 2] = $6_1;
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $91($3_1, $1_1, 216);
  $1_1 = $2_1 + 216 | 0;
  $54($1_1, $3_1);
  $411($2_1, $1_1);
  $91($3_1, $2_1, 216);
  $54($0_1, $3_1);
  global$0 = $2_1 + 496 | 0;
 }
 
 function $162($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 36 >> 2];
  $6_1 = $2_1;
  $9_1 = HEAP32[$0_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 >> 2];
  $5_1 = __wasm_i64_mul($2_1 >>> 16 | 0, 0, 977, 1);
  $2_1 = $1_1 + $5_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + $3_1 | 0;
  $1_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $2_1 ^ 976;
  $3_1 = $1_1 & 1048575;
  $12_1 = $3_1 ^ 1;
  label$1 : {
   if ($2_1 | $3_1) {
    $4_1 = 0;
    if (($11_1 | 0) != -1 | ($12_1 | 0) != 1048575) {
     break label$1
    }
   }
   $4_1 = $2_1;
   $10_1 = $1_1 >>> 20 | 0;
   $2_1 = $10_1 + HEAP32[$0_1 + 8 >> 2] | 0;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   $1_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $13_1 = $2_1;
   $2_1 = $4_1 | $2_1;
   $7_1 = $1_1 & 1048575 | $3_1;
   $8_1 = $2_1;
   $2_1 = $1_1;
   $4_1 = $1_1 >>> 20 | 0;
   $3_1 = $4_1 + HEAP32[$0_1 + 16 >> 2] | 0;
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   $1_1 = $3_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $10_1 = $3_1;
   $3_1 = $8_1 | $3_1;
   $7_1 = $1_1 & 1048575 | $7_1;
   $4_1 = HEAP32[$0_1 + 28 >> 2];
   $8_1 = $3_1;
   $3_1 = $1_1;
   $5_1 = $1_1 >>> 20 | 0;
   $1_1 = $5_1 + HEAP32[$0_1 + 24 >> 2] | 0;
   $0_1 = $4_1;
   $0_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
   $5_1 = $1_1;
   $1_1 = $8_1 | $1_1;
   $7_1 = $0_1 & 1048575 | $7_1;
   $4_1 = $6_1 & 65535;
   $8_1 = $1_1;
   $1_1 = $9_1;
   $9_1 = $0_1 >>> 20 | 0;
   $6_1 = $1_1 + $9_1 | 0;
   $1_1 = $4_1;
   $1_1 = $6_1 >>> 0 < $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $4_1 = !($8_1 | $6_1 | ($1_1 | $7_1)) | ($6_1 & ($5_1 & ($10_1 & ($11_1 & $13_1)))) == -1 & ($0_1 & ($3_1 & ($2_1 & $12_1)) & ($1_1 ^ 983040)) == 1048575;
  }
  return $4_1;
 }
 
 function $163($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 2736 | 0;
  global$0 = $3_1;
  $2_1 = HEAP32[$1_1 >> 2];
  if (($2_1 | 0) == HEAP32[$1_1 + 4 >> 2]) {
   $1_1 = 0
  } else {
   HEAP32[$1_1 >> 2] = $2_1 + 160;
   $1_1 = $3_1 + 1288 | 0;
   $91($1_1, $2_1, 160);
   $2_1 = $3_1 + 8 | 0;
   $91($2_1, $1_1, 160);
   $1_1 = $3_1 + 1456 | 0;
   $123($1_1, $2_1);
   $91($2_1, $1_1, 1280);
   $1_1 = $3_1 + 1448 | 0;
   $91($1_1, $2_1, 1280);
   $91($0_1 + 8 | 0, $1_1, 1280);
   $1_1 = 1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  global$0 = $3_1 + 2736 | 0;
 }
 
 function $164($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  if ($3_1 >>> 0 < $2_1 >>> 0) {
   $4_1 = HEAP32[$1_1 >> 2];
   label$2 : {
    if (!$3_1) {
     $417($4_1, $2_1);
     $2_1 = 1;
     break label$2;
    }
    $2_1 = $323($4_1, $2_1, 1, $3_1);
   }
   $4_1 = 1;
   $7_1 = $2_1 ? $3_1 : 1;
   $6_1 = $2_1 ? $2_1 : $3_1;
   if ($2_1) {
    HEAP32[$1_1 >> 2] = $6_1;
    $4_1 = 0;
    $2_1 = $1_1 + 4 | 0;
   } else {
    $2_1 = $5_1 + 12 | 0
   }
   HEAP32[$2_1 >> 2] = $7_1;
   $331($4_1, $6_1, HEAP32[$5_1 + 12 >> 2]);
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  global$0 = $5_1 + 16 | 0;
 }
 
 function $165($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (HEAPU8[$0_1 + 209 | 0]) {
   HEAP8[$0_1 + 209 | 0] = 0;
   $407($0_1);
  }
  $4_1 = HEAP32[$0_1 + 200 >> 2];
  $5_1 = HEAP32[$0_1 + 204 >> 2] - $4_1 | 0;
  $6_1 = $2_1;
  while (1) {
   $345($3_1 + 8 | 0, $1_1, $2_1, $7_1);
   $8_1 = HEAP32[$3_1 + 12 >> 2];
   $9_1 = HEAP32[$3_1 + 8 >> 2];
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    $205($0_1, $9_1, $8_1, $4_1, $5_1);
    $22($0_1);
    $6_1 = $6_1 - $5_1 | 0;
    $7_1 = $5_1 + $7_1 | 0;
    $5_1 = HEAP32[$0_1 + 204 >> 2];
    $4_1 = 0;
    continue;
   }
   break;
  };
  $205($0_1, $9_1, $8_1, $4_1, $6_1);
  HEAP32[$0_1 + 200 >> 2] = $6_1 + $4_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $166($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = $147($0_1, 0, 64);
  $0_1 = $4_1;
  while (1) {
   if (($2_1 | 0) == 32) {
    label$3 : {
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == 63) {
       break label$3
      }
      $0_1 = $2_1 + $4_1 | 0;
      $3_1 = HEAPU8[$0_1 | 0];
      $1_1 = $3_1 + 8 | 0;
      HEAP8[$0_1 | 0] = $3_1 - ($1_1 & 240);
      $0_1 = $0_1 + 1 | 0;
      HEAP8[$0_1 | 0] = HEAPU8[$0_1 | 0] + ($1_1 << 24 >> 24 >>> 4 | 0);
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
   } else {
    $3_1 = HEAPU8[$1_1 + $2_1 | 0];
    HEAP8[$0_1 + 1 | 0] = $3_1 >>> 4;
    HEAP8[$0_1 | 0] = $3_1 & 15;
    $0_1 = $0_1 + 2 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $167($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $10_1 = HEAP32[$1_1 + 32 >> 2];
  $6_1 = HEAP32[$2_1 + 32 >> 2];
  $3_1 = ($10_1 - $6_1 | 0) - 16 | 0;
  $6_1 = (HEAP32[$1_1 + 36 >> 2] - (HEAP32[$2_1 + 36 >> 2] + ($6_1 >>> 0 > $10_1 >>> 0) | 0) | 0) + 8388607 | 0;
  $7_1 = $3_1;
  $10_1 = $3_1 >>> 0 < 4294967280 ? $6_1 + 1 | 0 : $6_1;
  $8_1 = $10_1 & 524287;
  $3_1 = HEAP32[$1_1 + 24 >> 2];
  $6_1 = HEAP32[$2_1 + 24 >> 2];
  $5_1 = ($3_1 - $6_1 | 0) - 16 | 0;
  $4_1 = (HEAP32[$1_1 + 28 >> 2] - (HEAP32[$2_1 + 28 >> 2] + ($3_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 8388607 | 0;
  $6_1 = $5_1;
  $3_1 = $7_1;
  $5_1 = $5_1 >>> 0 < 4294967280 ? $4_1 + 1 | 0 : $4_1;
  $7_1 = $5_1 >>> 19 | 0;
  $9_1 = $3_1 + $7_1 | 0;
  $4_1 = $8_1;
  $3_1 = $0_1;
  HEAP32[$3_1 + 32 >> 2] = $9_1;
  HEAP32[$3_1 + 36 >> 2] = $7_1 >>> 0 > $9_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $8_1 = $5_1 & 524287;
  $5_1 = HEAP32[$1_1 + 16 >> 2];
  $3_1 = HEAP32[$2_1 + 16 >> 2];
  $4_1 = ($5_1 - $3_1 | 0) - 16 | 0;
  $7_1 = (HEAP32[$1_1 + 20 >> 2] - (HEAP32[$2_1 + 20 >> 2] + ($3_1 >>> 0 > $5_1 >>> 0) | 0) | 0) + 8388607 | 0;
  $7_1 = $4_1 >>> 0 < 4294967280 ? $7_1 + 1 | 0 : $7_1;
  $3_1 = $6_1;
  $6_1 = $4_1;
  $5_1 = $7_1;
  $7_1 = $5_1 >>> 19 | 0;
  $9_1 = $3_1 + $7_1 | 0;
  $4_1 = $8_1;
  $3_1 = $0_1;
  HEAP32[$3_1 + 24 >> 2] = $9_1;
  HEAP32[$3_1 + 28 >> 2] = $7_1 >>> 0 > $9_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $4_1 = $6_1;
  $9_1 = $5_1 & 524287;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $6_1 = HEAP32[$2_1 + 8 >> 2];
  $5_1 = ($3_1 - $6_1 | 0) - 16 | 0;
  $6_1 = (HEAP32[$1_1 + 12 >> 2] - (HEAP32[$2_1 + 12 >> 2] + ($3_1 >>> 0 < $6_1 >>> 0) | 0) | 0) + 8388607 | 0;
  $7_1 = $5_1;
  $5_1 = $5_1 >>> 0 < 4294967280 ? $6_1 + 1 | 0 : $6_1;
  $6_1 = $7_1;
  $8_1 = $5_1 >>> 19 | 0;
  $7_1 = $8_1 + $4_1 | 0;
  $4_1 = $9_1;
  $3_1 = $0_1;
  HEAP32[$3_1 + 16 >> 2] = $7_1;
  HEAP32[$3_1 + 20 >> 2] = $7_1 >>> 0 < $8_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $7_1 = $5_1 & 524287;
  $5_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$2_1 >> 2];
  $8_1 = ($5_1 - $3_1 | 0) - 304 | 0;
  $4_1 = (HEAP32[$1_1 + 4 >> 2] - (HEAP32[$2_1 + 4 >> 2] + ($3_1 >>> 0 > $5_1 >>> 0) | 0) | 0) + 8388607 | 0;
  $1_1 = $8_1;
  $3_1 = $1_1 >>> 0 < 4294966992 ? $4_1 + 1 | 0 : $4_1;
  $5_1 = $3_1 >>> 19 | 0;
  $4_1 = $5_1 + $6_1 | 0;
  $2_1 = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $4_1;
  HEAP32[$2_1 + 12 >> 2] = $4_1 >>> 0 < $5_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $2_1 = __wasm_i64_mul($10_1 >>> 19 | 0, 0, 19, 0) + $1_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS + ($3_1 & 524287) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 >>> 0 > $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
 }
 
 function $168($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[$3_1 + 4 >> 2] = $0_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($2_1 >>> 0 >= 5) {
     break label$2
    }
    $0_1 = ($1_1 + 3 >>> 2 | 0) - 1 | 0;
    if ($0_1 >>> 0 > 255) {
     break label$2
    }
    HEAP32[$3_1 + 8 >> 2] = 1219536;
    $0_1 = ($0_1 << 2) + 1219540 | 0;
    HEAP32[$3_1 + 12 >> 2] = HEAP32[$0_1 >> 2];
    $157($3_1 + 4 | 0, $3_1 + 12 | 0, $3_1 + 8 | 0, 1217612);
    HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 12 >> 2];
    break label$1;
   }
   HEAP32[$3_1 + 12 >> 2] = HEAP32[304884];
   $157($3_1 + 4 | 0, $3_1 + 12 | 0, 1217612, 1217636);
   HEAP32[304884] = HEAP32[$3_1 + 12 >> 2];
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $169($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = HEAP32[$2_1 >> 2];
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $7_1 + $4_1 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $3_1 + HEAP32[$1_1 + 4 >> 2] | 0;
  $5_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $4_1 = $6_1;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  $8_1 = ($3_1 | 0) == ($5_1 | 0) & $4_1 >>> 0 < $7_1 >>> 0 | $3_1 >>> 0 > $5_1 >>> 0;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = $8_1 + $4_1 | 0;
  $7_1 = HEAP32[$1_1 + 12 >> 2];
  $7_1 = $4_1 >>> 0 > $3_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $11_1 = $3_1;
  $4_1 = HEAP32[$2_1 + 8 >> 2];
  $5_1 = $3_1 + $4_1 | 0;
  $3_1 = HEAP32[$2_1 + 12 >> 2] + $7_1 | 0;
  $6_1 = $0_1;
  $10_1 = $5_1;
  HEAP32[$6_1 + 8 >> 2] = $5_1;
  $3_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$6_1 + 12 >> 2] = $3_1;
  $13_1 = HEAP32[$2_1 + 16 >> 2];
  $5_1 = HEAP32[$1_1 + 16 >> 2];
  $9_1 = $13_1 + $5_1 | 0;
  $12_1 = HEAP32[$2_1 + 20 >> 2];
  $4_1 = $12_1 + HEAP32[$1_1 + 20 >> 2] | 0;
  $4_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $3_1 = ($3_1 | 0) == ($7_1 | 0) & $10_1 >>> 0 < $11_1 >>> 0 | $3_1 >>> 0 < $7_1 >>> 0;
  $5_1 = $3_1 + (!$7_1 & $8_1 >>> 0 > $11_1 >>> 0) | 0;
  $7_1 = $3_1 >>> 0 > $5_1 >>> 0;
  $0_1 = $9_1;
  $3_1 = $5_1;
  $8_1 = $9_1 + $3_1 | 0;
  $5_1 = $4_1 + $7_1 | 0;
  $11_1 = $8_1;
  HEAP32[$6_1 + 16 >> 2] = $8_1;
  $5_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  HEAP32[$6_1 + 20 >> 2] = $5_1;
  $7_1 = $6_1;
  $8_1 = HEAP32[$2_1 + 24 >> 2];
  $6_1 = HEAP32[$1_1 + 24 >> 2];
  $10_1 = $8_1 + $6_1 | 0;
  $9_1 = HEAP32[$2_1 + 28 >> 2];
  $3_1 = $9_1 + HEAP32[$1_1 + 28 >> 2] | 0;
  $3_1 = $6_1 >>> 0 > $10_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $2_1 = ($4_1 | 0) == ($5_1 | 0) & $11_1 >>> 0 < $0_1 >>> 0 | $4_1 >>> 0 > $5_1 >>> 0;
  $4_1 = $2_1 + (($4_1 | 0) == ($12_1 | 0) & $0_1 >>> 0 < $13_1 >>> 0 | $4_1 >>> 0 < $12_1 >>> 0) | 0;
  $6_1 = $2_1 >>> 0 > $4_1 >>> 0;
  $2_1 = $4_1;
  $4_1 = $4_1 + $10_1 | 0;
  $6_1 = $3_1 + $6_1 | 0;
  $6_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
  HEAP32[$7_1 + 24 >> 2] = $4_1;
  HEAP32[$7_1 + 28 >> 2] = $6_1;
  $1_1 = (($3_1 | 0) == ($9_1 | 0) & $10_1 >>> 0 < $8_1 >>> 0 | $3_1 >>> 0 < $9_1 >>> 0) + (($3_1 | 0) == ($6_1 | 0) & $4_1 >>> 0 < $10_1 >>> 0 | $3_1 >>> 0 > $6_1 >>> 0) | 0;
  $199($7_1, $253($7_1) + $1_1 | 0);
 }
 
 function $170($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $8_1 = $147($0_1, 0, 40);
  while (1) {
   if (($3_1 | 0) == 40) {
    label$3 : {
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) == 40) {
       break label$3
      }
      $0_1 = $3_1 + $8_1 | 0;
      $1_1 = $0_1;
      $5_1 = $5_1 >>> 20 | 0;
      $2_1 = $5_1 + HEAP32[$0_1 >> 2] | 0;
      $0_1 = HEAP32[$0_1 + 4 >> 2];
      $0_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      $5_1 = $3_1 + 1065552 | 0;
      $4_1 = $6_1 & HEAP32[$5_1 >> 2];
      $2_1 = $4_1 + $2_1 | 0;
      $0_1 = ($7_1 & HEAP32[$5_1 + 4 >> 2]) + $0_1 | 0;
      $0_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
      HEAP32[$1_1 >> 2] = $2_1;
      $5_1 = $0_1;
      HEAP32[$1_1 + 4 >> 2] = $0_1 & 1048575;
      $3_1 = $3_1 + 8 | 0;
      continue;
     };
    }
   } else {
    $0_1 = $1_1 + $3_1 | 0;
    $4_1 = $6_1 + HEAP32[$0_1 >> 2] | 0;
    $0_1 = $7_1 + HEAP32[$0_1 + 4 >> 2] | 0;
    $7_1 = $4_1;
    $4_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $0_1 = $2_1 + $3_1 | 0;
    $6_1 = HEAP32[$0_1 >> 2];
    $0_1 = $4_1 - (($6_1 >>> 0 > $7_1 >>> 0) + HEAP32[$0_1 + 4 >> 2] | 0) | 0;
    $4_1 = $3_1 + $8_1 | 0;
    HEAP32[$4_1 >> 2] = $7_1 - $6_1;
    HEAP32[$4_1 + 4 >> 2] = $0_1 & 1048575;
    $0_1 = $0_1 >> 31;
    $6_1 = $0_1;
    $7_1 = $0_1;
    $3_1 = $3_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $171($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2] ^ -1;
  $4_1 = HEAP32[$1_1 >> 2] ^ -1;
  $3_1 = $4_1;
  $5_1 = $3_1 - 801750718 | 0;
  $6_1 = $371($1_1);
  $8_1 = $6_1 ? 0 : -1;
  HEAP32[$0_1 >> 2] = $5_1 & $8_1;
  $3_1 = $2_1 - (($3_1 >>> 0 < 801750718) + 1076732275 | 0) | 0;
  $6_1 = $6_1 ? 0 : -1;
  HEAP32[$0_1 + 4 >> 2] = $3_1 & $6_1;
  $10_1 = HEAP32[$1_1 + 8 >> 2] ^ -1;
  $5_1 = ($2_1 | 0) == ($3_1 | 0) & $4_1 >>> 0 > $5_1 >>> 0 | $2_1 >>> 0 > $3_1 >>> 0;
  $2_1 = $10_1 + $5_1 | 0;
  $4_1 = HEAP32[$1_1 + 12 >> 2] ^ -1;
  $3_1 = $4_1;
  $3_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $5_1 = $2_1;
  $7_1 = $2_1 - 1354194885 | 0;
  HEAP32[$0_1 + 8 >> 2] = $8_1 & $7_1;
  $9_1 = $3_1 - (($2_1 >>> 0 < 1354194885) + 1162945305 | 0) | 0;
  HEAP32[$0_1 + 12 >> 2] = $6_1 & $9_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2] ^ -1;
  $11_1 = $2_1;
  $4_1 = ($3_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 < $10_1 >>> 0 | $3_1 >>> 0 < $4_1 >>> 0;
  $5_1 = ($3_1 | 0) == ($9_1 | 0) & $5_1 >>> 0 > $7_1 >>> 0 | $3_1 >>> 0 > $9_1 >>> 0;
  $3_1 = $4_1 + $5_1 | 0;
  $4_1 = $3_1 >>> 0 < $5_1 >>> 0;
  $7_1 = HEAP32[$1_1 + 16 >> 2] ^ -1;
  $5_1 = $3_1;
  $3_1 = $7_1 + $3_1 | 0;
  $2_1 = $2_1 + $4_1 | 0;
  $2_1 = $3_1 >>> 0 < $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $5_1 = $3_1 - 2 | 0;
  HEAP32[$0_1 + 16 >> 2] = $8_1 & $5_1;
  $4_1 = $2_1 - ($3_1 >>> 0 < 2) | 0;
  HEAP32[$0_1 + 20 >> 2] = $6_1 & $4_1;
  $4_1 = ($2_1 | 0) == ($4_1 | 0) & $3_1 >>> 0 > $5_1 >>> 0 | $2_1 >>> 0 > $4_1 >>> 0;
  $2_1 = $4_1 + (($2_1 | 0) == ($11_1 | 0) & $3_1 >>> 0 < $7_1 >>> 0 | $2_1 >>> 0 < $11_1 >>> 0) | 0;
  $3_1 = $2_1 >>> 0 < $4_1 >>> 0;
  $4_1 = HEAP32[$1_1 + 24 >> 2] ^ -1;
  $2_1 = $4_1 + $2_1 | 0;
  $1_1 = (HEAP32[$1_1 + 28 >> 2] ^ -1) + $3_1 | 0;
  $1_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 24 >> 2] = $8_1 & $2_1 - 1;
  HEAP32[$0_1 + 28 >> 2] = $6_1 & $1_1 - !$2_1;
 }
 
 function $172($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $0_1 = $0_1 + 3 >>> 2 | 0;
   label$2 : {
    if ($1_1 >>> 0 >= 5) {
     break label$2
    }
    $3_1 = $0_1 - 1 | 0;
    if ($3_1 >>> 0 > 255) {
     break label$2
    }
    HEAP32[$2_1 + 4 >> 2] = 1219536;
    $3_1 = ($3_1 << 2) + 1219540 | 0;
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
    $1_1 = $237($0_1, $1_1, $2_1 + 12 | 0, $2_1 + 4 | 0, 1217612);
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 12 >> 2];
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = HEAP32[304884];
   $1_1 = $237($0_1, $1_1, $2_1 + 8 | 0, 1217612, 1217636);
   HEAP32[304884] = HEAP32[$2_1 + 8 >> 2];
  }
  global$0 = $2_1 + 16 | 0;
  return $1_1;
 }
 
 function $173($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $2_1 + $3_1 | 0;
  label$1 : {
   label$2 : {
    if ($3_1 >>> 0 >= $2_1 >>> 0) {
     $2_1 = 0;
     $5_1 = HEAP32[$1_1 + 4 >> 2];
     $6_1 = $5_1 << 1;
     $3_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $6_1 : $3_1;
     $156($4_1, $3_1 >>> 0 > 8 ? $3_1 : 8, 1, $5_1 ? HEAP32[$1_1 >> 2] : 0, $5_1);
     if (HEAP32[$4_1 >> 2] != 1) {
      $3_1 = HEAP32[$4_1 + 8 >> 2];
      HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $3_1;
      break label$1;
     }
     $1_1 = HEAP32[$4_1 + 8 >> 2];
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$0_1 + 8 >> 2] = $1_1;
     break label$2;
    }
    HEAP32[$0_1 + 4 >> 2] = $3_1;
    HEAP32[$0_1 + 8 >> 2] = 0;
   }
   $2_1 = 1;
  }
  HEAP32[$0_1 >> 2] = $2_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $174($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $277($2_1, 1048899, 10, $3_1, 32);
  $389($2_1, 1048909, 10, $1_1 + 160 | 0);
  $322($0_1, $2_1, 1048919, 11);
  $3_1 = $4_1 + 24 | 0;
  $1_1 = $3_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 16 | 0;
  $1_1 = $5_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $6_1 = $4_1 + 8 | 0;
  $1_1 = $6_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $290($2_1, 1048930, 14, $4_1, 32);
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 56 | 0;
  $3_1 = HEAP32[$3_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $2_1;
  HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
  $2_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = $0_1 + 48 | 0;
  $3_1 = HEAP32[$5_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $2_1;
  HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  $3_1 = HEAP32[$6_1 >> 2];
  HEAP8[$1_1 | 0] = $3_1;
  HEAP8[$1_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$1_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$1_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$1_1 + 4 | 0] = $2_1;
  HEAP8[$1_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$1_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$1_1 + 7 | 0] = $2_1 >>> 24;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = HEAP32[$4_1 >> 2];
  HEAP8[$0_1 + 32 | 0] = $2_1;
  HEAP8[$0_1 + 33 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 34 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 35 | 0] = $2_1 >>> 24;
  HEAP8[$0_1 + 36 | 0] = $1_1;
  HEAP8[$0_1 + 37 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 38 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 39 | 0] = $1_1 >>> 24;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $175($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 272 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = 0;
  $3_1 = $2_1 | 4;
  while (1) {
   if (($1_1 | 0) != 128) {
    HEAP8[$1_1 + $3_1 | 0] = 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $1_1 = $2_1 + 136 | 0;
  $91($1_1, $2_1, 132);
  $91($0_1 + 84 | 0, $1_1 | 4, 128);
  $91($0_1 + 16 | 0, 1105648, 64);
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 80 >> 2] = 0;
  global$0 = $2_1 + 272 | 0;
 }
 
 function $176($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $5_1 = $0_1;
   $5_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 8 >> 2];
   if (($0_1 | 0) == HEAP32[$1_1 + 12 >> 2]) {
    $6_1 = 1114112
   } else {
    $3_1 = HEAP32[$1_1 >> 2];
    $305($2_1 + 8 | 0, $3_1 + 4 | 0, 4, HEAP32[$3_1 >> 2]);
    if (HEAPU32[$2_1 + 12 >> 2] <= $0_1 >>> 0) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 8 >> 2] + ($0_1 << 3) | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAP8[$4_1 | 0] = 0;
    HEAP32[$1_1 + 8 >> 2] = $0_1 + 1;
    $0_1 = $3_1;
   }
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   HEAP8[$5_1 | 0] = $0_1;
   global$0 = $2_1 + 16 | 0;
   return;
  }
  abort();
 }
 
 function $177($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[$0_1 >> 2];
  $1_1 = $1_1 & $4_1;
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $0_1 = 4;
  while (1) {
   $3_1 = $1_1 + $5_1 | 0;
   $372($2_1 + 8 | 0, (HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24)) & -2139062144);
   if (HEAP32[$2_1 + 8 >> 2] == 1) {
    $1_1 = HEAP32[$2_1 + 12 >> 2] + $1_1 & $4_1;
    if (HEAP8[$5_1 + $1_1 | 0] >= 0) {
     $1_1 = __wasm_ctz_i32(HEAP32[$5_1 >> 2] & -2139062144) >>> 3 | 0
    }
    global$0 = $2_1 + 16 | 0;
   } else {
    $1_1 = $0_1 + $1_1 & $4_1;
    $0_1 = $0_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $1_1;
 }
 
 function $178($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 272 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = 0;
  $5_1 = $2_1 | 4;
  while (1) {
   if (($3_1 | 0) == 128) {
    if ($4_1 >>> 0 >= 128) {
     $1_1 = $2_1 + 136 | 0;
     $91($1_1, $2_1, 132);
     $91($0_1, $1_1 | 4, 128);
     global$0 = $2_1 + 272 | 0;
     return;
    }
   } else {
    HEAP8[$3_1 + $5_1 | 0] = HEAPU8[$1_1 + $3_1 | 0];
    $4_1 = HEAP32[$2_1 >> 2] + 1 | 0;
    HEAP32[$2_1 >> 2] = $4_1;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  abort();
 }
 
 function $179($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = 0;
  $5_1 = $2_1 | 4;
  while (1) {
   if (($3_1 | 0) == 64) {
    if ($4_1 >>> 0 >= 64) {
     $1_1 = $2_1 + 72 | 0;
     $91($1_1, $2_1, 68);
     $91($0_1, $1_1 | 4, 64);
     global$0 = $2_1 + 144 | 0;
     return;
    }
   } else {
    HEAP8[$3_1 + $5_1 | 0] = HEAPU8[$1_1 + $3_1 | 0];
    $4_1 = HEAP32[$2_1 >> 2] + 1 | 0;
    HEAP32[$2_1 >> 2] = $4_1;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  abort();
 }
 
 function $180($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0;
  $6_1 = Math_imul($1_1, 826366246);
  __wasm_i64_mul($3_1, 0, $6_1 ^ Math_imul($1_1, -1640531527), 0);
  label$1 : {
   $7_1 = i64toi32_i32$HIGH_BITS;
   if ($3_1 >>> 0 <= $7_1 >>> 0) {
    break label$1
   }
   __wasm_i64_mul($6_1 ^ Math_imul(HEAPU16[($7_1 << 1) + $2_1 >> 1] + $1_1 | 0, -1640531527), 0, $3_1, 0);
   $2_1 = i64toi32_i32$HIGH_BITS;
   if ($2_1 >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   $3_1 = Math_imul($2_1, 12) + $4_1 | 0;
   $4_1 = HEAP32[$3_1 + 8 >> 2];
   $2_1 = HEAP32[$3_1 >> 2] == ($1_1 | 0) ? HEAP32[$3_1 + 4 >> 2] : 0;
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  abort();
 }
 
 function $181($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 416 | 0;
  global$0 = $3_1;
  HEAP16[$3_1 + 220 >> 1] = HEAPU8[1074572] | HEAPU8[1074573] << 8;
  HEAP32[$3_1 + 216 >> 2] = HEAPU8[1074568] | HEAPU8[1074569] << 8 | (HEAPU8[1074570] << 16 | HEAPU8[1074571] << 24);
  $147($3_1 + 234 | 0, 0, 182);
  $4_1 = $3_1 + 230 | 0;
  $5_1 = HEAPU8[1074582] | HEAPU8[1074583] << 8 | (HEAPU8[1074584] << 16 | HEAPU8[1074585] << 24);
  HEAP16[$4_1 >> 1] = $5_1;
  HEAP16[$4_1 + 2 >> 1] = $5_1 >>> 16;
  $4_1 = HEAPU8[1074578] | HEAPU8[1074579] << 8 | (HEAPU8[1074580] << 16 | HEAPU8[1074581] << 24);
  $5_1 = HEAPU8[1074574] | HEAPU8[1074575] << 8 | (HEAPU8[1074576] << 16 | HEAPU8[1074577] << 24);
  HEAP16[$3_1 + 222 >> 1] = $5_1;
  HEAP16[$3_1 + 224 >> 1] = $5_1 >>> 16;
  HEAP16[$3_1 + 226 >> 1] = $4_1;
  HEAP16[$3_1 + 228 >> 1] = $4_1 >>> 16;
  $5_1 = $3_1 + 216 | 0;
  $20($5_1);
  $4_1 = $3_1 + 8 | 0;
  $91($4_1, $5_1, 200);
  HEAP8[$3_1 + 210 | 0] = 0;
  HEAP16[$3_1 + 208 >> 1] = 0;
  $381($4_1, 1074586, 11, 0);
  $277($91($0_1, $4_1, 208), 1074597, 7, $1_1, $2_1);
  global$0 = $3_1 + 416 | 0;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = $3_1;
     $3_1 = HEAPU8[$1_1 + 32 | 0];
     switch (((($3_1 | 0) == 3 ? $6_1 : $3_1) & 255) - 1 | 0) {
     case 1:
      break label$2;
     case 0:
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    $5_1 = 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = $2_1 >>> 1 | 0;
   $5_1 = $2_1 + 1 >>> 1 | 0;
  }
  $2_1 = $4_1 + 1 | 0;
  $3_1 = HEAP32[$1_1 + 28 >> 2];
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = HEAP32[$1_1 + 24 >> 2];
  label$4 : {
   while (1) {
    $2_1 = $2_1 - 1 | 0;
    if (!$2_1) {
     break label$4
    }
    if (!(FUNCTION_TABLE[HEAP32[$3_1 + 16 >> 2]]($1_1, $4_1) | 0)) {
     continue
    }
    break;
   };
   $4_1 = 1114112;
  }
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = $4_1;
 }
 
 function $183($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (!($1_1 >>> 0 < 2 | HEAPU8[$0_1 + 8 | 0] >= HEAPU8[$0_1 | 0])) {
   $4_1 = HEAP32[$0_1 >> 2];
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $0_1 + 8 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $3_1;
   $3_1 = $1_1 - 2 | 0;
   $1_1 = (($1_1 << 3) + $0_1 | 0) - 8 | 0;
   $6_1 = $4_1 & 255;
   while (1) {
    label$3 : {
     if (!$3_1) {
      $2_1 = $1_1;
      break label$3;
     }
     $0_1 = $2_1 + 8 | 0;
     if (HEAPU8[$0_1 | 0] >= $6_1 >>> 0) {
      break label$3
     }
     $7_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $7_1;
     $3_1 = $3_1 - 1 | 0;
     $2_1 = $0_1;
     continue;
    }
    break;
   };
   HEAP32[$2_1 >> 2] = $4_1 & 255;
   HEAP32[$2_1 + 4 >> 2] = $5_1;
  }
 }
 
 function $184($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($1_1 - 15 | 0) {
      case 0:
       $3_1 = 40965;
       break label$3;
      case 3:
       $3_1 = 49158;
       break label$3;
      case 6:
       $3_1 = 57351;
       break label$3;
      case 9:
       $3_1 = 65544;
       break label$3;
      case 1:
      case 2:
      case 4:
      case 5:
      case 7:
      case 8:
       break label$2;
      default:
       break label$4;
      };
     }
     $3_1 = 32772;
     if (($1_1 | 0) != 12) {
      break label$2
     }
    }
    HEAP32[$0_1 + 4 >> 2] = $3_1;
    $1_1 = 0;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 3;
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $1_1 = $117($2_1);
   HEAP32[$0_1 + 8 >> 2] = 1049072;
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   $1_1 = 1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $185($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAPU8[$0_1 + 8 | 0];
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  if ($3_1) {
   $4_1 = $0_1;
   $2_1 = 1;
   label$2 : {
    if ($1_1 & 255) {
     break label$2
    }
    label$3 : {
     if (!HEAPU8[$0_1 + 9 | 0] | ($3_1 | 0) != 1) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 >> 2];
     if (HEAPU8[$1_1 | 0] & 4) {
      break label$3
     }
     $2_1 = 1;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], 1062660, 1) | 0) {
      break label$2
     }
    }
    $0_1 = HEAP32[$0_1 >> 2];
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], 1105712, 1) | 0;
   }
   $1_1 = $2_1;
   HEAP8[$4_1 + 8 | 0] = $1_1;
  }
  return ($1_1 & 255) != 0;
 }
 
 function $186($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $1_1 = HEAP32[$0_1 + 32 >> 2];
  $4_1 = -16 - $1_1 | 0;
  $1_1 = 8388607 - (HEAP32[$0_1 + 36 >> 2] + ($1_1 >>> 0 > 4294967280) | 0) | 0;
  $7_1 = $1_1;
  $2_1 = $1_1 & 524287;
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  $1_1 = -16 - $3_1 | 0;
  $6_1 = 8388607 - (HEAP32[$0_1 + 28 >> 2] + ($3_1 >>> 0 > 4294967280) | 0) | 0;
  $3_1 = $1_1;
  $1_1 = $4_1;
  $4_1 = $6_1 >>> 19 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  HEAP32[$0_1 + 32 >> 2] = $1_1;
  HEAP32[$0_1 + 36 >> 2] = $1_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $5_1 = HEAP32[$0_1 + 16 >> 2];
  $1_1 = -16 - $5_1 | 0;
  $2_1 = 8388607 - (HEAP32[$0_1 + 20 >> 2] + ($5_1 >>> 0 > 4294967280) | 0) | 0;
  $4_1 = $2_1;
  $8_1 = $3_1;
  $3_1 = $1_1;
  $5_1 = $2_1 >>> 19 | 0;
  $2_1 = $8_1 + $5_1 | 0;
  $1_1 = $6_1 & 524287;
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 28 >> 2] = $5_1 >>> 0 > $2_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $4_1 & 524287;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = -16 - $2_1 | 0;
  $2_1 = 8388607 - (HEAP32[$0_1 + 12 >> 2] + ($2_1 >>> 0 > 4294967280) | 0) | 0;
  $6_1 = $2_1;
  $8_1 = $3_1;
  $3_1 = $1_1;
  $4_1 = $2_1 >>> 19 | 0;
  $2_1 = $8_1 + $4_1 | 0;
  HEAP32[$0_1 + 16 >> 2] = $2_1;
  HEAP32[$0_1 + 20 >> 2] = $2_1 >>> 0 < $4_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $2_1 = $6_1 & 524287;
  $5_1 = HEAP32[$0_1 >> 2];
  $1_1 = -304 - $5_1 | 0;
  $6_1 = 8388607 - (HEAP32[$0_1 + 4 >> 2] + ($5_1 >>> 0 > 4294966992) | 0) | 0;
  $4_1 = $6_1 >>> 19 | 0;
  $3_1 = $4_1 + $3_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 12 >> 2] = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $3_1 = __wasm_i64_mul($7_1 >>> 19 | 0, 0, 19, 0) + $1_1 | 0;
  $7_1 = i64toi32_i32$HIGH_BITS + ($6_1 & 524287) | 0;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 >>> 0 > $3_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
 }
 
 function $187($0_1, $1_1, $2_1) {
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[$1_1 >> 2];
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $3_1 + (__wasm_rotl_i32($2_1, 14) ^ __wasm_rotl_i32($2_1, 25) ^ $2_1 >>> 3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $2_1 = HEAP32[$1_1 + 8 >> 2];
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[$1_1 + 12 >> 2] + (__wasm_rotl_i32($2_1, 14) ^ __wasm_rotl_i32($2_1, 25) ^ $2_1 >>> 3) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $2_1 + (__wasm_rotl_i32($1_1, 14) ^ __wasm_rotl_i32($1_1, 25) ^ $1_1 >>> 3) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $1_1 + (__wasm_rotl_i32($3_1, 14) ^ __wasm_rotl_i32($3_1, 25) ^ $3_1 >>> 3) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 
 function $188($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 12 >> 2] = HEAP32[$4_1 >> 2];
  $1_1 = $2_1 + 2 | 0;
  $1_1 = Math_imul($1_1, $1_1);
  $2_1 = $1_1 >>> 0 > 2048 ? $1_1 : 2048;
  $1_1 = $237($2_1, 4, $3_1 + 12 | 0, 1217612, 1217636);
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 12 >> 2];
  if ($1_1) {
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 >> 2] = $1_1 + ($2_1 << 2) | 2;
   $2_1 = 0;
  } else {
   $2_1 = 1
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $189($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = $2_1 & 255;
  $2_1 = 0 - $4_1 | 0;
  $3_1 = HEAP32[$0_1 >> 2];
  $5_1 = $2_1 & ($3_1 ^ HEAP32[$1_1 >> 2]);
  $4_1 = 0 - (($4_1 | 0) != 0) | 0;
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  $6_1 = $4_1 & ($6_1 ^ HEAP32[$1_1 + 4 >> 2]) ^ $6_1;
  HEAP32[$0_1 >> 2] = $3_1 ^ $5_1;
  HEAP32[$0_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = $4_1 & ($3_1 ^ HEAP32[$1_1 + 12 >> 2]) ^ $3_1;
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1 & ($5_1 ^ HEAP32[$1_1 + 8 >> 2]) ^ $5_1;
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = $4_1 & ($3_1 ^ HEAP32[$1_1 + 20 >> 2]) ^ $3_1;
  $5_1 = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$0_1 + 16 >> 2] = $2_1 & ($5_1 ^ HEAP32[$1_1 + 16 >> 2]) ^ $5_1;
  HEAP32[$0_1 + 20 >> 2] = $3_1;
  $3_1 = HEAP32[$0_1 + 28 >> 2];
  $3_1 = $4_1 & ($3_1 ^ HEAP32[$1_1 + 28 >> 2]) ^ $3_1;
  $5_1 = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $2_1 & ($5_1 ^ HEAP32[$1_1 + 24 >> 2]) ^ $5_1;
  HEAP32[$0_1 + 28 >> 2] = $3_1;
  $3_1 = $4_1;
  $4_1 = HEAP32[$0_1 + 36 >> 2];
  $4_1 = $3_1 & ($4_1 ^ HEAP32[$1_1 + 36 >> 2]) ^ $4_1;
  $3_1 = $2_1;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $3_1 & ($2_1 ^ HEAP32[$1_1 + 32 >> 2]) ^ $2_1;
  HEAP32[$0_1 + 36 >> 2] = $4_1;
 }
 
 function $190($0_1, $1_1, $2_1, $3_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[$1_1 + 12 >> 2] + (__wasm_rotl_i32($3_1, 15) ^ __wasm_rotl_i32($3_1, 13) ^ $3_1 >>> 10) | 0;
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  $2_1 = HEAP32[$1_1 + 8 >> 2] + (__wasm_rotl_i32($2_1, 15) ^ __wasm_rotl_i32($2_1, 13) ^ $2_1 >>> 10) | 0;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[$1_1 + 4 >> 2] + (__wasm_rotl_i32($3_1, 15) ^ __wasm_rotl_i32($3_1, 13) ^ $3_1 >>> 10) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = HEAP32[$1_1 >> 2] + (__wasm_rotl_i32($2_1, 15) ^ __wasm_rotl_i32($2_1, 13) ^ $2_1 >>> 10) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $191($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     if ($1_1 & 8) {
      break label$1
     }
     HEAP8[$0_1 + 202 | 0] = $1_1;
     $2_1 = HEAPU8[$0_1 + 201 | 0];
     HEAP8[$0_1 + 201 | 0] = HEAPU8[$0_1 + 200 | 0] + 1;
     HEAP8[$3_1 + 15 | 0] = $1_1;
     HEAP8[$3_1 + 14 | 0] = $2_1;
     $233($0_1, $3_1 + 14 | 0, 2);
     if (!($1_1 & 36) | !HEAPU8[$0_1 + 200 | 0]) {
      break label$2
     }
     $234($0_1);
     break label$2;
    }
    if (HEAPU8[$0_1 + 202 | 0] != ($1_1 & 255)) {
     break label$1
    }
   }
   global$0 = $3_1 + 16 | 0;
   return;
  }
  abort();
 }
 
 function $192($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = Math_imul($0_1, -1640531527);
  label$1 : {
   while (1) {
    $0_1 = HEAP32[305149];
    if (!$0_1) {
     $0_1 = $287()
    }
    $2_1 = $5_1 >>> 0 - HEAP32[$0_1 + 8 >> 2] | 0;
    if ($2_1 >>> 0 >= HEAPU32[$0_1 + 4 >> 2]) {
     break label$1
    }
    $4_1 = HEAP32[$0_1 >> 2];
    $1_1 = $4_1 + ($2_1 << 6) | 0;
    $3_1 = HEAP32[$1_1 + 24 >> 2];
    HEAP32[$1_1 + 24 >> 2] = $3_1 ? $3_1 : 1;
    $1_1 = $1_1 + 24 | 0;
    if ($3_1) {
     $236($1_1)
    }
    if (HEAP32[305149] != ($0_1 | 0)) {
     $341($1_1);
     continue;
    }
    break;
   };
   return ($2_1 << 6) + $4_1 | 0;
  }
  abort();
 }
 
 function $193($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$1_1 >> 2];
  $8_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = $5_1 + 8 | 0;
  $179($6_1 | 4, $1_1 + 12 | 0);
  $2_1 = HEAP32[$1_1 + 80 >> 2];
  HEAP32[$0_1 + 76 >> 2] = HEAP32[$1_1 + 76 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $2_1;
  $3_1 = $1_1 + 84 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 84 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 92 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 100 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 100 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $91($0_1 + 8 | 0, $6_1, 68);
  HEAP32[$0_1 >> 2] = $7_1;
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  global$0 = $5_1 + 80 | 0;
 }
 
 function $194($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $3_1 = 127;
  while (1) {
   $4_1 = $0_1 & 15;
   HEAP8[($2_1 + 16 | 0) + $3_1 | 0] = $4_1 + ($4_1 >>> 0 < 10 ? 48 : 55);
   $3_1 = $3_1 - 1 | 0;
   $4_1 = $0_1 >>> 0 > 15;
   $0_1 = $0_1 >>> 4 | 0;
   if ($4_1) {
    continue
   }
   break;
  };
  $348($2_1 + 8 | 0, $2_1 + 16 | 0, $3_1 + 1 | 0);
  $0_1 = $75($1_1, 1, 1062661, 2, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 144 | 0;
  return $0_1;
 }
 
 function $195($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $3_1 = 127;
  while (1) {
   $4_1 = $0_1 & 15;
   HEAP8[($2_1 + 16 | 0) + $3_1 | 0] = $4_1 + ($4_1 >>> 0 < 10 ? 48 : 87);
   $3_1 = $3_1 - 1 | 0;
   $4_1 = $0_1 >>> 0 > 15;
   $0_1 = $0_1 >>> 4 | 0;
   if ($4_1) {
    continue
   }
   break;
  };
  $348($2_1 + 8 | 0, $2_1 + 16 | 0, $3_1 + 1 | 0);
  $0_1 = $75($1_1, 1, 1062661, 2, HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 144 | 0;
  return $0_1;
 }
 
 function $196($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1 & -4;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1_1 = $1_1 & 2 ? 0 : $2_1;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & 3 | HEAP32[$0_1 + 4 >> 2] & -4;
  }
  $1_1 = $0_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0_1 & -4;
  if ($2_1) {
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 3 | HEAP32[$1_1 >> 2] & -4;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
  }
  HEAP32[$1_1 + 4 >> 2] = $0_1 & 3;
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & 3;
 }
 
 function $197($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = 0 - $2_1 | 0;
  $3_1 = $4_1 & HEAP32[$1_1 >> 2];
  $5_1 = $2_1 - 1 | 0;
  $7_1 = $2_1 >> 31;
  $6_1 = 0 - ($7_1 + (($2_1 | 0) != 0) | 0) | 0;
  $2_1 = $7_1 - !$2_1 | 0;
  $7_1 = $6_1 & HEAP32[$1_1 + 4 >> 2] | $2_1 & HEAP32[$0_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = $3_1 | $5_1 & HEAP32[$0_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $3_1 = $6_1 & HEAP32[$1_1 + 12 >> 2] | $2_1 & HEAP32[$0_1 + 12 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $4_1 & HEAP32[$1_1 + 8 >> 2] | $5_1 & HEAP32[$0_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  $3_1 = $6_1 & HEAP32[$1_1 + 20 >> 2] | $2_1 & HEAP32[$0_1 + 20 >> 2];
  HEAP32[$0_1 + 16 >> 2] = $4_1 & HEAP32[$1_1 + 16 >> 2] | $5_1 & HEAP32[$0_1 + 16 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $3_1;
  $3_1 = $6_1 & HEAP32[$1_1 + 28 >> 2] | $2_1 & HEAP32[$0_1 + 28 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $4_1 & HEAP32[$1_1 + 24 >> 2] | $5_1 & HEAP32[$0_1 + 24 >> 2];
  HEAP32[$0_1 + 28 >> 2] = $3_1;
  $2_1 = $6_1 & HEAP32[$1_1 + 36 >> 2] | $2_1 & HEAP32[$0_1 + 36 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $4_1 & HEAP32[$1_1 + 32 >> 2] | $5_1 & HEAP32[$0_1 + 32 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $2_1;
 }
 
 function $198($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $11_1 = HEAP32[$0_1 + 12 >> 2];
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 36 >> 2];
  $4_1 = $2_1;
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $10_1 = HEAP32[$0_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 >> 2];
  $7_1 = __wasm_i64_mul($2_1 >>> 16 | 0, 0, 977, 1);
  $2_1 = $1_1 + $7_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
  $1_1 = $2_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $2_1;
  $9_1 = $1_1;
  $3_1 = $1_1 >>> 20 | 0;
  $2_1 = $5_1 + $3_1 | 0;
  $1_1 = $11_1;
  $1_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $11_1 = $2_1;
  $3_1 = $7_1 | $2_1;
  $2_1 = $1_1;
  $5_1 = $9_1 | $1_1;
  $8_1 = $3_1;
  $6_1 = $1_1 >>> 20 | 0;
  $12_1 = $6_1 + HEAP32[$0_1 + 16 >> 2] | 0;
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = $6_1 >>> 0 > $12_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $1_1 = $8_1 | $12_1;
  $13_1 = $3_1 | $5_1;
  $5_1 = HEAP32[$0_1 + 28 >> 2];
  $8_1 = $1_1;
  $6_1 = $3_1 >>> 20 | 0;
  $0_1 = $6_1 + HEAP32[$0_1 + 24 >> 2] | 0;
  $1_1 = $5_1;
  $1_1 = $0_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $0_1;
  $6_1 = $8_1 | $0_1;
  $0_1 = $1_1;
  $13_1 = ($1_1 | $13_1) & 1048575;
  $8_1 = $4_1 & 65535;
  $4_1 = $10_1;
  $10_1 = $1_1 >>> 20 | 0;
  $4_1 = $4_1 + $10_1 | 0;
  $1_1 = $8_1;
  $1_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  return !($4_1 | $6_1 | ($1_1 | $13_1)) | ($4_1 & ($5_1 & ($12_1 & (($7_1 ^ 976) & $11_1)))) == -1 & ($0_1 & ($3_1 & (($9_1 ^ 1) & $2_1)) & ($1_1 ^ 983040)) == 1048575;
 }
 
 function $199($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = __wasm_i64_mul($1_1, 0, 801750719, 1076732275);
  $2_1 = $5_1 + $6_1 | 0;
  $3_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
  $9_1 = $2_1;
  HEAP32[$0_1 >> 2] = $2_1;
  $3_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $11_1 = HEAP32[$0_1 + 12 >> 2];
  $10_1 = HEAP32[$0_1 + 8 >> 2];
  $4_1 = __wasm_i64_mul($1_1, 0, 1354194884, 1162945305);
  $8_1 = $10_1 + $4_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
  $2_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $12_1 = $8_1;
  $3_1 = ($3_1 | 0) == ($7_1 | 0) & $5_1 >>> 0 > $9_1 >>> 0 | $3_1 >>> 0 < $7_1 >>> 0;
  $4_1 = $8_1 + $3_1 | 0;
  $6_1 = $4_1;
  HEAP32[$0_1 + 8 >> 2] = $4_1;
  $5_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  $8_1 = HEAP32[$0_1 + 16 >> 2];
  $4_1 = $1_1;
  $7_1 = $8_1 + $4_1 | 0;
  $9_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = $9_1;
  $3_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $4_1 = ($2_1 | 0) == ($5_1 | 0) & $12_1 >>> 0 > $6_1 >>> 0 | $2_1 >>> 0 > $5_1 >>> 0;
  $5_1 = $4_1 + (($2_1 | 0) == ($11_1 | 0) & $10_1 >>> 0 > $12_1 >>> 0 | $2_1 >>> 0 < $11_1 >>> 0) | 0;
  $2_1 = $5_1 >>> 0 < $4_1 >>> 0;
  $4_1 = $5_1;
  $10_1 = $7_1 + $5_1 | 0;
  $5_1 = $2_1 + $3_1 | 0;
  $2_1 = $10_1;
  HEAP32[$0_1 + 16 >> 2] = $2_1;
  $5_1 = $4_1 >>> 0 > $2_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  HEAP32[$0_1 + 20 >> 2] = $5_1;
  $6_1 = HEAP32[$0_1 + 28 >> 2];
  $4_1 = ($3_1 | 0) == ($9_1 | 0) & $7_1 >>> 0 < $8_1 >>> 0 | $3_1 >>> 0 < $9_1 >>> 0;
  $3_1 = ($3_1 | 0) == ($5_1 | 0) & $2_1 >>> 0 < $7_1 >>> 0 | $3_1 >>> 0 > $5_1 >>> 0;
  $2_1 = $4_1 + $3_1 | 0;
  $4_1 = $2_1 >>> 0 < $3_1 >>> 0;
  $3_1 = $2_1;
  $2_1 = $2_1 + HEAP32[$0_1 + 24 >> 2] | 0;
  $6_1 = $4_1 + $6_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 28 >> 2] = $2_1 >>> 0 < $3_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
  return $1_1;
 }
 
 function $200($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (($2_1 | 0) == 32) {
    $2_1 = 1;
    $4_1 = $0_1 + 1 | 0;
    $3_1 = HEAP32[304883];
    $6_1 = global$0 - 32 | 0;
    global$0 = $6_1;
    label$3 : {
     if (!$1_1) {
      FUNCTION_TABLE[HEAP32[$3_1 + 176 >> 2]](1218489, HEAP32[$3_1 + 180 >> 2]);
      break label$3;
     }
     $5_1 = $309($6_1, $1_1);
     $3_1 = $6_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $6_1 + 16 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $6_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$6_1 + 4 >> 2] = 0;
    }
    global$0 = $6_1 + 32 | 0;
    if (!$5_1) {
     HEAP8[$4_1 | 0] = 4;
     break label$1;
    }
    $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $2_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP8[$4_1 | 0] = $2_1;
    HEAP8[$4_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $3_1;
    HEAP8[$4_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $3_1 >>> 24;
    $2_1 = $1_1 + 24 | 0;
    $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $5_1 = $4_1 + 24 | 0;
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP8[$5_1 | 0] = $2_1;
    HEAP8[$5_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $3_1;
    HEAP8[$5_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $3_1 >>> 24;
    $2_1 = $1_1 + 16 | 0;
    $3_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
    $5_1 = $4_1 + 16 | 0;
    $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
    HEAP8[$5_1 | 0] = $2_1;
    HEAP8[$5_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $2_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $2_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $3_1;
    HEAP8[$5_1 + 5 | 0] = $3_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $3_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $3_1 >>> 24;
    $1_1 = $1_1 + 8 | 0;
    $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $4_1 = $4_1 + 8 | 0;
    $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP8[$4_1 | 0] = $1_1;
    HEAP8[$4_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$4_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$4_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$4_1 + 4 | 0] = $2_1;
    HEAP8[$4_1 + 5 | 0] = $2_1 >>> 8;
    HEAP8[$4_1 + 6 | 0] = $2_1 >>> 16;
    HEAP8[$4_1 + 7 | 0] = $2_1 >>> 24;
    $2_1 = 0;
    break label$1;
   }
   HEAP8[$0_1 + 1 | 0] = 4;
   $2_1 = 1;
  }
  HEAP8[$0_1 | 0] = $2_1;
 }
 
 function $201($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1_1 | 0) >= 0) {
    label$3 : {
     if (!$2_1) {
      $314($3_1 + 8 | 0, $1_1, 1);
      $4_1 = HEAP32[$3_1 + 12 >> 2];
      $2_1 = HEAP32[$3_1 + 8 >> 2];
      break label$3;
     }
     $292($3_1, $1_1, 1, 1);
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = HEAP32[$3_1 >> 2];
    }
    if ($2_1) {
     break label$1
    }
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0]($1_1, 1);
   }
   abort();
  }
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $202($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = HEAP32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  $8_1 = HEAP32[$1_1 + 12 >> 2];
  $9_1 = HEAP32[$1_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  $5_1 = HEAP32[$1_1 + 24 >> 2];
  $10_1 = HEAP32[$1_1 + 28 >> 2];
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $3_1 >>> 8;
  HEAP32[$0_1 + 36 >> 2] = 0;
  $3_1 = $3_1 << 22 | $1_1 >>> 10;
  $11_1 = $1_1 << 22 & -4194304;
  $1_1 = $10_1;
  HEAP32[$0_1 + 24 >> 2] = $11_1 | (($1_1 & 1073741823) << 2 | $5_1 >>> 30);
  HEAP32[$0_1 + 28 >> 2] = $3_1 & 1073741823 | $1_1 >>> 30;
  $1_1 = $2_1;
  $2_1 = $9_1;
  HEAP32[$0_1 + 16 >> 2] = ($1_1 & 1048575) << 12 | $2_1 >>> 20;
  HEAP32[$0_1 + 20 >> 2] = $5_1 & 1073741823 | $1_1 >>> 20;
  $2_1 = $2_1 << 10 & 1073740800;
  $1_1 = $8_1;
  HEAP32[$0_1 + 8 >> 2] = ($1_1 & 1023) << 22 | $4_1 >>> 10;
  HEAP32[$0_1 + 12 >> 2] = $1_1 >>> 10 | $2_1;
  HEAP32[$0_1 >> 2] = $6_1;
  HEAP32[$0_1 + 4 >> 2] = ($4_1 << 20 | $7_1) & 1073741823;
 }
 
 function $203($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  $4_1 = HEAP32[$1_1 + 12 >> 2];
  $8_1 = HEAP32[$1_1 + 16 >> 2];
  $9_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $5_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 + 28 >> 2];
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $6_1 & 1048575;
  $2_1 = $2_1 << 8;
  $1_1 = $3_1;
  $3_1 = $1_1 >>> 22 | 0;
  HEAP32[$0_1 + 32 >> 2] = ($1_1 & 4194303) << 10 | $5_1 >>> 22;
  HEAP32[$0_1 + 36 >> 2] = $2_1 | $3_1;
  $3_1 = $5_1;
  $2_1 = $1_1 << 30 | $3_1 >>> 2;
  $1_1 = $9_1;
  HEAP32[$0_1 + 24 >> 2] = $1_1 | $3_1 << 30 & -1073741824;
  HEAP32[$0_1 + 28 >> 2] = $2_1 & 1048575;
  $2_1 = $8_1;
  $3_1 = $1_1 << 20 | $2_1 >>> 12;
  $1_1 = $4_1;
  HEAP32[$0_1 + 16 >> 2] = $2_1 << 20 & -1048576 | $1_1 >>> 10;
  HEAP32[$0_1 + 20 >> 2] = $3_1 & 1048575;
  $4_1 = $7_1;
  $2_1 = $1_1 << 10 | $4_1 >>> 22;
  HEAP32[$0_1 + 8 >> 2] = $4_1 << 10 & -1024 | $6_1 >>> 20;
  HEAP32[$0_1 + 12 >> 2] = $2_1 & 1048575;
 }
 
 function $204($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $147($5_1 + 8 | 0, 0, 40);
  while (1) {
   if (($6_1 | 0) == 40) {
    $170($0_1, $5_1 + 8 | 0, 1065552);
    global$0 = $5_1 + 48 | 0;
   } else {
    $8_1 = $2_1 + $6_1 | 0;
    $3_1 = HEAP32[$8_1 >> 2];
    $8_1 = HEAP32[$8_1 + 4 >> 2];
    $10_1 = $3_1;
    $9_1 = $4_1 >>> 20 | 0;
    $3_1 = $1_1 + $6_1 | 0;
    $7_1 = $9_1 + HEAP32[$3_1 >> 2] | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $7_1 >>> 0 < $9_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
    $3_1 = $7_1;
    $7_1 = $10_1 + $3_1 | 0;
    $4_1 = $4_1 + $8_1 | 0;
    $4_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
    $3_1 = ($5_1 + 8 | 0) + $6_1 | 0;
    HEAP32[$3_1 >> 2] = $7_1;
    HEAP32[$3_1 + 4 >> 2] = $4_1 & 1048575;
    $6_1 = $6_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $205($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $316($5_1 + 8 | 0, $0_1, $3_1);
  $365($5_1, HEAP32[$5_1 + 8 >> 2], HEAP32[$5_1 + 12 >> 2], $4_1);
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  if ($4_1 >>> 0 <= $2_1 >>> 0) {
   $2_1 = HEAP32[$5_1 >> 2];
   while (1) {
    if ($4_1) {
     HEAP8[$2_1 | 0] = HEAPU8[$2_1 | 0] ^ HEAPU8[$1_1 | 0];
     $4_1 = $4_1 - 1 | 0;
     $2_1 = $2_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   global$0 = $5_1 + 16 | 0;
   return;
  }
  abort();
 }
 
 function $206($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $2_1 = $91($2_1, $1_1, 40);
  $186($2_1);
  $91($0_1 + 40 | 0, $1_1 + 40 | 0, 40);
  $91($0_1 + 80 | 0, $1_1 + 80 | 0, 40);
  $3_1 = $2_1 + 40 | 0;
  $91($3_1, $1_1 + 120 | 0, 40);
  $186($3_1);
  $91($91($0_1, $2_1, 40) + 120 | 0, $3_1, 40);
  global$0 = $2_1 + 80 | 0;
 }
 
 function $207($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  var $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $15_1 = $7_1;
  $16_1 = $7_1 + $1_1 | 0;
  $7_1 = $2_1 + $8_1 | 0;
  $7_1 = $16_1 >>> 0 < $15_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $8_1 = $16_1;
  $15_1 = __wasm_rotl_i64($5_1, $6_1, 63);
  $16_1 = i64toi32_i32$HIGH_BITS;
  $17_1 = $8_1;
  $15_1 = __wasm_rotl_i64($5_1, $6_1, 56) ^ $15_1;
  $8_1 = $5_1;
  $5_1 = $6_1 >>> 7 | 0;
  $8_1 = $15_1 ^ (($6_1 & 127) << 25 | $8_1 >>> 7);
  $6_1 = $17_1 + $8_1 | 0;
  $5_1 = ($5_1 ^ (i64toi32_i32$HIGH_BITS ^ $16_1)) + $7_1 | 0;
  $5_1 = $6_1 >>> 0 < $8_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $7_1 = $6_1;
  $6_1 = __wasm_rotl_i64($11_1, $12_1, 45);
  $8_1 = i64toi32_i32$HIGH_BITS;
  $15_1 = __wasm_rotl_i64($11_1, $12_1, 3) ^ $6_1;
  $16_1 = i64toi32_i32$HIGH_BITS ^ $8_1;
  $11_1 = (($12_1 & 63) << 26 | $11_1 >>> 6) ^ $15_1;
  $8_1 = $11_1 + $7_1 | 0;
  $5_1 = ($12_1 >>> 6 ^ $16_1) + $5_1 | 0;
  $6_1 = $0_1;
  HEAP32[$6_1 >> 2] = $8_1;
  HEAP32[$6_1 + 4 >> 2] = $8_1 >>> 0 < $11_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $5_1 = __wasm_rotl_i64($1_1, $2_1, 63);
  $6_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = __wasm_rotl_i64($1_1, $2_1, 56) ^ $5_1;
  $5_1 = $2_1 >>> 7 | 0;
  $2_1 = $3_1 + ($7_1 ^ (($2_1 & 127) << 25 | $1_1 >>> 7)) | 0;
  $1_1 = $4_1 + ($5_1 ^ (i64toi32_i32$HIGH_BITS ^ $6_1)) | 0;
  $1_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $2_1 + $9_1 | 0;
  $5_1 = $1_1 + $10_1 | 0;
  $5_1 = $2_1 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $1_1 = $2_1;
  $2_1 = __wasm_rotl_i64($13_1, $14_1, 45);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = (($14_1 & 63) << 26 | $13_1 >>> 6) ^ (__wasm_rotl_i64($13_1, $14_1, 3) ^ $2_1);
  $2_1 = $4_1 + $1_1 | 0;
  $7_1 = (i64toi32_i32$HIGH_BITS ^ $3_1 ^ $14_1 >>> 6) + $5_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1 >>> 0 < $4_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
 }
 
 function $208($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 272 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = $1_1 | 4;
  while (1) {
   if (($2_1 | 0) == 128) {
    $2_1 = $1_1 + 136 | 0;
    $91($2_1, $1_1, 132);
    $91($0_1, $2_1 | 4, 128);
    global$0 = $1_1 + 272 | 0;
   } else {
    HEAP8[$2_1 + $3_1 | 0] = 54;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $209($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 272 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = $1_1 | 4;
  while (1) {
   if (($2_1 | 0) == 128) {
    $2_1 = $1_1 + 136 | 0;
    $91($2_1, $1_1, 132);
    $91($0_1, $2_1 | 4, 128);
    global$0 = $1_1 + 272 | 0;
   } else {
    HEAP8[$2_1 + $3_1 | 0] = 92;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $210($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 144 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = $1_1 | 4;
  while (1) {
   if (($2_1 | 0) == 64) {
    $2_1 = $1_1 + 72 | 0;
    $91($2_1, $1_1, 68);
    $91($0_1, $2_1 | 4, 64);
    global$0 = $1_1 + 144 | 0;
   } else {
    HEAP8[$2_1 + $3_1 | 0] = 54;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $211($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 144 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = $1_1 | 4;
  while (1) {
   if (($2_1 | 0) == 64) {
    $2_1 = $1_1 + 72 | 0;
    $91($2_1, $1_1, 68);
    $91($0_1, $2_1 | 4, 64);
    global$0 = $1_1 + 144 | 0;
   } else {
    HEAP8[$2_1 + $3_1 | 0] = 92;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $212($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 144 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = $1_1 | 4;
  while (1) {
   if (($2_1 | 0) == 64) {
    $2_1 = $1_1 + 72 | 0;
    $91($2_1, $1_1, 68);
    $91($0_1, $2_1 | 4, 64);
    global$0 = $1_1 + 144 | 0;
   } else {
    HEAP8[$2_1 + $3_1 | 0] = 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $213($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $0_1;
  $6_1 = HEAP32[$0_1 + 32 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$0_1 + 36 >> 2];
  $5_1 = __wasm_i64_mul($4_1 >>> 16 | 0, 0, 977, 1);
  $2_1 = $2_1 + $5_1 | 0;
  $0_1 = i64toi32_i32$HIGH_BITS + $3_1 | 0;
  $0_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$1_1 + 4 >> 2] = $0_1 & 1048575;
  $2_1 = $0_1 >>> 20 | 0;
  $3_1 = $2_1 + HEAP32[$1_1 + 8 >> 2] | 0;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$1_1 + 8 >> 2] = $3_1;
  $0_1 = $3_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1 & 1048575;
  $2_1 = $0_1 >>> 20 | 0;
  $3_1 = $2_1 + HEAP32[$1_1 + 16 >> 2] | 0;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3_1;
  $0_1 = $3_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP32[$1_1 + 20 >> 2] = $0_1 & 1048575;
  $2_1 = $0_1 >>> 20 | 0;
  $3_1 = $2_1 + HEAP32[$1_1 + 24 >> 2] | 0;
  $0_1 = HEAP32[$1_1 + 28 >> 2];
  $0_1 = $3_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  HEAP32[$1_1 + 24 >> 2] = $3_1;
  HEAP32[$1_1 + 28 >> 2] = $0_1 & 1048575;
  $3_1 = $0_1 >>> 20 | 0;
  $2_1 = $3_1 + $6_1 | 0;
  $0_1 = $4_1 & 65535;
  HEAP32[$1_1 + 32 >> 2] = $2_1;
  HEAP32[$1_1 + 36 >> 2] = $3_1 >>> 0 > $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
 }
 
 function $214($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = $1_1;
  $6_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  $7_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $1_1 = $1_1 + 6 | 0;
  $8_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  $3_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $1_1 = $2_1 + 19 | 0;
  $9_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  $4_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $1_1 = $2_1 + 24 | 0;
  $10_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  $1_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $2_1 = $2_1 + 12 | 0;
  $5_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
  $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
  HEAP32[$0_1 + 16 >> 2] = ($5_1 & 63) << 26 | $2_1 >>> 6;
  HEAP32[$0_1 + 20 >> 2] = $5_1 >>> 6 & 524287;
  HEAP32[$0_1 + 8 >> 2] = ($3_1 & 7) << 29 | $8_1 >>> 3;
  HEAP32[$0_1 + 12 >> 2] = $3_1 >>> 3 & 524287;
  HEAP32[$0_1 >> 2] = $6_1;
  HEAP32[$0_1 + 4 >> 2] = $7_1 & 524287;
  HEAP32[$0_1 + 24 >> 2] = ($4_1 & 1) << 31 | $9_1 >>> 1;
  HEAP32[$0_1 + 28 >> 2] = $4_1 >>> 1 & 524287;
  HEAP32[$0_1 + 32 >> 2] = ($1_1 & 4095) << 20 | $10_1 >>> 12;
  HEAP32[$0_1 + 36 >> 2] = $1_1 >>> 12 & 524287;
 }
 
 function $215($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAPU8[$0_1 + 4 | 0];
  if (HEAPU8[$0_1 + 5 | 0]) {
   $3_1 = $0_1;
   $2_1 = 1;
   label$2 : {
    if ($1_1 & 255) {
     break label$2
    }
    $0_1 = HEAP32[$0_1 >> 2];
    if (!(HEAPU8[$0_1 | 0] & 4)) {
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], 1105713, 2) | 0;
     break label$2;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], 1062656, 1) | 0;
   }
   $1_1 = $2_1;
   HEAP8[$3_1 + 4 | 0] = $1_1;
  }
  return ($1_1 & 255) != 0;
 }
 
 function $216($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = HEAP32[$0_1 + 96 >> 2];
  HEAP32[$0_1 + 96 >> 2] = $3_1 + $2_1;
  $24_1 = $0_1 + 32 | 0;
  $3_1 = $3_1 & 63;
  while (1) {
   $67_1 = 64 - $3_1 | 0;
   if ($67_1 >>> 0 <= $2_1 >>> 0) {
    $91($3_1 + $24_1 | 0, $1_1, $67_1);
    $3_1 = HEAP32[$24_1 + 56 >> 2];
    $5_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $3_1 = HEAP32[$24_1 + 60 >> 2];
    $6_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $16_1 = $5_1 + (__wasm_rotl_i32($6_1, 14) ^ $6_1 >>> 3 ^ __wasm_rotl_i32($6_1, 25)) | 0;
    $3_1 = HEAP32[$24_1 >> 2];
    $12_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $3_1 = HEAP32[$24_1 + 36 >> 2];
    $33_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $3_1 = HEAP32[$24_1 + 4 >> 2];
    $13_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | ($3_1 >>> 8 & 65280 | $3_1 >>> 24);
    $3_1 = ($33_1 + ($12_1 + (__wasm_rotl_i32($13_1, 14) ^ $13_1 >>> 3 ^ __wasm_rotl_i32($13_1, 25)) | 0) | 0) + (__wasm_rotl_i32($5_1, 13) ^ $5_1 >>> 10 ^ __wasm_rotl_i32($5_1, 15)) | 0;
    $4_1 = HEAP32[$24_1 + 28 >> 2];
    $27_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$24_1 + 32 >> 2];
    $56_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $7_1 = ($27_1 + (__wasm_rotl_i32($56_1, 14) ^ $56_1 >>> 3 ^ __wasm_rotl_i32($56_1, 25)) | 0) + $3_1 | 0;
    $4_1 = HEAP32[$24_1 + 20 >> 2];
    $19_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$24_1 + 24 >> 2];
    $21_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $8_1 = ($19_1 + (__wasm_rotl_i32($21_1, 14) ^ $21_1 >>> 3 ^ __wasm_rotl_i32($21_1, 25)) | 0) + $5_1 | 0;
    $4_1 = HEAP32[$24_1 + 48 >> 2];
    $30_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$24_1 + 12 >> 2];
    $26_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$24_1 + 16 >> 2];
    $20_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $9_1 = $30_1 + ($26_1 + (__wasm_rotl_i32($20_1, 14) ^ $20_1 >>> 3 ^ __wasm_rotl_i32($20_1, 25)) | 0) | 0;
    $4_1 = HEAP32[$24_1 + 40 >> 2];
    $31_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $11_1 = $7_1;
    $10_1 = $8_1;
    $4_1 = HEAP32[$24_1 + 8 >> 2];
    $14_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $7_1 = ($31_1 + ($13_1 + (__wasm_rotl_i32($14_1, 14) ^ $14_1 >>> 3 ^ __wasm_rotl_i32($14_1, 25)) | 0) | 0) + (__wasm_rotl_i32($6_1, 13) ^ $6_1 >>> 10 ^ __wasm_rotl_i32($6_1, 15)) | 0;
    $8_1 = (__wasm_rotl_i32($7_1, 13) ^ $7_1 >>> 10 ^ __wasm_rotl_i32($7_1, 15)) + $9_1 | 0;
    $9_1 = $10_1 + (__wasm_rotl_i32($8_1, 13) ^ $8_1 >>> 10 ^ __wasm_rotl_i32($8_1, 15)) | 0;
    $10_1 = $11_1 + (__wasm_rotl_i32($9_1, 13) ^ $9_1 >>> 10 ^ __wasm_rotl_i32($9_1, 15)) | 0;
    $11_1 = $16_1 + $10_1 | 0;
    $4_1 = HEAP32[$24_1 + 52 >> 2];
    $58_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $25_1 = ($30_1 + (__wasm_rotl_i32($58_1, 14) ^ $58_1 >>> 3 ^ __wasm_rotl_i32($58_1, 25)) | 0) + $9_1 | 0;
    $4_1 = HEAP32[$24_1 + 44 >> 2];
    $40_1 = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = ($31_1 + (__wasm_rotl_i32($40_1, 14) ^ $40_1 >>> 3 ^ __wasm_rotl_i32($40_1, 25)) | 0) + $8_1 | 0;
    $18_1 = ($56_1 + (__wasm_rotl_i32($33_1, 14) ^ $33_1 >>> 3 ^ __wasm_rotl_i32($33_1, 25)) | 0) + $7_1 | 0;
    $17_1 = ($21_1 + (__wasm_rotl_i32($27_1, 14) ^ $27_1 >>> 3 ^ __wasm_rotl_i32($27_1, 25)) | 0) + $6_1 | 0;
    $15_1 = $58_1 + ($20_1 + (__wasm_rotl_i32($19_1, 14) ^ $19_1 >>> 3 ^ __wasm_rotl_i32($19_1, 25)) | 0) | 0;
    $16_1 = ($40_1 + ($14_1 + (__wasm_rotl_i32($26_1, 14) ^ $26_1 >>> 3 ^ __wasm_rotl_i32($26_1, 25)) | 0) | 0) + (__wasm_rotl_i32($3_1, 13) ^ $3_1 >>> 10 ^ __wasm_rotl_i32($3_1, 15)) | 0;
    $15_1 = $15_1 + (__wasm_rotl_i32($16_1, 13) ^ $16_1 >>> 10 ^ __wasm_rotl_i32($16_1, 15)) | 0;
    $17_1 = $17_1 + (__wasm_rotl_i32($15_1, 13) ^ $15_1 >>> 10 ^ __wasm_rotl_i32($15_1, 15)) | 0;
    $18_1 = $18_1 + (__wasm_rotl_i32($17_1, 13) ^ $17_1 >>> 10 ^ __wasm_rotl_i32($17_1, 15)) | 0;
    $22_1 = $4_1 + (__wasm_rotl_i32($18_1, 13) ^ $18_1 >>> 10 ^ __wasm_rotl_i32($18_1, 15)) | 0;
    $25_1 = $25_1 + (__wasm_rotl_i32($22_1, 13) ^ $22_1 >>> 10 ^ __wasm_rotl_i32($22_1, 15)) | 0;
    $28_1 = $11_1 + (__wasm_rotl_i32($25_1, 13) ^ $25_1 >>> 10 ^ __wasm_rotl_i32($25_1, 15)) | 0;
    $34_1 = __wasm_rotl_i32($28_1, 14) ^ $28_1 >>> 3 ^ __wasm_rotl_i32($28_1, 25);
    $4_1 = ($58_1 + (__wasm_rotl_i32($5_1, 14) ^ $5_1 >>> 3 ^ __wasm_rotl_i32($5_1, 25)) | 0) + $17_1 | 0;
    $11_1 = ($40_1 + (__wasm_rotl_i32($30_1, 14) ^ $30_1 >>> 3 ^ __wasm_rotl_i32($30_1, 25)) | 0) + $15_1 | 0;
    $35_1 = (((__wasm_rotl_i32($31_1, 14) ^ $31_1 >>> 3 ^ __wasm_rotl_i32($31_1, 25)) + $33_1 | 0) + $16_1 | 0) + (__wasm_rotl_i32($10_1, 13) ^ $10_1 >>> 10 ^ __wasm_rotl_i32($10_1, 15)) | 0;
    $41_1 = $11_1 + (__wasm_rotl_i32($35_1, 13) ^ $35_1 >>> 10 ^ __wasm_rotl_i32($35_1, 15)) | 0;
    $4_1 = $4_1 + (__wasm_rotl_i32($41_1, 13) ^ $41_1 >>> 10 ^ __wasm_rotl_i32($41_1, 15)) | 0;
    $42_1 = (((__wasm_rotl_i32($3_1, 14) ^ $3_1 >>> 3 ^ __wasm_rotl_i32($3_1, 25)) + $6_1 | 0) + $18_1 | 0) + (__wasm_rotl_i32($4_1, 13) ^ $4_1 >>> 10 ^ __wasm_rotl_i32($4_1, 15)) | 0;
    $11_1 = $42_1 + ((__wasm_rotl_i32($10_1, 14) ^ $10_1 >>> 3 ^ __wasm_rotl_i32($10_1, 25)) + $17_1 | 0) | 0;
    $23_1 = ((__wasm_rotl_i32($9_1, 14) ^ $9_1 >>> 3 ^ __wasm_rotl_i32($9_1, 25)) + $15_1 | 0) + $4_1 | 0;
    $29_1 = ((__wasm_rotl_i32($8_1, 14) ^ $8_1 >>> 3 ^ __wasm_rotl_i32($8_1, 25)) + $16_1 | 0) + $41_1 | 0;
    $43_1 = (((__wasm_rotl_i32($7_1, 14) ^ $7_1 >>> 3 ^ __wasm_rotl_i32($7_1, 25)) + $3_1 | 0) + $35_1 | 0) + (__wasm_rotl_i32($28_1, 13) ^ $28_1 >>> 10 ^ __wasm_rotl_i32($28_1, 15)) | 0;
    $44_1 = $29_1 + (__wasm_rotl_i32($43_1, 13) ^ $43_1 >>> 10 ^ __wasm_rotl_i32($43_1, 15)) | 0;
    $45_1 = $23_1 + (__wasm_rotl_i32($44_1, 13) ^ $44_1 >>> 10 ^ __wasm_rotl_i32($44_1, 15)) | 0;
    $46_1 = $11_1 + (__wasm_rotl_i32($45_1, 13) ^ $45_1 >>> 10 ^ __wasm_rotl_i32($45_1, 15)) | 0;
    $11_1 = $46_1 + ($4_1 + $34_1 | 0) | 0;
    $23_1 = ((__wasm_rotl_i32($25_1, 14) ^ $25_1 >>> 3 ^ __wasm_rotl_i32($25_1, 25)) + $41_1 | 0) + $45_1 | 0;
    $29_1 = ((__wasm_rotl_i32($22_1, 14) ^ $22_1 >>> 3 ^ __wasm_rotl_i32($22_1, 25)) + $35_1 | 0) + $44_1 | 0;
    $36_1 = ((__wasm_rotl_i32($18_1, 14) ^ $18_1 >>> 3 ^ __wasm_rotl_i32($18_1, 25)) + $10_1 | 0) + $43_1 | 0;
    $37_1 = ((__wasm_rotl_i32($17_1, 14) ^ $17_1 >>> 3 ^ __wasm_rotl_i32($17_1, 25)) + $9_1 | 0) + $28_1 | 0;
    $38_1 = ((__wasm_rotl_i32($15_1, 14) ^ $15_1 >>> 3 ^ __wasm_rotl_i32($15_1, 25)) + $8_1 | 0) + $25_1 | 0;
    $34_1 = (((__wasm_rotl_i32($16_1, 14) ^ $16_1 >>> 3 ^ __wasm_rotl_i32($16_1, 25)) + $7_1 | 0) + $22_1 | 0) + (__wasm_rotl_i32($42_1, 13) ^ $42_1 >>> 10 ^ __wasm_rotl_i32($42_1, 15)) | 0;
    $38_1 = $38_1 + (__wasm_rotl_i32($34_1, 13) ^ $34_1 >>> 10 ^ __wasm_rotl_i32($34_1, 15)) | 0;
    $37_1 = $37_1 + (__wasm_rotl_i32($38_1, 13) ^ $38_1 >>> 10 ^ __wasm_rotl_i32($38_1, 15)) | 0;
    $36_1 = $36_1 + (__wasm_rotl_i32($37_1, 13) ^ $37_1 >>> 10 ^ __wasm_rotl_i32($37_1, 15)) | 0;
    $47_1 = $29_1 + (__wasm_rotl_i32($36_1, 13) ^ $36_1 >>> 10 ^ __wasm_rotl_i32($36_1, 15)) | 0;
    $48_1 = $23_1 + (__wasm_rotl_i32($47_1, 13) ^ $47_1 >>> 10 ^ __wasm_rotl_i32($47_1, 15)) | 0;
    $49_1 = $11_1 + (__wasm_rotl_i32($48_1, 13) ^ $48_1 >>> 10 ^ __wasm_rotl_i32($48_1, 15)) | 0;
    $29_1 = __wasm_rotl_i32($49_1, 14) ^ $49_1 >>> 3 ^ __wasm_rotl_i32($49_1, 25);
    $11_1 = ((__wasm_rotl_i32($4_1, 14) ^ $4_1 >>> 3 ^ __wasm_rotl_i32($4_1, 25)) + $25_1 | 0) + $37_1 | 0;
    $23_1 = ((__wasm_rotl_i32($41_1, 14) ^ $41_1 >>> 3 ^ __wasm_rotl_i32($41_1, 25)) + $22_1 | 0) + $38_1 | 0;
    $50_1 = (((__wasm_rotl_i32($35_1, 14) ^ $35_1 >>> 3 ^ __wasm_rotl_i32($35_1, 25)) + $18_1 | 0) + $34_1 | 0) + (__wasm_rotl_i32($46_1, 13) ^ $46_1 >>> 10 ^ __wasm_rotl_i32($46_1, 15)) | 0;
    $51_1 = $23_1 + (__wasm_rotl_i32($50_1, 13) ^ $50_1 >>> 10 ^ __wasm_rotl_i32($50_1, 15)) | 0;
    $52_1 = $11_1 + (__wasm_rotl_i32($51_1, 13) ^ $51_1 >>> 10 ^ __wasm_rotl_i32($51_1, 15)) | 0;
    $11_1 = $29_1 + $52_1 | 0;
    $29_1 = (((__wasm_rotl_i32($42_1, 14) ^ $42_1 >>> 3 ^ __wasm_rotl_i32($42_1, 25)) + $28_1 | 0) + $36_1 | 0) + (__wasm_rotl_i32($52_1, 13) ^ $52_1 >>> 10 ^ __wasm_rotl_i32($52_1, 15)) | 0;
    $23_1 = $29_1 + ((__wasm_rotl_i32($46_1, 14) ^ $46_1 >>> 3 ^ __wasm_rotl_i32($46_1, 25)) + $37_1 | 0) | 0;
    $32_1 = ((__wasm_rotl_i32($45_1, 14) ^ $45_1 >>> 3 ^ __wasm_rotl_i32($45_1, 25)) + $38_1 | 0) + $52_1 | 0;
    $39_1 = ((__wasm_rotl_i32($44_1, 14) ^ $44_1 >>> 3 ^ __wasm_rotl_i32($44_1, 25)) + $34_1 | 0) + $51_1 | 0;
    $53_1 = (((__wasm_rotl_i32($43_1, 14) ^ $43_1 >>> 3 ^ __wasm_rotl_i32($43_1, 25)) + $42_1 | 0) + $50_1 | 0) + (__wasm_rotl_i32($49_1, 13) ^ $49_1 >>> 10 ^ __wasm_rotl_i32($49_1, 15)) | 0;
    $59_1 = $39_1 + (__wasm_rotl_i32($53_1, 13) ^ $53_1 >>> 10 ^ __wasm_rotl_i32($53_1, 15)) | 0;
    $60_1 = $32_1 + (__wasm_rotl_i32($59_1, 13) ^ $59_1 >>> 10 ^ __wasm_rotl_i32($59_1, 15)) | 0;
    $61_1 = $23_1 + (__wasm_rotl_i32($60_1, 13) ^ $60_1 >>> 10 ^ __wasm_rotl_i32($60_1, 15)) | 0;
    $23_1 = $60_1 + ((__wasm_rotl_i32($48_1, 14) ^ $48_1 >>> 3 ^ __wasm_rotl_i32($48_1, 25)) + $51_1 | 0) | 0;
    $32_1 = $59_1 + ((__wasm_rotl_i32($47_1, 14) ^ $47_1 >>> 3 ^ __wasm_rotl_i32($47_1, 25)) + $50_1 | 0) | 0;
    $54_1 = ((__wasm_rotl_i32($36_1, 14) ^ $36_1 >>> 3 ^ __wasm_rotl_i32($36_1, 25)) + $46_1 | 0) + $53_1 | 0;
    $55_1 = ((__wasm_rotl_i32($37_1, 14) ^ $37_1 >>> 3 ^ __wasm_rotl_i32($37_1, 25)) + $45_1 | 0) + $49_1 | 0;
    $57_1 = ((__wasm_rotl_i32($38_1, 14) ^ $38_1 >>> 3 ^ __wasm_rotl_i32($38_1, 25)) + $44_1 | 0) + $48_1 | 0;
    $39_1 = (((__wasm_rotl_i32($34_1, 14) ^ $34_1 >>> 3 ^ __wasm_rotl_i32($34_1, 25)) + $43_1 | 0) + $47_1 | 0) + (__wasm_rotl_i32($29_1, 13) ^ $29_1 >>> 10 ^ __wasm_rotl_i32($29_1, 15)) | 0;
    $57_1 = $57_1 + (__wasm_rotl_i32($39_1, 13) ^ $39_1 >>> 10 ^ __wasm_rotl_i32($39_1, 15)) | 0;
    $62_1 = $55_1 + (__wasm_rotl_i32($57_1, 13) ^ $57_1 >>> 10 ^ __wasm_rotl_i32($57_1, 15)) | 0;
    $63_1 = $54_1 + (__wasm_rotl_i32($62_1, 13) ^ $62_1 >>> 10 ^ __wasm_rotl_i32($62_1, 15)) | 0;
    $64_1 = $32_1 + (__wasm_rotl_i32($63_1, 13) ^ $63_1 >>> 10 ^ __wasm_rotl_i32($63_1, 15)) | 0;
    $68_1 = $23_1 + (__wasm_rotl_i32($64_1, 13) ^ $64_1 >>> 10 ^ __wasm_rotl_i32($64_1, 15)) | 0;
    $69_1 = ($11_1 + $61_1 | 0) + (__wasm_rotl_i32($68_1, 13) ^ $68_1 >>> 10 ^ __wasm_rotl_i32($68_1, 15)) | 0;
    $73_1 = HEAP32[$0_1 + 28 >> 2];
    $32_1 = HEAP32[$0_1 + 16 >> 2];
    $11_1 = $73_1 + (__wasm_rotl_i32($32_1, 26) ^ __wasm_rotl_i32($32_1, 21) ^ __wasm_rotl_i32($32_1, 7)) | 0;
    $70_1 = HEAP32[$0_1 + 24 >> 2];
    $65_1 = HEAP32[$0_1 + 20 >> 2];
    $54_1 = ($12_1 + ($11_1 + ($70_1 ^ ($70_1 ^ $65_1) & $32_1) | 0) | 0) + 1116352408 | 0;
    $74_1 = HEAP32[$0_1 + 12 >> 2];
    $12_1 = $54_1 + $74_1 | 0;
    $11_1 = __wasm_rotl_i32($12_1, 26) ^ __wasm_rotl_i32($12_1, 21);
    $55_1 = ((($13_1 + $70_1 | 0) + ($12_1 & ($32_1 ^ $65_1) ^ $65_1) | 0) + (__wasm_rotl_i32($12_1, 7) ^ $11_1) | 0) + 1899447441 | 0;
    $72_1 = HEAP32[$0_1 + 8 >> 2];
    $13_1 = $55_1 + $72_1 | 0;
    $11_1 = __wasm_rotl_i32($13_1, 26) ^ __wasm_rotl_i32($13_1, 21);
    $23_1 = ((($14_1 + $65_1 | 0) + (($12_1 ^ $32_1) & $13_1 ^ $32_1) | 0) + (__wasm_rotl_i32($13_1, 7) ^ $11_1) | 0) - 1245643825 | 0;
    $66_1 = HEAP32[$0_1 + 4 >> 2];
    $14_1 = $23_1 + $66_1 | 0;
    $11_1 = __wasm_rotl_i32($14_1, 26) ^ __wasm_rotl_i32($14_1, 21);
    $75_1 = ((($26_1 + $32_1 | 0) + ($12_1 ^ $14_1 & ($12_1 ^ $13_1)) | 0) + (__wasm_rotl_i32($14_1, 7) ^ $11_1) | 0) - 373957723 | 0;
    $26_1 = HEAP32[$0_1 >> 2];
    $11_1 = $75_1 + $26_1 | 0;
    $71_1 = __wasm_rotl_i32($11_1, 26) ^ __wasm_rotl_i32($11_1, 21);
    $71_1 = ((($12_1 + $20_1 | 0) + ($11_1 & ($13_1 ^ $14_1) ^ $13_1) | 0) + (__wasm_rotl_i32($11_1, 7) ^ $71_1) | 0) + 961987163 | 0;
    $12_1 = $54_1 + (($72_1 & ($26_1 | $66_1) | $26_1 & $66_1) + (__wasm_rotl_i32($26_1, 30) ^ __wasm_rotl_i32($26_1, 19) ^ __wasm_rotl_i32($26_1, 10)) | 0) | 0;
    $20_1 = $71_1 + $12_1 | 0;
    $54_1 = __wasm_rotl_i32($20_1, 26) ^ __wasm_rotl_i32($20_1, 21);
    $54_1 = ((($13_1 + $19_1 | 0) + ($14_1 ^ $20_1 & ($14_1 ^ $11_1)) | 0) + (__wasm_rotl_i32($20_1, 7) ^ $54_1) | 0) + 1508970993 | 0;
    $13_1 = $55_1 + ((($12_1 | $26_1) & $66_1 | $12_1 & $26_1) + (__wasm_rotl_i32($12_1, 30) ^ __wasm_rotl_i32($12_1, 19) ^ __wasm_rotl_i32($12_1, 10)) | 0) | 0;
    $19_1 = $54_1 + $13_1 | 0;
    $55_1 = __wasm_rotl_i32($19_1, 26) ^ __wasm_rotl_i32($19_1, 21);
    $55_1 = ((($14_1 + $21_1 | 0) + ($11_1 ^ $19_1 & ($11_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($19_1, 7) ^ $55_1) | 0) - 1841331548 | 0;
    $14_1 = $23_1 + ((($12_1 | $13_1) & $26_1 | $12_1 & $13_1) + (__wasm_rotl_i32($13_1, 30) ^ __wasm_rotl_i32($13_1, 19) ^ __wasm_rotl_i32($13_1, 10)) | 0) | 0;
    $21_1 = $55_1 + $14_1 | 0;
    $23_1 = __wasm_rotl_i32($21_1, 26) ^ __wasm_rotl_i32($21_1, 21);
    $27_1 = ((($11_1 + $27_1 | 0) + ($20_1 ^ $21_1 & ($19_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($21_1, 7) ^ $23_1) | 0) - 1424204075 | 0;
    $12_1 = $75_1 + ((($13_1 | $14_1) & $12_1 | $13_1 & $14_1) + (__wasm_rotl_i32($14_1, 30) ^ __wasm_rotl_i32($14_1, 19) ^ __wasm_rotl_i32($14_1, 10)) | 0) | 0;
    $11_1 = $27_1 + $12_1 | 0;
    $23_1 = __wasm_rotl_i32($11_1, 26) ^ __wasm_rotl_i32($11_1, 21);
    $56_1 = ((($20_1 + $56_1 | 0) + ($19_1 ^ $11_1 & ($19_1 ^ $21_1)) | 0) + (__wasm_rotl_i32($11_1, 7) ^ $23_1) | 0) - 670586216 | 0;
    $13_1 = $71_1 + (($13_1 & ($12_1 | $14_1) | $12_1 & $14_1) + (__wasm_rotl_i32($12_1, 30) ^ __wasm_rotl_i32($12_1, 19) ^ __wasm_rotl_i32($12_1, 10)) | 0) | 0;
    $20_1 = $56_1 + $13_1 | 0;
    $23_1 = __wasm_rotl_i32($20_1, 26) ^ __wasm_rotl_i32($20_1, 21);
    $33_1 = ((($19_1 + $33_1 | 0) + ($21_1 ^ $20_1 & ($11_1 ^ $21_1)) | 0) + (__wasm_rotl_i32($20_1, 7) ^ $23_1) | 0) + 310598401 | 0;
    $14_1 = $54_1 + (($14_1 & ($12_1 | $13_1) | $12_1 & $13_1) + (__wasm_rotl_i32($13_1, 30) ^ __wasm_rotl_i32($13_1, 19) ^ __wasm_rotl_i32($13_1, 10)) | 0) | 0;
    $19_1 = $33_1 + $14_1 | 0;
    $23_1 = __wasm_rotl_i32($19_1, 26) ^ __wasm_rotl_i32($19_1, 21);
    $31_1 = ((($21_1 + $31_1 | 0) + ($11_1 ^ $19_1 & ($11_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($19_1, 7) ^ $23_1) | 0) + 607225278 | 0;
    $12_1 = $55_1 + (($12_1 & ($13_1 | $14_1) | $13_1 & $14_1) + (__wasm_rotl_i32($14_1, 30) ^ __wasm_rotl_i32($14_1, 19) ^ __wasm_rotl_i32($14_1, 10)) | 0) | 0;
    $21_1 = $31_1 + $12_1 | 0;
    $23_1 = __wasm_rotl_i32($21_1, 26) ^ __wasm_rotl_i32($21_1, 21);
    $40_1 = ((($11_1 + $40_1 | 0) + ($20_1 ^ $21_1 & ($19_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($21_1, 7) ^ $23_1) | 0) + 1426881987 | 0;
    $13_1 = $27_1 + (($13_1 & ($12_1 | $14_1) | $12_1 & $14_1) + (__wasm_rotl_i32($12_1, 30) ^ __wasm_rotl_i32($12_1, 19) ^ __wasm_rotl_i32($12_1, 10)) | 0) | 0;
    $11_1 = $40_1 + $13_1 | 0;
    $27_1 = __wasm_rotl_i32($11_1, 26) ^ __wasm_rotl_i32($11_1, 21);
    $30_1 = ((($20_1 + $30_1 | 0) + ($19_1 ^ $11_1 & ($19_1 ^ $21_1)) | 0) + (__wasm_rotl_i32($11_1, 7) ^ $27_1) | 0) + 1925078388 | 0;
    $14_1 = $56_1 + (($14_1 & ($12_1 | $13_1) | $12_1 & $13_1) + (__wasm_rotl_i32($13_1, 30) ^ __wasm_rotl_i32($13_1, 19) ^ __wasm_rotl_i32($13_1, 10)) | 0) | 0;
    $20_1 = $30_1 + $14_1 | 0;
    $27_1 = __wasm_rotl_i32($20_1, 26) ^ __wasm_rotl_i32($20_1, 21);
    $27_1 = ((($19_1 + $58_1 | 0) + ($21_1 ^ $20_1 & ($11_1 ^ $21_1)) | 0) + (__wasm_rotl_i32($20_1, 7) ^ $27_1) | 0) - 2132889090 | 0;
    $12_1 = $33_1 + (($12_1 & ($13_1 | $14_1) | $13_1 & $14_1) + (__wasm_rotl_i32($14_1, 30) ^ __wasm_rotl_i32($14_1, 19) ^ __wasm_rotl_i32($14_1, 10)) | 0) | 0;
    $19_1 = $27_1 + $12_1 | 0;
    $33_1 = __wasm_rotl_i32($19_1, 26) ^ __wasm_rotl_i32($19_1, 21);
    $21_1 = ((($5_1 + $21_1 | 0) + ($11_1 ^ $19_1 & ($11_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($19_1, 7) ^ $33_1) | 0) - 1680079193 | 0;
    $5_1 = $31_1 + (($13_1 & ($12_1 | $14_1) | $12_1 & $14_1) + (__wasm_rotl_i32($12_1, 30) ^ __wasm_rotl_i32($12_1, 19) ^ __wasm_rotl_i32($12_1, 10)) | 0) | 0;
    $13_1 = $21_1 + $5_1 | 0;
    $31_1 = __wasm_rotl_i32($13_1, 26) ^ __wasm_rotl_i32($13_1, 21);
    $11_1 = ((($6_1 + $11_1 | 0) + ($20_1 ^ $13_1 & ($19_1 ^ $20_1)) | 0) + (__wasm_rotl_i32($13_1, 7) ^ $31_1) | 0) - 1046744716 | 0;
    $6_1 = $40_1 + (($14_1 & ($5_1 | $12_1) | $5_1 & $12_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $14_1 = $11_1 + $6_1 | 0;
    $31_1 = __wasm_rotl_i32($14_1, 26) ^ __wasm_rotl_i32($14_1, 21);
    $20_1 = ((($3_1 + $20_1 | 0) + ($19_1 ^ $14_1 & ($13_1 ^ $19_1)) | 0) + (__wasm_rotl_i32($14_1, 7) ^ $31_1) | 0) - 459576895 | 0;
    $3_1 = $30_1 + (($12_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    $12_1 = $20_1 + $3_1 | 0;
    $30_1 = __wasm_rotl_i32($12_1, 26) ^ __wasm_rotl_i32($12_1, 21);
    $19_1 = ((($7_1 + $19_1 | 0) + ($13_1 ^ $12_1 & ($13_1 ^ $14_1)) | 0) + (__wasm_rotl_i32($12_1, 7) ^ $30_1) | 0) - 272742522 | 0;
    $5_1 = $27_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $7_1 = $19_1 + $5_1 | 0;
    $30_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $13_1 = ((($13_1 + $16_1 | 0) + ($14_1 ^ $7_1 & ($12_1 ^ $14_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $30_1) | 0) + 264347078 | 0;
    $6_1 = $21_1 + (($6_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $16_1 = $13_1 + $6_1 | 0;
    $21_1 = __wasm_rotl_i32($16_1, 26) ^ __wasm_rotl_i32($16_1, 21);
    $14_1 = ((($8_1 + $14_1 | 0) + ($12_1 ^ $16_1 & ($7_1 ^ $12_1)) | 0) + (__wasm_rotl_i32($16_1, 7) ^ $21_1) | 0) + 604807628 | 0;
    $3_1 = $11_1 + (($3_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    $8_1 = $14_1 + $3_1 | 0;
    $11_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $12_1 = ((($12_1 + $15_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $16_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $11_1) | 0) + 770255983 | 0;
    $5_1 = $20_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $15_1 = $12_1 + $5_1 | 0;
    $11_1 = __wasm_rotl_i32($15_1, 26) ^ __wasm_rotl_i32($15_1, 21);
    $11_1 = ((($7_1 + $9_1 | 0) + ($16_1 ^ $15_1 & ($8_1 ^ $16_1)) | 0) + (__wasm_rotl_i32($15_1, 7) ^ $11_1) | 0) + 1249150122 | 0;
    $6_1 = $19_1 + (($6_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $7_1 = $11_1 + $6_1 | 0;
    $9_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $16_1 = ((($16_1 + $17_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $15_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $9_1) | 0) + 1555081692 | 0;
    $3_1 = $13_1 + (($3_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    $9_1 = $16_1 + $3_1 | 0;
    $17_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $17_1 = ((($8_1 + $10_1 | 0) + ($15_1 ^ $9_1 & ($7_1 ^ $15_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $17_1) | 0) + 1996064986 | 0;
    $5_1 = $14_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $8_1 = $17_1 + $5_1 | 0;
    $10_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $15_1 = ((($15_1 + $18_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $10_1) | 0) - 1740746414 | 0;
    $6_1 = $12_1 + (($6_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $10_1 = $15_1 + $6_1 | 0;
    $18_1 = __wasm_rotl_i32($10_1, 26) ^ __wasm_rotl_i32($10_1, 21);
    $18_1 = ((($7_1 + $35_1 | 0) + ($9_1 ^ $10_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($10_1, 7) ^ $18_1) | 0) - 1473132947 | 0;
    $3_1 = $11_1 + (($3_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    $7_1 = $18_1 + $3_1 | 0;
    $35_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $22_1 = ((($9_1 + $22_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $35_1) | 0) - 1341970488 | 0;
    $5_1 = $16_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $9_1 = $22_1 + $5_1 | 0;
    $16_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $16_1 = ((($8_1 + $41_1 | 0) + ($10_1 ^ $9_1 & ($7_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $16_1) | 0) - 1084653625 | 0;
    $6_1 = $17_1 + (($6_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $8_1 = $16_1 + $6_1 | 0;
    $17_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $17_1 = ((($10_1 + $25_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $17_1) | 0) - 958395405 | 0;
    $3_1 = $15_1 + (($3_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    $10_1 = $17_1 + $3_1 | 0;
    $15_1 = __wasm_rotl_i32($10_1, 26) ^ __wasm_rotl_i32($10_1, 21);
    $15_1 = ((($4_1 + $7_1 | 0) + ($9_1 ^ $10_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($10_1, 7) ^ $15_1) | 0) - 710438585 | 0;
    $4_1 = $18_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $7_1 = $15_1 + $4_1 | 0;
    $5_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $18_1 = ((($9_1 + $28_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $5_1) | 0) + 113926993 | 0;
    $5_1 = $22_1 + (($6_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $6_1 = $18_1 + $5_1 | 0;
    $9_1 = __wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21);
    $22_1 = ((($8_1 + $42_1 | 0) + ($10_1 ^ $6_1 & ($7_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($6_1, 7) ^ $9_1) | 0) + 338241895 | 0;
    $3_1 = $16_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $8_1 = $22_1 + $3_1 | 0;
    $9_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $10_1 = ((($10_1 + $43_1 | 0) + ($7_1 ^ $8_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $9_1) | 0) + 666307205 | 0;
    $4_1 = $17_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $9_1 = $10_1 + $4_1 | 0;
    $16_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $16_1 = ((($7_1 + $34_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $16_1) | 0) + 773529912 | 0;
    $5_1 = $15_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $7_1 = $16_1 + $5_1 | 0;
    $15_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $15_1 = ((($6_1 + $44_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $15_1) | 0) + 1294757372 | 0;
    $3_1 = $18_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $6_1 = $15_1 + $3_1 | 0;
    $17_1 = __wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21);
    $17_1 = ((($8_1 + $38_1 | 0) + ($9_1 ^ $6_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($6_1, 7) ^ $17_1) | 0) + 1396182291 | 0;
    $4_1 = $22_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $8_1 = $17_1 + $4_1 | 0;
    $18_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $18_1 = ((($9_1 + $45_1 | 0) + ($7_1 ^ $8_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $18_1) | 0) + 1695183700 | 0;
    $5_1 = $10_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $9_1 = $18_1 + $5_1 | 0;
    $10_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $10_1 = ((($7_1 + $37_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $10_1) | 0) + 1986661051 | 0;
    $3_1 = $16_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $7_1 = $10_1 + $3_1 | 0;
    $16_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $16_1 = ((($6_1 + $46_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $16_1) | 0) - 2117940946 | 0;
    $4_1 = $15_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $6_1 = $16_1 + $4_1 | 0;
    $15_1 = __wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21);
    $15_1 = ((($8_1 + $36_1 | 0) + ($9_1 ^ $6_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($6_1, 7) ^ $15_1) | 0) - 1838011259 | 0;
    $5_1 = $17_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $8_1 = $15_1 + $5_1 | 0;
    $17_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $17_1 = ((($9_1 + $50_1 | 0) + ($7_1 ^ $8_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $17_1) | 0) - 1564481375 | 0;
    $3_1 = $18_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $9_1 = $17_1 + $3_1 | 0;
    $18_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $18_1 = ((($7_1 + $47_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $18_1) | 0) - 1474664885 | 0;
    $4_1 = $10_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $7_1 = $18_1 + $4_1 | 0;
    $10_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $10_1 = ((($6_1 + $51_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $10_1) | 0) - 1035236496 | 0;
    $5_1 = $16_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $6_1 = $10_1 + $5_1 | 0;
    $16_1 = __wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21);
    $16_1 = ((($8_1 + $48_1 | 0) + ($9_1 ^ $6_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($6_1, 7) ^ $16_1) | 0) - 949202525 | 0;
    $3_1 = $15_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $8_1 = $16_1 + $3_1 | 0;
    $15_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $15_1 = ((($9_1 + $52_1 | 0) + ($7_1 ^ $8_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $15_1) | 0) - 778901479 | 0;
    $4_1 = $17_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $9_1 = $15_1 + $4_1 | 0;
    $17_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $17_1 = ((($7_1 + $49_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $17_1) | 0) - 694614492 | 0;
    $5_1 = $18_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $7_1 = $17_1 + $5_1 | 0;
    $18_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $18_1 = ((($6_1 + $29_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $18_1) | 0) - 200395387 | 0;
    $3_1 = $10_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $6_1 = $18_1 + $3_1 | 0;
    $10_1 = __wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21);
    $22_1 = ((($8_1 + $53_1 | 0) + ($9_1 ^ $6_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($6_1, 7) ^ $10_1) | 0) + 275423344 | 0;
    $4_1 = $16_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $8_1 = $22_1 + $4_1 | 0;
    $10_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $16_1 = ((($9_1 + $39_1 | 0) + ($7_1 ^ $8_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $10_1) | 0) + 430227734 | 0;
    $5_1 = $15_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $9_1 = $16_1 + $5_1 | 0;
    $10_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $15_1 = ((($7_1 + $59_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $10_1) | 0) + 506948616 | 0;
    $3_1 = $17_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $7_1 = $15_1 + $3_1 | 0;
    $10_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $17_1 = ((($6_1 + $57_1 | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $10_1) | 0) + 659060556 | 0;
    $4_1 = $18_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $10_1 = $17_1 + $4_1 | 0;
    $6_1 = __wasm_rotl_i32($10_1, 26) ^ __wasm_rotl_i32($10_1, 21);
    $18_1 = ((($8_1 + $60_1 | 0) + ($9_1 ^ $10_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($10_1, 7) ^ $6_1) | 0) + 883997877 | 0;
    $5_1 = $22_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $8_1 = $18_1 + $5_1 | 0;
    $6_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $22_1 = ((($9_1 + $62_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $6_1) | 0) + 958139571 | 0;
    $3_1 = $16_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $6_1 = $22_1 + $3_1 | 0;
    $16_1 = (((__wasm_rotl_i32($50_1, 14) ^ $50_1 >>> 3 ^ __wasm_rotl_i32($50_1, 25)) + $36_1 | 0) + $39_1 | 0) + (__wasm_rotl_i32($61_1, 13) ^ $61_1 >>> 10 ^ __wasm_rotl_i32($61_1, 15)) | 0;
    $25_1 = ((($7_1 + $61_1 | 0) + ($10_1 ^ $6_1 & ($8_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21) ^ __wasm_rotl_i32($6_1, 7)) | 0) + 1322822218 | 0;
    $4_1 = $15_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $7_1 = $25_1 + $4_1 | 0;
    $9_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $28_1 = ((($10_1 + $63_1 | 0) + ($8_1 ^ $7_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $9_1) | 0) + 1537002063 | 0;
    $5_1 = $17_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $9_1 = $28_1 + $5_1 | 0;
    $10_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $17_1 = ((($8_1 + $16_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $10_1) | 0) + 1747873779 | 0;
    $3_1 = $18_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $8_1 = $17_1 + $3_1 | 0;
    $10_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $18_1 = ((($6_1 + $64_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $10_1) | 0) + 1955562222 | 0;
    $4_1 = $22_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $6_1 = $18_1 + $4_1 | 0;
    $11_1 = $62_1 + ((__wasm_rotl_i32($52_1, 14) ^ $52_1 >>> 3 ^ __wasm_rotl_i32($52_1, 25)) + $48_1 | 0) | 0;
    $10_1 = ($57_1 + ((__wasm_rotl_i32($51_1, 14) ^ $51_1 >>> 3 ^ __wasm_rotl_i32($51_1, 25)) + $47_1 | 0) | 0) + (__wasm_rotl_i32($16_1, 13) ^ $16_1 >>> 10 ^ __wasm_rotl_i32($16_1, 15)) | 0;
    $15_1 = $11_1 + (__wasm_rotl_i32($10_1, 13) ^ $10_1 >>> 10 ^ __wasm_rotl_i32($10_1, 15)) | 0;
    $22_1 = ((($7_1 + $10_1 | 0) + ($9_1 ^ $6_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($6_1, 26) ^ __wasm_rotl_i32($6_1, 21) ^ __wasm_rotl_i32($6_1, 7)) | 0) + 2024104815 | 0;
    $5_1 = $25_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $7_1 = $22_1 + $5_1 | 0;
    $10_1 = __wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21);
    $25_1 = ((($9_1 + $68_1 | 0) + ($8_1 ^ $7_1 & ($6_1 ^ $8_1)) | 0) + (__wasm_rotl_i32($7_1, 7) ^ $10_1) | 0) - 2067236844 | 0;
    $3_1 = $28_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $9_1 = $25_1 + $3_1 | 0;
    $10_1 = __wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21);
    $28_1 = ((($8_1 + $15_1 | 0) + ($6_1 ^ $9_1 & ($6_1 ^ $7_1)) | 0) + (__wasm_rotl_i32($9_1, 7) ^ $10_1) | 0) - 1933114872 | 0;
    $4_1 = $17_1 + (($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    $8_1 = $28_1 + $4_1 | 0;
    $10_1 = __wasm_rotl_i32($8_1, 26) ^ __wasm_rotl_i32($8_1, 21);
    $6_1 = ((($6_1 + $69_1 | 0) + ($7_1 ^ $8_1 & ($7_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($8_1, 7) ^ $10_1) | 0) - 1866530822 | 0;
    $5_1 = $18_1 + (($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0;
    $10_1 = $6_1 + $5_1 | 0;
    HEAP32[$0_1 + 28 >> 2] = $10_1 + $73_1;
    $3_1 = $22_1 + (($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) + (__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) | 0) | 0;
    $4_1 = $25_1 + ((__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) + ($4_1 & ($3_1 | $5_1) | $3_1 & $5_1) | 0) | 0;
    $5_1 = $28_1 + ((__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) + ($5_1 & ($3_1 | $4_1) | $3_1 & $4_1) | 0) | 0;
    $6_1 = $6_1 + ((__wasm_rotl_i32($5_1, 30) ^ __wasm_rotl_i32($5_1, 19) ^ __wasm_rotl_i32($5_1, 10)) + ($3_1 & ($4_1 | $5_1) | $4_1 & $5_1) | 0) | 0;
    HEAP32[$0_1 + 12 >> 2] = $6_1 + $74_1;
    $11_1 = $3_1;
    $15_1 = (((__wasm_rotl_i32($29_1, 14) ^ $29_1 >>> 3 ^ __wasm_rotl_i32($29_1, 25)) + $49_1 | 0) + $63_1 | 0) + (__wasm_rotl_i32($15_1, 13) ^ $15_1 >>> 10 ^ __wasm_rotl_i32($15_1, 15)) | 0;
    $3_1 = ((($15_1 + $7_1 | 0) + ($9_1 ^ $10_1 & ($8_1 ^ $9_1)) | 0) + (__wasm_rotl_i32($10_1, 26) ^ __wasm_rotl_i32($10_1, 21) ^ __wasm_rotl_i32($10_1, 7)) | 0) - 1538233109 | 0;
    $7_1 = $11_1 + $3_1 | 0;
    HEAP32[$0_1 + 24 >> 2] = $7_1 + $70_1;
    $3_1 = $3_1 + (($4_1 & ($5_1 | $6_1) | $5_1 & $6_1) + (__wasm_rotl_i32($6_1, 30) ^ __wasm_rotl_i32($6_1, 19) ^ __wasm_rotl_i32($6_1, 10)) | 0) | 0;
    HEAP32[$0_1 + 8 >> 2] = $3_1 + $72_1;
    $11_1 = $4_1;
    $4_1 = ((($9_1 + (($16_1 + ((__wasm_rotl_i32($53_1, 14) ^ $53_1 >>> 3 ^ __wasm_rotl_i32($53_1, 25)) + $29_1 | 0) | 0) + (__wasm_rotl_i32($69_1, 13) ^ $69_1 >>> 10 ^ __wasm_rotl_i32($69_1, 15)) | 0) | 0) + ($8_1 ^ $7_1 & ($8_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($7_1, 26) ^ __wasm_rotl_i32($7_1, 21) ^ __wasm_rotl_i32($7_1, 7)) | 0) - 1090935817 | 0;
    $9_1 = $11_1 + $4_1 | 0;
    HEAP32[$0_1 + 20 >> 2] = $9_1 + $65_1;
    $4_1 = $4_1 + (($5_1 & ($3_1 | $6_1) | $3_1 & $6_1) + (__wasm_rotl_i32($3_1, 30) ^ __wasm_rotl_i32($3_1, 19) ^ __wasm_rotl_i32($3_1, 10)) | 0) | 0;
    HEAP32[$0_1 + 4 >> 2] = $4_1 + $66_1;
    $11_1 = $5_1 + $32_1 | 0;
    $5_1 = ((($8_1 + ((((__wasm_rotl_i32($39_1, 14) ^ $39_1 >>> 3 ^ __wasm_rotl_i32($39_1, 25)) + $53_1 | 0) + $64_1 | 0) + (__wasm_rotl_i32($15_1, 13) ^ $15_1 >>> 10 ^ __wasm_rotl_i32($15_1, 15)) | 0) | 0) + ($10_1 ^ $9_1 & ($7_1 ^ $10_1)) | 0) + (__wasm_rotl_i32($9_1, 26) ^ __wasm_rotl_i32($9_1, 21) ^ __wasm_rotl_i32($9_1, 7)) | 0) - 965641998 | 0;
    HEAP32[$0_1 + 16 >> 2] = $11_1 + $5_1;
    (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $5_1 + ((($6_1 & ($3_1 | $4_1) | $3_1 & $4_1) + $26_1 | 0) + (__wasm_rotl_i32($4_1, 30) ^ __wasm_rotl_i32($4_1, 19) ^ __wasm_rotl_i32($4_1, 10)) | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2_1 = $2_1 - $67_1 | 0;
    $1_1 = $1_1 + $67_1 | 0;
    $3_1 = 0;
    continue;
   }
   break;
  };
  if ($2_1) {
   $91($3_1 + $24_1 | 0, $1_1, $2_1)
  }
 }
 
 function $217() {
  var $0_1 = 0, $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  label$1 : {
   if (!HEAPU8[1219469]) {
    (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = $41(1219468)), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
    if (!HEAPU8[1219469]) {
     $1_1 = HEAP32[304868];
     HEAP32[304868] = 0;
     if (!$1_1) {
      break label$1
     }
     FUNCTION_TABLE[$1_1 | 0]($0_1 + 16 | 0);
     HEAP8[1219469] = 1;
     HEAP32[304866] = HEAP32[$0_1 + 24 >> 2];
     $1_1 = HEAP32[$0_1 + 20 >> 2];
     HEAP32[304864] = HEAP32[$0_1 + 16 >> 2];
     HEAP32[304865] = $1_1;
    }
    $121($0_1 + 12 | 0);
   }
   global$0 = $0_1 + 32 | 0;
   return;
  }
  abort();
 }
 
 function $218($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (($1_1 & 536870911) != ($1_1 | 0)) {
     break label$2
    }
    $1_1 = $1_1 << 3;
    if (($1_1 | 0) < 0) {
     break label$2
    }
    $346($2_1 + 8 | 0, $1_1, 4);
    $3_1 = HEAP32[$2_1 + 8 >> 2];
    if ($3_1) {
     break label$1
    }
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0]($1_1, 4);
   }
   abort();
  }
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 >>> 3;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $219($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $191($0_1, 7, 0);
  label$1 : {
   while (1) {
    if ($2_1) {
     $3_1 = HEAPU8[$0_1 + 200 | 0];
     if ($3_1 >>> 0 > 199) {
      break label$1
     }
     $3_1 = $0_1 + $3_1 | 0;
     $4_1 = HEAPU8[$3_1 | 0];
     HEAP8[$3_1 | 0] = 0;
     HEAP8[$1_1 | 0] = $4_1;
     $3_1 = HEAPU8[$0_1 + 200 | 0] + 1 | 0;
     HEAP8[$0_1 + 200 | 0] = $3_1;
     if (($3_1 & 255) == 166) {
      $234($0_1)
     }
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 - 1 | 0;
     continue;
    }
    break;
   };
   return;
  }
  abort();
 }
 
 function $220($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1_1 = $2_1 << 2;
  $2_1 = ($3_1 << 3) + 16384 | 0;
  $1_1 = ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) + 65543 | 0;
  $3_1 = __wasm_memory_grow($1_1 >>> 16 | 0);
  if (($3_1 | 0) == -1) {
   $1_1 = 1
  } else {
   $3_1 = $3_1 << 16;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 >> 2] = ($1_1 & -65536) + $3_1 | 2;
   $1_1 = 0;
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $221($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1) {
      $6_1 = $147($5_1, 0, 64);
      $7_1 = $0_1 + 1 | 0;
      $4_1 = HEAP32[304883];
      $3_1 = global$0 - 256 | 0;
      global$0 = $3_1;
      label$5 : {
       if (!$6_1) {
        FUNCTION_TABLE[HEAP32[$4_1 + 176 >> 2]](1218064, HEAP32[$4_1 + 180 >> 2]);
        break label$5;
       }
       $9_1 = $147($6_1, 0, 64);
       if (!$1_1) {
        FUNCTION_TABLE[HEAP32[$4_1 + 176 >> 2]](1218079, HEAP32[$4_1 + 180 >> 2]);
        break label$5;
       }
       label$8 : {
        if (($2_1 | 0) != 65) {
         if (($2_1 | 0) != 33 | (HEAPU8[$1_1 | 0] & 254) != 2) {
          break label$5
         }
         if (!$83($3_1 + 216 | 0, $1_1 + 1 | 0)) {
          $2_1 = 0;
          break label$8;
         }
         $2_1 = ($21($3_1 + 8 | 0, $3_1 + 216 | 0, HEAPU8[$1_1 | 0] == 3) | 0) != 0;
         break label$8;
        }
        $2_1 = HEAPU8[$1_1 | 0];
        if ($2_1 >>> 0 > 7 | !(1 << $2_1 & 208)) {
         break label$5
        }
        $2_1 = 0;
        if (!$83($3_1 + 136 | 0, $1_1 + 1 | 0)) {
         break label$8
        }
        if (!$83($3_1 + 96 | 0, $1_1 + 33 | 0)) {
         break label$8
        }
        HEAP32[$3_1 + 88 >> 2] = 0;
        $91($3_1 + 8 | 0, $3_1 + 136 | 0, 40);
        $4_1 = $91($3_1 + 48 | 0, $3_1 + 96 | 0, 40);
        $1_1 = HEAPU8[$1_1 | 0];
        if (($1_1 & 254) == 6 & (HEAP8[$3_1 + 96 | 0] & 1) == (($1_1 | 0) != 7 | 0)) {
         break label$8
        }
        $8_1 = $3_1 + 216 | 0;
        $17($8_1, $4_1);
        $1_1 = $3_1 + 176 | 0;
        $2_1 = $3_1 + 8 | 0;
        $17($1_1, $2_1);
        $8($1_1, $1_1, $2_1);
        $269($1_1, 1218952);
        $213($1_1);
        $4_1 = global$0 - 48 | 0;
        global$0 = $4_1;
        $2_1 = $4_1 + 8 | 0;
        $250($2_1, $8_1, 1);
        $269($2_1, $1_1);
        $2_1 = $162($2_1);
        global$0 = $4_1 + 48 | 0;
       }
       if (!$2_1) {
        break label$5
       }
       $1_1 = $3_1 + 8 | 0;
       $349($9_1, $1_1);
       $378($1_1);
       $10_1 = 1;
      }
      global$0 = $3_1 + 256 | 0;
      if (!$10_1) {
       break label$3
      }
      $91($7_1, $6_1, 64);
      break label$2;
     }
     HEAP8[$0_1 | 0] = 1;
     HEAP8[$0_1 + 1 | 0] = 2;
     break label$1;
    }
    HEAP8[$7_1 | 0] = 2;
    $11_1 = 1;
   }
   HEAP8[$0_1 | 0] = $11_1;
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $222($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = HEAP32[$0_1 >> 2];
  $274($1_1, $3_1 ? ($4_1 - $3_1 | 0) + 3 >>> 2 | 0 : 0);
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$2_1 >> 2] = $3_1;
  $0_1 = $91($2_1 + 8 | 0, $0_1 + 8 | 0, 52);
  while (1) {
   $3_1 = $26($2_1);
   if (($3_1 | 0) != 1114112) {
    $138($1_1, $3_1);
    continue;
   }
   break;
  };
  $375($0_1);
  global$0 = $2_1 - -64 | 0;
 }
 
 function $223($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 8 | 0;
  $4_1 = $1_1 + 40 | 0;
  $91($3_1, $4_1, 40);
  $300($3_1, $1_1);
  $167($0_1 + 40 | 0, $4_1, $1_1);
  $91($0_1 + 80 | 0, $1_1 + 80 | 0, 40);
  $15($0_1 + 120 | 0, $1_1 + 120 | 0, 1065232);
  $91($0_1, $3_1, 40);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $224($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $8_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 12 >> 2];
  $5_1 = HEAP32[$1_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  $9_1 = HEAP32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 + 24 >> 2];
  $4_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $4_1 >>> 24;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP32[$0_1 >> 2] = $9_1;
  HEAP32[$0_1 + 4 >> 2] = $7_1 & 1073741823;
  $1_1 = $6_1;
  $4_1 = $4_1 << 6 | $1_1 >>> 26;
  $6_1 = $1_1 << 6 & -64;
  $1_1 = $2_1;
  HEAP32[$0_1 + 24 >> 2] = $6_1 | $1_1 >>> 26;
  HEAP32[$0_1 + 28 >> 2] = $4_1 & 1073741823;
  $2_1 = $5_1;
  $1_1 = $1_1 << 4 | $2_1 >>> 28;
  $2_1 = $2_1 << 4 & -16;
  $5_1 = $1_1 & 1073741823;
  $1_1 = $3_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1 >>> 28 | $2_1;
  HEAP32[$0_1 + 20 >> 2] = $5_1;
  $3_1 = $8_1;
  $2_1 = $1_1 << 2 | $3_1 >>> 30;
  HEAP32[$0_1 + 8 >> 2] = $3_1 << 2 & -4 | $7_1 >>> 30;
  HEAP32[$0_1 + 12 >> 2] = $2_1 & 1073741823;
 }
 
 function $225($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1, $15_1, $16_1, $17_1, $18_1) {
  var $19_1 = 0, $20_1 = 0;
  $19_1 = __wasm_rotl_i64($3_1, $4_1, 50);
  $20_1 = i64toi32_i32$HIGH_BITS;
  $19_1 = __wasm_rotl_i64($3_1, $4_1, 46) ^ $19_1;
  $20_1 = i64toi32_i32$HIGH_BITS ^ $20_1;
  $19_1 = $15_1 + (__wasm_rotl_i64($3_1, $4_1, 23) ^ $19_1) | 0;
  $16_1 = $16_1 + (i64toi32_i32$HIGH_BITS ^ $20_1) | 0;
  $11_1 = $11_1 ^ $3_1 & ($7_1 ^ $11_1);
  $7_1 = $11_1 + $19_1 | 0;
  $3_1 = ($12_1 ^ $4_1 & ($8_1 ^ $12_1)) + ($15_1 >>> 0 > $19_1 >>> 0 ? $16_1 + 1 | 0 : $16_1) | 0;
  $4_1 = $7_1 + $17_1 | 0;
  $3_1 = $18_1 + ($7_1 >>> 0 < $11_1 >>> 0 ? $3_1 + 1 | 0 : $3_1) | 0;
  $3_1 = $4_1 >>> 0 < $17_1 >>> 0 ? $3_1 + 1 | 0 : $3_1;
  $8_1 = $13_1 + $4_1 | 0;
  $7_1 = $3_1 + $14_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $8_1;
  HEAP32[$0_1 + 12 >> 2] = $8_1 >>> 0 < $13_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $7_1 = __wasm_rotl_i64($1_1, $2_1, 36);
  $8_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = __wasm_rotl_i64($1_1, $2_1, 30) ^ $7_1;
  $8_1 = i64toi32_i32$HIGH_BITS ^ $8_1;
  $7_1 = __wasm_rotl_i64($1_1, $2_1, 25) ^ $7_1;
  $5_1 = $7_1 + ($1_1 & ($5_1 ^ $9_1) ^ $5_1 & $9_1) | 0;
  $1_1 = ($2_1 & ($6_1 ^ $10_1) ^ $6_1 & $10_1) + (i64toi32_i32$HIGH_BITS ^ $8_1) | 0;
  $2_1 = $4_1 + $5_1 | 0;
  $16_1 = $3_1 + ($5_1 >>> 0 < $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1 >>> 0 < $4_1 >>> 0 ? $16_1 + 1 | 0 : $16_1;
 }
 
 function $226($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  $212($4_1 | 4);
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 8 >> 2] = 0;
  $1_1 = HEAP32[276405];
  HEAP32[$0_1 + 76 >> 2] = HEAP32[276404];
  HEAP32[$0_1 + 80 >> 2] = $1_1;
  $2_1 = HEAP32[276407];
  $1_1 = $0_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[276406];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[276409];
  $1_1 = $0_1 + 92 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[276408];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[276411];
  $1_1 = $0_1 + 100 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[276410];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $91($0_1 + 8 | 0, $4_1, 68);
  global$0 = $3_1 + 80 | 0;
 }
 
 function $227($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[$1_1 >> 2];
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 + 12 >> 2];
  $7_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = $2_1 + 8 | 0;
  $178($3_1 | 4, $1_1 + 84 | 0);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 80 >> 2];
  $91($0_1 + 16 | 0, $1_1 + 16 | 0, 64);
  $91($0_1 + 80 | 0, $3_1, 132);
  HEAP32[$0_1 + 8 >> 2] = $7_1;
  HEAP32[$0_1 + 12 >> 2] = $6_1;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  global$0 = $2_1 + 144 | 0;
 }
 
 function $228($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = 0 - $2_1 | 0;
  $3_1 = $4_1 & HEAP32[$1_1 >> 2];
  $5_1 = $2_1 - 1 | 0;
  $6_1 = $2_1 >> 31;
  $7_1 = 0 - ($6_1 + (($2_1 | 0) != 0) | 0) | 0;
  $2_1 = $6_1 - !$2_1 | 0;
  $6_1 = $7_1 & HEAP32[$1_1 + 4 >> 2] | $2_1 & HEAP32[$0_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = $3_1 | $5_1 & HEAP32[$0_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $6_1;
  $3_1 = $7_1 & HEAP32[$1_1 + 12 >> 2] | $2_1 & HEAP32[$0_1 + 12 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $4_1 & HEAP32[$1_1 + 8 >> 2] | $5_1 & HEAP32[$0_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  $3_1 = $7_1 & HEAP32[$1_1 + 20 >> 2] | $2_1 & HEAP32[$0_1 + 20 >> 2];
  HEAP32[$0_1 + 16 >> 2] = $4_1 & HEAP32[$1_1 + 16 >> 2] | $5_1 & HEAP32[$0_1 + 16 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $3_1;
  $2_1 = $7_1 & HEAP32[$1_1 + 28 >> 2] | $2_1 & HEAP32[$0_1 + 28 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $4_1 & HEAP32[$1_1 + 24 >> 2] | $5_1 & HEAP32[$0_1 + 24 >> 2];
  HEAP32[$0_1 + 28 >> 2] = $2_1;
 }
 
 function $229($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $316($5_1 + 24 | 0, $0_1, $3_1);
  $365($5_1 + 16 | 0, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 28 >> 2], $4_1);
  $3_1 = HEAP32[$5_1 + 16 >> 2];
  $0_1 = HEAP32[$5_1 + 20 >> 2];
  $365($5_1 + 8 | 0, $1_1, $2_1, $4_1);
  if (($0_1 | 0) != HEAP32[$5_1 + 12 >> 2]) {
   abort()
  }
  $91(HEAP32[$5_1 + 8 >> 2], $3_1, $0_1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $230($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (HEAP32[$1_1 + 120 >> 2]) {
    $370($0_1);
    if (!$2_1) {
     break label$1
    }
    HEAP32[$2_1 + 8 >> 2] = 0;
    HEAP32[$2_1 + 12 >> 2] = 0;
    HEAP32[$2_1 >> 2] = 1;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $0_1 = $2_1 + 16 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    $0_1 = $2_1 + 24 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    $0_1 = $2_1 + 32 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    return;
   }
   if ($2_1) {
    $2_1 = $91($2_1, $1_1 + 40 | 0, 40);
    $213($2_1);
    $280($2_1, 2);
   }
   $3_1 = global$0 - 160 | 0;
   global$0 = $3_1;
   HEAP32[$0_1 + 120 >> 2] = HEAP32[$1_1 + 120 >> 2];
   $2_1 = $0_1 + 80 | 0;
   $4_1 = $1_1 + 40 | 0;
   $8($2_1, $1_1 + 80 | 0, $4_1);
   $280($2_1, 2);
   $10_1 = $3_1 + 120 | 0;
   $17($10_1, $1_1);
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$3_1 + 120 >> 2], HEAP32[$3_1 + 124 >> 2], 3, 0)), HEAP32[wasm2js_i32$0 + 120 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 124 >> 2] = i64toi32_i32$HIGH_BITS;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$3_1 + 128 >> 2], HEAP32[$3_1 + 132 >> 2], 3, 0)), HEAP32[wasm2js_i32$0 + 128 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 132 >> 2] = i64toi32_i32$HIGH_BITS;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$3_1 + 136 >> 2], HEAP32[$3_1 + 140 >> 2], 3, 0)), HEAP32[wasm2js_i32$0 + 136 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 140 >> 2] = i64toi32_i32$HIGH_BITS;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$3_1 + 144 >> 2], HEAP32[$3_1 + 148 >> 2], 3, 0)), HEAP32[wasm2js_i32$0 + 144 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 148 >> 2] = i64toi32_i32$HIGH_BITS;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$3_1 + 152 >> 2], HEAP32[$3_1 + 156 >> 2], 3, 0)), HEAP32[wasm2js_i32$0 + 152 >> 2] = wasm2js_i32$1;
   HEAP32[$3_1 + 156 >> 2] = i64toi32_i32$HIGH_BITS;
   $11_1 = $3_1 + 80 | 0;
   $17($11_1, $10_1);
   $6_1 = $3_1 + 40 | 0;
   $17($6_1, $4_1);
   $4_1 = HEAP32[$3_1 + 40 >> 2];
   $2_1 = HEAP32[$3_1 + 44 >> 2] << 1 | $4_1 >>> 31;
   HEAP32[$3_1 + 40 >> 2] = $4_1 << 1;
   HEAP32[$3_1 + 44 >> 2] = $2_1;
   $4_1 = HEAP32[$3_1 + 48 >> 2];
   $2_1 = HEAP32[$3_1 + 52 >> 2] << 1 | $4_1 >>> 31;
   HEAP32[$3_1 + 48 >> 2] = $4_1 << 1;
   HEAP32[$3_1 + 52 >> 2] = $2_1;
   $4_1 = HEAP32[$3_1 + 56 >> 2];
   $2_1 = HEAP32[$3_1 + 60 >> 2] << 1 | $4_1 >>> 31;
   HEAP32[$3_1 + 56 >> 2] = $4_1 << 1;
   HEAP32[$3_1 + 60 >> 2] = $2_1;
   $4_1 = HEAP32[$3_1 + 64 >> 2];
   $2_1 = HEAP32[$3_1 + 68 >> 2] << 1 | $4_1 >>> 31;
   HEAP32[$3_1 + 64 >> 2] = $4_1 << 1;
   HEAP32[$3_1 + 68 >> 2] = $2_1;
   $4_1 = HEAP32[$3_1 + 72 >> 2];
   $2_1 = HEAP32[$3_1 + 76 >> 2] << 1 | $4_1 >>> 31;
   HEAP32[$3_1 + 72 >> 2] = $4_1 << 1;
   HEAP32[$3_1 + 76 >> 2] = $2_1;
   $17($3_1, $6_1);
   $4_1 = HEAP32[$3_1 >> 2];
   $2_1 = HEAP32[$3_1 + 4 >> 2] << 1 | $4_1 >>> 31;
   $4_1 = $4_1 << 1;
   HEAP32[$3_1 >> 2] = $4_1;
   $12_1 = $2_1;
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $7_1 = HEAP32[$3_1 + 8 >> 2];
   $2_1 = HEAP32[$3_1 + 12 >> 2] << 1 | $7_1 >>> 31;
   $7_1 = $7_1 << 1;
   HEAP32[$3_1 + 8 >> 2] = $7_1;
   $13_1 = $2_1;
   HEAP32[$3_1 + 12 >> 2] = $2_1;
   $8_1 = HEAP32[$3_1 + 16 >> 2];
   $2_1 = HEAP32[$3_1 + 20 >> 2] << 1 | $8_1 >>> 31;
   $8_1 = $8_1 << 1;
   HEAP32[$3_1 + 16 >> 2] = $8_1;
   $14_1 = $2_1;
   HEAP32[$3_1 + 20 >> 2] = $2_1;
   $9_1 = HEAP32[$3_1 + 24 >> 2];
   $2_1 = HEAP32[$3_1 + 28 >> 2] << 1 | $9_1 >>> 31;
   $9_1 = $9_1 << 1;
   HEAP32[$3_1 + 24 >> 2] = $9_1;
   $15_1 = $2_1;
   HEAP32[$3_1 + 28 >> 2] = $2_1;
   $16_1 = HEAP32[$3_1 + 32 >> 2];
   $17_1 = HEAP32[$3_1 + 36 >> 2];
   $8($6_1, $6_1, $1_1);
   $0_1 = $91($0_1, $6_1, 40);
   $280($0_1, 4);
   $250($0_1, $0_1, 4);
   $269($0_1, $11_1);
   $1_1 = __wasm_i64_mul(HEAP32[$3_1 + 72 >> 2], HEAP32[$3_1 + 76 >> 2], 6, 0);
   $5_1 = HEAP32[$3_1 + 112 >> 2];
   $2_1 = ($1_1 - $5_1 | 0) - 4 | 0;
   $1_1 = (i64toi32_i32$HIGH_BITS - (HEAP32[$3_1 + 116 >> 2] + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 262143 | 0;
   HEAP32[$3_1 + 72 >> 2] = $2_1;
   HEAP32[$3_1 + 76 >> 2] = $2_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
   $1_1 = __wasm_i64_mul(HEAP32[$3_1 + 64 >> 2], HEAP32[$3_1 + 68 >> 2], 6, 0);
   $5_1 = HEAP32[$3_1 + 104 >> 2];
   $2_1 = ($1_1 - $5_1 | 0) - 4 | 0;
   $1_1 = (i64toi32_i32$HIGH_BITS - (HEAP32[$3_1 + 108 >> 2] + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$3_1 + 64 >> 2] = $2_1;
   HEAP32[$3_1 + 68 >> 2] = $2_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
   $1_1 = __wasm_i64_mul(HEAP32[$3_1 + 56 >> 2], HEAP32[$3_1 + 60 >> 2], 6, 0);
   $5_1 = HEAP32[$3_1 + 96 >> 2];
   $2_1 = ($1_1 - $5_1 | 0) - 4 | 0;
   $1_1 = (i64toi32_i32$HIGH_BITS - (HEAP32[$3_1 + 100 >> 2] + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$3_1 + 56 >> 2] = $2_1;
   HEAP32[$3_1 + 60 >> 2] = $2_1 >>> 0 < 4294967292 ? $1_1 + 1 | 0 : $1_1;
   $2_1 = __wasm_i64_mul(HEAP32[$3_1 + 48 >> 2], HEAP32[$3_1 + 52 >> 2], 6, 0);
   $5_1 = HEAP32[$3_1 + 88 >> 2];
   $1_1 = ($2_1 - $5_1 | 0) - 4 | 0;
   $2_1 = (i64toi32_i32$HIGH_BITS - (HEAP32[$3_1 + 92 >> 2] + ($2_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 4194303 | 0;
   HEAP32[$3_1 + 48 >> 2] = $1_1;
   HEAP32[$3_1 + 52 >> 2] = $1_1 >>> 0 < 4294967292 ? $2_1 + 1 | 0 : $2_1;
   $1_1 = __wasm_i64_mul(HEAP32[$3_1 + 40 >> 2], HEAP32[$3_1 + 44 >> 2], 6, 0);
   $5_1 = HEAP32[$3_1 + 80 >> 2];
   $2_1 = ($1_1 - $5_1 | 0) - 3908 | 0;
   $1_1 = (i64toi32_i32$HIGH_BITS - (HEAP32[$3_1 + 84 >> 2] + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0) + 4194299 | 0;
   HEAP32[$3_1 + 40 >> 2] = $2_1;
   HEAP32[$3_1 + 44 >> 2] = $2_1 >>> 0 < 4294963388 ? $1_1 + 1 | 0 : $1_1;
   $1_1 = $0_1 + 40 | 0;
   $8($1_1, $10_1, $6_1);
   $0_1 = $16_1;
   $2_1 = $17_1 << 1 | $0_1 >>> 31;
   $0_1 = $0_1 << 1;
   HEAP32[$3_1 + 112 >> 2] = -6 - $0_1;
   HEAP32[$3_1 + 116 >> 2] = 393215 - (($0_1 >>> 0 > 4294967290) + $2_1 | 0);
   HEAP32[$3_1 + 104 >> 2] = -6 - $9_1;
   HEAP32[$3_1 + 108 >> 2] = 6291455 - (($9_1 >>> 0 > 4294967290) + $15_1 | 0);
   HEAP32[$3_1 + 96 >> 2] = -6 - $8_1;
   HEAP32[$3_1 + 100 >> 2] = 6291455 - (($8_1 >>> 0 > 4294967290) + $14_1 | 0);
   HEAP32[$3_1 + 88 >> 2] = -6 - $7_1;
   HEAP32[$3_1 + 92 >> 2] = 6291455 - (($7_1 >>> 0 > 4294967290) + $13_1 | 0);
   HEAP32[$3_1 + 80 >> 2] = -5862 - $4_1;
   HEAP32[$3_1 + 84 >> 2] = 6291449 - (($4_1 >>> 0 > 4294961434) + $12_1 | 0);
   $269($1_1, $11_1);
   global$0 = $3_1 + 160 | 0;
  }
 }
 
 function $231($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2] & 1048575;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $2_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 12 >> 2] << 12 | $2_1 >>> 20;
  HEAP32[$0_1 + 8 >> 2] = $2_1 << 12 & -4096 | HEAP32[$1_1 + 4 >> 2] >>> 20;
  HEAP32[$0_1 + 12 >> 2] = $3_1 & 1048575;
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  $3_1 = HEAP32[$1_1 + 20 >> 2] << 24 | $2_1 >>> 8;
  HEAP32[$0_1 + 16 >> 2] = $2_1 << 24 & -16777216 | HEAP32[$1_1 + 12 >> 2] >>> 8;
  HEAP32[$0_1 + 20 >> 2] = $3_1 & 1048575;
  $4_1 = HEAP32[$1_1 + 24 >> 2] << 4 & 1048560;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  $3_1 = $2_1 >>> 28 | 0;
  HEAP32[$0_1 + 24 >> 2] = ($2_1 & 268435455) << 4 | HEAP32[$1_1 + 16 >> 2] >>> 28;
  HEAP32[$0_1 + 28 >> 2] = $3_1 | $4_1;
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  $1_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 32 >> 2] = ($2_1 & 65535) << 16 | $1_1 >>> 16;
  HEAP32[$0_1 + 36 >> 2] = $2_1 >>> 16;
 }
 
 function $232($0_1) {
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[304883] == ($0_1 | 0)) {
     FUNCTION_TABLE[HEAP32[$0_1 + 176 >> 2]](1218017, HEAP32[$0_1 + 180 >> 2]);
     break label$2;
    }
    if (!$0_1) {
     break label$1
    }
   }
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 16 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 32 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 40 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $368($0_1 + 48 | 0);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
 }
 
 function $233($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  label$1 : {
   while (1) {
    if ($2_1) {
     $3_1 = HEAPU8[$0_1 + 200 | 0];
     if ($3_1 >>> 0 > 199) {
      break label$1
     }
     $3_1 = $0_1 + $3_1 | 0;
     HEAP8[$3_1 | 0] = HEAPU8[$3_1 | 0] ^ HEAPU8[$1_1 | 0];
     $3_1 = HEAPU8[$0_1 + 200 | 0] + 1 | 0;
     HEAP8[$0_1 + 200 | 0] = $3_1;
     if (($3_1 & 255) == 166) {
      $234($0_1)
     }
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 - 1 | 0;
     continue;
    }
    break;
   };
   return;
  }
  abort();
 }
 
 function $234($0_1) {
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAPU8[$0_1 + 200 | 0];
   if ($1_1 >>> 0 <= 199) {
    $1_1 = $0_1 + $1_1 | 0;
    HEAP8[$1_1 | 0] = HEAPU8[$1_1 | 0] ^ HEAPU8[$0_1 + 201 | 0];
    $1_1 = HEAPU8[$0_1 + 200 | 0] + 1 & 255;
    if ($1_1 >>> 0 < 200) {
     break label$1
    }
   }
   abort();
  }
  $1_1 = $0_1 + $1_1 | 0;
  HEAP8[$1_1 | 0] = HEAPU8[$1_1 | 0] ^ 4;
  HEAP8[$0_1 + 167 | 0] = HEAPU8[$0_1 + 167 | 0] ^ 128;
  $20($0_1);
  HEAP16[$0_1 + 200 >> 1] = 0;
 }
 
 function $235($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $191($0_1, 6, 0);
  label$1 : {
   while (1) {
    if ($2_1) {
     $3_1 = HEAPU8[$0_1 + 200 | 0];
     if ($3_1 >>> 0 > 199) {
      break label$1
     }
     HEAP8[$0_1 + $3_1 | 0] = HEAPU8[$1_1 | 0];
     $3_1 = HEAPU8[$0_1 + 200 | 0] + 1 | 0;
     HEAP8[$0_1 + 200 | 0] = $3_1;
     if (($3_1 & 255) == 166) {
      $234($0_1)
     }
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 - 1 | 0;
     continue;
    }
    break;
   };
   return;
  }
  abort();
 }
 
 function $236($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    $1_1 = HEAP32[$0_1 >> 2];
    while (1) {
     if ($1_1 & 1) {
      if ($1_1 >>> 0 > 3 | $3_1 >>> 0 > 9) {
       break label$1
      }
      $3_1 = $3_1 + 1 | 0;
      continue label$2;
     }
     $2_1 = HEAP32[$0_1 >> 2];
     HEAP32[$0_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $1_1 | 1 : $2_1;
     $4_1 = ($1_1 | 0) != ($2_1 | 0);
     $1_1 = $2_1;
     if ($4_1) {
      continue
     }
     break;
    };
    break;
   };
   return;
  }
  abort();
 }
 
 function $237($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $5_1 = $69($0_1, $1_1, $2_1, $3_1, $4_1);
  label$1 : {
   if ($5_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[$4_1 + 12 >> 2]]($6_1 + 8 | 0, $3_1, $0_1, $1_1);
   $5_1 = 0;
   if (HEAP32[$6_1 + 8 >> 2]) {
    break label$1
   }
   $5_1 = HEAP32[$6_1 + 12 >> 2];
   HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = $5_1;
   $5_1 = $69($0_1, $1_1, $2_1, $3_1, $4_1);
  }
  global$0 = $6_1 + 16 | 0;
  return $5_1;
 }
 
 function $238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 + 24 >> 2];
  $0_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
  $2_1 = 1062608;
  label$1 : {
   if (($0_1 | 0) == 32772) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != 40965) {
      if (($0_1 | 0) == 49158) {
       break label$3
      }
      if (($0_1 | 0) != 57351) {
       break label$2
      }
      $2_1 = 1062587;
      break label$1;
     }
     $2_1 = 1062601;
     break label$1;
    }
    $2_1 = 1062594;
    break label$1;
   }
   $2_1 = 1062580;
  }
  return FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]]($3_1, $2_1, 7) | 0;
 }
 
 function $239($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAPU8[$1_1 + 8 | 0];
  label$1 : {
   label$2 : {
    if (!(HEAPU8[$1_1 + 9 | 0] ? HEAP32[$1_1 >> 2] : 0)) {
     $0_1 = HEAP32[$0_1 >> 2];
     if ($2_1) {
      break label$2
     }
     HEAP8[$0_1 | 0] = 0;
     return 0;
    }
    $1_1 = 1;
    if ($2_1) {
     break label$1
    }
    HEAP8[HEAP32[$0_1 >> 2]] = 1;
    return 1;
   }
   HEAP8[$0_1 | 0] = 2;
   $1_1 = 0;
  }
  return $1_1;
 }
 
 function $240($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $3_1 = $2_1 >>> 25 | 0;
  HEAP8[$0_1 + 20 | 0] = $3_1;
  $2_1 = $2_1 & HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $2_1 + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  $2_1 = $0_1;
  $0_1 = $1_1 ^ Math_imul($3_1, 16843009);
  HEAP32[$2_1 + 16 >> 2] = ($0_1 ^ -1) & $0_1 - 16843009 & -2139062144;
 }
 
 function $241($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $3_1 = $1_1 + 16 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $2_1 + 24 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $2_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  $0_1 = $68($2_1 + 4 | 0, 1048992, $2_1 + 8 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0_1;
 }
 
 function $242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $3_1 = $1_1 + 16 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $2_1 + 24 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $0_1 = $2_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  $0_1 = $68($2_1 + 4 | 0, 1062864, $2_1 + 8 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $243($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = HEAP32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $8_1 = HEAP32[$1_1 + 12 >> 2];
  $9_1 = HEAP32[$1_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = HEAP32[$1_1 + 32 >> 2] << 24;
  $5_1 = HEAP32[$1_1 + 28 >> 2];
  $1_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 24 >> 2] = ($5_1 & 63) << 26 | $1_1 >>> 6;
  HEAP32[$0_1 + 28 >> 2] = $5_1 >>> 6 | $4_1;
  $4_1 = $1_1 << 26;
  $1_1 = $2_1;
  $2_1 = $9_1;
  HEAP32[$0_1 + 16 >> 2] = ($1_1 & 15) << 28 | $2_1 >>> 4;
  HEAP32[$0_1 + 20 >> 2] = $1_1 >>> 4 | $4_1;
  $2_1 = $2_1 << 28;
  $1_1 = $8_1;
  HEAP32[$0_1 + 8 >> 2] = ($1_1 & 3) << 30 | $3_1 >>> 2;
  HEAP32[$0_1 + 12 >> 2] = $1_1 >>> 2 | $2_1;
  HEAP32[$0_1 >> 2] = $6_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1 << 30 | $7_1;
 }
 
 function $244($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 496 | 0;
  global$0 = $2_1;
  $227($2_1, $1_1 + 216 | 0);
  $3_1 = $2_1 + 280 | 0;
  $91($3_1, $1_1, 216);
  $1_1 = $2_1 + 216 | 0;
  $54($1_1, $3_1);
  $411($2_1, $1_1);
  $91($3_1, $2_1, 216);
  $54($0_1, $3_1);
  global$0 = $2_1 + 496 | 0;
 }
 
 function $245($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[$0_1 >> 2];
  $4_1 = $1_1 + 16 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  $0_1 = $241($0_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[$0_1 >> 2];
  $4_1 = $1_1 + 16 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  $0_1 = $242($0_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $1_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $1_1 : $5_1;
  $3_1 = $1_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $1_1;
  while (1) {
   if ($3_1) {
    HEAP8[$4_1 | 0] = HEAPU8[$2_1 | 0] ^ HEAPU8[$0_1 | 0];
    $3_1 = $3_1 - 1 | 0;
    $4_1 = $4_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $248($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$1_1 + 8 >> 2] << 20;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1 | $4_1;
  $2_1 = HEAP32[$1_1 + 16 >> 2] << 8;
  $3_1 = HEAP32[$1_1 + 12 >> 2];
  $4_1 = $3_1 >>> 12 | 0;
  HEAP32[$0_1 + 8 >> 2] = ($3_1 & 4095) << 20 | HEAP32[$1_1 + 8 >> 2] >>> 12;
  HEAP32[$0_1 + 12 >> 2] = $2_1 | $4_1;
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = $2_1 << 28;
  $2_1 = HEAP32[$1_1 + 28 >> 2] << 28 | $2_1 >>> 4;
  $5_1 = $3_1;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = $3_1 >>> 24 | 0;
  HEAP32[$0_1 + 16 >> 2] = $5_1 | (($3_1 & 16777215) << 8 | HEAP32[$1_1 + 16 >> 2] >>> 24);
  HEAP32[$0_1 + 20 >> 2] = $2_1 | $4_1;
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = $2_1 << 16;
  $2_1 = HEAP32[$1_1 + 36 >> 2] << 16 | $2_1 >>> 16;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$1_1 + 28 >> 2] >>> 4 | $3_1;
  HEAP32[$0_1 + 28 >> 2] = $2_1;
 }
 
 function $249($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $5_1 = $2_1 + 16 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 12 >> 2] = $4_1;
  $0_1 = $68($0_1, $1_1, $3_1 + 8 | 0);
  global$0 = $3_1 + 32 | 0;
  return $0_1;
 }
 
 function $250($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $6_1 = $2_1 + 1 | 0;
  $2_1 = __wasm_i64_mul($6_1, 0, -1954, 2097149);
  $3_1 = HEAP32[$1_1 >> 2];
  $4_1 = i64toi32_i32$HIGH_BITS - (HEAP32[$1_1 + 4 >> 2] + ($3_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1 - $3_1;
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $2_1 = __wasm_i64_mul($6_1, 0, -2, 2097151);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  $5_1 = $3_1 - (HEAP32[$1_1 + 12 >> 2] + ($4_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  HEAP32[$0_1 + 8 >> 2] = $2_1 - $4_1;
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 16 >> 2];
  $5_1 = $3_1 - (HEAP32[$1_1 + 20 >> 2] + ($4_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  HEAP32[$0_1 + 16 >> 2] = $2_1 - $4_1;
  HEAP32[$0_1 + 20 >> 2] = $5_1;
  $5_1 = $3_1;
  $3_1 = HEAP32[$1_1 + 24 >> 2];
  $4_1 = $5_1 - (HEAP32[$1_1 + 28 >> 2] + ($3_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  HEAP32[$0_1 + 24 >> 2] = $2_1 - $3_1;
  HEAP32[$0_1 + 28 >> 2] = $4_1;
  $2_1 = __wasm_i64_mul($6_1, 0, -2, 131071);
  $5_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[$1_1 + 32 >> 2];
  $6_1 = i64toi32_i32$HIGH_BITS - ($5_1 + ($1_1 >>> 0 > $2_1 >>> 0) | 0) | 0;
  HEAP32[$0_1 + 32 >> 2] = $2_1 - $1_1;
  HEAP32[$0_1 + 36 >> 2] = $6_1;
 }
 
 function $251($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  $17($4_1, $1_1);
  $8($0_1, $0_1, $4_1);
  $2_1 = $0_1 + 40 | 0;
  $8($2_1, $2_1, $4_1);
  $8($2_1, $2_1, $1_1);
  $0_1 = $0_1 + 80 | 0;
  $8($0_1, $0_1, $1_1);
  global$0 = $3_1 + 48 | 0;
 }
 
 function $252($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$2_1 >> 2] - 1 | 0) {
     default:
      $1_1 = $2_1 + 4 | 0;
      break label$2;
     case 1:
      break label$1;
     case 0:
      break label$3;
     };
    }
    $1_1 = (HEAP32[$2_1 + 4 >> 2] << 3) + $1_1 | 0;
    if (HEAP32[$1_1 + 4 >> 2] != 5) {
     break label$1
    }
    $1_1 = HEAP32[$1_1 >> 2];
   }
   $3_1 = HEAP32[$1_1 >> 2];
   $4_1 = 1;
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $4_1;
 }
 
 function $253($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = HEAP32[$0_1 + 16 >> 2];
  $4_1 = HEAP32[$0_1 + 24 >> 2] != -1 | HEAP32[$0_1 + 28 >> 2] != -1 | (($2_1 | 0) == -1 & $3_1 >>> 0 < 4294967294 | ($2_1 | 0) != -1);
  $1_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $6_1 = ($4_1 | (($1_1 | 0) == -1162945306 & $5_1 >>> 0 < 2940772411 | $1_1 >>> 0 < 3132021990)) ^ -1;
  $2_1 = $6_1 & (($1_1 | 0) == -1162945306 & $5_1 >>> 0 > 2940772411 | $1_1 >>> 0 > 3132021990) | !$4_1 & (($3_1 | 0) == -1 & ($2_1 | 0) == -1);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  return $2_1 | (($1_1 | 0) == -1076732276 & HEAPU32[$0_1 >> 2] > 3493216576 | $1_1 >>> 0 > 3218235020) & $6_1;
 }
 
 function $254($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $152($1_1 + 4 | 0);
  if (($2_1 | 0) != 1114112) {
   $3_1 = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 + 4 >> 2] + ($3_1 + ($4_1 - $5_1 | 0) | 0) | 0) - HEAP32[$1_1 + 8 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $3_1;
 }
 
 function $255($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$2_1 + 28 >> 2];
  $5_1 = HEAP32[$2_1 + 24 >> 2];
  $2_1 = 0;
  label$1 : {
   while (1) {
    $3_1 = $1_1;
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + 1 | 0;
    if (!(FUNCTION_TABLE[HEAP32[$4_1 + 16 >> 2]]($5_1, $0_1) | 0)) {
     continue
    }
    break;
   };
   $3_1 = $2_1 - 1 | 0;
  }
  return $3_1 >>> 0 < $1_1 >>> 0;
 }
 
 function $256($0_1, $1_1, $2_1, $3_1) {
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    if ($2_1 >>> 0 <= $3_1 >>> 0) {
     if (($2_1 | 0) != ($3_1 | 0)) {
      break label$2
     }
     break label$1;
    }
    if (HEAP8[$1_1 + $3_1 | 0] > -65) {
     break label$1
    }
   }
   $119($1_1, $2_1, $3_1, $2_1);
   abort();
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 - $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1;
 }
 
 function $257($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $317($0_1) + 16 | 0;
  $366($1_1 + 8 | 0, $2_1, ($2_1 >>> 0 < 4294967281) << 4);
  $3_1 = $172(HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2]);
  HEAP32[$3_1 >> 2] = $2_1;
  $0_1 = $16($3_1 + 16 | 0, $0_1);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $258($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 40 | 0;
  $17($4_1, $2_1);
  $8($3_1, $4_1, $2_1);
  $8($0_1, $1_1, $4_1);
  $8($0_1 + 40 | 0, $1_1 + 40 | 0, $3_1);
  HEAP32[$0_1 + 80 >> 2] = HEAP32[$1_1 + 120 >> 2];
  global$0 = $3_1 + 80 | 0;
 }
 
 function $259($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 40 | 0;
  $91($3_1, $1_1, 40);
  $141($3_1);
  $1_1 = $91($2_1, $1_1 + 40 | 0, 40);
  $141($1_1);
  $248($0_1, $1_1 + 40 | 0);
  $248($0_1 + 32 | 0, $1_1);
  global$0 = $1_1 + 80 | 0;
 }
 
 function $260($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 256 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 32 | 0;
  $226($3_1);
  $414($3_1, $0_1, $1_1);
  $0_1 = $2_1 + 144 | 0;
  $91($0_1, $3_1, 112);
  $56($2_1, $0_1);
  global$0 = $2_1 + 256 | 0;
  return HEAPU8[$2_1 | 0];
 }
 
 function $261($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $8_1 = global$0 + -64 | 0;
  global$0 = $8_1;
  $29($8_1, $1_1, $2_1);
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = HEAP32[$8_1 + 52 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$8_1 + 48 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$8_1 + 60 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$8_1 + 56 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = $1_1;
  $2_1 = $1_1;
  $1_1 = (HEAP32[$8_1 + 44 >> 2] >>> 31 | 0) - 1 & 256;
  $9_1 = $1_1 >>> 6 | 0;
  $3_1 = !$9_1;
  $6_1 = $1_1 & 63;
  $1_1 = $6_1;
  $4_1 = $1_1 & 31;
  $11_1 = HEAP32[$0_1 >> 2];
  if (($1_1 & 63) >>> 0 >= 32) {
   $1_1 = $3_1 << $4_1;
   $3_1 = 0;
  } else {
   $1_1 = (1 << $4_1) - 1 & $3_1 >>> 32 - $4_1;
   $3_1 = $3_1 << $4_1;
  }
  $4_1 = $11_1 + $3_1 | 0;
  $1_1 = $1_1 + $2_1 | 0;
  $10_1 = $4_1;
  HEAP32[$0_1 >> 2] = $4_1;
  $2_1 = $4_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $12_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = ($9_1 | 0) == 1;
  $4_1 = $6_1 & 31;
  $13_1 = HEAP32[$0_1 + 8 >> 2];
  if (($6_1 & 63) >>> 0 >= 32) {
   $1_1 = $3_1 << $4_1;
   $7_1 = 0;
  } else {
   $1_1 = (1 << $4_1) - 1 & $3_1 >>> 32 - $4_1;
   $7_1 = $3_1 << $4_1;
  }
  $3_1 = $13_1 + $7_1 | 0;
  $4_1 = $1_1 + $12_1 | 0;
  $4_1 = $3_1 >>> 0 < $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $7_1 = $3_1;
  $3_1 = ($2_1 | 0) == ($5_1 | 0) & $10_1 >>> 0 < $11_1 >>> 0 | $2_1 >>> 0 < $5_1 >>> 0;
  $2_1 = $7_1 + $3_1 | 0;
  $1_1 = $4_1;
  $10_1 = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $3_1 = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$0_1 + 12 >> 2] = $3_1;
  $2_1 = $0_1;
  $11_1 = HEAP32[$0_1 + 20 >> 2];
  $14_1 = HEAP32[$0_1 + 16 >> 2];
  $5_1 = ($9_1 | 0) == 2;
  $0_1 = $6_1 & 31;
  if (($6_1 & 63) >>> 0 >= 32) {
   $1_1 = $5_1 << $0_1;
   $5_1 = 0;
  } else {
   $1_1 = (1 << $0_1) - 1 & $5_1 >>> 32 - $0_1;
   $5_1 = $5_1 << $0_1;
  }
  $0_1 = $14_1 + $5_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $0_1 >>> 0 < $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $5_1 = $0_1;
  $0_1 = $1_1;
  $3_1 = ($4_1 | 0) == ($3_1 | 0) & $10_1 >>> 0 < $7_1 >>> 0 | $4_1 >>> 0 > $3_1 >>> 0;
  $1_1 = $3_1 + (($4_1 | 0) == ($12_1 | 0) & $7_1 >>> 0 < $13_1 >>> 0 | $4_1 >>> 0 < $12_1 >>> 0) | 0;
  $4_1 = $1_1 >>> 0 < $3_1 >>> 0;
  $10_1 = $1_1;
  $3_1 = $1_1 + $5_1 | 0;
  $1_1 = $0_1 + $4_1 | 0;
  $1_1 = $3_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $10_1 = $3_1;
  HEAP32[$2_1 + 16 >> 2] = $3_1;
  $4_1 = $1_1;
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  $12_1 = HEAP32[$2_1 + 28 >> 2];
  $9_1 = ($9_1 | 0) == 3;
  $3_1 = $6_1 & 31;
  if (($6_1 & 63) >>> 0 >= 32) {
   $1_1 = $9_1 << $3_1;
   $3_1 = 0;
  } else {
   $1_1 = (1 << $3_1) - 1 & $9_1 >>> 32 - $3_1;
   $3_1 = $9_1 << $3_1;
  }
  $6_1 = $3_1 + HEAP32[$2_1 + 24 >> 2] | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $7_1 = $6_1;
  $4_1 = ($0_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 > $10_1 >>> 0 | $0_1 >>> 0 > $4_1 >>> 0;
  $0_1 = $4_1 + (($0_1 | 0) == ($11_1 | 0) & $5_1 >>> 0 < $14_1 >>> 0 | $0_1 >>> 0 < $11_1 >>> 0) | 0;
  $6_1 = $0_1 >>> 0 < $4_1 >>> 0;
  $3_1 = $0_1;
  $0_1 = $7_1 + $0_1 | 0;
  $4_1 = $1_1 + $6_1 | 0;
  HEAP32[$2_1 + 24 >> 2] = $0_1;
  HEAP32[$2_1 + 28 >> 2] = $0_1 >>> 0 < $3_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  global$0 = $8_1 - -64 | 0;
 }
 
 function $262() {
  var $0_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  if (HEAP32[305236] != 3) {
   HEAP8[$0_1 + 11 | 0] = 1;
   HEAP32[$0_1 + 12 >> 2] = $0_1 + 11;
   $61(1220944, $0_1 + 12 | 0, 1105596);
  }
  if (HEAP32[305237] != 1) {
   abort()
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $263($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  $1_1 = HEAPU8[$0_1 | 0];
  HEAP8[$0_1 | 0] = 0;
  label$1 : {
   if ($1_1 & 1) {
    $0_1 = $172(2, 1);
    if ($0_1) {
     break label$1
    }
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](2, 1);
   }
   abort();
  }
  HEAP8[$0_1 | 0] = 0;
  HEAP8[$0_1 + 1 | 0] = 0;
  HEAP32[305141] = $0_1;
 }
 
 function $264($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $273($4_1 + 8 | 0, $3_1, $1_1, $2_1);
  $5_1 = HEAP32[$4_1 + 8 >> 2];
  if (!$5_1) {
   $119($1_1, $2_1, 0, $3_1);
   abort();
  }
  $1_1 = HEAP32[$4_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $265($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $77($0_1, $2_1 + 8 | 0, $1_1);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $266($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  if (($2_1 | 0) != 32) {
   abort()
  }
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $3_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$0_1 | 0] = $3_1;
  HEAP8[$0_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $2_1;
  HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
  $3_1 = $1_1 + 24 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $2_1 = $0_1 + 24 | 0;
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $3_1 = $1_1 + 16 | 0;
  $4_1 = HEAPU8[$3_1 + 4 | 0] | HEAPU8[$3_1 + 5 | 0] << 8 | (HEAPU8[$3_1 + 6 | 0] << 16 | HEAPU8[$3_1 + 7 | 0] << 24);
  $2_1 = $0_1 + 16 | 0;
  $3_1 = HEAPU8[$3_1 | 0] | HEAPU8[$3_1 + 1 | 0] << 8 | (HEAPU8[$3_1 + 2 | 0] << 16 | HEAPU8[$3_1 + 3 | 0] << 24);
  HEAP8[$2_1 | 0] = $3_1;
  HEAP8[$2_1 + 1 | 0] = $3_1 >>> 8;
  HEAP8[$2_1 + 2 | 0] = $3_1 >>> 16;
  HEAP8[$2_1 + 3 | 0] = $3_1 >>> 24;
  HEAP8[$2_1 + 4 | 0] = $4_1;
  HEAP8[$2_1 + 5 | 0] = $4_1 >>> 8;
  HEAP8[$2_1 + 6 | 0] = $4_1 >>> 16;
  HEAP8[$2_1 + 7 | 0] = $4_1 >>> 24;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  $0_1 = $0_1 + 8 | 0;
  $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP8[$0_1 | 0] = $1_1;
  HEAP8[$0_1 + 1 | 0] = $1_1 >>> 8;
  HEAP8[$0_1 + 2 | 0] = $1_1 >>> 16;
  HEAP8[$0_1 + 3 | 0] = $1_1 >>> 24;
  HEAP8[$0_1 + 4 | 0] = $2_1;
  HEAP8[$0_1 + 5 | 0] = $2_1 >>> 8;
  HEAP8[$0_1 + 6 | 0] = $2_1 >>> 16;
  HEAP8[$0_1 + 7 | 0] = $2_1 >>> 24;
 }
 
 function $267($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (!$2_1) {
    $1_1 = 0;
    break label$1;
   }
   $3_1 = HEAP32[$1_1 + 8 >> 2];
   $3_1 = $3_1 >>> 0 < $2_1 >>> 0 ? $3_1 : $2_1;
   HEAP32[$1_1 + 4 >> 2] = $2_1 - $3_1;
   $2_1 = $1_1;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 >> 2] = $3_1 + $1_1;
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $268($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) != 1114112) {
     $4_1 = 1;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 16 >> 2]](HEAP32[$0_1 + 24 >> 2], $1_1) | 0) {
      break label$2
     }
    }
    if ($2_1) {
     break label$1
    }
    $4_1 = 0;
   }
   return $4_1;
  }
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $2_1, $3_1) | 0;
 }
 
 function $269($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $3_1 = $4_1 + HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = HEAP32[$0_1 + 12 >> 2] + HEAP32[$1_1 + 12 >> 2] | 0;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  $3_1 = $4_1 + HEAP32[$0_1 + 8 >> 2] | 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 12 >> 2] = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = HEAP32[$0_1 + 20 >> 2] + HEAP32[$1_1 + 20 >> 2] | 0;
  $4_1 = HEAP32[$1_1 + 16 >> 2];
  $3_1 = $4_1 + HEAP32[$0_1 + 16 >> 2] | 0;
  HEAP32[$0_1 + 16 >> 2] = $3_1;
  HEAP32[$0_1 + 20 >> 2] = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $2_1 = HEAP32[$0_1 + 28 >> 2] + HEAP32[$1_1 + 28 >> 2] | 0;
  $4_1 = HEAP32[$1_1 + 24 >> 2];
  $3_1 = $4_1 + HEAP32[$0_1 + 24 >> 2] | 0;
  HEAP32[$0_1 + 24 >> 2] = $3_1;
  HEAP32[$0_1 + 28 >> 2] = $3_1 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $3_1 = HEAP32[$1_1 + 32 >> 2];
  $2_1 = $3_1 + HEAP32[$0_1 + 32 >> 2] | 0;
  $1_1 = HEAP32[$0_1 + 36 >> 2] + HEAP32[$1_1 + 36 >> 2] | 0;
  HEAP32[$0_1 + 32 >> 2] = $2_1;
  HEAP32[$0_1 + 36 >> 2] = $2_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
 }
 
 function $270($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $164($2_1 + 8 | 0, $2_1 + 16 | 0);
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $271($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $270($2_1 + 8 | 0, $2_1 + 16 | 0);
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $272($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0;
  $57_1 = global$0 - 128 | 0;
  global$0 = $57_1;
  $18_1 = $57_1 + 48 | 0;
  $124($18_1, $1_1);
  $4_1 = $57_1 + 88 | 0;
  $124($4_1, $2_1);
  $2_1 = global$0 - 1360 | 0;
  global$0 = $2_1;
  $21_1 = HEAP32[$4_1 >> 2];
  $17_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = HEAP32[$18_1 >> 2];
  $1_1 = HEAP32[$18_1 + 4 >> 2];
  $297($2_1 + 880 | 0, $21_1, $17_1, 0, 0, $3_1, $1_1, 0, 0);
  $16_1 = HEAP32[$4_1 + 8 >> 2];
  $12_1 = HEAP32[$4_1 + 12 >> 2];
  $297($2_1 + 896 | 0, $16_1, $12_1, 0, 0, $3_1, $1_1, 0, 0);
  $13_1 = HEAP32[$18_1 + 8 >> 2];
  $14_1 = HEAP32[$18_1 + 12 >> 2];
  $297($2_1 + 960 | 0, $13_1, $14_1, 0, 0, $21_1, $17_1, 0, 0);
  $20_1 = HEAP32[$4_1 + 16 >> 2];
  $15_1 = HEAP32[$4_1 + 20 >> 2];
  $297($2_1 + 912 | 0, $20_1, $15_1, 0, 0, $3_1, $1_1, 0, 0);
  $297($2_1 + 1024 | 0, $13_1, $14_1, 0, 0, $16_1, $12_1, 0, 0);
  $10_1 = HEAP32[$18_1 + 16 >> 2];
  $11_1 = HEAP32[$18_1 + 20 >> 2];
  $297($2_1 + 976 | 0, $10_1, $11_1, 0, 0, $21_1, $17_1, 0, 0);
  $8_1 = HEAP32[$4_1 + 24 >> 2];
  $9_1 = HEAP32[$4_1 + 28 >> 2];
  $297($2_1 + 928 | 0, $8_1, $9_1, 0, 0, $3_1, $1_1, 0, 0);
  $297($2_1 + 1088 | 0, $20_1, $15_1, 0, 0, $13_1, $14_1, 0, 0);
  $297($2_1 + 1040 | 0, $10_1, $11_1, 0, 0, $16_1, $12_1, 0, 0);
  $7_1 = HEAP32[$18_1 + 24 >> 2];
  $5_1 = HEAP32[$18_1 + 28 >> 2];
  $297($2_1 + 992 | 0, $7_1, $5_1, 0, 0, $21_1, $17_1, 0, 0);
  $6_1 = HEAP32[$4_1 + 32 >> 2];
  $4_1 = HEAP32[$4_1 + 36 >> 2];
  $297($2_1 + 944 | 0, $6_1, $4_1, 0, 0, $3_1, $1_1, 0, 0);
  $297($2_1 + 1104 | 0, $8_1, $9_1, 0, 0, $13_1, $14_1, 0, 0);
  $297($2_1 + 1136 | 0, $10_1, $11_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($2_1 + 1056 | 0, $7_1, $5_1, 0, 0, $16_1, $12_1, 0, 0);
  $3_1 = HEAP32[$18_1 + 32 >> 2];
  $1_1 = HEAP32[$18_1 + 36 >> 2];
  $297($2_1 + 1008 | 0, $3_1, $1_1, 0, 0, $21_1, $17_1, 0, 0);
  $297($2_1 + 1120 | 0, $6_1, $4_1, 0, 0, $13_1, $14_1, 0, 0);
  $297($2_1 + 1184 | 0, $8_1, $9_1, 0, 0, $10_1, $11_1, 0, 0);
  $297($2_1 + 1152 | 0, $7_1, $5_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($2_1 + 1072 | 0, $3_1, $1_1, 0, 0, $16_1, $12_1, 0, 0);
  $297($2_1 + 1200 | 0, $6_1, $4_1, 0, 0, $10_1, $11_1, 0, 0);
  $297($2_1 + 1216 | 0, $7_1, $5_1, 0, 0, $8_1, $9_1, 0, 0);
  $297($2_1 + 1168 | 0, $3_1, $1_1, 0, 0, $20_1, $15_1, 0, 0);
  $297($2_1 + 1248 | 0, $6_1, $4_1, 0, 0, $7_1, $5_1, 0, 0);
  $297($2_1 + 1232 | 0, $3_1, $1_1, 0, 0, $8_1, $9_1, 0, 0);
  $297($2_1 + 1264 | 0, $3_1, $1_1, 0, 0, $6_1, $4_1, 0, 0);
  $5_1 = HEAP32[$2_1 + 880 >> 2];
  $6_1 = HEAP32[$2_1 + 884 >> 2];
  $58_1 = __wasm_i64_mul($5_1, $6_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $21_1 = $1_1;
  $297($2_1 + 864 | 0, $58_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 848 | 0, $58_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $8_1 = $2_1 + 832 | 0;
  $25_1 = HEAP32[$2_1 + 960 >> 2];
  $3_1 = HEAP32[$2_1 + 896 >> 2];
  $4_1 = $25_1 + $3_1 | 0;
  $23_1 = HEAP32[$2_1 + 964 >> 2];
  $1_1 = $23_1 + HEAP32[$2_1 + 900 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = $4_1;
  $3_1 = HEAP32[$2_1 + 848 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $12_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 852 >> 2] | 0;
  $10_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = HEAP32[$2_1 + 864 >> 2];
  $3_1 = $9_1;
  $5_1 = $3_1 + $5_1 | 0;
  $11_1 = HEAP32[$2_1 + 868 >> 2];
  $1_1 = $11_1 + $6_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $7_1 = $1_1 >>> 20 | 0;
  $5_1 = ($1_1 | 0) == ($11_1 | 0) & $3_1 >>> 0 < $9_1 >>> 0 | $1_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $2_1 + 888 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 872 | 0;
  $9_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $6_1 = $5_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $6_1;
  $3_1 = $6_1 << 12 | $7_1;
  $7_1 = $3_1 + $10_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $4_1 | 0;
  $11_1 = $7_1;
  $13_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $59_1 = __wasm_i64_mul($7_1, $13_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $30_1 = $1_1;
  $297($8_1, $59_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 784 | 0, $58_1, $21_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 816 | 0, $59_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $19_1 = $2_1 + 768 | 0;
  $35_1 = HEAP32[$2_1 + 912 >> 2];
  $3_1 = HEAP32[$2_1 + 1024 >> 2];
  $5_1 = $35_1 + $3_1 | 0;
  $28_1 = HEAP32[$2_1 + 916 >> 2];
  $1_1 = $28_1 + HEAP32[$2_1 + 1028 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 976 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 980 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 784 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $9_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 788 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 816 >> 2];
  $7_1 = $5_1 + $3_1 | 0;
  $5_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 820 >> 2] | 0;
  $15_1 = $7_1;
  $3_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = HEAP32[$2_1 + 836 >> 2];
  $1_1 = $13_1 + $18_1 | 0;
  $17_1 = HEAP32[$2_1 + 832 >> 2];
  $7_1 = $11_1 + $17_1 | 0;
  $1_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = $1_1 >>> 20 | 0;
  $24_1 = ($1_1 | 0) == ($18_1 | 0) & $7_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $18_1 >>> 0;
  $1_1 = $2_1 + 840 | 0;
  $18_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($4_1 | 0) == ($13_1 | 0) & $10_1 >>> 0 > $11_1 >>> 0 | $4_1 >>> 0 > $13_1 >>> 0;
  $7_1 = $2_1 + 856 | 0;
  $1_1 = HEAP32[$7_1 >> 2];
  $11_1 = HEAP32[$7_1 + 4 >> 2];
  $14_1 = ($4_1 | 0) == ($12_1 | 0) & $10_1 >>> 0 < $27_1 >>> 0 | $4_1 >>> 0 < $12_1 >>> 0;
  $8_1 = $1_1;
  $1_1 = $2_1 + 904 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $2_1 + 968 | 0;
  $10_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $10_1;
  $7_1 = $4_1 + (($12_1 | 0) == ($23_1 | 0) & $25_1 >>> 0 > $27_1 >>> 0 | $12_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $8_1 + $4_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $14_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $20_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $18_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $6_1;
  $4_1 = $6_1 << 12 | $22_1;
  $7_1 = $4_1 + $15_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $3_1 | 0;
  $10_1 = $7_1;
  $12_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $36_1 = __wasm_i64_mul($7_1, $12_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $41_1 = $1_1;
  $297($19_1, $36_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 800 | 0, $59_1, $30_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 752 | 0, $36_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $2_1 + 736 | 0;
  $42_1 = HEAP32[$2_1 + 1040 >> 2];
  $4_1 = HEAP32[$2_1 + 1088 >> 2];
  $7_1 = $42_1 + $4_1 | 0;
  $49_1 = HEAP32[$2_1 + 1044 >> 2];
  $1_1 = $49_1 + HEAP32[$2_1 + 1092 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $51_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 928 >> 2];
  $7_1 = $7_1 + $4_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 932 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 992 >> 2];
  $7_1 = $7_1 + $4_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 996 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $43_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 800 >> 2];
  $8_1 = $7_1 + $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 804 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $44_1 = $8_1;
  $4_1 = HEAP32[$2_1 + 752 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $18_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 756 >> 2] | 0;
  $13_1 = $8_1;
  $4_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $19_1 = HEAP32[$2_1 + 772 >> 2];
  $1_1 = $12_1 + $19_1 | 0;
  $17_1 = HEAP32[$2_1 + 768 >> 2];
  $8_1 = $10_1 + $17_1 | 0;
  $1_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $1_1 >>> 20 | 0;
  $23_1 = ($1_1 | 0) == ($19_1 | 0) & $8_1 >>> 0 < $17_1 >>> 0 | $1_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $2_1 + 776 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $19_1 = ($3_1 | 0) == ($12_1 | 0) & $10_1 >>> 0 < $15_1 >>> 0 | $3_1 >>> 0 > $12_1 >>> 0;
  $1_1 = $2_1 + 824 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 792 | 0;
  $20_1 = HEAP32[$1_1 >> 2];
  $10_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $2_1 + 984 | 0;
  $1_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $34_1 = ($5_1 | 0) == ($3_1 | 0) & $15_1 >>> 0 < $32_1 >>> 0 | $5_1 >>> 0 > $3_1 >>> 0;
  $15_1 = ($5_1 | 0) == ($9_1 | 0) & $31_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 < $9_1 >>> 0;
  $11_1 = ($9_1 | 0) == ($16_1 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $9_1 >>> 0 < $16_1 >>> 0;
  $14_1 = $1_1;
  $1_1 = $2_1 + 1032 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 920 | 0;
  $9_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + (($16_1 | 0) == ($28_1 | 0) & $29_1 >>> 0 < $35_1 >>> 0 | $16_1 >>> 0 < $28_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $14_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $11_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $20_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $15_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $17_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $34_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $6_1 = $3_1 + $19_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $27_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $23_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $6_1;
  $3_1 = $6_1 << 12 | $33_1;
  $5_1 = $3_1 + $13_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $4_1 | 0;
  $15_1 = $5_1;
  $17_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $37_1 = __wasm_i64_mul($5_1, $17_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $35_1 = $1_1;
  $297($26_1, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 688 | 0, $36_1, $41_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 720 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $38_1 = $2_1 + 672 | 0;
  $52_1 = HEAP32[$2_1 + 1108 >> 2];
  $1_1 = $52_1 + HEAP32[$2_1 + 1140 >> 2] | 0;
  $45_1 = HEAP32[$2_1 + 1104 >> 2];
  $3_1 = HEAP32[$2_1 + 1136 >> 2];
  $5_1 = $45_1 + $3_1 | 0;
  $46_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $8_1 = $3_1 + $46_1 | 0;
  $9_1 = $21_1;
  $1_1 = ($58_1 << 12) + $5_1 | 0;
  $53_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 1056 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $33_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 1060 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $54_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 944 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 948 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $60_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 1008 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $14_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 1012 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 688 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 692 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $62_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 720 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 724 >> 2] | 0;
  $21_1 = $8_1;
  $3_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $25_1 = HEAP32[$2_1 + 740 >> 2];
  $1_1 = $17_1 + $25_1 | 0;
  $19_1 = HEAP32[$2_1 + 736 >> 2];
  $8_1 = $15_1 + $19_1 | 0;
  $1_1 = $8_1 >>> 0 < $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $1_1 >>> 20 | 0;
  $29_1 = ($1_1 | 0) == ($25_1 | 0) & $8_1 >>> 0 < $19_1 >>> 0 | $1_1 >>> 0 < $25_1 >>> 0;
  $1_1 = $2_1 + 744 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($4_1 | 0) == ($17_1 | 0) & $13_1 >>> 0 > $15_1 >>> 0 | $4_1 >>> 0 > $17_1 >>> 0;
  $1_1 = $2_1 + 760 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 808 | 0;
  $19_1 = HEAP32[$1_1 >> 2];
  $17_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 1e3 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $2_1 + 936 | 0;
  $1_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $34_1 = ($4_1 | 0) == ($18_1 | 0) & $13_1 >>> 0 < $44_1 >>> 0 | $4_1 >>> 0 < $18_1 >>> 0;
  $18_1 = ($7_1 | 0) == ($18_1 | 0) & $43_1 >>> 0 > $44_1 >>> 0 | $7_1 >>> 0 > $18_1 >>> 0;
  $16_1 = ($7_1 | 0) == ($24_1 | 0) & $40_1 >>> 0 > $43_1 >>> 0 | $7_1 >>> 0 < $24_1 >>> 0;
  $10_1 = $1_1;
  $1_1 = $2_1 + 1096 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $2_1 + 1048 | 0;
  $13_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $13_1;
  $7_1 = $4_1 + (($22_1 | 0) == ($49_1 | 0) & $42_1 >>> 0 > $51_1 >>> 0 | $22_1 >>> 0 < $49_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $10_1 + $4_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($22_1 | 0) == ($24_1 | 0) & $40_1 >>> 0 < $51_1 >>> 0 | $22_1 >>> 0 > $24_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $12_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $16_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $19_1 | 0;
  $1_1 = $1_1 + $17_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $18_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $27_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $34_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $26_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $29_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $24_1 = $6_1;
  $4_1 = $6_1 << 12 | $28_1;
  $6_1 = $4_1 + $21_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $24_1 >>> 20) + $3_1 | 0;
  $16_1 = $6_1;
  $22_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $39_1 = __wasm_i64_mul($6_1, $22_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $27_1 = $1_1;
  $297($38_1, $39_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 704 | 0, $37_1, $35_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 656 | 0, $39_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($2_1 + 640 | 0, $39_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $50_1 = HEAP32[$2_1 + 1152 >> 2];
  $4_1 = HEAP32[$2_1 + 1184 >> 2];
  $6_1 = $50_1 + $4_1 | 0;
  $55_1 = HEAP32[$2_1 + 1156 >> 2];
  $1_1 = $55_1 + HEAP32[$2_1 + 1188 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $47_1 = $6_1;
  $4_1 = HEAP32[$2_1 + 1120 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $25_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 1124 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $56_1 = $6_1;
  $4_1 = HEAP32[$2_1 + 1072 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 1076 >> 2] | 0;
  $48_1 = $6_1;
  $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $10_1 = $4_1 + $48_1 | 0;
  $7_1 = $30_1;
  $1_1 = ($59_1 << 12) + $6_1 | 0;
  $63_1 = $10_1;
  $4_1 = HEAP32[$2_1 + 704 >> 2];
  $10_1 = $10_1 + $4_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 708 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $34_1 = $10_1;
  $4_1 = HEAP32[$2_1 + 656 >> 2];
  $13_1 = $10_1 + $4_1 | 0;
  $10_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 660 >> 2] | 0;
  $17_1 = $13_1;
  $4_1 = $4_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$2_1 + 676 >> 2];
  $1_1 = $22_1 + $26_1 | 0;
  $30_1 = HEAP32[$2_1 + 672 >> 2];
  $13_1 = $16_1 + $30_1 | 0;
  $1_1 = $13_1 >>> 0 < $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $49_1 = $1_1 >>> 20 | 0;
  $51_1 = ($1_1 | 0) == ($26_1 | 0) & $13_1 >>> 0 < $30_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $2_1 + 680 | 0;
  $40_1 = HEAP32[$1_1 >> 2];
  $43_1 = HEAP32[$1_1 + 4 >> 2];
  $44_1 = ($3_1 | 0) == ($22_1 | 0) & $16_1 >>> 0 < $21_1 >>> 0 | $3_1 >>> 0 > $22_1 >>> 0;
  $42_1 = ($3_1 | 0) == ($11_1 | 0) & $21_1 >>> 0 < $62_1 >>> 0 | $3_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $2_1 + 728 | 0;
  $38_1 = HEAP32[$1_1 >> 2];
  $28_1 = HEAP32[$1_1 + 4 >> 2];
  $29_1 = ($20_1 | 0) == ($11_1 | 0) & $61_1 >>> 0 > $62_1 >>> 0 | $20_1 >>> 0 > $11_1 >>> 0;
  $1_1 = $2_1 + 696 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($20_1 | 0) == ($14_1 | 0) & $60_1 >>> 0 > $61_1 >>> 0 | $20_1 >>> 0 < $14_1 >>> 0;
  $1_1 = $2_1 + 1016 | 0;
  $30_1 = HEAP32[$1_1 >> 2];
  $22_1 = HEAP32[$1_1 + 4 >> 2];
  $18_1 = ($14_1 | 0) == ($23_1 | 0) & $54_1 >>> 0 > $60_1 >>> 0 | $14_1 >>> 0 < $23_1 >>> 0;
  $1_1 = $2_1 + 952 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $13_1 = ($23_1 | 0) == ($33_1 | 0) & $53_1 >>> 0 > $54_1 >>> 0 | $23_1 >>> 0 < $33_1 >>> 0;
  $1_1 = $2_1 + 1064 | 0;
  $14_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $11_1 = ($5_1 | 0) == ($33_1 | 0) & $46_1 >>> 0 > $53_1 >>> 0 | $5_1 >>> 0 > $33_1 >>> 0;
  $12_1 = ($5_1 | 0) == ($52_1 | 0) & $46_1 >>> 0 < $45_1 >>> 0 | $5_1 >>> 0 < $52_1 >>> 0;
  $1_1 = $2_1 + 1144 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 1112 | 0;
  $23_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $23_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $23_1;
  $5_1 = $12_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $12_1 = $5_1;
  $5_1 = ($9_1 & 1048575) << 12 | $58_1 >>> 20;
  $9_1 = $12_1 + $5_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $11_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $14_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $13_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $18_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $30_1 | 0;
  $1_1 = $1_1 + $22_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $26_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $29_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $38_1 | 0;
  $1_1 = $1_1 + $28_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $42_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $9_1 = $3_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $44_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $40_1 | 0;
  $1_1 = $1_1 + $43_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $51_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $16_1 = $5_1;
  $3_1 = $5_1 << 12 | $49_1;
  $5_1 = $3_1 + $17_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $16_1 >>> 20) + $4_1 | 0;
  $38_1 = $5_1;
  HEAP32[$2_1 + 1320 >> 2] = $5_1;
  $14_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1324 >> 2] = $14_1 & 1048575;
  $26_1 = HEAP32[$2_1 + 1200 >> 2];
  $3_1 = HEAP32[$2_1 + 1216 >> 2];
  $5_1 = $26_1 + $3_1 | 0;
  $29_1 = HEAP32[$2_1 + 1204 >> 2];
  $1_1 = $29_1 + HEAP32[$2_1 + 1220 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 1168 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 1172 >> 2] | 0;
  $28_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $13_1 = $3_1 + $28_1 | 0;
  $9_1 = $41_1;
  $1_1 = ($36_1 << 12) + $5_1 | 0;
  $32_1 = $13_1;
  $3_1 = HEAP32[$2_1 + 640 >> 2];
  $13_1 = $13_1 + $3_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 644 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $30_1 = ($4_1 | 0) == ($14_1 | 0) & $17_1 >>> 0 > $38_1 >>> 0 | $4_1 >>> 0 > $14_1 >>> 0;
  $41_1 = ($4_1 | 0) == ($10_1 | 0) & $17_1 >>> 0 < $34_1 >>> 0 | $4_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $2_1 + 664 | 0;
  $33_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $22_1 = ($10_1 | 0) == ($15_1 | 0) & $63_1 >>> 0 > $34_1 >>> 0 | $10_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $2_1 + 712 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $17_1 = ($6_1 | 0) == ($15_1 | 0) & $48_1 >>> 0 > $63_1 >>> 0 | $6_1 >>> 0 > $15_1 >>> 0;
  $1_1 = $2_1 + 1080 | 0;
  $12_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $2_1 + 1128 | 0;
  $1_1 = HEAP32[$4_1 >> 2];
  $10_1 = HEAP32[$4_1 + 4 >> 2];
  $34_1 = ($6_1 | 0) == ($19_1 | 0) & $48_1 >>> 0 < $56_1 >>> 0 | $6_1 >>> 0 < $19_1 >>> 0;
  $20_1 = $12_1;
  $16_1 = $1_1;
  $1_1 = $2_1 + 1192 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 1160 | 0;
  $12_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $12_1;
  $6_1 = $4_1 + (($25_1 | 0) == ($55_1 | 0) & $50_1 >>> 0 > $47_1 >>> 0 | $25_1 >>> 0 < $55_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $16_1 + $4_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + (($19_1 | 0) == ($25_1 | 0) & $47_1 >>> 0 > $56_1 >>> 0 | $19_1 >>> 0 < $25_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $20_1 + $4_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $34_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $10_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $59_1 >>> 20;
  $7_1 = $10_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $17_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $22_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $33_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $41_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $8_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $30_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $6_1;
  $6_1 = $6_1 << 12 | $14_1 >>> 20;
  $7_1 = $6_1 + $13_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $3_1 | 0;
  $23_1 = $7_1;
  HEAP32[$2_1 + 1328 >> 2] = $7_1;
  $15_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1332 >> 2] = $15_1 & 1048575;
  $22_1 = HEAP32[$2_1 + 1232 >> 2];
  $4_1 = HEAP32[$2_1 + 1248 >> 2];
  $6_1 = $22_1 + $4_1 | 0;
  $19_1 = HEAP32[$2_1 + 1236 >> 2];
  $1_1 = $19_1 + HEAP32[$2_1 + 1252 >> 2] | 0;
  $25_1 = $6_1;
  $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $20_1 = $4_1 + $25_1 | 0;
  $7_1 = $35_1;
  $1_1 = ($37_1 << 12) + $6_1 | 0;
  $4_1 = $1_1;
  $24_1 = ($3_1 | 0) == ($15_1 | 0) & $13_1 >>> 0 > $23_1 >>> 0 | $3_1 >>> 0 > $15_1 >>> 0;
  $18_1 = ($3_1 | 0) == ($21_1 | 0) & $13_1 >>> 0 < $32_1 >>> 0 | $3_1 >>> 0 < $21_1 >>> 0;
  $1_1 = $2_1 + 648 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $13_1 = ($5_1 | 0) == ($21_1 | 0) & $28_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 > $21_1 >>> 0;
  $3_1 = $2_1 + 1176 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $14_1 = HEAP32[$3_1 + 4 >> 2];
  $21_1 = ($5_1 | 0) == ($11_1 | 0) & $28_1 >>> 0 < $31_1 >>> 0 | $5_1 >>> 0 < $11_1 >>> 0;
  $10_1 = $1_1;
  $12_1 = ($11_1 | 0) == ($29_1 | 0) & $26_1 >>> 0 > $31_1 >>> 0 | $11_1 >>> 0 < $29_1 >>> 0;
  $1_1 = $2_1 + 1224 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 1208 | 0;
  $11_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $11_1;
  $5_1 = $12_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $10_1 + $3_1 | 0;
  $1_1 = $1_1 + $14_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $21_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $10_1 = $5_1;
  $5_1 = ($9_1 & 1048575) << 12 | $36_1 >>> 20;
  $9_1 = $10_1 + $5_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $13_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $17_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $18_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $9_1 = $3_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $24_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $5_1;
  $5_1 = $5_1 << 12 | $15_1 >>> 20;
  $9_1 = $5_1 + $20_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $4_1 | 0;
  $17_1 = $9_1;
  HEAP32[$2_1 + 1336 >> 2] = $9_1;
  $11_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1340 >> 2] = $11_1 & 1048575;
  $12_1 = 0;
  $3_1 = HEAP32[$2_1 + 1264 >> 2];
  $10_1 = $12_1 + $3_1 | 0;
  $5_1 = $27_1;
  $15_1 = $39_1 << 12;
  $1_1 = $15_1 + HEAP32[$2_1 + 1268 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $13_1 = ($4_1 | 0) == ($11_1 | 0) & $20_1 >>> 0 > $17_1 >>> 0 | $4_1 >>> 0 > $11_1 >>> 0;
  $20_1 = ($4_1 | 0) == ($6_1 | 0) & $20_1 >>> 0 < $25_1 >>> 0 | $4_1 >>> 0 < $6_1 >>> 0;
  $9_1 = ($6_1 | 0) == ($19_1 | 0) & $22_1 >>> 0 > $25_1 >>> 0 | $6_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $2_1 + 1256 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 1240 | 0;
  $16_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $16_1;
  $6_1 = $9_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $9_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
  $7_1 = $9_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $20_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $8_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $13_1 | 0;
  $8_1 = $6_1 << 12 | $11_1 >>> 20;
  $11_1 = $8_1 + $10_1 | 0;
  $4_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($4_1 << 12 | $6_1 >>> 20) + $3_1 | 0;
  $1_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1344 >> 2] = $11_1;
  HEAP32[$2_1 + 1348 >> 2] = $1_1 & 1048575;
  $6_1 = $3_1;
  $3_1 = $1_1;
  $8_1 = ($6_1 | 0) == ($1_1 | 0) & $10_1 >>> 0 > $11_1 >>> 0 | $1_1 >>> 0 < $6_1 >>> 0;
  $7_1 = $6_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $5_1 >>> 20 | 0;
  $6_1 = ($5_1 & 1048575) << 12 | $39_1 >>> 20;
  $9_1 = $2_1 + 1272 | 0;
  $5_1 = $6_1 + HEAP32[$9_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$9_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $5_1;
  $5_1 = $7_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1;
  $6_1 = $8_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $5_1 = $4_1 << 12;
  $6_1 = $1_1 << 12 | $4_1 >>> 20;
  HEAP32[$2_1 + 1352 >> 2] = $3_1 >>> 20 | $5_1;
  HEAP32[$2_1 + 1356 >> 2] = $6_1;
  $49_1 = $2_1 + 1320 | 0;
  $170($2_1 + 1280 | 0, $49_1, 1065552);
  $5_1 = HEAP32[$2_1 + 1280 >> 2];
  $6_1 = HEAP32[$2_1 + 1284 >> 2];
  $297($2_1 + 304 | 0, $5_1, $6_1, 0, 0, -380448453, 643685, 0, 0);
  $297($2_1 + 288 | 0, $5_1, $6_1, 0, 0, 364816031, 877511, 0, 0);
  $8_1 = HEAP32[$2_1 + 1288 >> 2];
  $1_1 = HEAP32[$2_1 + 1292 >> 2];
  $297($2_1 + 384 | 0, $8_1, $1_1, 0, 0, -380448453, 643685, 0, 0);
  $297($2_1 + 272 | 0, $5_1, $6_1, 0, 0, -882346492, 376421, 0, 0);
  $4_1 = $1_1;
  $297($2_1 + 368 | 0, $8_1, $1_1, 0, 0, 364816031, 877511, 0, 0);
  $9_1 = HEAP32[$2_1 + 1296 >> 2];
  $1_1 = HEAP32[$2_1 + 1300 >> 2];
  $297($2_1 + 464 | 0, $9_1, $1_1, 0, 0, -380448453, 643685, 0, 0);
  $297($2_1 + 256 | 0, $5_1, $6_1, 0, 0, -952295041, 253166, 0, 0);
  $297($2_1 + 352 | 0, $8_1, $4_1, 0, 0, -882346492, 376421, 0, 0);
  $3_1 = $1_1;
  $297($2_1 + 448 | 0, $9_1, $1_1, 0, 0, 364816031, 877511, 0, 0);
  $7_1 = HEAP32[$2_1 + 1304 >> 2];
  $1_1 = HEAP32[$2_1 + 1308 >> 2];
  $297($2_1 + 544 | 0, $7_1, $1_1, 0, 0, -380448453, 643685, 0, 0);
  $297($2_1 + 240 | 0, $5_1, $6_1, 0, 0, 461123738, 2369, 0, 0);
  $297($2_1 + 336 | 0, $8_1, $4_1, 0, 0, -952295041, 253166, 0, 0);
  $297($2_1 + 432 | 0, $9_1, $3_1, 0, 0, -882346492, 376421, 0, 0);
  $297($2_1 + 528 | 0, $7_1, $1_1, 0, 0, 364816031, 877511, 0, 0);
  $5_1 = HEAP32[$2_1 + 1312 >> 2];
  $6_1 = HEAP32[$2_1 + 1316 >> 2];
  $297($2_1 + 624 | 0, $5_1, $6_1, 0, 0, -380448453, 643685, 0, 0);
  $297($2_1 + 320 | 0, $8_1, $4_1, 0, 0, 461123738, 2369, 0, 0);
  $297($2_1 + 416 | 0, $9_1, $3_1, 0, 0, -952295041, 253166, 0, 0);
  $297($2_1 + 512 | 0, $7_1, $1_1, 0, 0, -882346492, 376421, 0, 0);
  $297($2_1 + 608 | 0, $5_1, $6_1, 0, 0, 364816031, 877511, 0, 0);
  $297($2_1 + 400 | 0, $9_1, $3_1, 0, 0, 461123738, 2369, 0, 0);
  $297($2_1 + 496 | 0, $7_1, $1_1, 0, 0, -952295041, 253166, 0, 0);
  $297($2_1 + 592 | 0, $5_1, $6_1, 0, 0, -882346492, 376421, 0, 0);
  $297($2_1 + 480 | 0, $7_1, $1_1, 0, 0, 461123738, 2369, 0, 0);
  $297($2_1 + 576 | 0, $5_1, $6_1, 0, 0, -952295041, 253166, 0, 0);
  $297($2_1 + 560 | 0, $5_1, $6_1, 0, 0, 461123738, 2369, 0, 0);
  $5_1 = HEAP32[$2_1 + 304 >> 2];
  $6_1 = HEAP32[$2_1 + 308 >> 2];
  $36_1 = __wasm_i64_mul($5_1, $6_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $17_1 = $1_1;
  $297($2_1 + 224 | 0, $36_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 208 | 0, $36_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $8_1 = $2_1 + 176 | 0;
  $25_1 = HEAP32[$2_1 + 384 >> 2];
  $3_1 = HEAP32[$2_1 + 288 >> 2];
  $4_1 = $25_1 + $3_1 | 0;
  $23_1 = HEAP32[$2_1 + 388 >> 2];
  $1_1 = $23_1 + HEAP32[$2_1 + 292 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $27_1 = $4_1;
  $3_1 = HEAP32[$2_1 + 208 >> 2];
  $4_1 = $4_1 + $3_1 | 0;
  $12_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 212 >> 2] | 0;
  $10_1 = $4_1;
  $4_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $9_1 = HEAP32[$2_1 + 224 >> 2];
  $3_1 = $9_1;
  $5_1 = $3_1 + $5_1 | 0;
  $11_1 = HEAP32[$2_1 + 228 >> 2];
  $1_1 = $11_1 + $6_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $7_1 = $1_1 >>> 20 | 0;
  $5_1 = ($1_1 | 0) == ($11_1 | 0) & $3_1 >>> 0 < $9_1 >>> 0 | $1_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $2_1 + 312 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 232 | 0;
  $9_1 = $3_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $6_1 = $5_1 + $3_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $6_1;
  $3_1 = $6_1 << 12 | $7_1;
  $7_1 = $3_1 + $10_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $4_1 | 0;
  $11_1 = $7_1;
  $13_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $37_1 = __wasm_i64_mul($7_1, $13_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $30_1 = $1_1;
  $297($8_1, $37_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 192 | 0, $36_1, $17_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 160 | 0, $37_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $19_1 = $2_1 + 128 | 0;
  $35_1 = HEAP32[$2_1 + 368 >> 2];
  $3_1 = HEAP32[$2_1 + 272 >> 2];
  $5_1 = $35_1 + $3_1 | 0;
  $28_1 = HEAP32[$2_1 + 372 >> 2];
  $1_1 = $28_1 + HEAP32[$2_1 + 276 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $29_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 464 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $16_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 468 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 192 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $9_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 196 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $32_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 160 >> 2];
  $7_1 = $5_1 + $3_1 | 0;
  $5_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 164 >> 2] | 0;
  $15_1 = $7_1;
  $3_1 = $3_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = HEAP32[$2_1 + 180 >> 2];
  $1_1 = $13_1 + $18_1 | 0;
  $21_1 = HEAP32[$2_1 + 176 >> 2];
  $7_1 = $11_1 + $21_1 | 0;
  $1_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $22_1 = $1_1 >>> 20 | 0;
  $24_1 = ($1_1 | 0) == ($18_1 | 0) & $7_1 >>> 0 < $21_1 >>> 0 | $1_1 >>> 0 < $18_1 >>> 0;
  $1_1 = $2_1 + 184 | 0;
  $18_1 = HEAP32[$1_1 >> 2];
  $21_1 = HEAP32[$1_1 + 4 >> 2];
  $20_1 = ($4_1 | 0) == ($13_1 | 0) & $10_1 >>> 0 > $11_1 >>> 0 | $4_1 >>> 0 > $13_1 >>> 0;
  $7_1 = $2_1 + 216 | 0;
  $1_1 = HEAP32[$7_1 >> 2];
  $11_1 = HEAP32[$7_1 + 4 >> 2];
  $14_1 = ($4_1 | 0) == ($12_1 | 0) & $10_1 >>> 0 < $27_1 >>> 0 | $4_1 >>> 0 < $12_1 >>> 0;
  $8_1 = $1_1;
  $1_1 = $2_1 + 296 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $2_1 + 392 | 0;
  $10_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $10_1;
  $7_1 = $4_1 + (($12_1 | 0) == ($23_1 | 0) & $25_1 >>> 0 > $27_1 >>> 0 | $12_1 >>> 0 < $23_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $8_1 + $4_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $14_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $20_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $18_1 | 0;
  $1_1 = $1_1 + $21_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $13_1 = $6_1;
  $4_1 = $6_1 << 12 | $22_1;
  $7_1 = $4_1 + $15_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $13_1 >>> 20) + $3_1 | 0;
  $10_1 = $7_1;
  $12_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $39_1 = __wasm_i64_mul($7_1, $12_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $41_1 = $1_1;
  $297($19_1, $39_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 144 | 0, $37_1, $30_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 112 | 0, $39_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $26_1 = $2_1 + 80 | 0;
  $42_1 = HEAP32[$2_1 + 352 >> 2];
  $4_1 = HEAP32[$2_1 + 256 >> 2];
  $7_1 = $42_1 + $4_1 | 0;
  $45_1 = HEAP32[$2_1 + 356 >> 2];
  $1_1 = $45_1 + HEAP32[$2_1 + 260 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $50_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 448 >> 2];
  $7_1 = $7_1 + $4_1 | 0;
  $24_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 452 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $40_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 544 >> 2];
  $7_1 = $7_1 + $4_1 | 0;
  $18_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 548 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $43_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 144 >> 2];
  $8_1 = $7_1 + $4_1 | 0;
  $7_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 148 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $44_1 = $8_1;
  $4_1 = HEAP32[$2_1 + 112 >> 2];
  $8_1 = $8_1 + $4_1 | 0;
  $21_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 116 >> 2] | 0;
  $14_1 = $8_1;
  $4_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $19_1 = HEAP32[$2_1 + 132 >> 2];
  $1_1 = $12_1 + $19_1 | 0;
  $22_1 = HEAP32[$2_1 + 128 >> 2];
  $8_1 = $10_1 + $22_1 | 0;
  $1_1 = $8_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $33_1 = $1_1 >>> 20 | 0;
  $23_1 = ($1_1 | 0) == ($19_1 | 0) & $8_1 >>> 0 < $22_1 >>> 0 | $1_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $2_1 + 136 | 0;
  $27_1 = HEAP32[$1_1 >> 2];
  $25_1 = HEAP32[$1_1 + 4 >> 2];
  $19_1 = ($3_1 | 0) == ($12_1 | 0) & $10_1 >>> 0 < $15_1 >>> 0 | $3_1 >>> 0 > $12_1 >>> 0;
  $1_1 = $2_1 + 168 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 200 | 0;
  $20_1 = HEAP32[$1_1 >> 2];
  $10_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $2_1 + 472 | 0;
  $1_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $34_1 = ($5_1 | 0) == ($3_1 | 0) & $15_1 >>> 0 < $32_1 >>> 0 | $5_1 >>> 0 > $3_1 >>> 0;
  $15_1 = ($5_1 | 0) == ($9_1 | 0) & $31_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 < $9_1 >>> 0;
  $13_1 = ($9_1 | 0) == ($16_1 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $9_1 >>> 0 < $16_1 >>> 0;
  $11_1 = $1_1;
  $1_1 = $2_1 + 280 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 376 | 0;
  $9_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + (($16_1 | 0) == ($28_1 | 0) & $29_1 >>> 0 < $35_1 >>> 0 | $16_1 >>> 0 < $28_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $11_1 + $3_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $13_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $20_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $15_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $22_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $34_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $5_1 = $6_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $6_1 = $3_1 + $19_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $27_1 | 0;
  $1_1 = $1_1 + $25_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $6_1;
  $6_1 = $3_1 + $23_1 | 0;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $6_1;
  $3_1 = $6_1 << 12 | $33_1;
  $5_1 = $3_1 + $14_1 | 0;
  $6_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $4_1 | 0;
  $15_1 = $5_1;
  $16_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $46_1 = __wasm_i64_mul($5_1, $16_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $35_1 = $1_1;
  $297($26_1, $46_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 96 | 0, $39_1, $41_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 - -64 | 0, $46_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $38_1 = $2_1 + 32 | 0;
  $51_1 = HEAP32[$2_1 + 336 >> 2];
  $3_1 = HEAP32[$2_1 + 240 >> 2];
  $5_1 = $51_1 + $3_1 | 0;
  $54_1 = HEAP32[$2_1 + 340 >> 2];
  $1_1 = $54_1 + HEAP32[$2_1 + 244 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $60_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 432 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $33_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 436 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $61_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 528 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $23_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 532 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $62_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 624 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $27_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 628 >> 2] | 0;
  $52_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $8_1 = $3_1 + $52_1 | 0;
  $9_1 = $17_1;
  $1_1 = ($36_1 << 12) + $5_1 | 0;
  $55_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 96 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $20_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 100 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $47_1 = $8_1;
  $3_1 = HEAP32[$2_1 + 64 >> 2];
  $8_1 = $8_1 + $3_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 68 >> 2] | 0;
  $17_1 = $8_1;
  $3_1 = $3_1 >>> 0 > $8_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $19_1 = HEAP32[$2_1 + 84 >> 2];
  $1_1 = $16_1 + $19_1 | 0;
  $22_1 = HEAP32[$2_1 + 80 >> 2];
  $8_1 = $15_1 + $22_1 | 0;
  $1_1 = $8_1 >>> 0 < $15_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $28_1 = $1_1 >>> 20 | 0;
  $29_1 = ($1_1 | 0) == ($19_1 | 0) & $8_1 >>> 0 < $22_1 >>> 0 | $1_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $2_1 + 88 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($4_1 | 0) == ($16_1 | 0) & $14_1 >>> 0 > $15_1 >>> 0 | $4_1 >>> 0 > $16_1 >>> 0;
  $1_1 = $2_1 + 120 | 0;
  $25_1 = HEAP32[$1_1 >> 2];
  $19_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 152 | 0;
  $22_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 552 | 0;
  $13_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $2_1 + 456 | 0;
  $1_1 = HEAP32[$8_1 >> 2];
  $8_1 = HEAP32[$8_1 + 4 >> 2];
  $34_1 = ($4_1 | 0) == ($21_1 | 0) & $14_1 >>> 0 < $44_1 >>> 0 | $4_1 >>> 0 < $21_1 >>> 0;
  $21_1 = ($7_1 | 0) == ($21_1 | 0) & $43_1 >>> 0 > $44_1 >>> 0 | $7_1 >>> 0 > $21_1 >>> 0;
  $12_1 = ($7_1 | 0) == ($18_1 | 0) & $40_1 >>> 0 > $43_1 >>> 0 | $7_1 >>> 0 < $18_1 >>> 0;
  $10_1 = $1_1;
  $1_1 = $2_1 + 264 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $7_1 = $2_1 + 360 | 0;
  $14_1 = $4_1 + HEAP32[$7_1 >> 2] | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $14_1;
  $7_1 = $4_1 + (($24_1 | 0) == ($45_1 | 0) & $42_1 >>> 0 > $50_1 >>> 0 | $24_1 >>> 0 < $45_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $10_1 + $4_1 | 0;
  $1_1 = $1_1 + $8_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + (($18_1 | 0) == ($24_1 | 0) & $40_1 >>> 0 < $50_1 >>> 0 | $18_1 >>> 0 < $24_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $13_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $12_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $22_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $21_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $4_1 + $25_1 | 0;
  $1_1 = $1_1 + $19_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $7_1 = $34_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $6_1 >>> 20 | 0;
  $7_1 = $6_1 + $7_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $26_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $29_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $18_1 = $6_1;
  $4_1 = $6_1 << 12 | $28_1;
  $6_1 = $4_1 + $17_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $18_1 >>> 20) + $3_1 | 0;
  $12_1 = $6_1;
  $24_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $48_1 = __wasm_i64_mul($6_1, $24_1, 307527195, 335267);
  $1_1 = i64toi32_i32$HIGH_BITS & 1048575;
  $25_1 = $1_1;
  $297($38_1, $48_1, $1_1, 0, 0, 1559614445, 156442, 0, 0);
  $297($2_1 + 48 | 0, $46_1, $35_1, 0, 0, 1367801, 0, 0, 0);
  $297($2_1 + 16 | 0, $48_1, $1_1, 0, 0, 2043504001, 911919, 0, 0);
  $297($2_1, $48_1, $1_1, 0, 0, 1367801, 0, 0, 0);
  $40_1 = HEAP32[$2_1 + 416 >> 2];
  $4_1 = HEAP32[$2_1 + 320 >> 2];
  $6_1 = $40_1 + $4_1 | 0;
  $56_1 = HEAP32[$2_1 + 420 >> 2];
  $1_1 = $56_1 + HEAP32[$2_1 + 324 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $63_1 = $6_1;
  $4_1 = HEAP32[$2_1 + 512 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $19_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 516 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $34_1 = $6_1;
  $4_1 = HEAP32[$2_1 + 608 >> 2];
  $6_1 = $6_1 + $4_1 | 0;
  $22_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 612 >> 2] | 0;
  $53_1 = $6_1;
  $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $10_1 = $4_1 + $53_1 | 0;
  $7_1 = $30_1;
  $1_1 = ($37_1 << 12) + $6_1 | 0;
  $45_1 = $10_1;
  $4_1 = HEAP32[$2_1 + 48 >> 2];
  $10_1 = $10_1 + $4_1 | 0;
  $15_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 52 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $50_1 = $10_1;
  $4_1 = HEAP32[$2_1 + 16 >> 2];
  $14_1 = $10_1 + $4_1 | 0;
  $10_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 20 >> 2] | 0;
  $16_1 = $14_1;
  $4_1 = $4_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $26_1 = HEAP32[$2_1 + 36 >> 2];
  $1_1 = $24_1 + $26_1 | 0;
  $30_1 = HEAP32[$2_1 + 32 >> 2];
  $14_1 = $12_1 + $30_1 | 0;
  $1_1 = $14_1 >>> 0 < $12_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $43_1 = $1_1 >>> 20 | 0;
  $44_1 = ($1_1 | 0) == ($26_1 | 0) & $14_1 >>> 0 < $30_1 >>> 0 | $1_1 >>> 0 < $26_1 >>> 0;
  $1_1 = $2_1 + 40 | 0;
  $42_1 = HEAP32[$1_1 >> 2];
  $38_1 = HEAP32[$1_1 + 4 >> 2];
  $28_1 = ($3_1 | 0) == ($24_1 | 0) & $12_1 >>> 0 < $17_1 >>> 0 | $3_1 >>> 0 > $24_1 >>> 0;
  $29_1 = ($3_1 | 0) == ($11_1 | 0) & $17_1 >>> 0 < $47_1 >>> 0 | $3_1 >>> 0 < $11_1 >>> 0;
  $1_1 = $2_1 + 72 | 0;
  $31_1 = HEAP32[$1_1 >> 2];
  $32_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = ($20_1 | 0) == ($11_1 | 0) & $55_1 >>> 0 > $47_1 >>> 0 | $20_1 >>> 0 > $11_1 >>> 0;
  $1_1 = $2_1 + 104 | 0;
  $30_1 = HEAP32[$1_1 >> 2];
  $24_1 = HEAP32[$1_1 + 4 >> 2];
  $21_1 = ($5_1 | 0) == ($20_1 | 0) & $52_1 >>> 0 > $55_1 >>> 0 | $5_1 >>> 0 > $20_1 >>> 0;
  $1_1 = $2_1 + 632 | 0;
  $17_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = $2_1 + 536 | 0;
  $14_1 = HEAP32[$1_1 >> 2];
  $20_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 440 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $11_1 = HEAP32[$3_1 + 4 >> 2];
  $47_1 = ($5_1 | 0) == ($27_1 | 0) & $52_1 >>> 0 < $62_1 >>> 0 | $5_1 >>> 0 < $27_1 >>> 0;
  $18_1 = $14_1;
  $13_1 = $1_1;
  $1_1 = $2_1 + 248 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 344 | 0;
  $14_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $14_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $14_1;
  $5_1 = $3_1 + (($33_1 | 0) == ($54_1 | 0) & $51_1 >>> 0 > $60_1 >>> 0 | $33_1 >>> 0 < $54_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $13_1 + $3_1 | 0;
  $1_1 = $1_1 + $11_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + (($23_1 | 0) == ($33_1 | 0) & $60_1 >>> 0 > $61_1 >>> 0 | $23_1 >>> 0 < $33_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $18_1 + $3_1 | 0;
  $1_1 = $1_1 + $20_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + (($23_1 | 0) == ($27_1 | 0) & $61_1 >>> 0 > $62_1 >>> 0 | $23_1 >>> 0 > $27_1 >>> 0) | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $17_1 | 0;
  $1_1 = $1_1 + $12_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $47_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $14_1 = $5_1;
  $5_1 = ($9_1 & 1048575) << 12 | $36_1 >>> 20;
  $9_1 = $14_1 + $5_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $21_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $30_1 | 0;
  $1_1 = $1_1 + $24_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $26_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $31_1 | 0;
  $1_1 = $1_1 + $32_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $29_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $9_1 = $3_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $28_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $42_1 | 0;
  $1_1 = $1_1 + $38_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $44_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $5_1;
  $3_1 = $5_1 << 12 | $43_1;
  $5_1 = $3_1 + $16_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $4_1 | 0;
  $38_1 = $5_1;
  HEAP32[$2_1 + 1320 >> 2] = $5_1;
  $14_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1324 >> 2] = $14_1 & 1048575;
  $26_1 = HEAP32[$2_1 + 496 >> 2];
  $3_1 = HEAP32[$2_1 + 400 >> 2];
  $5_1 = $26_1 + $3_1 | 0;
  $29_1 = HEAP32[$2_1 + 500 >> 2];
  $1_1 = $29_1 + HEAP32[$2_1 + 404 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $31_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 592 >> 2];
  $5_1 = $5_1 + $3_1 | 0;
  $11_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 596 >> 2] | 0;
  $28_1 = $5_1;
  $5_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = 0;
  $13_1 = $3_1 + $28_1 | 0;
  $9_1 = $41_1;
  $1_1 = ($39_1 << 12) + $5_1 | 0;
  $32_1 = $13_1;
  $3_1 = HEAP32[$2_1 >> 2];
  $13_1 = $13_1 + $3_1 | 0;
  $17_1 = $1_1;
  $1_1 = $1_1 + HEAP32[$2_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $13_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $30_1 = ($4_1 | 0) == ($14_1 | 0) & $16_1 >>> 0 > $38_1 >>> 0 | $4_1 >>> 0 > $14_1 >>> 0;
  $41_1 = ($4_1 | 0) == ($10_1 | 0) & $16_1 >>> 0 < $50_1 >>> 0 | $4_1 >>> 0 < $10_1 >>> 0;
  $1_1 = $2_1 + 24 | 0;
  $33_1 = HEAP32[$1_1 >> 2];
  $23_1 = HEAP32[$1_1 + 4 >> 2];
  $27_1 = ($10_1 | 0) == ($15_1 | 0) & $45_1 >>> 0 > $50_1 >>> 0 | $10_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $2_1 + 56 | 0;
  $24_1 = HEAP32[$1_1 >> 2];
  $18_1 = HEAP32[$1_1 + 4 >> 2];
  $21_1 = ($6_1 | 0) == ($15_1 | 0) & $45_1 >>> 0 < $53_1 >>> 0 | $6_1 >>> 0 > $15_1 >>> 0;
  $1_1 = $2_1 + 616 | 0;
  $16_1 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $2_1 + 520 | 0;
  $1_1 = HEAP32[$4_1 >> 2];
  $10_1 = HEAP32[$4_1 + 4 >> 2];
  $47_1 = ($6_1 | 0) == ($22_1 | 0) & $53_1 >>> 0 < $34_1 >>> 0 | $6_1 >>> 0 < $22_1 >>> 0;
  $20_1 = $16_1;
  $12_1 = $1_1;
  $1_1 = $2_1 + 328 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 424 | 0;
  $16_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $16_1;
  $6_1 = $4_1 + (($19_1 | 0) == ($56_1 | 0) & $40_1 >>> 0 > $63_1 >>> 0 | $19_1 >>> 0 < $56_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $12_1 + $4_1 | 0;
  $1_1 = $1_1 + $10_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + (($19_1 | 0) == ($22_1 | 0) & $63_1 >>> 0 > $34_1 >>> 0 | $19_1 >>> 0 > $22_1 >>> 0) | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $20_1 + $4_1 | 0;
  $1_1 = $1_1 + $15_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $47_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $10_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $37_1 >>> 20;
  $7_1 = $10_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $21_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $24_1 | 0;
  $1_1 = $1_1 + $18_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $27_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $33_1 | 0;
  $1_1 = $1_1 + $23_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $4_1 + $41_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $8_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $30_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $12_1 = $6_1;
  $6_1 = $6_1 << 12 | $14_1 >>> 20;
  $7_1 = $6_1 + $13_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $12_1 >>> 20) + $3_1 | 0;
  $23_1 = $7_1;
  HEAP32[$2_1 + 1328 >> 2] = $7_1;
  $15_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1332 >> 2] = $15_1 & 1048575;
  $22_1 = HEAP32[$2_1 + 576 >> 2];
  $4_1 = HEAP32[$2_1 + 480 >> 2];
  $6_1 = $22_1 + $4_1 | 0;
  $19_1 = HEAP32[$2_1 + 580 >> 2];
  $1_1 = $19_1 + HEAP32[$2_1 + 484 >> 2] | 0;
  $27_1 = $6_1;
  $6_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = 0;
  $20_1 = $4_1 + $27_1 | 0;
  $7_1 = $35_1;
  $1_1 = ($46_1 << 12) + $6_1 | 0;
  $4_1 = $1_1;
  $24_1 = ($3_1 | 0) == ($15_1 | 0) & $13_1 >>> 0 > $23_1 >>> 0 | $3_1 >>> 0 > $15_1 >>> 0;
  $18_1 = ($3_1 | 0) == ($17_1 | 0) & $13_1 >>> 0 < $32_1 >>> 0 | $3_1 >>> 0 < $17_1 >>> 0;
  $1_1 = $2_1 + 8 | 0;
  $21_1 = HEAP32[$1_1 >> 2];
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $13_1 = ($5_1 | 0) == ($17_1 | 0) & $28_1 >>> 0 > $32_1 >>> 0 | $5_1 >>> 0 > $17_1 >>> 0;
  $3_1 = $2_1 + 600 | 0;
  $1_1 = HEAP32[$3_1 >> 2];
  $14_1 = HEAP32[$3_1 + 4 >> 2];
  $17_1 = ($5_1 | 0) == ($11_1 | 0) & $28_1 >>> 0 < $31_1 >>> 0 | $5_1 >>> 0 < $11_1 >>> 0;
  $10_1 = $1_1;
  $12_1 = ($11_1 | 0) == ($29_1 | 0) & $26_1 >>> 0 > $31_1 >>> 0 | $11_1 >>> 0 < $29_1 >>> 0;
  $1_1 = $2_1 + 408 | 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $5_1 = $2_1 + 504 | 0;
  $11_1 = $3_1 + HEAP32[$5_1 >> 2] | 0;
  $1_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $11_1;
  $5_1 = $12_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $10_1 + $3_1 | 0;
  $1_1 = $1_1 + $14_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $17_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $1_1 = $9_1 >>> 20 | 0;
  $10_1 = $5_1;
  $5_1 = ($9_1 & 1048575) << 12 | $39_1 >>> 20;
  $9_1 = $10_1 + $5_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $13_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $21_1 | 0;
  $1_1 = $1_1 + $16_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $3_1 + $18_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $5_1;
  $5_1 = $8_1 >>> 20 | 0;
  $9_1 = $3_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $9_1;
  $5_1 = $3_1 + $24_1 | 0;
  $1_1 = $5_1 >>> 0 < $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $14_1 = $5_1;
  $5_1 = $5_1 << 12 | $15_1 >>> 20;
  $9_1 = $5_1 + $20_1 | 0;
  $8_1 = $1_1;
  $1_1 = ($1_1 << 12 | $14_1 >>> 20) + $4_1 | 0;
  $17_1 = $9_1;
  HEAP32[$2_1 + 1336 >> 2] = $9_1;
  $11_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1340 >> 2] = $11_1 & 1048575;
  $12_1 = 0;
  $3_1 = HEAP32[$2_1 + 560 >> 2];
  $10_1 = $12_1 + $3_1 | 0;
  $5_1 = $25_1;
  $15_1 = $48_1 << 12;
  $1_1 = $15_1 + HEAP32[$2_1 + 564 >> 2] | 0;
  $1_1 = $3_1 >>> 0 > $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $1_1;
  $13_1 = ($4_1 | 0) == ($11_1 | 0) & $20_1 >>> 0 > $17_1 >>> 0 | $4_1 >>> 0 > $11_1 >>> 0;
  $20_1 = ($4_1 | 0) == ($6_1 | 0) & $20_1 >>> 0 < $27_1 >>> 0 | $4_1 >>> 0 < $6_1 >>> 0;
  $9_1 = ($6_1 | 0) == ($19_1 | 0) & $22_1 >>> 0 > $27_1 >>> 0 | $6_1 >>> 0 < $19_1 >>> 0;
  $1_1 = $2_1 + 488 | 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $6_1 = $2_1 + 584 | 0;
  $16_1 = $4_1 + HEAP32[$6_1 >> 2] | 0;
  $1_1 = HEAP32[$6_1 + 4 >> 2] + HEAP32[$1_1 + 4 >> 2] | 0;
  $1_1 = $4_1 >>> 0 > $16_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $16_1;
  $6_1 = $9_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $1_1;
  $1_1 = $7_1 >>> 20 | 0;
  $9_1 = $6_1;
  $6_1 = ($7_1 & 1048575) << 12 | $46_1 >>> 20;
  $7_1 = $9_1 + $6_1 | 0;
  $1_1 = $1_1 + $4_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $20_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $6_1 = $8_1 >>> 20 | 0;
  $7_1 = $4_1 + $6_1 | 0;
  $1_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $7_1;
  $6_1 = $4_1 + $13_1 | 0;
  $8_1 = $6_1 << 12 | $11_1 >>> 20;
  $11_1 = $8_1 + $10_1 | 0;
  $4_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($4_1 << 12 | $6_1 >>> 20) + $3_1 | 0;
  $1_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  HEAP32[$2_1 + 1344 >> 2] = $11_1;
  HEAP32[$2_1 + 1348 >> 2] = $1_1 & 1048575;
  $6_1 = $3_1;
  $3_1 = $1_1;
  $8_1 = ($6_1 | 0) == ($1_1 | 0) & $10_1 >>> 0 > $11_1 >>> 0 | $1_1 >>> 0 < $6_1 >>> 0;
  $7_1 = $6_1 >>> 0 < $15_1 >>> 0;
  $1_1 = $5_1 >>> 20 | 0;
  $6_1 = ($5_1 & 1048575) << 12 | $48_1 >>> 20;
  $9_1 = $2_1 + 568 | 0;
  $5_1 = $6_1 + HEAP32[$9_1 >> 2] | 0;
  $1_1 = $1_1 + HEAP32[$9_1 + 4 >> 2] | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $6_1 = $5_1;
  $5_1 = $7_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $4_1 >>> 20 | 0;
  $5_1 = $4_1 + $5_1 | 0;
  $1_1 = $5_1 >>> 0 < $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1;
  $6_1 = $8_1 + $4_1 | 0;
  $1_1 = $4_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $6_1;
  $5_1 = $4_1 << 12;
  $6_1 = $1_1 << 12 | $4_1 >>> 20;
  HEAP32[$2_1 + 1352 >> 2] = $3_1 >>> 20 | $5_1;
  HEAP32[$2_1 + 1356 >> 2] = $6_1;
  $1_1 = $57_1 + 8 | 0;
  $170($1_1, $49_1, 1065552);
  global$0 = $2_1 + 1360 | 0;
  $92($0_1, $1_1);
  global$0 = $57_1 + 128 | 0;
 }
 
 function $273($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if ($1_1 >>> 0 >= $3_1 >>> 0) {
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$2
     }
     break label$1;
    }
    if (HEAP8[$1_1 + $2_1 | 0] < -64) {
     break label$1
    }
   }
   $4_1 = $2_1;
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $4_1;
 }
 
 function $274($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$0_1 + 4 >> 2] - $3_1 >>> 0 < $1_1 >>> 0) {
   $173($2_1, $0_1, $3_1, $1_1);
   $331(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2]);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $275($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAPU8[1074604] | HEAPU8[1074605] << 8 | (HEAPU8[1074606] << 16 | HEAPU8[1074607] << 24);
  HEAP32[$0_1 + 44 >> 2] = HEAPU8[1074608] | HEAPU8[1074609] << 8 | (HEAPU8[1074610] << 16 | HEAPU8[1074611] << 24);
  HEAP32[$0_1 + 40 >> 2] = $2_1;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  $3_1 = HEAPU8[$1_1 + 28 | 0] | HEAPU8[$1_1 + 29 | 0] << 8 | (HEAPU8[$1_1 + 30 | 0] << 16 | HEAPU8[$1_1 + 31 | 0] << 24);
  $2_1 = $0_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAPU8[$1_1 + 24 | 0] | HEAPU8[$1_1 + 25 | 0] << 8 | (HEAPU8[$1_1 + 26 | 0] << 16 | HEAPU8[$1_1 + 27 | 0] << 24);
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $2_1 = HEAPU8[$1_1 + 20 | 0] | HEAPU8[$1_1 + 21 | 0] << 8 | (HEAPU8[$1_1 + 22 | 0] << 16 | HEAPU8[$1_1 + 23 | 0] << 24);
  HEAP32[$0_1 + 16 >> 2] = HEAPU8[$1_1 + 16 | 0] | HEAPU8[$1_1 + 17 | 0] << 8 | (HEAPU8[$1_1 + 18 | 0] << 16 | HEAPU8[$1_1 + 19 | 0] << 24);
  HEAP32[$0_1 + 20 >> 2] = $2_1;
  $2_1 = HEAPU8[$1_1 + 12 | 0] | HEAPU8[$1_1 + 13 | 0] << 8 | (HEAPU8[$1_1 + 14 | 0] << 16 | HEAPU8[$1_1 + 15 | 0] << 24);
  HEAP32[$0_1 + 8 >> 2] = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  $2_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
  HEAP32[$0_1 >> 2] = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $276($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = 31;
  while (1) {
   if (($1_1 | 0) != -1) {
    $2_1 = $0_1 + $1_1 | 0;
    $3_1 = HEAPU8[$2_1 | 0];
    HEAP8[$2_1 | 0] = $3_1 >>> 3 | $4_1;
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $3_1 << 5;
    continue;
   }
   break;
  };
 }
 
 function $277($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $381($0_1, $1_1, $2_1, 0);
  $381($0_1, $5_1 + 12 | 0, 4, 1);
  $191($0_1, 2, 0);
  $233($0_1, $3_1, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $232($0_1);
  $0_1 = $0_1 - 16 | 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $366($1_1 + 8 | 0, $2_1, ($2_1 >>> 0 < 4294967281) << 4);
  $168($0_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $279($0_1, $1_1) {
  var $2_1 = 0;
  HEAP32[$0_1 + 120 >> 2] = HEAP32[$1_1 + 120 >> 2];
  $2_1 = $91($0_1, $1_1, 40);
  $0_1 = $91($2_1 + 40 | 0, $1_1 + 40 | 0, 40);
  $91($2_1 + 80 | 0, $1_1 + 80 | 0, 40);
  $213($0_1);
  $250($0_1, $0_1, 1);
 }
 
 function $280($0_1, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_i64_mul($1_1, 0, HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$0_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 12 >> 2], $1_1, 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  HEAP32[$0_1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 20 >> 2], $1_1, 0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  HEAP32[$0_1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 28 >> 2], $1_1, 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  HEAP32[$0_1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_i64_mul(HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 36 >> 2], $1_1, 0)), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  HEAP32[$0_1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
 }
 
 function $281($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = $1_1 + 120 | 0;
  $15($0_1, $1_1, $2_1);
  $3_1 = $1_1 + 40 | 0;
  $4_1 = $1_1 + 80 | 0;
  $15($0_1 + 40 | 0, $3_1, $4_1);
  $15($0_1 + 80 | 0, $4_1, $2_1);
  $15($0_1 + 120 | 0, $1_1, $3_1);
 }
 
 function $282($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  if (($3_1 | 0) == HEAP32[$0_1 + 4 >> 2]) {
   $153($0_1, $3_1);
   $3_1 = HEAP32[$0_1 + 8 >> 2];
  }
  HEAP32[$0_1 + 8 >> 2] = $3_1 + 1;
  $0_1 = HEAP32[$0_1 >> 2] + ($3_1 << 3) | 0;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP8[$0_1 | 0] = $1_1;
 }
 
 function $283($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = $1_1 ^ -2147483648;
  label$1 : {
   if ($1_1 >>> 0 > 11) {
    $1_1 = 0;
    break label$1;
   }
   $2_1 = $1_1 << 2;
   $1_1 = HEAP32[$2_1 + 1217708 >> 2];
   $2_1 = HEAP32[$2_1 + 1217660 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $284($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 40 | 0;
  $91($3_1, $1_1, 40);
  $128($3_1);
  $202($2_1, $3_1);
  $18($2_1, 1218904);
  $203($0_1, $2_1);
  global$0 = $2_1 + 80 | 0;
 }
 
 function $285($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  while (1) {
   if (!$2_1) {
    return 0
   }
   $2_1 = $2_1 - 1 | 0;
   $3_1 = HEAPU8[$1_1 | 0];
   $4_1 = HEAPU8[$0_1 | 0];
   $0_1 = $0_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    continue
   }
   break;
  };
  return $4_1 - $3_1 | 0;
 }
 
 function $286($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = 1;
  while (1) {
   if (($2_1 | 0) == 32) {
    $0_1 = $380($3_1)
   } else {
    $3_1 = $356(HEAPU8[$0_1 + $2_1 | 0], HEAPU8[$1_1 + $2_1 | 0]) & $3_1;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0_1;
 }
 
 function $287() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = $73(3, 0);
  $1_1 = HEAP32[305149];
  HEAP32[305149] = $1_1 ? $1_1 : $0_1;
  if (!$1_1) {
   return $0_1
  }
  $379(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2] << 6, 64);
  $168($0_1, 16, 4);
  return $1_1;
 }
 
 function $288($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 24 >> 2] = $2_1;
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  HEAP32[$3_1 + 16 >> 2] = $1_1;
  $164($3_1 + 8 | 0, $3_1 + 16 | 0);
  $1_1 = HEAP32[$3_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $289($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  if ($2_1 >>> 0 <= $3_1 >>> 0) {
   HEAP32[$1_1 + 4 >> 2] = $3_1 - $2_1;
   $4_1 = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = $4_1 + $2_1;
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $4_1;
 }
 
 function $290($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $381($0_1, $1_1, $2_1, 0);
  $381($0_1, $5_1 + 12 | 0, 4, 1);
  $219($0_1, $3_1, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $291($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 288 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 72 | 0;
  $91($3_1, $1_1, 216);
  $1_1 = $2_1 + 8 | 0;
  $326($1_1, $3_1);
  $71($0_1, $1_1);
  global$0 = $2_1 + 288 | 0;
 }
 
 function $292($0_1, $1_1, $2_1, $3_1) {
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $2_1 = $172($1_1, $2_1);
   if (!$3_1) {
    break label$1
   }
   if (!$2_1) {
    $2_1 = 0;
    break label$1;
   }
   $147($2_1, 0, $1_1);
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $293($0_1, $1_1, $2_1) {
  $189($0_1, $1_1, $2_1);
  $189($0_1 + 40 | 0, $1_1 + 40 | 0, $2_1);
  $189($0_1 + 80 | 0, $1_1 + 80 | 0, $2_1);
  $189($0_1 + 120 | 0, $1_1 + 120 | 0, $2_1);
 }
 
 function $294($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $147($0_1, 0, 33);
  HEAP32[$2_1 + 12 >> 2] = 33;
  $98(HEAP32[304883], $0_1, $2_1 + 12 | 0, $1_1, 258);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $295($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = $172(40, 4);
  if (!$2_1) {
   $0_1 = HEAP32[305241];
   FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0](40, 4);
   abort();
  }
  $1_1 = $91($2_1, $1_1, 40);
  HEAP32[$0_1 + 4 >> 2] = 1073288;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $296($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1_1 + 80 | 0;
  $15($0_1, $1_1, $2_1);
  $3_1 = $1_1 + 40 | 0;
  $15($0_1 + 40 | 0, $3_1, $2_1);
  $422($0_1 + 80 | 0, $2_1);
  $15($0_1 + 120 | 0, $1_1, $3_1);
 }
 
 function $297($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $5_1;
  $18_1 = $1_1;
  $12_1 = __wasm_i64_mul($5_1, 0, $1_1, 0);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $13_1 = $9_1;
  $14_1 = $6_1;
  $15_1 = __wasm_i64_mul($1_1, 0, $6_1, 0);
  $5_1 = i64toi32_i32$HIGH_BITS;
  $16_1 = $5_1;
  $17_1 = $2_1;
  $6_1 = 0;
  $1_1 = __wasm_i64_mul($11_1, 0, $2_1, $6_1);
  $2_1 = $1_1 + $15_1 | 0;
  $6_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
  $19_1 = $2_1;
  $5_1 = $1_1 >>> 0 > $2_1 >>> 0 ? $6_1 + 1 | 0 : $6_1;
  $1_1 = $9_1 + $2_1 | 0;
  $2_1 = $10_1;
  $6_1 = 0;
  $9_1 = $6_1 + $12_1 | 0;
  HEAP32[$2_1 >> 2] = $9_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $9_1 = ($1_1 | 0) == ($13_1 | 0) & $9_1 >>> 0 < $12_1 >>> 0 | $1_1 >>> 0 < $13_1 >>> 0;
  $1_1 = __wasm_i64_mul($18_1, $17_1, $7_1, $8_1);
  $7_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $1_1;
  $1_1 = __wasm_i64_mul($3_1, $4_1, $11_1, $14_1);
  $3_1 = $6_1 + $1_1 | 0;
  $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
  $7_1 = $1_1 >>> 0 > $3_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $1_1 = $3_1;
  $3_1 = __wasm_i64_mul($14_1, 0, $17_1, 0);
  $4_1 = $1_1 + $3_1 | 0;
  $1_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
  $6_1 = $4_1;
  $3_1 = $3_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $1_1 = ($5_1 | 0) == ($16_1 | 0) & $15_1 >>> 0 > $19_1 >>> 0 | $5_1 >>> 0 < $16_1 >>> 0;
  $4_1 = $5_1;
  $5_1 = $5_1 + $6_1 | 0;
  $1_1 = $1_1 + $3_1 | 0;
  $1_1 = $4_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = $5_1 + $9_1 | 0;
  HEAP32[$2_1 + 8 >> 2] = $4_1;
  HEAP32[$2_1 + 12 >> 2] = $5_1 >>> 0 > $4_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $4_1 = HEAP32[$2_1 >> 2];
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $298($0_1, $1_1, $2_1, $3_1, $4_1) {
  label$1 : {
   if ($1_1 >>> 0 <= $2_1 >>> 0) {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break label$1
    }
    abort();
   }
   abort();
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 - $1_1;
  HEAP32[$0_1 >> 2] = ($1_1 << 3) + $3_1;
 }
 
 function $299($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $180($2_1 + 8 | 0, $1_1, 1110796, 2060, 1127980, 2060);
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$2_1 + 12 >> 2];
  global$0 = $2_1 + 16 | 0;
 }
 
 function $300($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  while (1) {
   if (($3_1 | 0) != 40) {
    $4_1 = $0_1 + $3_1 | 0;
    $2_1 = $1_1 + $3_1 | 0;
    $5_1 = HEAP32[$2_1 >> 2];
    $6_1 = $5_1 + HEAP32[$4_1 >> 2] | 0;
    $2_1 = HEAP32[$4_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $6_1 >>> 0 < $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $3_1 = $3_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $301($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 8 | 0;
  $91($3_1, $0_1, 40);
  $186($3_1);
  $189($0_1, $3_1, $1_1);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $302($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $310($4_1 + 8 | 0, 0, $3_1, $1_1, $2_1);
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$4_1 + 12 >> 2];
  global$0 = $4_1 + 16 | 0;
 }
 
 function $303($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 8 | 0;
  $91($2_1, $0_1, 40);
  $295($1_1, $2_1);
  global$0 = $1_1 + 48 | 0;
  return HEAP32[$1_1 >> 2];
 }
 
 function $304($0_1, $1_1, $2_1, $3_1, $4_1) {
  label$1 : {
   if ($3_1 >>> 0 <= $4_1 >>> 0) {
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    HEAP32[$0_1 + 4 >> 2] = $4_1 - $3_1;
    HEAP32[$0_1 >> 2] = $1_1 + $3_1;
    return;
   }
   abort();
  }
  abort();
 }
 
 function $305($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $298($4_1 + 8 | 0, 0, $3_1, $1_1, $2_1);
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$4_1 + 12 >> 2];
  global$0 = $4_1 + 16 | 0;
 }
 
 function $306($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 4 >> 2]) {
   $319($0_1, $2_1);
   $2_1 = HEAP32[$0_1 + 8 >> 2];
  }
  HEAP32[$0_1 + 8 >> 2] = $2_1 + 1;
  HEAP8[HEAP32[$0_1 >> 2] + $2_1 | 0] = $1_1;
 }
 
 function $307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2];
   if (!($2_1 & 16)) {
    if ($2_1 & 32) {
     break label$1
    }
    return $401($0_1, $1_1) | 0;
   }
   return $195(HEAP32[$0_1 >> 2], $1_1) | 0;
  }
  return $194(HEAP32[$0_1 >> 2], $1_1) | 0;
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2];
   if (!($2_1 & 16)) {
    if ($2_1 & 32) {
     break label$1
    }
    return $340($0_1, $1_1) | 0;
   }
   return $195(HEAP32[$0_1 >> 2], $1_1) | 0;
  }
  return $194(HEAP32[$0_1 >> 2], $1_1) | 0;
 }
 
 function $309($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $79($0_1, $1_1, $2_1 + 12 | 0);
  $1_1 = HEAP32[$2_1 + 12 >> 2];
  $0_1 = $371($0_1);
  global$0 = $2_1 + 16 | 0;
  return !($0_1 | $1_1);
 }
 
 function $310($0_1, $1_1, $2_1, $3_1, $4_1) {
  label$1 : {
   if ($1_1 >>> 0 <= $2_1 >>> 0) {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break label$1
    }
    abort();
   }
   abort();
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 - $1_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1;
 }
 
 function $311($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  $6_1 = $1_1;
  $1_1 = $147($5_1, 0, 64);
  $58($6_1, $2_1, $3_1, $1_1, 64, $4_1, 1);
  $71($0_1, $1_1);
  global$0 = $1_1 - -64 | 0;
 }
 
 function $312($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $59($2_1, $0_1);
  $0_1 = $2_1 + 32 | 0;
  $59($0_1, $1_1);
  $0_1 = $286($2_1, $0_1);
  global$0 = $2_1 - -64 | 0;
  return $0_1;
 }
 
 function $313($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1_1 + 120 | 0;
  $15($0_1, $1_1, $2_1);
  $3_1 = $1_1 + 40 | 0;
  $1_1 = $1_1 + 80 | 0;
  $15($0_1 + 40 | 0, $3_1, $1_1);
  $15($0_1 + 80 | 0, $1_1, $2_1);
 }
 
 function $314($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $292($3_1 + 8 | 0, $1_1, $2_1, 0);
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 12 >> 2];
  global$0 = $3_1 + 16 | 0;
 }
 
 function $315($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 - 1 | 0;
    $2_1 = HEAPU8[$0_1 | 0];
    $3_1 = $2_1 & 31;
    if (($2_1 & 63) >>> 0 >= 32) {
     $2_1 = 1 << $3_1;
     $4_1 = 0;
    } else {
     $4_1 = 1 << $3_1;
     $2_1 = $4_1 - 1 & 1 >>> 32 - $3_1;
    }
    $5_1 = $4_1 | $5_1;
    $6_1 = $2_1 | $6_1;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
  i64toi32_i32$HIGH_BITS = $6_1;
  return $5_1;
 }
 
 function $316($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $345($3_1 + 8 | 0, $1_1, 200, $2_1);
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 12 >> 2];
  global$0 = $3_1 + 16 | 0;
 }
 
 function $317($0_1) {
  if (($0_1 & 255) != 1) {
   $424(1217976, 0);
   return 0;
  }
  return $0_1 << 12 & 1048576 | ($0_1 & 512 ? 65744 : 208);
 }
 
 function $318($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 320 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 160 | 0;
  $223($4_1, $2_1);
  $108($3_1, $1_1, $4_1);
  $281($0_1, $3_1);
  global$0 = $3_1 + 320 | 0;
 }
 
 function $319($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $173($2_1, $0_1, $1_1, 1);
  $331(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $320($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $2_1 >>> 25 | 0;
  HEAP8[$3_1 + $1_1 | 0] = $2_1;
  HEAP8[((HEAP32[$0_1 >> 2] & $1_1 - 4) + $3_1 | 0) + 4 | 0] = $2_1;
 }
 
 function $321($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 > 4294967292) {
    break label$1
   }
   if (!$0_1) {
    return 4
   }
   $0_1 = $172($0_1, ($0_1 >>> 0 < 4294967293) << 2);
   if (!$0_1) {
    break label$1
   }
   return $0_1 | 0;
  }
  abort();
 }
 
 function $322($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  $5_1 = $1_1;
  $1_1 = $147($4_1, 0, 64);
  $290($5_1, $2_1, $3_1, $1_1, 64);
  $71($0_1, $1_1);
  global$0 = $1_1 - -64 | 0;
 }
 
 function $323($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = $172($3_1, $2_1);
  if ($4_1) {
   $91($4_1, $0_1, $1_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $1_1);
   $168($0_1, $1_1, $2_1);
  }
  return $4_1;
 }
 
 function $324($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $418($0_1, $1_1, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return HEAP32[$2_1 + 12 >> 2];
 }
 
 function $325($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $129($0_1, $2_1);
  $0_1 = $0_1 + 100 | 0;
  $216($0_1, $2_1, 32);
  $129($0_1, $1_1);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $326($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 224 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 8 | 0;
  $91($3_1, $1_1, 216);
  $54($0_1, $3_1);
  global$0 = $2_1 + 224 | 0;
 }
 
 function $327($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($0_1 | 0) != ($1_1 | 0)) {
    $2_1 = (HEAP8[$0_1 | 0] > -65) + $2_1 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1;
 }
 
 function $328($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 4 >> 2] >> 2]]($1_1);
   $1_1 = HEAP32[$0_1 >> 2];
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   $379($1_1, HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 8 >> 2]);
  }
 }
 
 function $329($0_1, $1_1, $2_1) {
  $189($0_1, $1_1, $2_1);
  $189($0_1 + 40 | 0, $1_1 + 40 | 0, $2_1);
  $189($0_1 + 80 | 0, $1_1 + 80 | 0, $2_1);
 }
 
 function $330($0_1, $1_1) {
  if (!$0_1) {
   return 0
  }
  if ($1_1) {
   return (($0_1 >>> 0) / ($1_1 >>> 0) | 0) + ((($0_1 >>> 0) % ($1_1 >>> 0) | 0) != 0) | 0
  }
  abort();
 }
 
 function $331($0_1, $1_1, $2_1) {
  if (($0_1 | 0) == 1) {
   if ($2_1) {
    $0_1 = HEAP32[305241];
    FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0]($1_1, $2_1);
   }
   abort();
  }
 }
 
 function $332($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $13_1 = global$0 - 16 | 0;
  global$0 = $13_1;
  if (HEAPU32[$0_1 + 8 >> 2] < $1_1 >>> 0) {
   $5_1 = global$0 - 80 | 0;
   global$0 = $5_1;
   $11_1 = HEAP32[$0_1 + 12 >> 2];
   $3_1 = $11_1 + $1_1 | 0;
   label$2 : {
    label$3 : {
     if ($3_1 >>> 0 < $11_1 >>> 0) {
      break label$3
     }
     $1_1 = $0_1;
     $9_1 = HEAP32[$0_1 >> 2];
     $7_1 = $9_1 + 1 | 0;
     label$4 : {
      label$5 : {
       $12_1 = $9_1 >>> 0 < 8 ? $9_1 : Math_imul($7_1 >>> 3 | 0, 7);
       if ($3_1 >>> 0 > $12_1 >>> 1 >>> 0) {
        $0_1 = $12_1 + 1 | 0;
        $0_1 = $0_1 >>> 0 < $3_1 >>> 0 ? $3_1 : $0_1;
        if ($0_1 >>> 0 < 8) {
         break label$5
        }
        if (($0_1 | 0) != ($0_1 & 536870911)) {
         break label$3
        }
        $2_1 = (-1 >>> Math_clz32((($0_1 << 3 >>> 0) / 7 | 0) - 1 | 0) | 0) + 1 | 0;
        break label$4;
       }
       $4_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = 0;
       while (1) {
        label$8 : {
         label$9 : {
          if ($2_1 & 1) {
           $2_1 = $0_1 + 3 | 0;
           if ($2_1 >>> 0 < $0_1 >>> 0 | $2_1 >>> 0 >= $7_1 >>> 0) {
            break label$8
           }
           $0_1 = $0_1 + 4 | 0;
           break label$9;
          }
          $3_1 = $0_1 >>> 0 < $7_1 >>> 0;
          if (!$3_1) {
           break label$8
          }
          $2_1 = $0_1;
          $0_1 = $3_1 + $0_1 | 0;
         }
         $3_1 = $2_1 + $4_1 | 0;
         $2_1 = HEAP32[$3_1 >> 2];
         HEAP32[$3_1 >> 2] = (($2_1 >>> 7 ^ -1) & 16843009) + ($2_1 | 2139062143);
         $2_1 = 1;
         continue;
        }
        break;
       };
       label$11 : {
        if ($7_1 >>> 0 >= 4) {
         $0_1 = $4_1 + $7_1 | 0;
         $2_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
         HEAP8[$0_1 | 0] = $2_1;
         HEAP8[$0_1 + 1 | 0] = $2_1 >>> 8;
         HEAP8[$0_1 + 2 | 0] = $2_1 >>> 16;
         HEAP8[$0_1 + 3 | 0] = $2_1 >>> 24;
         break label$11;
        }
        $42($4_1 + 4 | 0, $4_1, $7_1);
       }
       $2_1 = 0;
       while (1) {
        label$14 : {
         $3_1 = $2_1;
         if (($2_1 | 0) != ($7_1 | 0)) {
          $2_1 = $3_1 + 1 | 0;
          $14_1 = $3_1 + $4_1 | 0;
          if (HEAPU8[$14_1 | 0] != 128) {
           continue
          }
          $6_1 = $4_1 + Math_imul($3_1 ^ -1, 12) | 0;
          $15_1 = $6_1 + 4 | 0;
          while (1) {
           $0_1 = $324(HEAP32[$6_1 >> 2], HEAP32[$15_1 >> 2]);
           $8_1 = i64toi32_i32$HIGH_BITS;
           $10_1 = $0_1 & $9_1;
           $8_1 = $177($1_1, $0_1, $8_1);
           if (($9_1 & ($3_1 - $10_1 ^ $8_1 - $10_1)) >>> 0 < 4) {
            break label$14
           }
           $10_1 = HEAPU8[$4_1 + $8_1 | 0];
           $320($1_1, $8_1, $0_1);
           if (($10_1 | 0) != 255) {
            $0_1 = $4_1 + Math_imul($8_1 ^ -1, 12) | 0;
            $8_1 = HEAP32[$0_1 >> 2];
            $16_1 = HEAP32[$0_1 + 4 >> 2];
            $10_1 = HEAP32[$6_1 + 4 >> 2];
            HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
            HEAP32[$0_1 + 4 >> 2] = $10_1;
            $0_1 = $0_1 + 8 | 0;
            $10_1 = HEAP32[$0_1 >> 2];
            $17_1 = $0_1;
            $0_1 = $6_1 + 8 | 0;
            HEAP32[$17_1 >> 2] = HEAP32[$0_1 >> 2];
            HEAP32[$6_1 >> 2] = $8_1;
            HEAP32[$6_1 + 4 >> 2] = $16_1;
            HEAP32[$0_1 >> 2] = $10_1;
            continue;
           }
           break;
          };
          HEAP8[$14_1 | 0] = 255;
          HEAP8[($4_1 + ($9_1 & $3_1 - 4) | 0) + 4 | 0] = 255;
          $0_1 = $4_1 + Math_imul($8_1 ^ -1, 12) | 0;
          HEAP32[$0_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
          $3_1 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$0_1 + 4 >> 2] = $3_1;
          continue;
         }
         HEAP32[$13_1 >> 2] = 0;
         HEAP32[$1_1 + 8 >> 2] = $12_1 - $11_1;
         break label$2;
        }
        $320($1_1, $3_1, $0_1);
        continue;
       };
      }
      $2_1 = $0_1 >>> 0 < 4 ? 4 : 8;
     }
     $0_1 = __wasm_i64_mul($2_1, 0, 12, 0);
     if (i64toi32_i32$HIGH_BITS) {
      break label$3
     }
     $3_1 = ($0_1 + $2_1 | 0) + 4 | 0;
     if ($3_1 >>> 0 < $0_1 >>> 0) {
      break label$3
     }
     $346($5_1 + 16 | 0, $3_1, 4);
     $4_1 = HEAP32[$5_1 + 16 >> 2];
     if ($4_1) {
      $3_1 = $147($0_1 + $4_1 | 0, 255, $2_1 + 4 | 0);
      HEAP32[$5_1 + 44 >> 2] = $11_1;
      $0_1 = $2_1 - 1 | 0;
      HEAP32[$5_1 + 40 >> 2] = ($0_1 >>> 0 < 8 ? $0_1 : Math_imul($2_1 >>> 3 | 0, 7)) - $11_1;
      HEAP32[$5_1 + 24 >> 2] = 12;
      HEAP32[$5_1 + 28 >> 2] = 4;
      HEAP32[$5_1 + 32 >> 2] = $0_1;
      HEAP32[$5_1 + 36 >> 2] = $3_1;
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      $6_1 = $2_1 + 4 | 0;
      $11_1 = $2_1 + $7_1 | 0;
      $0_1 = (HEAP32[$2_1 >> 2] ^ -1) & -2139062144;
      $4_1 = $5_1 + 32 | 0;
      while (1) {
       $372($5_1 + 8 | 0, $0_1);
       if (HEAP32[$5_1 + 8 >> 2] != 1) {
        if ($6_1 >>> 0 < $11_1 >>> 0) {
         $2_1 = $2_1 - 48 | 0;
         $0_1 = (HEAP32[$6_1 >> 2] ^ -1) & -2139062144;
         $6_1 = $6_1 + 4 | 0;
         continue;
        }
        $0_1 = HEAP32[$4_1 >> 2];
        $2_1 = HEAP32[$4_1 + 4 >> 2];
        $3_1 = HEAP32[$1_1 + 4 >> 2];
        HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $3_1;
        HEAP32[$1_1 >> 2] = $0_1;
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        $0_1 = $4_1 + 8 | 0;
        $2_1 = HEAP32[$0_1 >> 2];
        $3_1 = HEAP32[$0_1 + 4 >> 2];
        $1_1 = $1_1 + 8 | 0;
        $4_1 = HEAP32[$1_1 + 4 >> 2];
        HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$0_1 + 4 >> 2] = $4_1;
        HEAP32[$1_1 >> 2] = $2_1;
        HEAP32[$1_1 + 4 >> 2] = $3_1;
        HEAP32[$13_1 >> 2] = 0;
        $0_1 = HEAP32[$5_1 + 32 >> 2];
        if (!$0_1) {
         break label$2
        }
        $2_1 = HEAP32[$5_1 + 36 >> 2];
        $1_1 = __wasm_i64_mul($0_1 + 1 | 0, 0, 12, 0);
        $379($2_1 - $1_1 | 0, ($0_1 + $1_1 | 0) + 5 | 0, 4);
        break label$2;
       } else {
        $7_1 = (Math_imul(HEAP32[$5_1 + 12 >> 2], -12) + $2_1 | 0) - 12 | 0;
        $9_1 = $324(HEAP32[$7_1 >> 2], HEAP32[$7_1 + 4 >> 2]);
        $8_1 = i64toi32_i32$HIGH_BITS;
        $12_1 = $177($4_1, $9_1, $8_1);
        $320($4_1, $12_1, $9_1);
        $8_1 = HEAP32[$7_1 + 4 >> 2];
        $9_1 = $3_1 + Math_imul($12_1 ^ -1, 12) | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $8_1;
        HEAP32[$9_1 + 8 >> 2] = HEAP32[$7_1 + 8 >> 2];
        $0_1 = $0_1 - 1 & $0_1;
        continue;
       }
      };
     }
     $0_1 = HEAP32[305241];
     FUNCTION_TABLE[($0_1 ? $0_1 : 1) | 0]($3_1, 4);
     abort();
    }
    abort();
   }
   global$0 = $5_1 + 80 | 0;
  }
  global$0 = $13_1 + 16 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1) {
  if ($2_1 >>> 0 < $3_1 >>> 0) {
   abort()
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 - $3_1;
  HEAP32[$0_1 >> 2] = ($3_1 << 3) + $1_1;
 }
 
 function $334($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $59($1_1, $0_1);
  $0_1 = $380(HEAP8[$1_1 | 0] & 1);
  global$0 = $1_1 + 32 | 0;
  return $0_1;
 }
 
 function $335($0_1, $1_1) {
  if (HEAP32[$1_1 >> 2] != 1) {
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
   HEAP8[$0_1 + 4 | 0] = HEAPU8[$1_1 + 8 | 0];
   return;
  }
  abort();
 }
 
 function $336($0_1) {
  var $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 200) {
    HEAP8[$0_1 + $1_1 | 0] = 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $337($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $274($0_1, $2_1);
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $91($3_1 + HEAP32[$0_1 >> 2] | 0, $1_1, $2_1);
  HEAP32[$0_1 + 8 >> 2] = $2_1 + $3_1;
 }
 
 function $338($0_1) {
  var $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 32) {
    HEAP8[$0_1 + $1_1 | 0] = 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$0_1 >> 2];
  $263($2_1 + 12 | 0, $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $0_1 = ($2_1 | 0) >= 0;
  $4_1 = $2_1;
  $2_1 = $2_1 ^ -1;
  $3_1 = $2_1 + 1 | 0;
  $2_1 = $2_1 >> 31;
  return $105($0_1 ? $4_1 : $3_1, $0_1 ? 0 : $3_1 ? $2_1 : $2_1 + 1 | 0, $0_1, $1_1) | 0;
 }
 
 function $341($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  HEAP32[$0_1 >> 2] = $1_1 - 1;
  if (!($1_1 & 2 | $1_1 >>> 0 < 4)) {
   label$2 : {
    $3_1 = $0_1;
    $1_1 = HEAP32[$0_1 >> 2];
    while (1) {
     $0_1 = $1_1;
     if ($0_1 >>> 0 < 4 | $0_1 & 2) {
      break label$2
     }
     $1_1 = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = ($0_1 | 0) == ($1_1 | 0) ? $0_1 | 2 : $1_1;
     if (($0_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
    while (1) {
     label$5 : {
      $4_1 = $0_1 & -4;
      $1_1 = $4_1;
      while (1) {
       $2_1 = HEAP32[$1_1 >> 2];
       if (!$2_1) {
        $2_1 = HEAP32[$1_1 + 8 >> 2];
        HEAP32[$2_1 + 4 >> 2] = $1_1;
        $1_1 = $2_1;
        continue;
       }
       break;
      };
      HEAP32[$4_1 >> 2] = $2_1;
      label$8 : {
       if (!($0_1 & 1)) {
        $1_1 = $0_1;
        $0_1 = HEAP32[$2_1 + 4 >> 2];
        if (!$0_1) {
         break label$8
        }
        HEAP32[$4_1 >> 2] = $0_1;
        HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] & -3;
        break label$5;
       }
       $1_1 = HEAP32[$3_1 >> 2];
       $2_1 = ($1_1 | 0) == ($0_1 | 0);
       HEAP32[$3_1 >> 2] = $2_1 ? $0_1 & -3 : $1_1;
       if ($2_1) {
        break label$2
       }
       $0_1 = $1_1;
       continue;
      }
      while (1) {
       $0_1 = HEAP32[$3_1 >> 2];
       $2_1 = ($1_1 | 0) == ($0_1 | 0);
       HEAP32[$3_1 >> 2] = $2_1 ? $1_1 & 1 : $0_1;
       if ($2_1) {
        break label$5
       }
       $1_1 = $0_1;
       if ($0_1 >>> 0 < 4) {
        continue
       }
       break;
      };
      continue;
     }
     break;
    };
    abort();
   }
  }
 }
 
 function $342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$0_1 >> 2];
  $127($2_1 + 12 | 0, $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $343($0_1) {
  var $1_1 = 0, $2_1 = 0;
  while (1) {
   if (($1_1 | 0) != 40) {
    $2_1 = $0_1 + $1_1 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $1_1 = $1_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $344($0_1, $1_1) {
  $227($0_1, $1_1);
  $178($0_1 + 432 | 0, $1_1 + 432 | 0);
  $227($0_1 + 216 | 0, $1_1 + 216 | 0);
 }
 
 function $345($0_1, $1_1, $2_1, $3_1) {
  if ($2_1 >>> 0 < $3_1 >>> 0) {
   abort()
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 - $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1;
 }
 
 function $346($0_1, $1_1, $2_1) {
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    break label$1;
   }
   $2_1 = $172($1_1, $2_1);
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $347($0_1) {
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2];
   if (!$0_1) {
    break label$1
   }
   $379($0_1, $1_1 << 3, 4);
  }
 }
 
 function $348($0_1, $1_1, $2_1) {
  if ($2_1 >>> 0 >= 129) {
   abort()
  }
  HEAP32[$0_1 + 4 >> 2] = 128 - $2_1;
  HEAP32[$0_1 >> 2] = $1_1 + $2_1;
 }
 
 function $349($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $259($2_1, $1_1);
  $91($0_1, $2_1, 64);
  global$0 = $2_1 - -64 | 0;
 }
 
 function $350($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 160 | 0;
  global$0 = $2_1;
  $66($2_1, $1_1);
  $351($0_1, $2_1);
  global$0 = $2_1 + 160 | 0;
 }
 
 function $351($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 160 | 0;
  global$0 = $2_1;
  $3_1 = $0_1;
  $0_1 = $91($2_1, $1_1, 160);
  $373($3_1, $0_1);
  global$0 = $0_1 + 160 | 0;
 }
 
 function $352($0_1, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $367($1_1);
  (wasm2js_i32$0 = $0_1 + 8 | 0, wasm2js_i32$1 = $362()), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = HEAPU8[$1_1 + 1 | 0] != 0;
 }
 
 function $353($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = $0_1;
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 + 28 >> 2] + 12 >> 2]](HEAP32[$0_1 + 24 >> 2], $1_1, $2_1) | 0;
  $1_1 = $3_1 | 0;
  i64toi32_i32$HIGH_BITS = !!$0_1;
  return $1_1;
 }
 
 function $354($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = $1_1 - 1;
  if (($1_1 | 0) == 1) {
   $0_1 = HEAP32[$0_1 >> 2];
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    HEAP8[$1_1 | 0] = 0;
    $1_1 = HEAP32[$0_1 + 20 >> 2];
    if (!$1_1) {
     break label$2
    }
    $168(HEAP32[$0_1 + 16 >> 2], $1_1, 1);
   }
   label$3 : {
    if (($0_1 | 0) == -1) {
     break label$3
    }
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1 - 1;
    if (($1_1 | 0) != 1) {
     break label$3
    }
    $168($0_1, 32, 8);
   }
  }
 }
 
 function $355($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if (HEAPU8[$0_1 + 4 | 0]) {
    break label$1
   }
   if (!$362()) {
    break label$1
   }
   HEAP8[$1_1 + 1 | 0] = 1;
  }
  HEAP8[$1_1 | 0] = 0;
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 ^ $1_1;
  return $380(($0_1 - 1 & ($0_1 ^ -1) & 128) >>> 7 | 0);
 }
 
 function $357($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 <= 4294967292) {
    $0_1 = $323($0_1, $1_1, 4, $2_1);
    if ($0_1) {
     break label$1
    }
   }
   abort();
  }
  return $0_1 | 0;
 }
 
 function $358($0_1) {
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 528734635;
  HEAP32[$0_1 + 28 >> 2] = 1541459225;
  HEAP32[$0_1 + 16 >> 2] = 1359893119;
  HEAP32[$0_1 + 20 >> 2] = -1694144372;
  HEAP32[$0_1 + 8 >> 2] = 1013904242;
  HEAP32[$0_1 + 12 >> 2] = -1521486534;
  HEAP32[$0_1 >> 2] = 1779033703;
  HEAP32[$0_1 + 4 >> 2] = -1150833019;
 }
 
 function $359($0_1, $1_1, $2_1) {
  $181($0_1, 1048980, 3);
  if ($2_1) {
   $277($0_1, 1217612, 0, $1_1, $2_1)
  }
 }
 
 function $360() {
  if (HEAP32[305245] == 1) {
   return !HEAP32[305246]
  }
  HEAP32[305245] = 1;
  HEAP32[305246] = 0;
  return 1;
 }
 
 function $361($0_1, $1_1, $2_1, $3_1) {
  if (($1_1 | 0) == ($3_1 | 0)) {
   $0_1 = $285($0_1, $2_1, $1_1)
  } else {
   $0_1 = 1
  }
  return !$0_1;
 }
 
 function $362() {
  var $0_1 = 0;
  if (HEAP32[305242] & 2147483647) {
   $0_1 = $360() ^ 1
  } else {
   $0_1 = 0
  }
  return $0_1;
 }
 
 function $363($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1) {
   $379(HEAP32[$0_1 >> 2], Math_imul($1_1, 1280), 8)
  }
 }
 
 function $364($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1) {
   $379(HEAP32[$0_1 >> 2], $1_1 << 8, 1)
  }
 }
 
 function $365($0_1, $1_1, $2_1, $3_1) {
  if ($2_1 >>> 0 < $3_1 >>> 0) {
   abort()
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $366($0_1, $1_1, $2_1) {
  if ($2_1) {
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $1_1;
   return;
  }
  abort();
 }
 
 function $367($0_1) {
  var $1_1 = 0;
  $1_1 = HEAPU8[$0_1 | 0];
  HEAP8[$0_1 | 0] = 1;
  if (!($1_1 & 1)) {
   return
  }
  abort();
 }
 
 function $368($0_1) {
  HEAP32[$0_1 + 120 >> 2] = 0;
  $343($0_1);
  $343($0_1 + 40 | 0);
  $343($0_1 + 80 | 0);
 }
 
 function $369($0_1, $1_1) {
  $231($0_1, $1_1);
  $231($0_1 + 40 | 0, $1_1 + 32 | 0);
  HEAP32[$0_1 + 80 >> 2] = 0;
 }
 
 function $370($0_1) {
  HEAP32[$0_1 + 120 >> 2] = 1;
  $343($0_1);
  $343($0_1 + 40 | 0);
  $343($0_1 + 80 | 0);
 }
 
 function $371($0_1) {
  return !(HEAP32[$0_1 + 24 >> 2] | (HEAP32[$0_1 + 16 >> 2] | (HEAP32[$0_1 + 8 >> 2] | HEAP32[$0_1 >> 2])) | (HEAP32[$0_1 + 28 >> 2] | (HEAP32[$0_1 + 20 >> 2] | (HEAP32[$0_1 + 12 >> 2] | HEAP32[$0_1 + 4 >> 2]))));
 }
 
 function $372($0_1, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  HEAP32[$0_1 >> 2] = ($1_1 | 0) != 0;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = __wasm_ctz_i32($1_1) >>> 3 | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
 }
 
 function $373($0_1, $1_1) {
  $65($0_1 + 160 | 0, $1_1);
  $91($0_1, $1_1, 160);
 }
 
 function $374($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1) {
   $417(HEAP32[$0_1 >> 2], $1_1)
  }
 }
 
 function $375($0_1) {
  if (HEAP32[$0_1 >> 2]) {
   $347($0_1 + 4 | 0)
  }
 }
 
 function $376($0_1) {
  if (HEAP32[$0_1 >> 2] != 2) {
   $387(HEAP32[$0_1 + 4 >> 2])
  }
 }
 
 function $377($0_1) {
  HEAP32[$0_1 + 80 >> 2] = 1;
  $343($0_1);
  $343($0_1 + 40 | 0);
 }
 
 function $378($0_1) {
  HEAP32[$0_1 + 80 >> 2] = 0;
  $343($0_1);
  $343($0_1 + 40 | 0);
 }
 
 function $379($0_1, $1_1, $2_1) {
  if ($1_1) {
   $168($0_1, $1_1, $2_1)
  }
 }
 
 function $380($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAP8[$1_1 + 15 | 0] = $0_1;
  return HEAPU8[$1_1 + 15 | 0];
 }
 
 function $381($0_1, $1_1, $2_1, $3_1) {
  $191($0_1, 18, $3_1);
  $233($0_1, $1_1, $2_1);
 }
 
 function $382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if ($1_1) {
   $168($0_1, $1_1, 4)
  }
 }
 
 function $383($0_1) {
  $0_1 = $0_1 + 192 | 0;
  $391($0_1);
  $391($0_1);
 }
 
 function $384() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  label$1 : {
   label$2 : {
    if (HEAP32[305150] != 1 | HEAP32[305151]) {
     $1_1 = $0_1 + 136 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $2_1 = $0_1 + 128 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $3_1 = $0_1 + 120 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$0_1 + 112 >> 2] = 0;
     HEAP32[$0_1 + 116 >> 2] = 0;
     $5_1 = $94($0_1 + 112 | 0);
     label$4 : {
      if (!$5_1) {
       $6_1 = HEAP32[$1_1 + 4 >> 2];
       $4_1 = $0_1 + 32 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $6_1;
       $4_1 = HEAP32[$2_1 + 4 >> 2];
       $1_1 = $0_1 + 24 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $4_1;
       $2_1 = HEAP32[$3_1 + 4 >> 2];
       $1_1 = $0_1 + 16 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $2_1;
       $1_1 = HEAP32[$0_1 + 116 >> 2];
       HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 112 >> 2];
       HEAP32[$0_1 + 12 >> 2] = $1_1;
       $275($0_1 - -64 | 0, $0_1 + 8 | 0);
       break label$4;
      }
      HEAP32[$0_1 - -64 >> 2] = 1074628;
      HEAP32[$0_1 + 60 >> 2] = $5_1;
     }
     if ($5_1) {
      break label$2
     }
     $1_1 = $0_1 + 8 | 0;
     $91($1_1, $0_1 - -64 | 0, 48);
     $147(1220608, 0, 256);
     $91($0_1 + 60 | 0, $1_1, 48);
     $91(1220868, $0_1 + 56 | 0, 52);
     HEAP32[305232] = 65536;
     HEAP32[305233] = 0;
     HEAP32[305230] = 65536;
     HEAP32[305231] = 0;
     HEAP32[305216] = 64;
     HEAP32[305150] = 1;
     HEAP32[305151] = 0;
     HEAP32[305234] = 0;
    }
    global$0 = $0_1 + 144 | 0;
    break label$1;
   }
   abort();
  }
  return 1220608;
 }
 
 function $385($0_1, $1_1) {
  return ($286($0_1, $1_1) & 255) == 1;
 }
 
 function $386($0_1) {
  if (HEAP32[$0_1 >> 2]) {
   $374($0_1)
  }
 }
 
 function $387($0_1) {
  if ($0_1 >>> 0 >= 36) {
   fimport$1($0_1 | 0)
  }
 }
 
 function $388($0_1) {
  if (HEAP32[$0_1 >> 2]) {
   $354($0_1)
  }
 }
 
 function $389($0_1, $1_1, $2_1, $3_1) {
  $277($0_1, $1_1, $2_1, $3_1, 32);
 }
 
 function $390($0_1) {
  $374($0_1);
  $374($0_1 + 12 | 0);
 }
 
 function $391($0_1) {
  $338($0_1);
  $338($0_1 + 32 | 0);
 }
 
 function $392($0_1) {
  $379(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2], 1);
 }
 
 function $393($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[$1_1 + 8 >> 2];
    label$3 : {
     if (($5_1 | 0) != 1) {
      if ($2_1) {
       break label$3
      }
      $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], $3_1, $4_1) | 0;
      break label$1;
     }
     if (!$2_1) {
      break label$2
     }
    }
    $2_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$0_1 + 36 >> 2] = $3_1;
    HEAP32[$0_1 + 40 >> 2] = $3_1 + $4_1;
    HEAP32[$0_1 + 32 >> 2] = 0;
    $2_1 = $2_1 + 1 | 0;
    label$5 : {
     while (1) {
      $2_1 = $2_1 - 1 | 0;
      if ($2_1) {
       $254($0_1 + 24 | 0, $0_1 + 32 | 0);
       if (HEAP32[$0_1 + 28 >> 2] != 1114112) {
        continue
       }
       break label$5;
      }
      break;
     };
     $254($0_1 + 16 | 0, $0_1 + 32 | 0);
     if (HEAP32[$0_1 + 20 >> 2] == 1114112) {
      break label$5
     }
     $273($0_1 + 8 | 0, HEAP32[$0_1 + 16 >> 2], $3_1, $4_1);
     $2_1 = HEAP32[$0_1 + 8 >> 2];
     $4_1 = $2_1 ? HEAP32[$0_1 + 12 >> 2] : $4_1;
     $3_1 = $2_1 ? $2_1 : $3_1;
    }
    if ($5_1) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], $3_1, $4_1) | 0;
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   $5_1 = $327($3_1, $3_1 + $4_1 | 0);
   if ($2_1 >>> 0 > $5_1 >>> 0) {
    $182($0_1, $1_1, $2_1 - $5_1 | 0, 0);
    $2_1 = 1;
    $5_1 = HEAP32[$0_1 >> 2];
    if (($5_1 | 0) == 1114112) {
     break label$1
    }
    $6_1 = HEAP32[$0_1 + 4 >> 2];
    if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], $3_1, $4_1) | 0) {
     break label$1
    }
    $2_1 = $255($5_1, $6_1, $1_1);
    break label$1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 + 28 >> 2] + 12 >> 2]](HEAP32[$1_1 + 24 >> 2], $3_1, $4_1) | 0;
  }
  global$0 = $0_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $394($0_1) {
  if (!$0_1) {
   abort()
  }
 }
 
 function $395($0_1, $1_1, $2_1) {
  $277($0_1, 1105523, 10, $1_1, $2_1);
 }
 
 function $396($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $337(HEAP32[$0_1 >> 2], $1_1, $2_1);
  return 0;
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 4 >> 2] = 23;
  HEAP32[$0_1 >> 2] = 1062365;
 }
 
 function $398($0_1) {
  return $380(($0_1 ^ -1) & 1);
 }
 
 function $399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 4 >> 2] = 40;
  HEAP32[$0_1 >> 2] = 1073921;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[305248] = $0_1;
  HEAP32[305247] = 1;
 }
 
 function $401($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $105(HEAP32[$0_1 >> 2], 0, 1, $1_1) | 0;
 }
 
 function $402($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0;
  label$1 : {
   $0_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
   $2_1 = global$0 - 208 | 0;
   global$0 = $2_1;
   $12_1 = $1_1;
   $1_1 = Math_imul($1_1, 826366246);
   __wasm_i64_mul(Math_imul($12_1, -1640531527) ^ $1_1, 0, 814, 0);
   label$2 : {
    $3_1 = i64toi32_i32$HIGH_BITS;
    if ($3_1 >>> 0 > 813) {
     break label$2
    }
    __wasm_i64_mul($1_1 ^ Math_imul(HEAPU16[($3_1 << 1) + 1105912 >> 1] + $12_1 | 0, -1640531527), 0, 814, 0);
    $1_1 = i64toi32_i32$HIGH_BITS;
    if ($1_1 >>> 0 >= 814) {
     break label$2
    }
    $1_1 = HEAP32[($1_1 << 2) + 1107540 >> 2];
    $17_1 = ($1_1 >>> 8 | 0) == ($12_1 | 0) ? $1_1 : 0;
    if (!($17_1 & 255)) {
     $13($0_1)
    }
    $8_1 = $0_1 + 12 | 0;
    $18_1 = $0_1 + 8 | 0;
    while (1) {
     label$5 : {
      label$6 : {
       label$7 : {
        if (HEAP32[$18_1 >> 2] != 1) {
         $0_1 = HEAP32[$8_1 >> 2];
         if (($0_1 | 0) != 4) {
          if ($0_1 >>> 0 >= 4) {
           break label$2
          }
          $0_1 = ($0_1 << 3) + $8_1 | 0;
          HEAP32[$0_1 + 8 >> 2] = $12_1;
          HEAP8[$0_1 + 4 | 0] = $17_1;
          HEAP32[$8_1 >> 2] = HEAP32[$8_1 >> 2] + 1;
          break label$7;
         }
         $218($2_1 + 40 | 0, 8);
         HEAP32[$2_1 + 56 >> 2] = 0;
         $0_1 = HEAP32[$2_1 + 44 >> 2];
         HEAP32[$2_1 + 48 >> 2] = HEAP32[$2_1 + 40 >> 2];
         HEAP32[$2_1 + 52 >> 2] = $0_1;
         HEAP32[$2_1 + 76 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$2_1 + 68 >> 2] = 0;
         HEAP32[$2_1 + 72 >> 2] = 0;
         HEAP32[$2_1 + 64 >> 2] = $8_1;
         while (1) {
          $176($2_1 + 32 | 0, $2_1 - -64 | 0);
          $0_1 = HEAP32[$2_1 + 36 >> 2];
          if (($0_1 | 0) == 1114112) {
           while (1) {
            $176($2_1 + 24 | 0, $2_1 - -64 | 0);
            if (HEAP32[$2_1 + 28 >> 2] != 1114112) {
             continue
            }
            break;
           };
           $1_1 = HEAP32[$2_1 + 76 >> 2];
           $0_1 = HEAP32[$2_1 + 68 >> 2];
           $15_1 = HEAP32[$2_1 + 64 >> 2];
           $305($2_1 + 16 | 0, $15_1 + 4 | 0, 4, HEAP32[$15_1 >> 2]);
           $333($2_1 + 8 | 0, HEAP32[$2_1 + 16 >> 2], HEAP32[$2_1 + 20 >> 2], $0_1);
           $13_1 = $1_1 - $0_1 | 0;
           $0_1 = HEAP32[$2_1 + 12 >> 2];
           if ($13_1 >>> 0 > $0_1 >>> 0) {
            break label$2
           }
           $5_1 = $0_1 - $13_1 | 0;
           $0_1 = HEAP32[$2_1 + 8 >> 2] + ($13_1 << 3) | 0;
           $4_1 = $13_1;
           while (1) {
            $9_1 = $5_1 << 3;
            $3_1 = 0 - $9_1 | 0;
            label$14 : {
             while (1) {
              if (!$5_1 | !$4_1) {
               break label$5
              }
              if ($4_1 + $5_1 >>> 0 >= 24) {
               if (($4_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $4_1) >>> 0 < 17) {
                break label$6
               }
               if ($4_1 >>> 0 < $5_1 >>> 0) {
                break label$14
               }
               $1_1 = $0_1;
               while (1) {
                $0_1 = $1_1 + $3_1 | 0;
                $133($0_1, $1_1, $5_1);
                $1_1 = $0_1;
                $4_1 = $4_1 - $5_1 | 0;
                if ($5_1 >>> 0 <= $4_1 >>> 0) {
                 continue
                }
                break;
               };
               continue;
              }
              break;
             };
             $16_1 = 0 - $4_1 | 0;
             $14_1 = $0_1 - ($4_1 << 3) | 0;
             $1_1 = $14_1;
             $10_1 = HEAP32[$1_1 + 4 >> 2];
             $7_1 = HEAP32[$1_1 >> 2];
             $3_1 = $10_1;
             $6_1 = $5_1;
             $11_1 = $5_1;
             while (1) {
              $1_1 = ($6_1 << 3) + $14_1 | 0;
              while (1) {
               $19_1 = $7_1 & 255;
               $7_1 = HEAP32[$1_1 >> 2];
               $10_1 = HEAP32[$1_1 + 4 >> 2];
               HEAP32[$1_1 >> 2] = $19_1;
               HEAP32[$1_1 + 4 >> 2] = $3_1;
               $3_1 = $10_1;
               if ($4_1 >>> 0 > $6_1 >>> 0) {
                $1_1 = $1_1 + $9_1 | 0;
                $6_1 = $5_1 + $6_1 | 0;
                continue;
               }
               break;
              };
              $6_1 = $6_1 + $16_1 | 0;
              if ($6_1) {
               $11_1 = $6_1 >>> 0 < $11_1 >>> 0 ? $6_1 : $11_1;
               continue;
              } else {
               HEAP8[$14_1 | 0] = $7_1;
               HEAP32[(($16_1 << 3) + $0_1 | 0) + 4 >> 2] = $3_1;
               $0_1 = 1;
               $11_1 = $11_1 >>> 0 > 1 ? $11_1 : 1;
               while (1) {
                if (($0_1 | 0) == ($11_1 | 0)) {
                 break label$5
                }
                $1_1 = $0_1 + $5_1 | 0;
                $9_1 = ($0_1 << 3) + $14_1 | 0;
                $3_1 = $9_1;
                $10_1 = HEAP32[$3_1 + 4 >> 2];
                $7_1 = HEAP32[$3_1 >> 2];
                $3_1 = $10_1;
                while (1) {
                 $16_1 = $7_1 & 255;
                 $6_1 = ($1_1 << 3) + $14_1 | 0;
                 $7_1 = HEAP32[$6_1 >> 2];
                 $10_1 = HEAP32[$6_1 + 4 >> 2];
                 HEAP32[$6_1 >> 2] = $16_1;
                 HEAP32[$6_1 + 4 >> 2] = $3_1;
                 $3_1 = $10_1;
                 if ($1_1 >>> 0 < $4_1 >>> 0) {
                  $1_1 = $1_1 + $5_1 | 0;
                  continue;
                 }
                 $1_1 = $1_1 - $4_1 | 0;
                 if (($1_1 | 0) != ($0_1 | 0)) {
                  continue
                 }
                 break;
                };
                HEAP32[$9_1 + 4 >> 2] = $3_1;
                HEAP8[$9_1 | 0] = $7_1;
                $0_1 = $0_1 + 1 | 0;
                continue;
               };
              }
             };
            }
            $1_1 = $4_1 << 3;
            $3_1 = 0 - $1_1 | 0;
            while (1) {
             $133($0_1 + $3_1 | 0, $0_1, $4_1);
             $0_1 = $0_1 + $1_1 | 0;
             $5_1 = $5_1 - $4_1 | 0;
             if ($5_1 >>> 0 >= $4_1 >>> 0) {
              continue
             }
             break;
            };
            continue;
           };
          } else {
           $282($2_1 + 48 | 0, HEAPU8[$2_1 + 32 | 0], $0_1);
           continue;
          }
         };
        }
        $282($8_1, $17_1, $12_1);
       }
       global$0 = $2_1 + 208 | 0;
       break label$1;
      }
      $3_1 = $4_1 << 3;
      $1_1 = $0_1 - $3_1 | 0;
      $10_1 = $1_1 + $9_1 | 0;
      if ($4_1 >>> 0 > $5_1 >>> 0) {
       $7_1 = $2_1 + 80 | 0;
       $91($7_1, $0_1, $9_1);
       $42($10_1, $1_1, $3_1);
       $91($1_1, $7_1, $9_1);
       break label$5;
      }
      $7_1 = $2_1 + 80 | 0;
      $91($7_1, $1_1, $3_1);
      $42($1_1, $0_1, $9_1);
      $91($10_1, $7_1, $3_1);
     }
     HEAP32[$15_1 >> 2] = HEAP32[$15_1 >> 2] - $13_1;
     $0_1 = $2_1 + 80 | 0;
     $91($0_1, $18_1, 40);
     HEAP32[$18_1 >> 2] = 1;
     $1_1 = HEAP32[$2_1 + 52 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $1_1;
     HEAP32[$8_1 + 8 >> 2] = HEAP32[$2_1 + 56 >> 2];
     $375($0_1);
     continue;
    };
   }
   abort();
  }
 }
 
 function $403($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  while (1) continue;
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $43(HEAP32[$0_1 >> 2], $1_1, $2_1) | 0;
 }
 
 function $405($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0;
  $15_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
  $0_1 = global$0 - 128 | 0;
  global$0 = $0_1;
  $0_1 = $91($0_1, $1_1, 64);
  $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 64) {
    $3_1 = $0_1 + $1_1 | 0;
    $2_1 = HEAP32[$3_1 >> 2];
    HEAP32[$3_1 >> 2] = $2_1 << 8 & 16711680 | $2_1 << 24 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  $11_1 = HEAP32[$15_1 >> 2];
  $9_1 = HEAP32[$15_1 + 4 >> 2];
  $10_1 = HEAP32[$15_1 + 16 >> 2];
  $12_1 = HEAP32[$15_1 + 20 >> 2];
  $1_1 = HEAP32[$15_1 + 8 >> 2];
  $2_1 = HEAP32[$15_1 + 12 >> 2];
  $22_1 = HEAP32[$0_1 + 12 >> 2];
  $26_1 = HEAP32[$0_1 + 8 >> 2];
  $16_1 = HEAP32[$0_1 + 4 >> 2];
  $23_1 = HEAP32[$0_1 >> 2];
  $3_1 = HEAP32[$15_1 + 28 >> 2];
  HEAP32[$0_1 + 104 >> 2] = HEAP32[$15_1 + 24 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $3_1;
  HEAP32[$0_1 + 96 >> 2] = $1_1;
  HEAP32[$0_1 + 100 >> 2] = $2_1;
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $10_1;
  HEAP32[$0_1 + 116 >> 2] = $9_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $2_1 = $0_1 + 80 | 0;
  $3_1 = $0_1 + 96 | 0;
  $1_1 = $0_1 + 112 | 0;
  $132($2_1, $3_1, $1_1, $16_1 + 1899447441 | 0, $23_1 + 1116352408 | 0);
  $24_1 = HEAP32[$0_1 + 80 >> 2];
  $28_1 = HEAP32[$0_1 + 84 >> 2];
  $18_1 = HEAP32[$0_1 + 88 >> 2];
  $13_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $12_1;
  HEAP32[$0_1 + 104 >> 2] = $10_1;
  HEAP32[$0_1 + 100 >> 2] = $9_1;
  HEAP32[$0_1 + 96 >> 2] = $11_1;
  HEAP32[$0_1 + 124 >> 2] = $13_1;
  HEAP32[$0_1 + 120 >> 2] = $18_1;
  HEAP32[$0_1 + 116 >> 2] = $28_1;
  HEAP32[$0_1 + 112 >> 2] = $24_1;
  $132($2_1, $3_1, $1_1, $22_1 - 373957723 | 0, $26_1 - 1245643825 | 0);
  $11_1 = HEAP32[$0_1 + 80 >> 2];
  $9_1 = HEAP32[$0_1 + 84 >> 2];
  $10_1 = HEAP32[$0_1 + 88 >> 2];
  $12_1 = HEAP32[$0_1 + 92 >> 2];
  $19_1 = HEAP32[$0_1 + 28 >> 2];
  $20_1 = HEAP32[$0_1 + 24 >> 2];
  $25_1 = HEAP32[$0_1 + 20 >> 2];
  $21_1 = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $13_1;
  HEAP32[$0_1 + 104 >> 2] = $18_1;
  HEAP32[$0_1 + 100 >> 2] = $28_1;
  HEAP32[$0_1 + 96 >> 2] = $24_1;
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $10_1;
  HEAP32[$0_1 + 116 >> 2] = $9_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $132($2_1, $3_1, $1_1, $25_1 + 1508970993 | 0, $21_1 + 961987163 | 0);
  $27_1 = HEAP32[$0_1 + 80 >> 2];
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $5_1 = HEAP32[$0_1 + 88 >> 2];
  $6_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $12_1;
  HEAP32[$0_1 + 104 >> 2] = $10_1;
  HEAP32[$0_1 + 100 >> 2] = $9_1;
  HEAP32[$0_1 + 96 >> 2] = $11_1;
  HEAP32[$0_1 + 124 >> 2] = $6_1;
  HEAP32[$0_1 + 120 >> 2] = $5_1;
  HEAP32[$0_1 + 116 >> 2] = $4_1;
  HEAP32[$0_1 + 112 >> 2] = $27_1;
  $132($2_1, $3_1, $1_1, $19_1 - 1424204075 | 0, $20_1 - 1841331548 | 0);
  $11_1 = HEAP32[$0_1 + 80 >> 2];
  $9_1 = HEAP32[$0_1 + 84 >> 2];
  $10_1 = HEAP32[$0_1 + 88 >> 2];
  $12_1 = HEAP32[$0_1 + 92 >> 2];
  $24_1 = HEAP32[$0_1 + 44 >> 2];
  $28_1 = HEAP32[$0_1 + 40 >> 2];
  $18_1 = HEAP32[$0_1 + 36 >> 2];
  $13_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $6_1;
  HEAP32[$0_1 + 104 >> 2] = $5_1;
  HEAP32[$0_1 + 100 >> 2] = $4_1;
  HEAP32[$0_1 + 96 >> 2] = $27_1;
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $10_1;
  HEAP32[$0_1 + 116 >> 2] = $9_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $132($2_1, $3_1, $1_1, $18_1 + 310598401 | 0, $13_1 - 670586216 | 0);
  $4_1 = HEAP32[$0_1 + 80 >> 2];
  $5_1 = HEAP32[$0_1 + 84 >> 2];
  $6_1 = HEAP32[$0_1 + 88 >> 2];
  $7_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $12_1;
  HEAP32[$0_1 + 104 >> 2] = $10_1;
  HEAP32[$0_1 + 100 >> 2] = $9_1;
  HEAP32[$0_1 + 96 >> 2] = $11_1;
  HEAP32[$0_1 + 124 >> 2] = $7_1;
  HEAP32[$0_1 + 120 >> 2] = $6_1;
  HEAP32[$0_1 + 116 >> 2] = $5_1;
  HEAP32[$0_1 + 112 >> 2] = $4_1;
  $132($2_1, $3_1, $1_1, $24_1 + 1426881987 | 0, $28_1 + 607225278 | 0);
  $11_1 = HEAP32[$0_1 + 80 >> 2];
  $8_1 = HEAP32[$0_1 + 84 >> 2];
  $14_1 = HEAP32[$0_1 + 88 >> 2];
  $17_1 = HEAP32[$0_1 + 92 >> 2];
  $9_1 = HEAP32[$0_1 + 60 >> 2];
  $10_1 = HEAP32[$0_1 + 56 >> 2];
  $27_1 = HEAP32[$0_1 + 52 >> 2];
  $12_1 = HEAP32[$0_1 + 48 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $7_1;
  HEAP32[$0_1 + 104 >> 2] = $6_1;
  HEAP32[$0_1 + 100 >> 2] = $5_1;
  HEAP32[$0_1 + 96 >> 2] = $4_1;
  HEAP32[$0_1 + 124 >> 2] = $17_1;
  HEAP32[$0_1 + 120 >> 2] = $14_1;
  HEAP32[$0_1 + 116 >> 2] = $8_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $132($2_1, $3_1, $1_1, $27_1 - 2132889090 | 0, $12_1 + 1925078388 | 0);
  $4_1 = HEAP32[$0_1 + 80 >> 2];
  $5_1 = HEAP32[$0_1 + 84 >> 2];
  $6_1 = HEAP32[$0_1 + 88 >> 2];
  $7_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $17_1;
  HEAP32[$0_1 + 104 >> 2] = $14_1;
  HEAP32[$0_1 + 100 >> 2] = $8_1;
  HEAP32[$0_1 + 96 >> 2] = $11_1;
  HEAP32[$0_1 + 124 >> 2] = $7_1;
  HEAP32[$0_1 + 120 >> 2] = $6_1;
  HEAP32[$0_1 + 116 >> 2] = $5_1;
  HEAP32[$0_1 + 112 >> 2] = $4_1;
  $132($2_1, $3_1, $1_1, $9_1 - 1046744716 | 0, $10_1 - 1680079193 | 0);
  $8_1 = HEAP32[$0_1 + 80 >> 2];
  $14_1 = HEAP32[$0_1 + 84 >> 2];
  $17_1 = HEAP32[$0_1 + 88 >> 2];
  $29_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $23_1;
  HEAP32[$0_1 + 120 >> 2] = $16_1;
  HEAP32[$0_1 + 116 >> 2] = $26_1;
  HEAP32[$0_1 + 112 >> 2] = $22_1;
  $187($3_1, $1_1, $21_1);
  HEAP32[$0_1 + 92 >> 2] = $18_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $28_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $24_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $12_1 + HEAP32[$0_1 + 96 >> 2];
  $30_1 = $0_1 - -64 | 0;
  $190($30_1, $2_1, $9_1, $10_1);
  HEAP32[$0_1 + 108 >> 2] = $7_1;
  HEAP32[$0_1 + 104 >> 2] = $6_1;
  HEAP32[$0_1 + 100 >> 2] = $5_1;
  HEAP32[$0_1 + 96 >> 2] = $4_1;
  HEAP32[$0_1 + 124 >> 2] = $29_1;
  HEAP32[$0_1 + 120 >> 2] = $17_1;
  HEAP32[$0_1 + 116 >> 2] = $14_1;
  HEAP32[$0_1 + 112 >> 2] = $8_1;
  $26_1 = HEAP32[$0_1 + 64 >> 2];
  $22_1 = HEAP32[$0_1 + 68 >> 2];
  $11_1 = $0_1 + 72 | 0;
  $23_1 = HEAP32[$0_1 + 76 >> 2];
  $132($2_1, $3_1, $1_1, HEAP32[$11_1 >> 2] - 272742522 | 0, $23_1 - 459576895 | 0);
  $16_1 = HEAP32[$0_1 + 80 >> 2];
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $5_1 = HEAP32[$0_1 + 88 >> 2];
  $6_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $29_1;
  HEAP32[$0_1 + 104 >> 2] = $17_1;
  HEAP32[$0_1 + 100 >> 2] = $14_1;
  HEAP32[$0_1 + 96 >> 2] = $8_1;
  HEAP32[$0_1 + 124 >> 2] = $6_1;
  HEAP32[$0_1 + 120 >> 2] = $5_1;
  HEAP32[$0_1 + 116 >> 2] = $4_1;
  HEAP32[$0_1 + 112 >> 2] = $16_1;
  $132($2_1, $3_1, $1_1, $26_1 + 604807628 | 0, $22_1 + 264347078 | 0);
  $7_1 = HEAP32[$0_1 + 80 >> 2];
  $8_1 = HEAP32[$0_1 + 84 >> 2];
  $14_1 = HEAP32[$0_1 + 88 >> 2];
  $17_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $21_1;
  HEAP32[$0_1 + 120 >> 2] = $25_1;
  HEAP32[$0_1 + 116 >> 2] = $20_1;
  HEAP32[$0_1 + 112 >> 2] = $19_1;
  $187($3_1, $1_1, $13_1);
  HEAP32[$0_1 + 92 >> 2] = $27_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $10_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $9_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $23_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, HEAP32[$0_1 + 64 >> 2], $22_1);
  $21_1 = HEAP32[$0_1 + 112 >> 2];
  $22_1 = HEAP32[$0_1 + 116 >> 2];
  $23_1 = HEAP32[$0_1 + 120 >> 2];
  $26_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $6_1;
  HEAP32[$0_1 + 104 >> 2] = $5_1;
  HEAP32[$0_1 + 100 >> 2] = $4_1;
  HEAP32[$0_1 + 96 >> 2] = $16_1;
  HEAP32[$0_1 + 124 >> 2] = $17_1;
  HEAP32[$0_1 + 120 >> 2] = $14_1;
  HEAP32[$0_1 + 116 >> 2] = $8_1;
  HEAP32[$0_1 + 112 >> 2] = $7_1;
  $132($2_1, $3_1, $1_1, $23_1 + 1249150122 | 0, $26_1 + 770255983 | 0);
  $16_1 = HEAP32[$0_1 + 80 >> 2];
  $20_1 = HEAP32[$0_1 + 84 >> 2];
  $25_1 = HEAP32[$0_1 + 88 >> 2];
  $4_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $17_1;
  HEAP32[$0_1 + 104 >> 2] = $14_1;
  HEAP32[$0_1 + 100 >> 2] = $8_1;
  HEAP32[$0_1 + 96 >> 2] = $7_1;
  HEAP32[$0_1 + 124 >> 2] = $4_1;
  HEAP32[$0_1 + 120 >> 2] = $25_1;
  HEAP32[$0_1 + 116 >> 2] = $20_1;
  HEAP32[$0_1 + 112 >> 2] = $16_1;
  $132($2_1, $3_1, $1_1, $21_1 + 1996064986 | 0, $22_1 + 1555081692 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $13_1;
  HEAP32[$0_1 + 120 >> 2] = $18_1;
  HEAP32[$0_1 + 116 >> 2] = $28_1;
  HEAP32[$0_1 + 112 >> 2] = $24_1;
  $187($3_1, $1_1, $12_1);
  HEAP32[$0_1 + 92 >> 2] = HEAP32[$0_1 + 108 >> 2] + HEAP32[$11_1 >> 2];
  HEAP32[$0_1 + 88 >> 2] = HEAP32[$0_1 + 104 >> 2] + HEAP32[$0_1 + 68 >> 2];
  HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 100 >> 2] + HEAP32[$0_1 + 64 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $26_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $21_1, $22_1);
  $24_1 = HEAP32[$0_1 + 112 >> 2];
  $28_1 = HEAP32[$0_1 + 116 >> 2];
  $19_1 = HEAP32[$0_1 + 120 >> 2];
  $18_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $4_1;
  HEAP32[$0_1 + 104 >> 2] = $25_1;
  HEAP32[$0_1 + 100 >> 2] = $20_1;
  HEAP32[$0_1 + 96 >> 2] = $16_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $19_1 - 1473132947 | 0, $18_1 - 1740746414 | 0);
  $13_1 = HEAP32[$0_1 + 80 >> 2];
  $16_1 = HEAP32[$0_1 + 84 >> 2];
  $25_1 = HEAP32[$0_1 + 88 >> 2];
  $4_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $4_1;
  HEAP32[$0_1 + 120 >> 2] = $25_1;
  HEAP32[$0_1 + 116 >> 2] = $16_1;
  HEAP32[$0_1 + 112 >> 2] = $13_1;
  $132($2_1, $3_1, $1_1, $24_1 - 1084653625 | 0, $28_1 - 1341970488 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $27_1;
  HEAP32[$0_1 + 116 >> 2] = $10_1;
  HEAP32[$0_1 + 112 >> 2] = $9_1;
  $187($3_1, $1_1, HEAP32[$0_1 + 76 >> 2]);
  HEAP32[$0_1 + 92 >> 2] = $23_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $22_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $21_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $18_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $24_1, $28_1);
  $9_1 = HEAP32[$0_1 + 112 >> 2];
  $10_1 = HEAP32[$0_1 + 116 >> 2];
  $20_1 = HEAP32[$0_1 + 120 >> 2];
  $12_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $4_1;
  HEAP32[$0_1 + 104 >> 2] = $25_1;
  HEAP32[$0_1 + 100 >> 2] = $16_1;
  HEAP32[$0_1 + 96 >> 2] = $13_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $20_1 - 710438585 | 0, $12_1 - 958395405 | 0);
  $4_1 = HEAP32[$0_1 + 80 >> 2];
  $14_1 = HEAP32[$0_1 + 84 >> 2];
  $17_1 = HEAP32[$0_1 + 88 >> 2];
  $29_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $29_1;
  HEAP32[$0_1 + 120 >> 2] = $17_1;
  HEAP32[$0_1 + 116 >> 2] = $14_1;
  HEAP32[$0_1 + 112 >> 2] = $4_1;
  $132($2_1, $3_1, $1_1, $9_1 + 338241895 | 0, $10_1 + 113926993 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  $27_1 = HEAP32[$11_1 + 4 >> 2];
  $31_1 = $0_1 + 120 | 0;
  $13_1 = $31_1;
  HEAP32[$13_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$13_1 + 4 >> 2] = $27_1;
  $13_1 = HEAP32[$0_1 + 68 >> 2];
  HEAP32[$0_1 + 112 >> 2] = HEAP32[$0_1 + 64 >> 2];
  HEAP32[$0_1 + 116 >> 2] = $13_1;
  $187($3_1, $1_1, $26_1);
  HEAP32[$0_1 + 92 >> 2] = $19_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $28_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $24_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $12_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $9_1, $10_1);
  $13_1 = HEAP32[$0_1 + 112 >> 2];
  $27_1 = HEAP32[$0_1 + 116 >> 2];
  $25_1 = HEAP32[$0_1 + 120 >> 2];
  $16_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $29_1;
  HEAP32[$0_1 + 104 >> 2] = $17_1;
  HEAP32[$0_1 + 100 >> 2] = $14_1;
  HEAP32[$0_1 + 96 >> 2] = $4_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $25_1 + 773529912 | 0, $16_1 + 666307205 | 0);
  $4_1 = HEAP32[$0_1 + 80 >> 2];
  $14_1 = HEAP32[$0_1 + 84 >> 2];
  $17_1 = HEAP32[$0_1 + 88 >> 2];
  $29_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $29_1;
  HEAP32[$0_1 + 120 >> 2] = $17_1;
  HEAP32[$0_1 + 116 >> 2] = $14_1;
  HEAP32[$0_1 + 112 >> 2] = $4_1;
  $132($2_1, $3_1, $1_1, $13_1 + 1396182291 | 0, $27_1 + 1294757372 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $26_1;
  HEAP32[$0_1 + 120 >> 2] = $23_1;
  HEAP32[$0_1 + 116 >> 2] = $22_1;
  HEAP32[$0_1 + 112 >> 2] = $21_1;
  $187($3_1, $1_1, $18_1);
  HEAP32[$0_1 + 92 >> 2] = $20_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $10_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $9_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $16_1 + HEAP32[$0_1 + 96 >> 2];
  $190($30_1, $2_1, $13_1, $27_1);
  HEAP32[$0_1 + 108 >> 2] = $29_1;
  HEAP32[$0_1 + 104 >> 2] = $17_1;
  HEAP32[$0_1 + 100 >> 2] = $14_1;
  HEAP32[$0_1 + 96 >> 2] = $4_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $23_1 = HEAP32[$0_1 + 64 >> 2];
  $4_1 = HEAP32[$0_1 + 68 >> 2];
  $32_1 = HEAP32[$11_1 >> 2];
  $21_1 = HEAP32[$0_1 + 76 >> 2];
  $132($2_1, $3_1, $1_1, $32_1 + 1986661051 | 0, $21_1 + 1695183700 | 0);
  $14_1 = HEAP32[$0_1 + 80 >> 2];
  $17_1 = HEAP32[$0_1 + 84 >> 2];
  $29_1 = HEAP32[$0_1 + 88 >> 2];
  $33_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $33_1;
  HEAP32[$0_1 + 120 >> 2] = $29_1;
  HEAP32[$0_1 + 116 >> 2] = $17_1;
  HEAP32[$0_1 + 112 >> 2] = $14_1;
  $132($2_1, $3_1, $1_1, $23_1 - 1838011259 | 0, $4_1 - 2117940946 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $18_1;
  HEAP32[$0_1 + 120 >> 2] = $19_1;
  HEAP32[$0_1 + 116 >> 2] = $28_1;
  HEAP32[$0_1 + 112 >> 2] = $24_1;
  $187($3_1, $1_1, $12_1);
  HEAP32[$0_1 + 92 >> 2] = $25_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $27_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $13_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $21_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $23_1, $4_1);
  $21_1 = HEAP32[$0_1 + 112 >> 2];
  $22_1 = HEAP32[$0_1 + 116 >> 2];
  $24_1 = HEAP32[$0_1 + 120 >> 2];
  $26_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $33_1;
  HEAP32[$0_1 + 104 >> 2] = $29_1;
  HEAP32[$0_1 + 100 >> 2] = $17_1;
  HEAP32[$0_1 + 96 >> 2] = $14_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $24_1 - 1474664885 | 0, $26_1 - 1564481375 | 0);
  $18_1 = HEAP32[$0_1 + 80 >> 2];
  $19_1 = HEAP32[$0_1 + 84 >> 2];
  $14_1 = HEAP32[$0_1 + 88 >> 2];
  $17_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $17_1;
  HEAP32[$0_1 + 120 >> 2] = $14_1;
  HEAP32[$0_1 + 116 >> 2] = $19_1;
  HEAP32[$0_1 + 112 >> 2] = $18_1;
  $132($2_1, $3_1, $1_1, $21_1 - 949202525 | 0, $22_1 - 1035236496 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $20_1;
  HEAP32[$0_1 + 116 >> 2] = $10_1;
  HEAP32[$0_1 + 112 >> 2] = $9_1;
  $187($3_1, $1_1, $16_1);
  HEAP32[$0_1 + 92 >> 2] = HEAP32[$0_1 + 108 >> 2] + $32_1;
  HEAP32[$0_1 + 88 >> 2] = $4_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $23_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $26_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $21_1, $22_1);
  $9_1 = HEAP32[$0_1 + 112 >> 2];
  $10_1 = HEAP32[$0_1 + 116 >> 2];
  $28_1 = HEAP32[$0_1 + 120 >> 2];
  $12_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $17_1;
  HEAP32[$0_1 + 104 >> 2] = $14_1;
  HEAP32[$0_1 + 100 >> 2] = $19_1;
  HEAP32[$0_1 + 96 >> 2] = $18_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $28_1 - 694614492 | 0, $12_1 - 778901479 | 0);
  $23_1 = HEAP32[$0_1 + 80 >> 2];
  $19_1 = HEAP32[$0_1 + 84 >> 2];
  $20_1 = HEAP32[$0_1 + 88 >> 2];
  $4_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $4_1;
  HEAP32[$0_1 + 120 >> 2] = $20_1;
  HEAP32[$0_1 + 116 >> 2] = $19_1;
  HEAP32[$0_1 + 112 >> 2] = $23_1;
  $132($2_1, $3_1, $1_1, $9_1 + 275423344 | 0, $10_1 - 200395387 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $16_1;
  HEAP32[$0_1 + 120 >> 2] = $25_1;
  HEAP32[$0_1 + 116 >> 2] = $27_1;
  HEAP32[$0_1 + 112 >> 2] = $13_1;
  $187($3_1, $1_1, HEAP32[$0_1 + 76 >> 2]);
  HEAP32[$0_1 + 92 >> 2] = $24_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $22_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $21_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $12_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $9_1, $10_1);
  $18_1 = HEAP32[$0_1 + 112 >> 2];
  $13_1 = HEAP32[$0_1 + 116 >> 2];
  $25_1 = HEAP32[$0_1 + 120 >> 2];
  $27_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $4_1;
  HEAP32[$0_1 + 104 >> 2] = $20_1;
  HEAP32[$0_1 + 100 >> 2] = $19_1;
  HEAP32[$0_1 + 96 >> 2] = $23_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $25_1 + 506948616 | 0, $27_1 + 430227734 | 0);
  $19_1 = HEAP32[$0_1 + 80 >> 2];
  $20_1 = HEAP32[$0_1 + 84 >> 2];
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  $14_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $14_1;
  HEAP32[$0_1 + 120 >> 2] = $4_1;
  HEAP32[$0_1 + 116 >> 2] = $20_1;
  HEAP32[$0_1 + 112 >> 2] = $19_1;
  $132($2_1, $3_1, $1_1, $18_1 + 883997877 | 0, $13_1 + 659060556 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  $16_1 = HEAP32[$11_1 + 4 >> 2];
  HEAP32[$31_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$31_1 + 4 >> 2] = $16_1;
  $16_1 = HEAP32[$0_1 + 68 >> 2];
  HEAP32[$0_1 + 112 >> 2] = HEAP32[$0_1 + 64 >> 2];
  HEAP32[$0_1 + 116 >> 2] = $16_1;
  $187($3_1, $1_1, $26_1);
  HEAP32[$0_1 + 92 >> 2] = $28_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $10_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $9_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $27_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $18_1, $13_1);
  $16_1 = HEAP32[$0_1 + 112 >> 2];
  $23_1 = HEAP32[$0_1 + 116 >> 2];
  $17_1 = HEAP32[$0_1 + 120 >> 2];
  $29_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $14_1;
  HEAP32[$0_1 + 104 >> 2] = $4_1;
  HEAP32[$0_1 + 100 >> 2] = $20_1;
  HEAP32[$0_1 + 96 >> 2] = $19_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $132($2_1, $3_1, $1_1, $17_1 + 1322822218 | 0, $29_1 + 958139571 | 0);
  $19_1 = HEAP32[$0_1 + 80 >> 2];
  $20_1 = HEAP32[$0_1 + 84 >> 2];
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  $14_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $14_1;
  HEAP32[$0_1 + 120 >> 2] = $4_1;
  HEAP32[$0_1 + 116 >> 2] = $20_1;
  HEAP32[$0_1 + 112 >> 2] = $19_1;
  $132($2_1, $3_1, $1_1, $16_1 + 1747873779 | 0, $23_1 + 1537002063 | 0);
  $5_1 = HEAP32[$0_1 + 80 >> 2];
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = HEAP32[$0_1 + 88 >> 2];
  $8_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $26_1;
  HEAP32[$0_1 + 120 >> 2] = $24_1;
  HEAP32[$0_1 + 116 >> 2] = $22_1;
  HEAP32[$0_1 + 112 >> 2] = $21_1;
  $187($3_1, $1_1, $12_1);
  HEAP32[$0_1 + 92 >> 2] = $25_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $13_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $18_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $29_1 + HEAP32[$0_1 + 96 >> 2];
  $190($30_1, $2_1, $16_1, $23_1);
  HEAP32[$0_1 + 108 >> 2] = $14_1;
  HEAP32[$0_1 + 104 >> 2] = $4_1;
  HEAP32[$0_1 + 100 >> 2] = $20_1;
  HEAP32[$0_1 + 96 >> 2] = $19_1;
  HEAP32[$0_1 + 124 >> 2] = $8_1;
  HEAP32[$0_1 + 120 >> 2] = $7_1;
  HEAP32[$0_1 + 116 >> 2] = $6_1;
  HEAP32[$0_1 + 112 >> 2] = $5_1;
  $21_1 = HEAP32[$0_1 + 64 >> 2];
  $22_1 = HEAP32[$0_1 + 68 >> 2];
  $4_1 = HEAP32[$0_1 + 76 >> 2];
  $132($2_1, $3_1, $1_1, HEAP32[$11_1 >> 2] + 2024104815 | 0, $4_1 + 1955562222 | 0);
  $11_1 = HEAP32[$0_1 + 80 >> 2];
  $26_1 = HEAP32[$0_1 + 84 >> 2];
  $24_1 = HEAP32[$0_1 + 88 >> 2];
  $18_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $8_1;
  HEAP32[$0_1 + 104 >> 2] = $7_1;
  HEAP32[$0_1 + 100 >> 2] = $6_1;
  HEAP32[$0_1 + 96 >> 2] = $5_1;
  HEAP32[$0_1 + 124 >> 2] = $18_1;
  HEAP32[$0_1 + 120 >> 2] = $24_1;
  HEAP32[$0_1 + 116 >> 2] = $26_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $132($2_1, $3_1, $1_1, $21_1 - 1933114872 | 0, $22_1 - 2067236844 | 0);
  $13_1 = HEAP32[$0_1 + 80 >> 2];
  $19_1 = HEAP32[$0_1 + 84 >> 2];
  $20_1 = HEAP32[$0_1 + 88 >> 2];
  $25_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $28_1;
  HEAP32[$0_1 + 116 >> 2] = $10_1;
  HEAP32[$0_1 + 112 >> 2] = $9_1;
  $187($3_1, $1_1, $27_1);
  HEAP32[$0_1 + 92 >> 2] = $17_1 + HEAP32[$0_1 + 108 >> 2];
  HEAP32[$0_1 + 88 >> 2] = $23_1 + HEAP32[$0_1 + 104 >> 2];
  HEAP32[$0_1 + 84 >> 2] = $16_1 + HEAP32[$0_1 + 100 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $4_1 + HEAP32[$0_1 + 96 >> 2];
  $190($1_1, $2_1, $21_1, $22_1);
  $21_1 = HEAP32[$0_1 + 112 >> 2];
  $22_1 = HEAP32[$0_1 + 116 >> 2];
  $9_1 = HEAP32[$0_1 + 120 >> 2];
  $10_1 = HEAP32[$0_1 + 124 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $18_1;
  HEAP32[$0_1 + 104 >> 2] = $24_1;
  HEAP32[$0_1 + 100 >> 2] = $26_1;
  HEAP32[$0_1 + 96 >> 2] = $11_1;
  HEAP32[$0_1 + 124 >> 2] = $25_1;
  HEAP32[$0_1 + 120 >> 2] = $20_1;
  HEAP32[$0_1 + 116 >> 2] = $19_1;
  HEAP32[$0_1 + 112 >> 2] = $13_1;
  $132($2_1, $3_1, $1_1, $9_1 - 1538233109 | 0, $10_1 - 1866530822 | 0);
  $11_1 = HEAP32[$0_1 + 80 >> 2];
  $9_1 = HEAP32[$0_1 + 84 >> 2];
  $10_1 = HEAP32[$0_1 + 88 >> 2];
  $12_1 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$0_1 + 108 >> 2] = $25_1;
  HEAP32[$0_1 + 104 >> 2] = $20_1;
  HEAP32[$0_1 + 100 >> 2] = $19_1;
  HEAP32[$0_1 + 96 >> 2] = $13_1;
  HEAP32[$0_1 + 124 >> 2] = $12_1;
  HEAP32[$0_1 + 120 >> 2] = $10_1;
  HEAP32[$0_1 + 116 >> 2] = $9_1;
  HEAP32[$0_1 + 112 >> 2] = $11_1;
  $132($2_1, $3_1, $1_1, $21_1 - 965641998 | 0, $22_1 - 1090935817 | 0);
  $1_1 = HEAP32[$0_1 + 92 >> 2];
  $2_1 = HEAP32[$0_1 + 88 >> 2];
  $3_1 = HEAP32[$0_1 + 84 >> 2];
  HEAP32[$15_1 >> 2] = HEAP32[$15_1 >> 2] + HEAP32[$0_1 + 80 >> 2];
  HEAP32[$15_1 + 4 >> 2] = $3_1 + HEAP32[$15_1 + 4 >> 2];
  HEAP32[$15_1 + 8 >> 2] = $11_1 + HEAP32[$15_1 + 8 >> 2];
  HEAP32[$15_1 + 12 >> 2] = $9_1 + HEAP32[$15_1 + 12 >> 2];
  HEAP32[$15_1 + 16 >> 2] = $2_1 + HEAP32[$15_1 + 16 >> 2];
  HEAP32[$15_1 + 20 >> 2] = $1_1 + HEAP32[$15_1 + 20 >> 2];
  HEAP32[$15_1 + 24 >> 2] = $10_1 + HEAP32[$15_1 + 24 >> 2];
  HEAP32[$15_1 + 28 >> 2] = $12_1 + HEAP32[$15_1 + 28 >> 2];
  global$0 = $0_1 + 128 | 0;
 }
 
 function $406($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0;
  $23_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
  $2_1 = global$0 - 1920 | 0;
  global$0 = $2_1;
  $91($2_1 + 1792 | 0, $1_1, 128);
  $1_1 = 0;
  while (1) {
   if (($1_1 | 0) != 128) {
    $3_1 = ($2_1 + 1792 | 0) + $1_1 | 0;
    $22_1 = $3_1;
    $0_1 = HEAP32[$3_1 + 4 >> 2];
    $59_1 = HEAP32[$3_1 >> 2];
    $4_1 = $59_1;
    $3_1 = $4_1;
    $25_1 = $3_1 << 24 | $3_1 << 8 & 16711680 | (($0_1 << 24 | $3_1 >>> 8) & 65280 | ($0_1 << 8 | $3_1 >>> 24) & 255);
    $3_1 = $22_1;
    HEAP32[$3_1 >> 2] = (($0_1 & 255) << 24 | $4_1 >>> 8) & -16777216 | (($0_1 & 16777215) << 8 | $4_1 >>> 24) & 16711680 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24);
    HEAP32[$3_1 + 4 >> 2] = $25_1;
    $1_1 = $1_1 + 8 | 0;
    continue;
   }
   break;
  };
  $0_1 = $23_1;
  $1_1 = HEAP32[$23_1 + 4 >> 2];
  $65_1 = HEAP32[$23_1 >> 2];
  $59_1 = HEAP32[$23_1 + 36 >> 2];
  $66_1 = $59_1;
  $19_1 = HEAP32[$23_1 + 12 >> 2];
  $77_1 = $19_1;
  $5_1 = HEAP32[$23_1 + 44 >> 2];
  $76_1 = $5_1;
  $25_1 = HEAP32[$23_1 + 20 >> 2];
  $78_1 = $25_1;
  $23_1 = HEAP32[$23_1 + 52 >> 2];
  $79_1 = $23_1;
  $22_1 = HEAP32[$0_1 + 28 >> 2];
  $80_1 = $22_1;
  $3_1 = HEAP32[$0_1 + 60 >> 2];
  $81_1 = $3_1;
  $67_1 = $1_1;
  $68_1 = HEAP32[$0_1 + 32 >> 2];
  $71_1 = HEAP32[$0_1 + 8 >> 2];
  $72_1 = HEAP32[$0_1 + 40 >> 2];
  $74_1 = HEAP32[$0_1 + 16 >> 2];
  $75_1 = HEAP32[$0_1 + 48 >> 2];
  $69_1 = HEAP32[$0_1 + 24 >> 2];
  $59_1 = HEAP32[$0_1 + 56 >> 2];
  $17_1 = HEAP32[$2_1 + 1796 >> 2];
  $29_1 = $17_1 + 1116352408 | 0;
  $14_1 = HEAP32[$2_1 + 1792 >> 2];
  $1_1 = $14_1 - 685199838 | 0;
  $29_1 = $1_1 >>> 0 < 3609767458 ? $29_1 + 1 | 0 : $29_1;
  $225($2_1 + 1776 | 0, $65_1, $67_1, $68_1, $66_1, $71_1, $19_1, $72_1, $5_1, $74_1, $25_1, $75_1, $23_1, $69_1, $22_1, $59_1, $3_1, $1_1, $29_1);
  $3_1 = HEAP32[$2_1 + 1788 >> 2];
  $10_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1804 >> 2];
  $20_1 = $1_1;
  $4_1 = $1_1 + 1899447441 | 0;
  $16_1 = HEAP32[$2_1 + 1800 >> 2];
  $1_1 = $16_1 + 602891725 | 0;
  $4_1 = $1_1 >>> 0 < 602891725 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = HEAP32[$2_1 + 1776 >> 2];
  $7_1 = HEAP32[$2_1 + 1780 >> 2];
  $11_1 = HEAP32[$2_1 + 1784 >> 2];
  $225($2_1 + 1760 | 0, $6_1, $7_1, $11_1, $3_1, $65_1, $67_1, $68_1, $66_1, $71_1, $19_1, $72_1, $5_1, $74_1, $25_1, $75_1, $23_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1812 >> 2];
  $46_1 = $3_1;
  $8_1 = HEAP32[$2_1 + 1760 >> 2];
  $5_1 = HEAP32[$2_1 + 1764 >> 2];
  $15_1 = HEAP32[$2_1 + 1768 >> 2];
  $25_1 = HEAP32[$2_1 + 1772 >> 2];
  $40_1 = HEAP32[$2_1 + 1808 >> 2];
  $1_1 = $40_1;
  $225($2_1 + 1744 | 0, $8_1, $5_1, $15_1, $25_1, $6_1, $7_1, $11_1, $10_1, $65_1, $67_1, $68_1, $66_1, $71_1, $19_1, $72_1, $76_1, $1_1 - 330482897 | 0, $3_1 - (($1_1 >>> 0 < 330482897) + 1245643824 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1820 >> 2];
  $18_1 = $3_1;
  $36_1 = HEAP32[$2_1 + 1744 >> 2];
  $12_1 = HEAP32[$2_1 + 1748 >> 2];
  $28_1 = HEAP32[$2_1 + 1752 >> 2];
  $26_1 = HEAP32[$2_1 + 1756 >> 2];
  $22_1 = $26_1;
  $19_1 = HEAP32[$2_1 + 1816 >> 2];
  $1_1 = $19_1;
  $225($2_1 + 1728 | 0, $36_1, $12_1, $28_1, $22_1, $8_1, $5_1, $15_1, $25_1, $6_1, $7_1, $11_1, $10_1, $65_1, $67_1, $68_1, $66_1, $1_1 - 2121671748 | 0, $3_1 - (($1_1 >>> 0 < 2121671748) + 373957722 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1740 >> 2];
  $33_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1828 >> 2];
  $54_1 = $1_1;
  $4_1 = $1_1 + 961987163 | 0;
  $34_1 = HEAP32[$2_1 + 1824 >> 2];
  $1_1 = $34_1 - 213338824 | 0;
  $4_1 = $1_1 >>> 0 < 4081628472 ? $4_1 + 1 | 0 : $4_1;
  $31_1 = HEAP32[$2_1 + 1728 >> 2];
  $30_1 = HEAP32[$2_1 + 1732 >> 2];
  $24_1 = HEAP32[$2_1 + 1736 >> 2];
  $225($2_1 + 1712 | 0, $31_1, $30_1, $24_1, $3_1, $36_1, $12_1, $28_1, $22_1, $8_1, $5_1, $15_1, $25_1, $6_1, $7_1, $11_1, $10_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1724 >> 2];
  $27_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1836 >> 2];
  $11_1 = $1_1;
  $13_1 = HEAP32[$2_1 + 1712 >> 2];
  $9_1 = HEAP32[$2_1 + 1716 >> 2];
  $21_1 = HEAP32[$2_1 + 1720 >> 2];
  $7_1 = $15_1;
  $29_1 = $1_1 + 1508970993 | 0;
  $15_1 = HEAP32[$2_1 + 1832 >> 2];
  $1_1 = $15_1 - 1241133031 | 0;
  $29_1 = $1_1 >>> 0 < 3053834265 ? $29_1 + 1 | 0 : $29_1;
  $225($2_1 + 1696 | 0, $13_1, $9_1, $21_1, $3_1, $31_1, $30_1, $24_1, $33_1, $36_1, $12_1, $28_1, $22_1, $8_1, $5_1, $7_1, $25_1, $1_1, $29_1);
  $3_1 = HEAP32[$2_1 + 1844 >> 2];
  $37_1 = $3_1;
  $10_1 = HEAP32[$2_1 + 1696 >> 2];
  $7_1 = HEAP32[$2_1 + 1700 >> 2];
  $6_1 = HEAP32[$2_1 + 1704 >> 2];
  $8_1 = HEAP32[$2_1 + 1708 >> 2];
  $38_1 = HEAP32[$2_1 + 1840 >> 2];
  $1_1 = $38_1;
  $225($2_1 + 1680 | 0, $10_1, $7_1, $6_1, $8_1, $13_1, $9_1, $21_1, $27_1, $31_1, $30_1, $24_1, $33_1, $36_1, $12_1, $28_1, $26_1, $1_1 - 1357295717 | 0, $3_1 - (($1_1 >>> 0 < 1357295717) + 1841331547 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1852 >> 2];
  $12_1 = $3_1;
  $35_1 = HEAP32[$2_1 + 1680 >> 2];
  $5_1 = HEAP32[$2_1 + 1684 >> 2];
  $28_1 = HEAP32[$2_1 + 1688 >> 2];
  $25_1 = HEAP32[$2_1 + 1692 >> 2];
  $26_1 = HEAP32[$2_1 + 1848 >> 2];
  $1_1 = $26_1;
  $225($2_1 + 1664 | 0, $35_1, $5_1, $28_1, $25_1, $10_1, $7_1, $6_1, $8_1, $13_1, $9_1, $21_1, $27_1, $31_1, $30_1, $24_1, $33_1, $1_1 - 630357736 | 0, $3_1 - (($1_1 >>> 0 < 630357736) + 1424204074 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1860 >> 2];
  $36_1 = $3_1;
  $39_1 = HEAP32[$2_1 + 1664 >> 2];
  $23_1 = HEAP32[$2_1 + 1668 >> 2];
  $24_1 = HEAP32[$2_1 + 1672 >> 2];
  $22_1 = HEAP32[$2_1 + 1676 >> 2];
  $33_1 = HEAP32[$2_1 + 1856 >> 2];
  $1_1 = $33_1;
  $225($2_1 + 1648 | 0, $39_1, $23_1, $24_1, $22_1, $35_1, $5_1, $28_1, $25_1, $10_1, $7_1, $6_1, $8_1, $13_1, $9_1, $21_1, $27_1, $1_1 - 1560083902 | 0, $3_1 - (($1_1 >>> 0 < 1560083902) + 670586215 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1660 >> 2];
  $45_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1868 >> 2];
  $31_1 = $1_1;
  $4_1 = $1_1 + 310598401 | 0;
  $30_1 = HEAP32[$2_1 + 1864 >> 2];
  $1_1 = $30_1 + 1164996542 | 0;
  $4_1 = $1_1 >>> 0 < 1164996542 ? $4_1 + 1 | 0 : $4_1;
  $27_1 = HEAP32[$2_1 + 1648 >> 2];
  $13_1 = HEAP32[$2_1 + 1652 >> 2];
  $9_1 = HEAP32[$2_1 + 1656 >> 2];
  $225($2_1 + 1632 | 0, $27_1, $13_1, $9_1, $3_1, $39_1, $23_1, $24_1, $22_1, $35_1, $5_1, $28_1, $25_1, $10_1, $7_1, $6_1, $8_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1644 >> 2];
  $41_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1876 >> 2];
  $55_1 = $1_1;
  $29_1 = $1_1 + 607225278 | 0;
  $52_1 = HEAP32[$2_1 + 1872 >> 2];
  $1_1 = $52_1 + 1323610764 | 0;
  $29_1 = $1_1 >>> 0 < 1323610764 ? $29_1 + 1 | 0 : $29_1;
  $21_1 = HEAP32[$2_1 + 1632 >> 2];
  $10_1 = HEAP32[$2_1 + 1636 >> 2];
  $6_1 = HEAP32[$2_1 + 1640 >> 2];
  $225($2_1 + 1616 | 0, $21_1, $10_1, $6_1, $3_1, $27_1, $13_1, $9_1, $45_1, $39_1, $23_1, $24_1, $22_1, $35_1, $5_1, $28_1, $25_1, $1_1, $29_1);
  $3_1 = HEAP32[$2_1 + 1628 >> 2];
  $42_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1884 >> 2];
  $28_1 = $1_1;
  $43_1 = HEAP32[$2_1 + 1616 >> 2];
  $7_1 = HEAP32[$2_1 + 1620 >> 2];
  $8_1 = HEAP32[$2_1 + 1624 >> 2];
  $5_1 = $24_1;
  $4_1 = $1_1 + 1426881987 | 0;
  $24_1 = HEAP32[$2_1 + 1880 >> 2];
  $1_1 = $24_1 - 704662302 | 0;
  $4_1 = $1_1 >>> 0 < 3590304994 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 1600 | 0, $43_1, $7_1, $8_1, $3_1, $21_1, $10_1, $6_1, $41_1, $27_1, $13_1, $9_1, $45_1, $39_1, $23_1, $5_1, $22_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1612 >> 2];
  $50_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1892 >> 2];
  $58_1 = $1_1;
  $4_1 = $1_1 + 1925078388 | 0;
  $56_1 = HEAP32[$2_1 + 1888 >> 2];
  $1_1 = $56_1 - 226784913 | 0;
  $4_1 = $1_1 >>> 0 < 4068182383 ? $4_1 + 1 | 0 : $4_1;
  $47_1 = HEAP32[$2_1 + 1600 >> 2];
  $35_1 = HEAP32[$2_1 + 1604 >> 2];
  $39_1 = HEAP32[$2_1 + 1608 >> 2];
  $225($2_1 + 1584 | 0, $47_1, $35_1, $39_1, $3_1, $43_1, $7_1, $8_1, $42_1, $21_1, $10_1, $6_1, $41_1, $27_1, $13_1, $9_1, $45_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1900 >> 2];
  $27_1 = $3_1;
  $44_1 = HEAP32[$2_1 + 1584 >> 2];
  $13_1 = HEAP32[$2_1 + 1588 >> 2];
  $49_1 = HEAP32[$2_1 + 1592 >> 2];
  $9_1 = HEAP32[$2_1 + 1596 >> 2];
  $5_1 = $21_1;
  $21_1 = HEAP32[$2_1 + 1896 >> 2];
  $1_1 = $21_1;
  $225($2_1 + 1568 | 0, $44_1, $13_1, $49_1, $9_1, $47_1, $35_1, $39_1, $50_1, $43_1, $7_1, $8_1, $42_1, $5_1, $10_1, $6_1, $41_1, $1_1 + 991336113 | 0, $3_1 - (($1_1 >>> 0 < 3303631183) + 2132889089 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1908 >> 2];
  $73_1 = $3_1;
  $45_1 = HEAP32[$2_1 + 1568 >> 2];
  $10_1 = HEAP32[$2_1 + 1572 >> 2];
  $5_1 = $10_1;
  $41_1 = HEAP32[$2_1 + 1576 >> 2];
  $6_1 = HEAP32[$2_1 + 1580 >> 2];
  $29_1 = HEAP32[$2_1 + 1904 >> 2];
  $1_1 = $29_1;
  $225($2_1 + 1552 | 0, $45_1, $5_1, $41_1, $6_1, $44_1, $13_1, $49_1, $9_1, $47_1, $35_1, $39_1, $50_1, $43_1, $7_1, $8_1, $42_1, $1_1 + 633803317 | 0, $3_1 - (($1_1 >>> 0 < 3661163979) + 1680079192 | 0) | 0);
  $23_1 = HEAP32[$2_1 + 1916 >> 2];
  $48_1 = $23_1;
  $42_1 = HEAP32[$2_1 + 1552 >> 2];
  $7_1 = HEAP32[$2_1 + 1556 >> 2];
  $43_1 = HEAP32[$2_1 + 1560 >> 2];
  $8_1 = HEAP32[$2_1 + 1564 >> 2];
  $3_1 = $8_1;
  $22_1 = $50_1;
  $50_1 = HEAP32[$2_1 + 1912 >> 2];
  $1_1 = $50_1;
  $225($2_1 + 1536 | 0, $42_1, $7_1, $43_1, $3_1, $45_1, $5_1, $41_1, $6_1, $44_1, $13_1, $49_1, $9_1, $47_1, $35_1, $39_1, $22_1, $1_1 - 815192428 | 0, $23_1 - (($1_1 >>> 0 < 815192428) + 1046744715 | 0) | 0);
  $207($2_1 + 1520 | 0, $16_1, $20_1, $14_1, $17_1, $40_1, $46_1, $52_1, $55_1, $30_1, $31_1, $1_1, $23_1, $29_1, $73_1);
  $1_1 = $19_1;
  $5_1 = HEAP32[$2_1 + 1520 >> 2];
  $47_1 = HEAP32[$2_1 + 1524 >> 2];
  $19_1 = HEAP32[$2_1 + 1528 >> 2];
  $51_1 = HEAP32[$2_1 + 1532 >> 2];
  $207($2_1 + 1504 | 0, $1_1, $18_1, $40_1, $46_1, $34_1, $54_1, $56_1, $58_1, $24_1, $28_1, $5_1, $47_1, $19_1, $51_1);
  $35_1 = HEAP32[$2_1 + 1536 >> 2];
  $18_1 = HEAP32[$2_1 + 1540 >> 2];
  $39_1 = HEAP32[$2_1 + 1544 >> 2];
  $25_1 = HEAP32[$2_1 + 1548 >> 2];
  $225($2_1 + 1488 | 0, $35_1, $18_1, $39_1, $25_1, $42_1, $7_1, $43_1, $3_1, $45_1, $10_1, $41_1, $6_1, $44_1, $13_1, $49_1, $9_1, $19_1 - 1628353838 | 0, $51_1 - (($19_1 >>> 0 < 1628353838) + 459576894 | 0) | 0);
  $46_1 = HEAP32[$2_1 + 1488 >> 2];
  $23_1 = HEAP32[$2_1 + 1492 >> 2];
  $40_1 = HEAP32[$2_1 + 1496 >> 2];
  $22_1 = HEAP32[$2_1 + 1500 >> 2];
  $225($2_1 + 1472 | 0, $46_1, $23_1, $40_1, $22_1, $35_1, $18_1, $39_1, $25_1, $42_1, $7_1, $43_1, $3_1, $45_1, $10_1, $41_1, $6_1, $5_1 + 944711139 | 0, $47_1 - (($5_1 >>> 0 < 3350256157) + 272742521 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1484 >> 2];
  $13_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1516 >> 2];
  $57_1 = $1_1;
  $32_1 = $1_1 + 264347078 | 0;
  $53_1 = HEAP32[$2_1 + 1512 >> 2];
  $1_1 = $53_1 - 1953704523 | 0;
  $32_1 = $1_1 >>> 0 < 2341262773 ? $32_1 + 1 | 0 : $32_1;
  $9_1 = HEAP32[$2_1 + 1472 >> 2];
  $17_1 = HEAP32[$2_1 + 1476 >> 2];
  $14_1 = HEAP32[$2_1 + 1480 >> 2];
  $225($2_1 + 1456 | 0, $9_1, $17_1, $14_1, $3_1, $46_1, $23_1, $40_1, $22_1, $35_1, $18_1, $39_1, $25_1, $42_1, $7_1, $43_1, $8_1, $1_1, $32_1);
  $3_1 = HEAP32[$2_1 + 1468 >> 2];
  $10_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1508 >> 2];
  $42_1 = $1_1;
  $6_1 = HEAP32[$2_1 + 1456 >> 2];
  $20_1 = HEAP32[$2_1 + 1460 >> 2];
  $16_1 = HEAP32[$2_1 + 1464 >> 2];
  $3_1 = $1_1 + 604807628 | 0;
  $43_1 = HEAP32[$2_1 + 1504 >> 2];
  $1_1 = $43_1 + 2007800933 | 0;
  $3_1 = $1_1 >>> 0 < 2007800933 ? $3_1 + 1 | 0 : $3_1;
  $225($2_1 + 1440 | 0, $6_1, $20_1, $16_1, $10_1, $9_1, $17_1, $14_1, $13_1, $46_1, $23_1, $40_1, $22_1, $35_1, $18_1, $39_1, $25_1, $1_1, $3_1);
  $207($2_1 + 1424 | 0, $15_1, $11_1, $34_1, $54_1, $38_1, $37_1, $29_1, $73_1, $21_1, $27_1, $43_1, $42_1, $53_1, $57_1);
  $45_1 = HEAP32[$2_1 + 1424 >> 2];
  $41_1 = HEAP32[$2_1 + 1428 >> 2];
  $70_1 = HEAP32[$2_1 + 1432 >> 2];
  $32_1 = HEAP32[$2_1 + 1436 >> 2];
  $207($2_1 + 1408 | 0, $26_1, $12_1, $38_1, $37_1, $33_1, $36_1, $19_1, $51_1, $50_1, $48_1, $45_1, $41_1, $70_1, $32_1);
  $1_1 = HEAP32[$2_1 + 1452 >> 2];
  $11_1 = $1_1;
  $15_1 = HEAP32[$2_1 + 1440 >> 2];
  $18_1 = HEAP32[$2_1 + 1444 >> 2];
  $25_1 = HEAP32[$2_1 + 1448 >> 2];
  $4_1 = $32_1 + 770255983 | 0;
  $1_1 = $70_1 + 1495990901 | 0;
  $4_1 = $1_1 >>> 0 < 1495990901 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 1392 | 0, $15_1, $18_1, $25_1, $11_1, $6_1, $20_1, $16_1, $10_1, $9_1, $17_1, $14_1, $13_1, $46_1, $23_1, $40_1, $22_1, $1_1, $4_1);
  $1_1 = HEAP32[$2_1 + 1404 >> 2];
  $34_1 = $1_1;
  $7_1 = HEAP32[$2_1 + 1392 >> 2];
  $8_1 = HEAP32[$2_1 + 1396 >> 2];
  $22_1 = HEAP32[$2_1 + 1400 >> 2];
  $4_1 = $41_1 + 1249150122 | 0;
  $1_1 = $45_1 + 1856431235 | 0;
  $4_1 = $1_1 >>> 0 < 1856431235 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 1376 | 0, $7_1, $8_1, $22_1, $34_1, $15_1, $18_1, $25_1, $11_1, $6_1, $20_1, $16_1, $10_1, $9_1, $17_1, $14_1, $13_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1388 >> 2];
  $17_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1420 >> 2];
  $62_1 = $1_1;
  $4_1 = $1_1 + 1555081692 | 0;
  $60_1 = HEAP32[$2_1 + 1416 >> 2];
  $1_1 = $60_1 - 1119749164 | 0;
  $4_1 = $1_1 >>> 0 < 3175218132 ? $4_1 + 1 | 0 : $4_1;
  $14_1 = HEAP32[$2_1 + 1376 >> 2];
  $12_1 = HEAP32[$2_1 + 1380 >> 2];
  $26_1 = HEAP32[$2_1 + 1384 >> 2];
  $225($2_1 + 1360 | 0, $14_1, $12_1, $26_1, $3_1, $7_1, $8_1, $22_1, $34_1, $15_1, $18_1, $25_1, $11_1, $6_1, $20_1, $16_1, $10_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1372 >> 2];
  $13_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 1412 >> 2];
  $37_1 = $1_1;
  $4_1 = $1_1 + 1996064986 | 0;
  $38_1 = HEAP32[$2_1 + 1408 >> 2];
  $1_1 = $38_1 - 2096016459 | 0;
  $4_1 = $1_1 >>> 0 < 2198950837 ? $4_1 + 1 | 0 : $4_1;
  $9_1 = HEAP32[$2_1 + 1360 >> 2];
  $20_1 = HEAP32[$2_1 + 1364 >> 2];
  $16_1 = HEAP32[$2_1 + 1368 >> 2];
  $225($2_1 + 1344 | 0, $9_1, $20_1, $16_1, $3_1, $14_1, $12_1, $26_1, $17_1, $7_1, $8_1, $22_1, $34_1, $15_1, $18_1, $25_1, $11_1, $1_1, $4_1);
  $207($2_1 + 1328 | 0, $30_1, $31_1, $33_1, $36_1, $52_1, $55_1, $53_1, $57_1, $5_1, $47_1, $38_1, $37_1, $60_1, $62_1);
  $23_1 = HEAP32[$2_1 + 1328 >> 2];
  $35_1 = HEAP32[$2_1 + 1332 >> 2];
  $25_1 = HEAP32[$2_1 + 1336 >> 2];
  $63_1 = HEAP32[$2_1 + 1340 >> 2];
  $207($2_1 + 1312 | 0, $24_1, $28_1, $52_1, $55_1, $56_1, $58_1, $70_1, $32_1, $43_1, $42_1, $23_1, $35_1, $25_1, $63_1);
  $10_1 = HEAP32[$2_1 + 1344 >> 2];
  $11_1 = HEAP32[$2_1 + 1348 >> 2];
  $6_1 = HEAP32[$2_1 + 1352 >> 2];
  $15_1 = HEAP32[$2_1 + 1356 >> 2];
  $3_1 = $15_1;
  $225($2_1 + 1296 | 0, $10_1, $11_1, $6_1, $3_1, $9_1, $20_1, $16_1, $13_1, $14_1, $12_1, $26_1, $17_1, $7_1, $8_1, $22_1, $34_1, $25_1 - 295247957 | 0, $63_1 - (($25_1 >>> 0 < 295247957) + 1740746413 | 0) | 0);
  $31_1 = HEAP32[$2_1 + 1296 >> 2];
  $7_1 = HEAP32[$2_1 + 1300 >> 2];
  $30_1 = HEAP32[$2_1 + 1304 >> 2];
  $8_1 = HEAP32[$2_1 + 1308 >> 2];
  $1_1 = $8_1;
  $225($2_1 + 1280 | 0, $31_1, $7_1, $30_1, $1_1, $10_1, $11_1, $6_1, $3_1, $9_1, $20_1, $16_1, $13_1, $14_1, $12_1, $26_1, $17_1, $23_1 + 766784016 | 0, $35_1 - (($23_1 >>> 0 < 3528183280) + 1473132946 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 1324 >> 2];
  $64_1 = $3_1;
  $28_1 = HEAP32[$2_1 + 1280 >> 2];
  $17_1 = HEAP32[$2_1 + 1284 >> 2];
  $12_1 = $17_1;
  $24_1 = HEAP32[$2_1 + 1288 >> 2];
  $14_1 = HEAP32[$2_1 + 1292 >> 2];
  $61_1 = HEAP32[$2_1 + 1320 >> 2];
  $1_1 = $61_1;
  $225($2_1 + 1264 | 0, $28_1, $12_1, $24_1, $14_1, $31_1, $7_1, $30_1, $8_1, $10_1, $11_1, $6_1, $15_1, $9_1, $20_1, $16_1, $13_1, $1_1 - 1728372417 | 0, $3_1 - (($1_1 >>> 0 < 1728372417) + 1341970487 | 0) | 0);
  $22_1 = HEAP32[$2_1 + 1316 >> 2];
  $39_1 = $22_1;
  $13_1 = HEAP32[$2_1 + 1264 >> 2];
  $20_1 = HEAP32[$2_1 + 1268 >> 2];
  $18_1 = $20_1;
  $9_1 = HEAP32[$2_1 + 1272 >> 2];
  $16_1 = HEAP32[$2_1 + 1276 >> 2];
  $3_1 = $16_1;
  $46_1 = HEAP32[$2_1 + 1312 >> 2];
  $1_1 = $46_1;
  $225($2_1 + 1248 | 0, $13_1, $18_1, $9_1, $3_1, $28_1, $12_1, $24_1, $14_1, $31_1, $7_1, $30_1, $8_1, $10_1, $11_1, $6_1, $15_1, $1_1 - 1091629340 | 0, $22_1 - (($1_1 >>> 0 < 1091629340) + 1084653624 | 0) | 0);
  $207($2_1 + 1232 | 0, $21_1, $27_1, $56_1, $58_1, $29_1, $73_1, $60_1, $62_1, $45_1, $41_1, $1_1, $22_1, $61_1, $64_1);
  $1_1 = HEAP32[$2_1 + 1232 >> 2];
  $40_1 = HEAP32[$2_1 + 1236 >> 2];
  $22_1 = HEAP32[$2_1 + 1240 >> 2];
  $44_1 = HEAP32[$2_1 + 1244 >> 2];
  $207($2_1 + 1216 | 0, $50_1, $48_1, $29_1, $73_1, $19_1, $51_1, $25_1, $63_1, $38_1, $37_1, $1_1, $40_1, $22_1, $44_1);
  $10_1 = HEAP32[$2_1 + 1248 >> 2];
  $11_1 = HEAP32[$2_1 + 1252 >> 2];
  $6_1 = HEAP32[$2_1 + 1256 >> 2];
  $15_1 = HEAP32[$2_1 + 1260 >> 2];
  $225($2_1 + 1200 | 0, $10_1, $11_1, $6_1, $15_1, $13_1, $18_1, $9_1, $3_1, $28_1, $12_1, $24_1, $14_1, $31_1, $7_1, $30_1, $8_1, $22_1 + 1034457026 | 0, $44_1 - (($22_1 >>> 0 < 3260510270) + 958395404 | 0) | 0);
  $7_1 = HEAP32[$2_1 + 1200 >> 2];
  $12_1 = HEAP32[$2_1 + 1204 >> 2];
  $8_1 = HEAP32[$2_1 + 1208 >> 2];
  $26_1 = HEAP32[$2_1 + 1212 >> 2];
  $225($2_1 + 1184 | 0, $7_1, $12_1, $8_1, $26_1, $10_1, $11_1, $6_1, $15_1, $13_1, $18_1, $9_1, $3_1, $28_1, $17_1, $24_1, $14_1, $1_1 - 1828018395 | 0, $40_1 - (($1_1 >>> 0 < 1828018395) + 710438584 | 0) | 0);
  $18_1 = HEAP32[$2_1 + 1196 >> 2];
  $28_1 = $18_1;
  $3_1 = HEAP32[$2_1 + 1228 >> 2];
  $49_1 = $3_1;
  $4_1 = $3_1 + 113926993 | 0;
  $48_1 = HEAP32[$2_1 + 1224 >> 2];
  $3_1 = $48_1 - 536640913 | 0;
  $4_1 = $3_1 >>> 0 < 3758326383 ? $4_1 + 1 | 0 : $4_1;
  $24_1 = HEAP32[$2_1 + 1184 >> 2];
  $17_1 = HEAP32[$2_1 + 1188 >> 2];
  $14_1 = HEAP32[$2_1 + 1192 >> 2];
  $225($2_1 + 1168 | 0, $24_1, $17_1, $14_1, $18_1, $7_1, $12_1, $8_1, $26_1, $10_1, $11_1, $6_1, $15_1, $13_1, $20_1, $9_1, $16_1, $3_1, $4_1);
  $18_1 = HEAP32[$2_1 + 1180 >> 2];
  $27_1 = $18_1;
  $3_1 = HEAP32[$2_1 + 1220 >> 2];
  $54_1 = $3_1;
  $4_1 = $3_1 + 338241895 | 0;
  $30_1 = HEAP32[$2_1 + 1216 >> 2];
  $3_1 = $30_1 + 168717936 | 0;
  $4_1 = $3_1 >>> 0 < 168717936 ? $4_1 + 1 | 0 : $4_1;
  $13_1 = HEAP32[$2_1 + 1168 >> 2];
  $20_1 = HEAP32[$2_1 + 1172 >> 2];
  $16_1 = HEAP32[$2_1 + 1176 >> 2];
  $225($2_1 + 1152 | 0, $13_1, $20_1, $16_1, $18_1, $24_1, $17_1, $14_1, $28_1, $7_1, $12_1, $8_1, $26_1, $10_1, $11_1, $6_1, $15_1, $3_1, $4_1);
  $207($2_1 + 1136 | 0, $5_1, $47_1, $19_1, $51_1, $53_1, $57_1, $61_1, $64_1, $23_1, $35_1, $30_1, $54_1, $48_1, $49_1);
  $3_1 = $43_1;
  $5_1 = $42_1;
  $19_1 = $57_1;
  $42_1 = HEAP32[$2_1 + 1136 >> 2];
  $43_1 = HEAP32[$2_1 + 1140 >> 2];
  $51_1 = HEAP32[$2_1 + 1144 >> 2];
  $57_1 = HEAP32[$2_1 + 1148 >> 2];
  $207($2_1 + 1120 | 0, $3_1, $5_1, $53_1, $19_1, $70_1, $32_1, $22_1, $44_1, $46_1, $39_1, $42_1, $43_1, $51_1, $57_1);
  $3_1 = HEAP32[$2_1 + 1164 >> 2];
  $9_1 = $3_1;
  $21_1 = HEAP32[$2_1 + 1152 >> 2];
  $11_1 = HEAP32[$2_1 + 1156 >> 2];
  $15_1 = HEAP32[$2_1 + 1160 >> 2];
  $4_1 = $57_1 + 666307205 | 0;
  $3_1 = $51_1 + 1188179964 | 0;
  $4_1 = $3_1 >>> 0 < 1188179964 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 1104 | 0, $21_1, $11_1, $15_1, $9_1, $13_1, $20_1, $16_1, $18_1, $24_1, $17_1, $14_1, $28_1, $7_1, $12_1, $8_1, $26_1, $3_1, $4_1);
  $3_1 = HEAP32[$2_1 + 1116 >> 2];
  $10_1 = $3_1;
  $6_1 = HEAP32[$2_1 + 1104 >> 2];
  $7_1 = HEAP32[$2_1 + 1108 >> 2];
  $8_1 = HEAP32[$2_1 + 1112 >> 2];
  $3_1 = $43_1 + 773529912 | 0;
  $5_1 = $42_1 + 1546045734 | 0;
  $3_1 = $5_1 >>> 0 < 1546045734 ? $3_1 + 1 | 0 : $3_1;
  $225($2_1 + 1088 | 0, $6_1, $7_1, $8_1, $10_1, $21_1, $11_1, $15_1, $9_1, $13_1, $20_1, $16_1, $18_1, $24_1, $17_1, $14_1, $28_1, $5_1, $3_1);
  $5_1 = HEAP32[$2_1 + 1100 >> 2];
  $17_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 1132 >> 2];
  $53_1 = $3_1;
  $29_1 = $3_1 + 1294757372 | 0;
  $55_1 = HEAP32[$2_1 + 1128 >> 2];
  $3_1 = $55_1 + 1522805485 | 0;
  $29_1 = $3_1 >>> 0 < 1522805485 ? $29_1 + 1 | 0 : $29_1;
  $14_1 = HEAP32[$2_1 + 1088 >> 2];
  $12_1 = HEAP32[$2_1 + 1092 >> 2];
  $18_1 = HEAP32[$2_1 + 1096 >> 2];
  $225($2_1 + 1072 | 0, $14_1, $12_1, $18_1, $5_1, $6_1, $7_1, $8_1, $10_1, $21_1, $11_1, $15_1, $9_1, $13_1, $20_1, $16_1, $27_1, $3_1, $29_1);
  $5_1 = HEAP32[$2_1 + 1084 >> 2];
  $20_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 1124 >> 2];
  $33_1 = $3_1;
  $4_1 = $3_1 + 1396182291 | 0;
  $31_1 = HEAP32[$2_1 + 1120 >> 2];
  $3_1 = $31_1 - 1651133473 | 0;
  $4_1 = $3_1 >>> 0 < 2643833823 ? $4_1 + 1 | 0 : $4_1;
  $16_1 = HEAP32[$2_1 + 1072 >> 2];
  $26_1 = HEAP32[$2_1 + 1076 >> 2];
  $19_1 = HEAP32[$2_1 + 1080 >> 2];
  $225($2_1 + 1056 | 0, $16_1, $26_1, $19_1, $5_1, $14_1, $12_1, $18_1, $17_1, $6_1, $7_1, $8_1, $10_1, $21_1, $11_1, $15_1, $9_1, $3_1, $4_1);
  $207($2_1 + 1040 | 0, $45_1, $41_1, $70_1, $32_1, $60_1, $62_1, $48_1, $49_1, $1_1, $40_1, $31_1, $33_1, $55_1, $53_1);
  $3_1 = $37_1;
  $34_1 = HEAP32[$2_1 + 1040 >> 2];
  $37_1 = HEAP32[$2_1 + 1044 >> 2];
  $52_1 = HEAP32[$2_1 + 1048 >> 2];
  $58_1 = HEAP32[$2_1 + 1052 >> 2];
  $207($2_1 + 1024 | 0, $38_1, $3_1, $60_1, $62_1, $25_1, $63_1, $51_1, $57_1, $30_1, $54_1, $34_1, $37_1, $52_1, $58_1);
  $3_1 = HEAP32[$2_1 + 1068 >> 2];
  $27_1 = $3_1;
  $9_1 = HEAP32[$2_1 + 1056 >> 2];
  $11_1 = HEAP32[$2_1 + 1060 >> 2];
  $15_1 = HEAP32[$2_1 + 1064 >> 2];
  $32_1 = $58_1 + 1695183700 | 0;
  $3_1 = $52_1 - 1951439906 | 0;
  $32_1 = $3_1 >>> 0 < 2343527390 ? $32_1 + 1 | 0 : $32_1;
  $225($2_1 + 1008 | 0, $9_1, $11_1, $15_1, $27_1, $16_1, $26_1, $19_1, $5_1, $14_1, $12_1, $18_1, $17_1, $6_1, $7_1, $8_1, $10_1, $3_1, $32_1);
  $3_1 = HEAP32[$2_1 + 1020 >> 2];
  $21_1 = $3_1;
  $10_1 = HEAP32[$2_1 + 1008 >> 2];
  $7_1 = HEAP32[$2_1 + 1012 >> 2];
  $8_1 = HEAP32[$2_1 + 1016 >> 2];
  $4_1 = $37_1 + 1986661051 | 0;
  $3_1 = $34_1 + 1014477480 | 0;
  $4_1 = $3_1 >>> 0 < 1014477480 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 992 | 0, $10_1, $7_1, $8_1, $21_1, $9_1, $11_1, $15_1, $27_1, $16_1, $26_1, $19_1, $5_1, $14_1, $12_1, $18_1, $17_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 1036 >> 2];
  $56_1 = $5_1;
  $6_1 = HEAP32[$2_1 + 992 >> 2];
  $12_1 = HEAP32[$2_1 + 996 >> 2];
  $17_1 = HEAP32[$2_1 + 1e3 >> 2];
  $14_1 = HEAP32[$2_1 + 1004 >> 2];
  $18_1 = $14_1;
  $50_1 = HEAP32[$2_1 + 1032 >> 2];
  $3_1 = $50_1;
  $225($2_1 + 976 | 0, $6_1, $12_1, $17_1, $18_1, $10_1, $7_1, $8_1, $21_1, $9_1, $11_1, $15_1, $27_1, $16_1, $26_1, $19_1, $20_1, $3_1 + 1206759142 | 0, $5_1 - (($3_1 >>> 0 < 3088208154) + 2117940945 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 1028 >> 2];
  $38_1 = $5_1;
  $24_1 = HEAP32[$2_1 + 976 >> 2];
  $20_1 = HEAP32[$2_1 + 980 >> 2];
  $13_1 = HEAP32[$2_1 + 984 >> 2];
  $16_1 = HEAP32[$2_1 + 988 >> 2];
  $19_1 = $16_1;
  $36_1 = HEAP32[$2_1 + 1024 >> 2];
  $3_1 = $36_1;
  $225($2_1 + 960 | 0, $24_1, $20_1, $13_1, $19_1, $6_1, $12_1, $17_1, $18_1, $10_1, $7_1, $8_1, $21_1, $9_1, $11_1, $15_1, $27_1, $3_1 + 344077627 | 0, $5_1 - (($3_1 >>> 0 < 3950889669) + 1838011258 | 0) | 0);
  $207($2_1 + 944 | 0, $23_1, $35_1, $25_1, $63_1, $61_1, $64_1, $55_1, $53_1, $42_1, $43_1, $3_1, $5_1, $50_1, $56_1);
  $23_1 = HEAP32[$2_1 + 944 >> 2];
  $35_1 = HEAP32[$2_1 + 948 >> 2];
  $25_1 = HEAP32[$2_1 + 952 >> 2];
  $47_1 = HEAP32[$2_1 + 956 >> 2];
  $207($2_1 + 928 | 0, $46_1, $39_1, $61_1, $64_1, $22_1, $44_1, $52_1, $58_1, $31_1, $33_1, $23_1, $35_1, $25_1, $47_1);
  $28_1 = HEAP32[$2_1 + 960 >> 2];
  $11_1 = HEAP32[$2_1 + 964 >> 2];
  $27_1 = HEAP32[$2_1 + 968 >> 2];
  $15_1 = HEAP32[$2_1 + 972 >> 2];
  $5_1 = $15_1;
  $225($2_1 + 912 | 0, $28_1, $11_1, $27_1, $5_1, $24_1, $20_1, $13_1, $19_1, $6_1, $12_1, $17_1, $14_1, $10_1, $7_1, $8_1, $21_1, $25_1 + 1290863460 | 0, $47_1 - (($25_1 >>> 0 < 3004103836) + 1564481374 | 0) | 0);
  $9_1 = HEAP32[$2_1 + 912 >> 2];
  $7_1 = HEAP32[$2_1 + 916 >> 2];
  $21_1 = HEAP32[$2_1 + 920 >> 2];
  $8_1 = HEAP32[$2_1 + 924 >> 2];
  $3_1 = $8_1;
  $225($2_1 + 896 | 0, $9_1, $7_1, $21_1, $3_1, $28_1, $11_1, $27_1, $5_1, $24_1, $20_1, $13_1, $16_1, $6_1, $12_1, $17_1, $14_1, $23_1 - 1136513023 | 0, $35_1 - (($23_1 >>> 0 < 1136513023) + 1474664884 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 940 >> 2];
  $45_1 = $5_1;
  $10_1 = HEAP32[$2_1 + 896 >> 2];
  $17_1 = HEAP32[$2_1 + 900 >> 2];
  $12_1 = $17_1;
  $6_1 = HEAP32[$2_1 + 904 >> 2];
  $14_1 = HEAP32[$2_1 + 908 >> 2];
  $41_1 = HEAP32[$2_1 + 936 >> 2];
  $3_1 = $41_1;
  $225($2_1 + 880 | 0, $10_1, $12_1, $6_1, $14_1, $9_1, $7_1, $21_1, $8_1, $28_1, $11_1, $27_1, $15_1, $24_1, $20_1, $13_1, $16_1, $3_1 - 789014639 | 0, $5_1 - (($3_1 >>> 0 < 789014639) + 1035236495 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 932 >> 2];
  $39_1 = $5_1;
  $24_1 = HEAP32[$2_1 + 880 >> 2];
  $20_1 = HEAP32[$2_1 + 884 >> 2];
  $18_1 = $20_1;
  $13_1 = HEAP32[$2_1 + 888 >> 2];
  $16_1 = HEAP32[$2_1 + 892 >> 2];
  $19_1 = $16_1;
  $46_1 = HEAP32[$2_1 + 928 >> 2];
  $3_1 = $46_1;
  $225($2_1 + 864 | 0, $24_1, $18_1, $13_1, $19_1, $10_1, $12_1, $6_1, $14_1, $9_1, $7_1, $21_1, $8_1, $28_1, $11_1, $27_1, $15_1, $3_1 + 106217008 | 0, $5_1 - (($3_1 >>> 0 < 4188750288) + 949202524 | 0) | 0);
  $207($2_1 + 848 | 0, $1_1, $40_1, $22_1, $44_1, $48_1, $49_1, $50_1, $56_1, $34_1, $37_1, $3_1, $5_1, $41_1, $45_1);
  $1_1 = HEAP32[$2_1 + 848 >> 2];
  $40_1 = HEAP32[$2_1 + 852 >> 2];
  $22_1 = HEAP32[$2_1 + 856 >> 2];
  $44_1 = HEAP32[$2_1 + 860 >> 2];
  $207($2_1 + 832 | 0, $30_1, $54_1, $48_1, $49_1, $51_1, $57_1, $25_1, $47_1, $36_1, $38_1, $1_1, $40_1, $22_1, $44_1);
  $30_1 = HEAP32[$2_1 + 864 >> 2];
  $11_1 = HEAP32[$2_1 + 868 >> 2];
  $5_1 = $11_1;
  $27_1 = HEAP32[$2_1 + 872 >> 2];
  $15_1 = HEAP32[$2_1 + 876 >> 2];
  $3_1 = $15_1;
  $225($2_1 + 816 | 0, $30_1, $5_1, $27_1, $3_1, $24_1, $18_1, $13_1, $19_1, $10_1, $12_1, $6_1, $14_1, $9_1, $7_1, $21_1, $8_1, $22_1 - 688958952 | 0, $44_1 - (($22_1 >>> 0 < 688958952) + 778901478 | 0) | 0);
  $9_1 = HEAP32[$2_1 + 816 >> 2];
  $12_1 = HEAP32[$2_1 + 820 >> 2];
  $21_1 = HEAP32[$2_1 + 824 >> 2];
  $26_1 = HEAP32[$2_1 + 828 >> 2];
  $225($2_1 + 800 | 0, $9_1, $12_1, $21_1, $26_1, $30_1, $5_1, $27_1, $3_1, $24_1, $18_1, $13_1, $19_1, $10_1, $17_1, $6_1, $14_1, $1_1 + 1432725776 | 0, $40_1 - (($1_1 >>> 0 < 2862241520) + 694614491 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 844 >> 2];
  $49_1 = $5_1;
  $10_1 = HEAP32[$2_1 + 800 >> 2];
  $18_1 = HEAP32[$2_1 + 804 >> 2];
  $6_1 = HEAP32[$2_1 + 808 >> 2];
  $19_1 = HEAP32[$2_1 + 812 >> 2];
  $48_1 = HEAP32[$2_1 + 840 >> 2];
  $3_1 = $48_1;
  $225($2_1 + 784 | 0, $10_1, $18_1, $6_1, $19_1, $9_1, $12_1, $21_1, $26_1, $30_1, $11_1, $27_1, $15_1, $24_1, $20_1, $13_1, $16_1, $3_1 + 1467031594 | 0, $5_1 - (($3_1 >>> 0 < 2827935702) + 200395386 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 796 >> 2];
  $28_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 836 >> 2];
  $54_1 = $3_1;
  $24_1 = HEAP32[$2_1 + 784 >> 2];
  $13_1 = HEAP32[$2_1 + 788 >> 2];
  $7_1 = HEAP32[$2_1 + 792 >> 2];
  $8_1 = $27_1;
  $3_1 = $3_1 + 275423344 | 0;
  $27_1 = HEAP32[$2_1 + 832 >> 2];
  $5_1 = $27_1 + 851169720 | 0;
  $3_1 = $5_1 >>> 0 < 851169720 ? $3_1 + 1 | 0 : $3_1;
  $225($2_1 + 768 | 0, $24_1, $13_1, $7_1, $28_1, $10_1, $18_1, $6_1, $19_1, $9_1, $12_1, $21_1, $26_1, $30_1, $11_1, $8_1, $15_1, $5_1, $3_1);
  $207($2_1 + 752 | 0, $42_1, $43_1, $51_1, $57_1, $55_1, $53_1, $41_1, $45_1, $23_1, $35_1, $27_1, $54_1, $48_1, $49_1);
  $3_1 = $31_1;
  $5_1 = $33_1;
  $33_1 = HEAP32[$2_1 + 752 >> 2];
  $31_1 = HEAP32[$2_1 + 756 >> 2];
  $62_1 = HEAP32[$2_1 + 760 >> 2];
  $60_1 = HEAP32[$2_1 + 764 >> 2];
  $207($2_1 + 736 | 0, $3_1, $5_1, $55_1, $53_1, $52_1, $58_1, $22_1, $44_1, $46_1, $39_1, $33_1, $31_1, $62_1, $60_1);
  $3_1 = HEAP32[$2_1 + 780 >> 2];
  $8_1 = $3_1;
  $17_1 = HEAP32[$2_1 + 768 >> 2];
  $14_1 = HEAP32[$2_1 + 772 >> 2];
  $20_1 = HEAP32[$2_1 + 776 >> 2];
  $4_1 = $60_1 + 430227734 | 0;
  $3_1 = $62_1 - 1194143544 | 0;
  $4_1 = $3_1 >>> 0 < 3100823752 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 720 | 0, $17_1, $14_1, $20_1, $8_1, $24_1, $13_1, $7_1, $28_1, $10_1, $18_1, $6_1, $19_1, $9_1, $12_1, $21_1, $26_1, $3_1, $4_1);
  $3_1 = HEAP32[$2_1 + 732 >> 2];
  $9_1 = $3_1;
  $21_1 = HEAP32[$2_1 + 720 >> 2];
  $16_1 = HEAP32[$2_1 + 724 >> 2];
  $11_1 = HEAP32[$2_1 + 728 >> 2];
  $4_1 = $31_1 + 506948616 | 0;
  $3_1 = $33_1 + 1363258195 | 0;
  $4_1 = $3_1 >>> 0 < 1363258195 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 704 | 0, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $24_1, $13_1, $7_1, $28_1, $10_1, $18_1, $6_1, $19_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 716 >> 2];
  $10_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 748 >> 2];
  $63_1 = $3_1;
  $4_1 = $3_1 + 659060556 | 0;
  $64_1 = HEAP32[$2_1 + 744 >> 2];
  $3_1 = $64_1 - 544281703 | 0;
  $4_1 = $3_1 >>> 0 < 3750685593 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = HEAP32[$2_1 + 704 >> 2];
  $12_1 = HEAP32[$2_1 + 708 >> 2];
  $26_1 = HEAP32[$2_1 + 712 >> 2];
  $225($2_1 + 688 | 0, $6_1, $12_1, $26_1, $5_1, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $24_1, $13_1, $7_1, $28_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 700 >> 2];
  $7_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 740 >> 2];
  $30_1 = $3_1;
  $4_1 = $3_1 + 883997877 | 0;
  $28_1 = HEAP32[$2_1 + 736 >> 2];
  $3_1 = $28_1 - 509917016 | 0;
  $4_1 = $3_1 >>> 0 < 3785050280 ? $4_1 + 1 | 0 : $4_1;
  $15_1 = HEAP32[$2_1 + 688 >> 2];
  $18_1 = HEAP32[$2_1 + 692 >> 2];
  $19_1 = HEAP32[$2_1 + 696 >> 2];
  $225($2_1 + 672 | 0, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $3_1, $4_1);
  $207($2_1 + 656 | 0, $34_1, $37_1, $52_1, $58_1, $50_1, $56_1, $48_1, $49_1, $1_1, $40_1, $28_1, $30_1, $64_1, $63_1);
  $34_1 = HEAP32[$2_1 + 656 >> 2];
  $37_1 = HEAP32[$2_1 + 660 >> 2];
  $61_1 = HEAP32[$2_1 + 664 >> 2];
  $51_1 = HEAP32[$2_1 + 668 >> 2];
  $207($2_1 + 640 | 0, $36_1, $38_1, $50_1, $56_1, $25_1, $47_1, $62_1, $60_1, $27_1, $54_1, $34_1, $37_1, $61_1, $51_1);
  $3_1 = HEAP32[$2_1 + 684 >> 2];
  $8_1 = $3_1;
  $17_1 = HEAP32[$2_1 + 672 >> 2];
  $14_1 = HEAP32[$2_1 + 676 >> 2];
  $20_1 = HEAP32[$2_1 + 680 >> 2];
  $29_1 = $51_1 + 958139571 | 0;
  $3_1 = $61_1 - 976659869 | 0;
  $29_1 = $3_1 >>> 0 < 3318307427 ? $29_1 + 1 | 0 : $29_1;
  $225($2_1 + 624 | 0, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $21_1, $16_1, $11_1, $9_1, $3_1, $29_1);
  $3_1 = HEAP32[$2_1 + 636 >> 2];
  $9_1 = $3_1;
  $21_1 = HEAP32[$2_1 + 624 >> 2];
  $16_1 = HEAP32[$2_1 + 628 >> 2];
  $11_1 = HEAP32[$2_1 + 632 >> 2];
  $4_1 = $37_1 + 1322822218 | 0;
  $3_1 = $34_1 - 482243893 | 0;
  $4_1 = $3_1 >>> 0 < 3812723403 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 608 | 0, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 620 >> 2];
  $10_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 652 >> 2];
  $57_1 = $3_1;
  $4_1 = $3_1 + 1537002063 | 0;
  $53_1 = HEAP32[$2_1 + 648 >> 2];
  $3_1 = $53_1 + 2003034995 | 0;
  $4_1 = $3_1 >>> 0 < 2003034995 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = HEAP32[$2_1 + 608 >> 2];
  $12_1 = HEAP32[$2_1 + 612 >> 2];
  $26_1 = HEAP32[$2_1 + 616 >> 2];
  $225($2_1 + 592 | 0, $6_1, $12_1, $26_1, $5_1, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $7_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 604 >> 2];
  $7_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 644 >> 2];
  $38_1 = $3_1;
  $32_1 = $3_1 + 1747873779 | 0;
  $36_1 = HEAP32[$2_1 + 640 >> 2];
  $3_1 = $36_1 - 692930397 | 0;
  $32_1 = $3_1 >>> 0 < 3602036899 ? $32_1 + 1 | 0 : $32_1;
  $15_1 = HEAP32[$2_1 + 592 >> 2];
  $18_1 = HEAP32[$2_1 + 596 >> 2];
  $19_1 = HEAP32[$2_1 + 600 >> 2];
  $225($2_1 + 576 | 0, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $21_1, $16_1, $11_1, $9_1, $17_1, $14_1, $20_1, $8_1, $3_1, $32_1);
  $207($2_1 + 560 | 0, $23_1, $35_1, $25_1, $47_1, $41_1, $45_1, $64_1, $63_1, $33_1, $31_1, $36_1, $38_1, $53_1, $57_1);
  $50_1 = HEAP32[$2_1 + 560 >> 2];
  $47_1 = HEAP32[$2_1 + 564 >> 2];
  $55_1 = HEAP32[$2_1 + 568 >> 2];
  $52_1 = HEAP32[$2_1 + 572 >> 2];
  $207($2_1 + 544 | 0, $46_1, $39_1, $41_1, $45_1, $22_1, $44_1, $61_1, $51_1, $28_1, $30_1, $50_1, $47_1, $55_1, $52_1);
  $3_1 = HEAP32[$2_1 + 588 >> 2];
  $8_1 = $3_1;
  $17_1 = HEAP32[$2_1 + 576 >> 2];
  $14_1 = HEAP32[$2_1 + 580 >> 2];
  $20_1 = HEAP32[$2_1 + 584 >> 2];
  $3_1 = $52_1 + 1955562222 | 0;
  $23_1 = $55_1 + 1575990012 | 0;
  $3_1 = $23_1 >>> 0 < 1575990012 ? $3_1 + 1 | 0 : $3_1;
  $225($2_1 + 528 | 0, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $21_1, $16_1, $11_1, $9_1, $23_1, $3_1);
  $3_1 = HEAP32[$2_1 + 540 >> 2];
  $13_1 = $3_1;
  $9_1 = HEAP32[$2_1 + 528 >> 2];
  $16_1 = HEAP32[$2_1 + 532 >> 2];
  $11_1 = HEAP32[$2_1 + 536 >> 2];
  $29_1 = $47_1 + 2024104815 | 0;
  $3_1 = $50_1 + 1125592928 | 0;
  $29_1 = $3_1 >>> 0 < 1125592928 ? $29_1 + 1 | 0 : $29_1;
  $225($2_1 + 512 | 0, $9_1, $16_1, $11_1, $13_1, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $5_1, $6_1, $12_1, $26_1, $10_1, $3_1, $29_1);
  $23_1 = HEAP32[$2_1 + 556 >> 2];
  $58_1 = $23_1;
  $21_1 = HEAP32[$2_1 + 512 >> 2];
  $12_1 = HEAP32[$2_1 + 516 >> 2];
  $5_1 = $12_1;
  $10_1 = HEAP32[$2_1 + 520 >> 2];
  $26_1 = HEAP32[$2_1 + 524 >> 2];
  $25_1 = $26_1;
  $56_1 = HEAP32[$2_1 + 552 >> 2];
  $3_1 = $56_1;
  $225($2_1 + 496 | 0, $21_1, $5_1, $10_1, $25_1, $9_1, $16_1, $11_1, $13_1, $17_1, $14_1, $20_1, $8_1, $15_1, $18_1, $19_1, $7_1, $3_1 - 1578062990 | 0, $23_1 - (($3_1 >>> 0 < 1578062990) + 2067236843 | 0) | 0);
  $23_1 = HEAP32[$2_1 + 548 >> 2];
  $45_1 = $23_1;
  $6_1 = HEAP32[$2_1 + 496 >> 2];
  $15_1 = HEAP32[$2_1 + 500 >> 2];
  $7_1 = HEAP32[$2_1 + 504 >> 2];
  $19_1 = HEAP32[$2_1 + 508 >> 2];
  $41_1 = HEAP32[$2_1 + 544 >> 2];
  $3_1 = $41_1;
  $225($2_1 + 480 | 0, $6_1, $15_1, $7_1, $19_1, $21_1, $5_1, $10_1, $25_1, $9_1, $16_1, $11_1, $13_1, $17_1, $14_1, $20_1, $8_1, $3_1 + 442776044 | 0, $23_1 - (($3_1 >>> 0 < 3852191252) + 1933114871 | 0) | 0);
  $207($2_1 + 464 | 0, $1_1, $40_1, $22_1, $44_1, $48_1, $49_1, $53_1, $57_1, $34_1, $37_1, $3_1, $23_1, $56_1, $58_1);
  $23_1 = HEAP32[$2_1 + 464 >> 2];
  $42_1 = HEAP32[$2_1 + 468 >> 2];
  $25_1 = HEAP32[$2_1 + 472 >> 2];
  $44_1 = HEAP32[$2_1 + 476 >> 2];
  $207($2_1 + 448 | 0, $27_1, $54_1, $48_1, $49_1, $62_1, $60_1, $55_1, $52_1, $36_1, $38_1, $23_1, $42_1, $25_1, $44_1);
  $8_1 = HEAP32[$2_1 + 480 >> 2];
  $14_1 = HEAP32[$2_1 + 484 >> 2];
  $5_1 = $14_1;
  $17_1 = HEAP32[$2_1 + 488 >> 2];
  $20_1 = HEAP32[$2_1 + 492 >> 2];
  $3_1 = $20_1;
  $225($2_1 + 432 | 0, $8_1, $5_1, $17_1, $3_1, $6_1, $15_1, $7_1, $19_1, $21_1, $12_1, $10_1, $26_1, $9_1, $16_1, $11_1, $13_1, $25_1 + 593698344 | 0, $44_1 - (($25_1 >>> 0 < 3701268952) + 1866530821 | 0) | 0);
  $24_1 = HEAP32[$2_1 + 432 >> 2];
  $16_1 = HEAP32[$2_1 + 436 >> 2];
  $27_1 = HEAP32[$2_1 + 440 >> 2];
  $11_1 = HEAP32[$2_1 + 444 >> 2];
  $1_1 = $11_1;
  $225($2_1 + 416 | 0, $24_1, $16_1, $27_1, $1_1, $8_1, $5_1, $17_1, $3_1, $6_1, $15_1, $7_1, $19_1, $21_1, $12_1, $10_1, $26_1, $23_1 - 561857047 | 0, $42_1 - (($23_1 >>> 0 < 561857047) + 1538233108 | 0) | 0);
  $3_1 = HEAP32[$2_1 + 460 >> 2];
  $49_1 = $3_1;
  $13_1 = HEAP32[$2_1 + 416 >> 2];
  $12_1 = HEAP32[$2_1 + 420 >> 2];
  $10_1 = HEAP32[$2_1 + 424 >> 2];
  $26_1 = HEAP32[$2_1 + 428 >> 2];
  $5_1 = $26_1;
  $48_1 = HEAP32[$2_1 + 456 >> 2];
  $1_1 = $48_1;
  $225($2_1 + 400 | 0, $13_1, $12_1, $10_1, $5_1, $24_1, $16_1, $27_1, $11_1, $8_1, $14_1, $17_1, $20_1, $6_1, $15_1, $7_1, $19_1, $1_1 - 1295615723 | 0, $3_1 - (($1_1 >>> 0 < 1295615723) + 1090935816 | 0) | 0);
  $22_1 = HEAP32[$2_1 + 452 >> 2];
  $43_1 = $22_1;
  $9_1 = HEAP32[$2_1 + 400 >> 2];
  $7_1 = HEAP32[$2_1 + 404 >> 2];
  $6_1 = HEAP32[$2_1 + 408 >> 2];
  $15_1 = HEAP32[$2_1 + 412 >> 2];
  $3_1 = $15_1;
  $35_1 = HEAP32[$2_1 + 448 >> 2];
  $1_1 = $35_1;
  $225($2_1 + 384 | 0, $9_1, $7_1, $6_1, $3_1, $13_1, $12_1, $10_1, $5_1, $24_1, $16_1, $27_1, $11_1, $8_1, $14_1, $17_1, $20_1, $1_1 - 479046869 | 0, $22_1 - (($1_1 >>> 0 < 479046869) + 965641997 | 0) | 0);
  $207($2_1 + 368 | 0, $33_1, $31_1, $62_1, $60_1, $64_1, $63_1, $56_1, $58_1, $50_1, $47_1, $1_1, $22_1, $48_1, $49_1);
  $1_1 = HEAP32[$2_1 + 368 >> 2];
  $21_1 = HEAP32[$2_1 + 372 >> 2];
  $22_1 = HEAP32[$2_1 + 376 >> 2];
  $39_1 = HEAP32[$2_1 + 380 >> 2];
  $207($2_1 + 352 | 0, $28_1, $30_1, $64_1, $63_1, $61_1, $51_1, $25_1, $44_1, $41_1, $45_1, $1_1, $21_1, $22_1, $39_1);
  $33_1 = HEAP32[$2_1 + 384 >> 2];
  $8_1 = HEAP32[$2_1 + 388 >> 2];
  $31_1 = HEAP32[$2_1 + 392 >> 2];
  $17_1 = HEAP32[$2_1 + 396 >> 2];
  $5_1 = $17_1;
  $225($2_1 + 336 | 0, $33_1, $8_1, $31_1, $5_1, $9_1, $7_1, $6_1, $3_1, $13_1, $12_1, $10_1, $26_1, $24_1, $16_1, $27_1, $11_1, $22_1 - 366583396 | 0, $39_1 - (($22_1 >>> 0 < 366583396) + 903397681 | 0) | 0);
  $30_1 = HEAP32[$2_1 + 336 >> 2];
  $14_1 = HEAP32[$2_1 + 340 >> 2];
  $28_1 = HEAP32[$2_1 + 344 >> 2];
  $20_1 = HEAP32[$2_1 + 348 >> 2];
  $3_1 = $20_1;
  $225($2_1 + 320 | 0, $30_1, $14_1, $28_1, $3_1, $33_1, $8_1, $31_1, $5_1, $9_1, $7_1, $6_1, $15_1, $13_1, $12_1, $10_1, $26_1, $1_1 + 566280711 | 0, $21_1 - (($1_1 >>> 0 < 3728686585) + 779700024 | 0) | 0);
  $5_1 = HEAP32[$2_1 + 364 >> 2];
  $10_1 = $5_1;
  $24_1 = HEAP32[$2_1 + 320 >> 2];
  $16_1 = HEAP32[$2_1 + 324 >> 2];
  $12_1 = $16_1;
  $27_1 = HEAP32[$2_1 + 328 >> 2];
  $11_1 = HEAP32[$2_1 + 332 >> 2];
  $18_1 = $6_1;
  $6_1 = HEAP32[$2_1 + 360 >> 2];
  $3_1 = $6_1;
  $225($2_1 + 304 | 0, $24_1, $12_1, $27_1, $11_1, $30_1, $14_1, $28_1, $20_1, $33_1, $8_1, $31_1, $17_1, $9_1, $7_1, $18_1, $15_1, $3_1 - 840897762 | 0, $5_1 - (($3_1 >>> 0 < 840897762) + 354779689 | 0) | 0);
  $18_1 = HEAP32[$2_1 + 356 >> 2];
  $7_1 = $18_1;
  $13_1 = HEAP32[$2_1 + 304 >> 2];
  $19_1 = HEAP32[$2_1 + 308 >> 2];
  $9_1 = HEAP32[$2_1 + 312 >> 2];
  $15_1 = HEAP32[$2_1 + 316 >> 2];
  $5_1 = $15_1;
  $12_1 = HEAP32[$2_1 + 352 >> 2];
  $3_1 = $12_1;
  $225($2_1 + 288 | 0, $13_1, $19_1, $9_1, $5_1, $24_1, $16_1, $27_1, $11_1, $30_1, $14_1, $28_1, $20_1, $33_1, $8_1, $31_1, $17_1, $3_1 - 294727304 | 0, $7_1 - (($3_1 >>> 0 < 294727304) + 176337024 | 0) | 0);
  $207($2_1 + 272 | 0, $34_1, $37_1, $61_1, $51_1, $53_1, $57_1, $48_1, $49_1, $23_1, $42_1, $3_1, $7_1, $6_1, $10_1);
  $8_1 = HEAP32[$2_1 + 272 >> 2];
  $17_1 = HEAP32[$2_1 + 276 >> 2];
  $26_1 = HEAP32[$2_1 + 280 >> 2];
  $18_1 = HEAP32[$2_1 + 284 >> 2];
  $207($2_1 + 256 | 0, $36_1, $38_1, $53_1, $57_1, $55_1, $52_1, $22_1, $39_1, $35_1, $43_1, $8_1, $17_1, $26_1, $18_1);
  $3_1 = HEAP32[$2_1 + 300 >> 2];
  $46_1 = $3_1;
  $40_1 = HEAP32[$2_1 + 288 >> 2];
  $54_1 = HEAP32[$2_1 + 292 >> 2];
  $34_1 = HEAP32[$2_1 + 296 >> 2];
  $4_1 = $18_1 + 116418474 | 0;
  $3_1 = $26_1 + 1914138554 | 0;
  $4_1 = $3_1 >>> 0 < 1914138554 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 240 | 0, $40_1, $54_1, $34_1, $46_1, $13_1, $19_1, $9_1, $5_1, $24_1, $16_1, $27_1, $11_1, $30_1, $14_1, $28_1, $20_1, $3_1, $4_1);
  $3_1 = HEAP32[$2_1 + 252 >> 2];
  $37_1 = $3_1;
  $38_1 = HEAP32[$2_1 + 240 >> 2];
  $36_1 = HEAP32[$2_1 + 244 >> 2];
  $33_1 = HEAP32[$2_1 + 248 >> 2];
  $32_1 = $17_1 + 174292421 | 0;
  $3_1 = $8_1 - 1563912026 | 0;
  $32_1 = $3_1 >>> 0 < 2731055270 ? $32_1 + 1 | 0 : $32_1;
  $225($2_1 + 224 | 0, $38_1, $36_1, $33_1, $37_1, $40_1, $54_1, $34_1, $46_1, $13_1, $19_1, $9_1, $5_1, $24_1, $16_1, $27_1, $11_1, $3_1, $32_1);
  $5_1 = HEAP32[$2_1 + 236 >> 2];
  $31_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 268 >> 2];
  $14_1 = $3_1;
  $4_1 = $3_1 + 289380356 | 0;
  $20_1 = HEAP32[$2_1 + 264 >> 2];
  $3_1 = $20_1 - 1090974290 | 0;
  $4_1 = $3_1 >>> 0 < 3203993006 ? $4_1 + 1 | 0 : $4_1;
  $30_1 = HEAP32[$2_1 + 224 >> 2];
  $28_1 = HEAP32[$2_1 + 228 >> 2];
  $24_1 = HEAP32[$2_1 + 232 >> 2];
  $225($2_1 + 208 | 0, $30_1, $28_1, $24_1, $5_1, $38_1, $36_1, $33_1, $37_1, $40_1, $54_1, $34_1, $46_1, $13_1, $19_1, $9_1, $15_1, $3_1, $4_1);
  $5_1 = HEAP32[$2_1 + 220 >> 2];
  $27_1 = $5_1;
  $3_1 = HEAP32[$2_1 + 260 >> 2];
  $16_1 = $3_1;
  $29_1 = $3_1 + 460393269 | 0;
  $11_1 = HEAP32[$2_1 + 256 >> 2];
  $3_1 = $11_1 + 320620315 | 0;
  $29_1 = $3_1 >>> 0 < 320620315 ? $29_1 + 1 | 0 : $29_1;
  $13_1 = HEAP32[$2_1 + 208 >> 2];
  $9_1 = HEAP32[$2_1 + 212 >> 2];
  $19_1 = HEAP32[$2_1 + 216 >> 2];
  $225($2_1 + 192 | 0, $13_1, $9_1, $19_1, $5_1, $30_1, $28_1, $24_1, $31_1, $38_1, $36_1, $33_1, $37_1, $40_1, $54_1, $34_1, $46_1, $3_1, $29_1);
  $207($2_1 + 176 | 0, $50_1, $47_1, $55_1, $52_1, $56_1, $58_1, $6_1, $10_1, $1_1, $21_1, $11_1, $16_1, $20_1, $14_1);
  $1_1 = $12_1;
  $5_1 = HEAP32[$2_1 + 176 >> 2];
  $3_1 = HEAP32[$2_1 + 180 >> 2];
  $15_1 = HEAP32[$2_1 + 184 >> 2];
  $12_1 = HEAP32[$2_1 + 188 >> 2];
  $207($2_1 + 160 | 0, $41_1, $45_1, $56_1, $58_1, $25_1, $44_1, $26_1, $18_1, $1_1, $7_1, $5_1, $3_1, $15_1, $12_1);
  $1_1 = HEAP32[$2_1 + 204 >> 2];
  $21_1 = $1_1;
  $10_1 = HEAP32[$2_1 + 192 >> 2];
  $6_1 = HEAP32[$2_1 + 196 >> 2];
  $7_1 = HEAP32[$2_1 + 200 >> 2];
  $4_1 = $12_1 + 685471733 | 0;
  $1_1 = $15_1 + 587496836 | 0;
  $4_1 = $1_1 >>> 0 < 587496836 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 144 | 0, $10_1, $6_1, $7_1, $21_1, $13_1, $9_1, $19_1, $27_1, $30_1, $28_1, $24_1, $31_1, $38_1, $36_1, $33_1, $37_1, $1_1, $4_1);
  $1_1 = HEAP32[$2_1 + 156 >> 2];
  $34_1 = $1_1;
  $37_1 = HEAP32[$2_1 + 144 >> 2];
  $38_1 = HEAP32[$2_1 + 148 >> 2];
  $36_1 = HEAP32[$2_1 + 152 >> 2];
  $4_1 = $3_1 + 852142971 | 0;
  $1_1 = $5_1 + 1086792851 | 0;
  $4_1 = $1_1 >>> 0 < 1086792851 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 128 | 0, $37_1, $38_1, $36_1, $34_1, $10_1, $6_1, $7_1, $21_1, $13_1, $9_1, $19_1, $27_1, $30_1, $28_1, $24_1, $31_1, $1_1, $4_1);
  $3_1 = HEAP32[$2_1 + 140 >> 2];
  $33_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 172 >> 2];
  $26_1 = $1_1;
  $32_1 = $1_1 + 1017036298 | 0;
  $18_1 = HEAP32[$2_1 + 168 >> 2];
  $1_1 = $18_1 + 365543100 | 0;
  $32_1 = $1_1 >>> 0 < 365543100 ? $32_1 + 1 | 0 : $32_1;
  $31_1 = HEAP32[$2_1 + 128 >> 2];
  $30_1 = HEAP32[$2_1 + 132 >> 2];
  $28_1 = HEAP32[$2_1 + 136 >> 2];
  $225($2_1 + 112 | 0, $31_1, $30_1, $28_1, $3_1, $37_1, $38_1, $36_1, $34_1, $10_1, $6_1, $7_1, $21_1, $13_1, $9_1, $19_1, $27_1, $1_1, $32_1);
  $3_1 = HEAP32[$2_1 + 124 >> 2];
  $24_1 = $3_1;
  $1_1 = HEAP32[$2_1 + 164 >> 2];
  $19_1 = $1_1;
  $27_1 = HEAP32[$2_1 + 112 >> 2];
  $13_1 = HEAP32[$2_1 + 116 >> 2];
  $9_1 = HEAP32[$2_1 + 120 >> 2];
  $3_1 = $1_1 + 1126000580 | 0;
  $5_1 = HEAP32[$2_1 + 160 >> 2];
  $1_1 = $5_1 - 1676669620 | 0;
  $3_1 = $1_1 >>> 0 < 2618297676 ? $3_1 + 1 | 0 : $3_1;
  $225($2_1 + 96 | 0, $27_1, $13_1, $9_1, $24_1, $31_1, $30_1, $28_1, $33_1, $37_1, $38_1, $36_1, $34_1, $10_1, $6_1, $7_1, $21_1, $1_1, $3_1);
  $207($2_1 + 80 | 0, $23_1, $42_1, $25_1, $44_1, $48_1, $49_1, $20_1, $14_1, $8_1, $17_1, $5_1, $19_1, $18_1, $26_1);
  $1_1 = $22_1;
  $25_1 = HEAP32[$2_1 + 80 >> 2];
  $23_1 = HEAP32[$2_1 + 84 >> 2];
  $22_1 = HEAP32[$2_1 + 88 >> 2];
  $3_1 = HEAP32[$2_1 + 92 >> 2];
  $207($2_1 - -64 | 0, $35_1, $43_1, $48_1, $49_1, $1_1, $39_1, $15_1, $12_1, $11_1, $16_1, $25_1, $23_1, $22_1, $3_1);
  $1_1 = HEAP32[$2_1 + 108 >> 2];
  $21_1 = $1_1;
  $10_1 = HEAP32[$2_1 + 96 >> 2];
  $6_1 = HEAP32[$2_1 + 100 >> 2];
  $7_1 = HEAP32[$2_1 + 104 >> 2];
  $4_1 = $3_1 + 1288033470 | 0;
  $1_1 = $22_1 - 885112138 | 0;
  $4_1 = $1_1 >>> 0 < 3409855158 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 48 | 0, $10_1, $6_1, $7_1, $21_1, $27_1, $13_1, $9_1, $24_1, $31_1, $30_1, $28_1, $33_1, $37_1, $38_1, $36_1, $34_1, $1_1, $4_1);
  $1_1 = HEAP32[$2_1 + 60 >> 2];
  $8_1 = $1_1;
  $17_1 = HEAP32[$2_1 + 48 >> 2];
  $14_1 = HEAP32[$2_1 + 52 >> 2];
  $20_1 = HEAP32[$2_1 + 56 >> 2];
  $4_1 = $23_1 + 1501505948 | 0;
  $1_1 = $25_1 - 60457430 | 0;
  $4_1 = $1_1 >>> 0 < 4234509866 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 32 | 0, $17_1, $14_1, $20_1, $8_1, $10_1, $6_1, $7_1, $21_1, $27_1, $13_1, $9_1, $24_1, $31_1, $30_1, $28_1, $33_1, $1_1, $4_1);
  $1_1 = HEAP32[$2_1 + 44 >> 2];
  $16_1 = $1_1;
  $11_1 = HEAP32[$2_1 + 32 >> 2];
  $15_1 = HEAP32[$2_1 + 36 >> 2];
  $12_1 = HEAP32[$2_1 + 40 >> 2];
  $4_1 = HEAP32[$2_1 + 76 >> 2] + 1607167915 | 0;
  $1_1 = HEAP32[$2_1 + 72 >> 2] + 987167468 | 0;
  $4_1 = $1_1 >>> 0 < 987167468 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1 + 16 | 0, $11_1, $15_1, $12_1, $16_1, $17_1, $14_1, $20_1, $8_1, $10_1, $6_1, $7_1, $21_1, $27_1, $13_1, $9_1, $24_1, $1_1, $4_1);
  $1_1 = HEAP32[$2_1 + 28 >> 2];
  $26_1 = $1_1;
  $18_1 = HEAP32[$2_1 + 16 >> 2];
  $19_1 = HEAP32[$2_1 + 20 >> 2];
  $5_1 = HEAP32[$2_1 + 24 >> 2];
  $4_1 = HEAP32[$2_1 + 68 >> 2] + 1816402316 | 0;
  $1_1 = HEAP32[$2_1 + 64 >> 2] + 1246189591 | 0;
  $4_1 = $1_1 >>> 0 < 1246189591 ? $4_1 + 1 | 0 : $4_1;
  $225($2_1, $18_1, $19_1, $5_1, $26_1, $11_1, $15_1, $12_1, $16_1, $17_1, $14_1, $20_1, $8_1, $10_1, $6_1, $7_1, $21_1, $1_1, $4_1);
  $25_1 = HEAP32[$2_1 >> 2];
  $23_1 = HEAP32[$2_1 + 4 >> 2];
  $22_1 = HEAP32[$2_1 + 8 >> 2];
  $3_1 = HEAP32[$2_1 + 12 >> 2];
  $29_1 = $8_1 + $81_1 | 0;
  $1_1 = $59_1;
  $59_1 = $1_1 + $20_1 | 0;
  HEAP32[$0_1 + 56 >> 2] = $59_1;
  HEAP32[$0_1 + 60 >> 2] = $1_1 >>> 0 > $59_1 >>> 0 ? $29_1 + 1 | 0 : $29_1;
  $4_1 = $16_1 + $79_1 | 0;
  $1_1 = $75_1;
  $59_1 = $1_1 + $12_1 | 0;
  HEAP32[$0_1 + 48 >> 2] = $59_1;
  HEAP32[$0_1 + 52 >> 2] = $1_1 >>> 0 > $59_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $32_1 = $26_1 + $76_1 | 0;
  $1_1 = $72_1;
  $5_1 = $1_1 + $5_1 | 0;
  HEAP32[$0_1 + 40 >> 2] = $5_1;
  HEAP32[$0_1 + 44 >> 2] = $1_1 >>> 0 > $5_1 >>> 0 ? $32_1 + 1 | 0 : $32_1;
  $1_1 = $69_1;
  $5_1 = $1_1 + $17_1 | 0;
  $69_1 = $14_1 + $80_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $5_1;
  HEAP32[$0_1 + 28 >> 2] = $1_1 >>> 0 > $5_1 >>> 0 ? $69_1 + 1 | 0 : $69_1;
  $4_1 = $15_1 + $78_1 | 0;
  $1_1 = $74_1;
  $5_1 = $1_1 + $11_1 | 0;
  HEAP32[$0_1 + 16 >> 2] = $5_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1 >>> 0 > $5_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $29_1 = $19_1 + $77_1 | 0;
  $1_1 = $71_1;
  $5_1 = $1_1 + $18_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $5_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1 >>> 0 > $5_1 >>> 0 ? $29_1 + 1 | 0 : $29_1;
  $4_1 = $3_1 + $66_1 | 0;
  $1_1 = $68_1;
  $22_1 = $1_1 + $22_1 | 0;
  HEAP32[$0_1 + 32 >> 2] = $22_1;
  HEAP32[$0_1 + 36 >> 2] = $1_1 >>> 0 > $22_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $32_1 = $23_1 + $67_1 | 0;
  $1_1 = $0_1;
  $0_1 = $65_1;
  $3_1 = $0_1 + $25_1 | 0;
  HEAP32[$1_1 >> 2] = $3_1;
  HEAP32[$1_1 + 4 >> 2] = $0_1 >>> 0 > $3_1 >>> 0 ? $32_1 + 1 | 0 : $32_1;
  global$0 = $2_1 + 1920 | 0;
 }
 
 function $407($0_1) {
  $22($0_1);
  HEAP32[$0_1 + 200 >> 2] = 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = global$0 + $0_1 | 0;
  return global$0 | 0;
 }
 
 function $409($0_1, $1_1, $2_1) {
  $101($0_1, $1_1, $2_1);
 }
 
 function $410($0_1, $1_1) {
  $101($0_1, $1_1, 128);
 }
 
 function $411($0_1, $1_1) {
  $101($0_1, $1_1, 64);
 }
 
 function $412($0_1, $1_1) {
  $101($0_1, $1_1, 32);
 }
 
 function $413($0_1, $1_1) {
  $66($0_1, $1_1);
 }
 
 function $414($0_1, $1_1, $2_1) {
  $110($0_1, $1_1, $2_1);
 }
 
 function $415($0_1, $1_1) {
  $110($0_1, $1_1, 64);
 }
 
 function $416($0_1, $1_1) {
  $110($0_1, $1_1, 32);
 }
 
 function $417($0_1, $1_1) {
  $168($0_1, $1_1, 1);
 }
 
 function $418($0_1, $1_1, $2_1) {
  $131($0_1, $1_1, $2_1);
 }
 
 function $419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $401(HEAP32[$0_1 >> 2], $1_1) | 0;
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $134(HEAP32[$0_1 >> 2], $1_1) | 0;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $19(HEAP32[$0_1 >> 2], $1_1) | 0;
 }
 
 function $422($0_1, $1_1) {
  $30($0_1, $1_1, 1);
 }
 
 function $423($0_1) {
  return (fimport$0($0_1 | 0) | 0) == 1;
 }
 
 function $424($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = 0;
  while (1) {
   if (HEAPU8[$0_1 + $1_1 | 0]) {
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  abort();
 }
 
 function $425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  return 0;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  i64toi32_i32$HIGH_BITS = 615889230;
  return -518628140;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  i64toi32_i32$HIGH_BITS = -242734726;
  return 1814136214;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  i64toi32_i32$HIGH_BITS = 161557309;
  return -1818875385;
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 512;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  return 1;
 }
 
 function $432($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function __wasm_ctz_i32($0_1) {
  if ($0_1) {
   return 31 - Math_clz32($0_1 - 1 ^ $0_1) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0_1 >>> 16 | 0;
  $9_1 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0_1 & 65535;
  $8_1 = Math_imul($6_1, $7_1);
  $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0_1, $3_1) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  return $8_1 & 65535 | $4_1 << 16;
 }
 
 function __wasm_rotl_i32($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $1_1 & 31;
  $3_1 = (-1 >>> $2_1 & $0_1) << $2_1;
  $2_1 = $0_1;
  $0_1 = 0 - $1_1 & 31;
  return $3_1 | ($2_1 & -1 << $0_1) >>> $0_1;
 }
 
 function __wasm_rotl_i64($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $6_1 = $2_1 & 63;
  $4_1 = $6_1 & 31;
  if ($6_1 >>> 0 >= 32) {
   $4_1 = -1 >>> $4_1 | 0
  } else {
   $3_1 = -1 >>> $4_1 | 0;
   $4_1 = $3_1 | (1 << $4_1) - 1 << 32 - $4_1;
  }
  $4_1 = $4_1 & $0_1;
  $3_1 = $1_1 & $3_1;
  $5_1 = $6_1 & 31;
  if ($6_1 >>> 0 >= 32) {
   $3_1 = $4_1 << $5_1;
   $6_1 = 0;
  } else {
   $3_1 = (1 << $5_1) - 1 & $4_1 >>> 32 - $5_1 | $3_1 << $5_1;
   $6_1 = $4_1 << $5_1;
  }
  $4_1 = $3_1;
  $5_1 = 0 - $2_1 & 63;
  $3_1 = $5_1 & 31;
  if ($5_1 >>> 0 >= 32) {
   $3_1 = -1 << $3_1;
   $2_1 = 0;
  } else {
   $2_1 = -1 << $3_1;
   $3_1 = $2_1 | (1 << $3_1) - 1 & -1 >>> 32 - $3_1;
  }
  $0_1 = $2_1 & $0_1;
  $1_1 = $1_1 & $3_1;
  $3_1 = $5_1 & 31;
  if ($5_1 >>> 0 >= 32) {
   $2_1 = 0;
   $0_1 = $1_1 >>> $3_1 | 0;
  } else {
   $2_1 = $1_1 >>> $3_1 | 0;
   $0_1 = ((1 << $3_1) - 1 & $1_1) << 32 - $3_1 | $0_1 >>> $3_1;
  }
  $0_1 = $0_1 | $6_1;
  i64toi32_i32$HIGH_BITS = $2_1 | $4_1;
  return $0_1;
 }
 
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = [null, $433, $393, $419, $238, $403, $401, $340, $401, $434, $396, $115, $245, $434, $339, $263, $434, $103, $72, $397, $425, $426, $427, $63, $87, $434, $111, $434, $434, $43, $134, $242, $434, $404, $420, $246, $434, $48, $82, $425, $428, $426, $399, $425, $434, $421, $434, $434, $307, $434, $19, $434, $308, $434, $126, $151, $425, $429, $426, $399, $425, $434, $342, $127, $434, $188, $432, $426, $434, $220, $430, $431, $99, $424, $424];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    "value": __wasm_memory_grow
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "ext_bip39_generate": $60, 
  "ext_bip39_to_entropy": $143, 
  "ext_bip39_to_mini_secret": $88, 
  "ext_bip39_to_seed": $11, 
  "ext_bip39_validate": $74, 
  "ext_ed_from_seed": $44, 
  "ext_ed_sign": $25, 
  "ext_ed_verify": $9, 
  "ext_blake2b": $34, 
  "ext_hmac_sha256": $36, 
  "ext_hmac_sha512": $125, 
  "ext_keccak256": $112, 
  "ext_keccak512": $145, 
  "ext_pbkdf2": $149, 
  "ext_scrypt": $40, 
  "ext_sha256": $137, 
  "ext_sha512": $158, 
  "ext_twox": $31, 
  "ext_secp_pub_compress": $155, 
  "ext_secp_pub_expand": $144, 
  "ext_secp_from_seed": $86, 
  "ext_secp_recover": $51, 
  "ext_secp_sign": $39, 
  "ext_sr_derive_keypair_hard": $46, 
  "ext_sr_derive_keypair_soft": $23, 
  "ext_sr_derive_public_soft": $55, 
  "ext_sr_from_seed": $78, 
  "ext_sr_sign": $33, 
  "ext_sr_verify": $12, 
  "ext_sr_agree": $49, 
  "ext_vrf_sign": $1, 
  "ext_vrf_verify": $3, 
  "rustsecp256k1_v0_4_1_context_create": $257, 
  "rustsecp256k1_v0_4_1_context_destroy": $278, 
  "rustsecp256k1_v0_4_1_default_illegal_callback_fn": $424, 
  "rustsecp256k1_v0_4_1_default_error_callback_fn": $424, 
  "__wbindgen_add_to_stack_pointer": $408, 
  "__wbindgen_free": $382, 
  "__wbindgen_malloc": $321, 
  "__wbindgen_realloc": $357, 
  "__wbindgen_exn_store": $400
 };
}

const asmJsInit = (wbg) => asmFunc(wbg);

module.exports = { asmJsInit };


/***/ }),

/***/ 218:
/***/ ((module) => {

// Copyright 2019-2022 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0

// Generated as part of the build, do not edit

const sizeCompressed = 171464;
const sizeUncompressed = 340174;
const bytes = '';

module.exports = { bytes, sizeCompressed, sizeUncompressed };


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// NAMESPACE OBJECT: ./node_modules/@polkadot/types/index.types.js
var index_types_namespaceObject = {};
__webpack_require__.r(index_types_namespaceObject);
__webpack_require__.d(index_types_namespaceObject, {
  "BitVec": () => (BitVec),
  "Bool": () => (bool),
  "Bytes": () => (Bytes),
  "Data": () => (Data),
  "GenericAccountId": () => (GenericAccountId),
  "GenericAccountIndex": () => (GenericAccountIndex),
  "GenericAddress": () => (GenericMultiAddress),
  "GenericBlock": () => (GenericBlock),
  "GenericCall": () => (GenericCall),
  "GenericChainProperties": () => (GenericChainProperties),
  "GenericConsensusEngineId": () => (GenericConsensusEngineId),
  "GenericEthereumAccountId": () => (GenericEthereumAccountId),
  "GenericEthereumLookupSource": () => (GenericEthereumLookupSource),
  "GenericEvent": () => (GenericEvent),
  "GenericEventData": () => (GenericEventData),
  "GenericExtrinsic": () => (GenericExtrinsic),
  "GenericExtrinsicEra": () => (GenericExtrinsicEra),
  "GenericExtrinsicPayload": () => (GenericExtrinsicPayload),
  "GenericExtrinsicPayloadUnknown": () => (GenericExtrinsicPayloadUnknown),
  "GenericExtrinsicPayloadV4": () => (GenericExtrinsicPayloadV4),
  "GenericExtrinsicSignatureV4": () => (GenericExtrinsicSignatureV4),
  "GenericExtrinsicUnknown": () => (GenericExtrinsicUnknown),
  "GenericExtrinsicV4": () => (GenericExtrinsicV4),
  "GenericImmortalEra": () => (ImmortalEra),
  "GenericLookupSource": () => (GenericLookupSource),
  "GenericMortalEra": () => (MortalEra),
  "GenericMultiAddress": () => (GenericMultiAddress),
  "GenericSignerPayload": () => (GenericSignerPayload),
  "GenericVote": () => (GenericVote),
  "I128": () => (i128),
  "I16": () => (i16),
  "I256": () => (i256),
  "I32": () => (i32),
  "I64": () => (i64),
  "I8": () => (i8),
  "Null": () => (Null),
  "StorageKey": () => (StorageKey),
  "Text": () => (Text),
  "Type": () => (Type),
  "U128": () => (u128),
  "U16": () => (U16_u16),
  "U256": () => (u256),
  "U32": () => (U32_u32),
  "U64": () => (u64),
  "U8": () => (U8_u8),
  "USize": () => (usize),
  "bool": () => (bool),
  "i128": () => (i128),
  "i16": () => (i16),
  "i256": () => (i256),
  "i32": () => (i32),
  "i64": () => (i64),
  "i8": () => (i8),
  "u128": () => (u128),
  "u16": () => (U16_u16),
  "u256": () => (u256),
  "u32": () => (U32_u32),
  "u64": () => (u64),
  "u8": () => (U8_u8),
  "usize": () => (usize)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/types/interfaces/definitions.js
var interfaces_definitions_namespaceObject = {};
__webpack_require__.r(interfaces_definitions_namespaceObject);
__webpack_require__.d(interfaces_definitions_namespaceObject, {
  "assets": () => (assets_definitions),
  "attestations": () => (attestations_definitions),
  "aura": () => (aura_definitions),
  "author": () => (author_definitions),
  "authorship": () => (authorship_definitions),
  "babe": () => (babe_definitions),
  "balances": () => (balances_definitions),
  "beefy": () => (beefy_definitions),
  "bridges": () => (bridges_definitions),
  "chain": () => (chain_definitions),
  "childstate": () => (childstate_definitions),
  "claims": () => (claims_definitions),
  "collective": () => (collective_definitions),
  "consensus": () => (consensus_definitions),
  "contracts": () => (contracts_definitions),
  "contractsAbi": () => (contractsAbi_definitions),
  "crowdloan": () => (crowdloan_definitions),
  "cumulus": () => (cumulus_definitions),
  "democracy": () => (democracy_definitions),
  "dev": () => (dev_definitions),
  "elections": () => (elections_definitions),
  "engine": () => (engine_definitions),
  "eth": () => (eth_definitions),
  "evm": () => (evm_definitions),
  "extrinsics": () => (extrinsics_definitions),
  "genericAsset": () => (genericAsset_definitions),
  "gilt": () => (gilt_definitions),
  "grandpa": () => (grandpa_definitions),
  "identity": () => (identity_definitions),
  "imOnline": () => (imOnline_definitions),
  "lottery": () => (lottery_definitions),
  "metadata": () => (definitions),
  "mmr": () => (mmr_definitions),
  "offchain": () => (offchain_definitions),
  "offences": () => (offences_definitions),
  "parachains": () => (parachains_definitions),
  "payment": () => (payment_definitions),
  "poll": () => (poll_definitions),
  "proxy": () => (proxy_definitions),
  "purchase": () => (purchase_definitions),
  "recovery": () => (recovery_definitions),
  "rpc": () => (rpc_definitions),
  "runtime": () => (runtime_definitions),
  "scaleInfo": () => (scaleInfo_definitions),
  "scheduler": () => (scheduler_definitions),
  "session": () => (session_definitions),
  "society": () => (society_definitions),
  "staking": () => (staking_definitions),
  "state": () => (state_definitions),
  "support": () => (support_definitions),
  "syncstate": () => (syncstate_definitions),
  "system": () => (system_definitions),
  "treasury": () => (treasury_definitions),
  "txpayment": () => (txpayment_definitions),
  "uniques": () => (uniques_definitions),
  "utility": () => (utility_definitions),
  "vesting": () => (vesting_definitions),
  "xcm": () => (xcm_definitions)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/accounts/index.js
var accounts_namespaceObject = {};
__webpack_require__.r(accounts_namespaceObject);
__webpack_require__.d(accounts_namespaceObject, {
  "accountId": () => (accountId),
  "flags": () => (flags),
  "hasIdentity": () => (hasIdentity),
  "hasIdentityMulti": () => (hasIdentityMulti),
  "idAndIndex": () => (idAndIndex),
  "idToIndex": () => (idToIndex),
  "identity": () => (identity_identity),
  "indexToId": () => (indexToId),
  "indexes": () => (indexes),
  "info": () => (info)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/bagsList/index.js
var bagsList_namespaceObject = {};
__webpack_require__.r(bagsList_namespaceObject);
__webpack_require__.d(bagsList_namespaceObject, {
  "_getIds": () => (_getIds),
  "all": () => (get_all),
  "expand": () => (expand),
  "get": () => (get),
  "getExpanded": () => (getExpanded),
  "listNodes": () => (listNodes)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/balances/index.js
var balances_namespaceObject = {};
__webpack_require__.r(balances_namespaceObject);
__webpack_require__.d(balances_namespaceObject, {
  "account": () => (account),
  "all": () => (all_all),
  "votingBalance": () => (votingBalance),
  "votingBalances": () => (votingBalances)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/bounties/index.js
var api_derive_bounties_namespaceObject = {};
__webpack_require__.r(api_derive_bounties_namespaceObject);
__webpack_require__.d(api_derive_bounties_namespaceObject, {
  "bounties": () => (bounties)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/chain/index.js
var api_derive_chain_namespaceObject = {};
__webpack_require__.r(api_derive_chain_namespaceObject);
__webpack_require__.d(api_derive_chain_namespaceObject, {
  "bestNumber": () => (bestNumber),
  "bestNumberFinalized": () => (bestNumberFinalized),
  "bestNumberLag": () => (bestNumberLag),
  "getBlock": () => (getBlock),
  "getBlockByNumber": () => (getBlockByNumber),
  "getHeader": () => (getHeader),
  "subscribeNewBlocks": () => (subscribeNewBlocks),
  "subscribeNewHeads": () => (subscribeNewHeads)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/contracts/index.js
var contracts_namespaceObject = {};
__webpack_require__.r(contracts_namespaceObject);
__webpack_require__.d(contracts_namespaceObject, {
  "fees": () => (fees)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/council/index.js
var council_namespaceObject = {};
__webpack_require__.r(council_namespaceObject);
__webpack_require__.d(council_namespaceObject, {
  "hasProposals": () => (council_hasProposals),
  "members": () => (council_members),
  "prime": () => (council_prime),
  "proposal": () => (council_proposal),
  "proposalCount": () => (council_proposalCount),
  "proposalHashes": () => (council_proposalHashes),
  "proposals": () => (council_proposals),
  "votes": () => (votes),
  "votesOf": () => (votesOf)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/crowdloan/index.js
var crowdloan_namespaceObject = {};
__webpack_require__.r(crowdloan_namespaceObject);
__webpack_require__.d(crowdloan_namespaceObject, {
  "childKey": () => (childKey),
  "contributions": () => (contributions),
  "ownContributions": () => (ownContributions)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/democracy/index.js
var democracy_namespaceObject = {};
__webpack_require__.r(democracy_namespaceObject);
__webpack_require__.d(democracy_namespaceObject, {
  "_referendumInfo": () => (_referendumInfo),
  "_referendumVotes": () => (_referendumVotes),
  "_referendumsVotes": () => (_referendumsVotes),
  "dispatchQueue": () => (dispatchQueue),
  "locks": () => (locks),
  "nextExternal": () => (nextExternal),
  "preimage": () => (preimage),
  "preimages": () => (preimages),
  "proposals": () => (proposals_proposals),
  "referendumIds": () => (referendumIds),
  "referendums": () => (referendums),
  "referendumsActive": () => (referendumsActive),
  "referendumsFinished": () => (referendumsFinished),
  "referendumsInfo": () => (referendumsInfo),
  "sqrtElectorate": () => (sqrtElectorate)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/elections/index.js
var elections_namespaceObject = {};
__webpack_require__.r(elections_namespaceObject);
__webpack_require__.d(elections_namespaceObject, {
  "info": () => (info_info)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/imOnline/index.js
var imOnline_namespaceObject = {};
__webpack_require__.r(imOnline_namespaceObject);
__webpack_require__.d(imOnline_namespaceObject, {
  "receivedHeartbeats": () => (receivedHeartbeats)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/membership/index.js
var membership_namespaceObject = {};
__webpack_require__.r(membership_namespaceObject);
__webpack_require__.d(membership_namespaceObject, {
  "hasProposals": () => (membership_hasProposals),
  "members": () => (membership_members),
  "prime": () => (membership_prime),
  "proposal": () => (membership_proposal),
  "proposalCount": () => (membership_proposalCount),
  "proposalHashes": () => (membership_proposalHashes),
  "proposals": () => (membership_proposals)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/parachains/index.js
var parachains_namespaceObject = {};
__webpack_require__.r(parachains_namespaceObject);
__webpack_require__.d(parachains_namespaceObject, {
  "info": () => (parachains_info_info),
  "overview": () => (overview)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/session/index.js
var session_namespaceObject = {};
__webpack_require__.r(session_namespaceObject);
__webpack_require__.d(session_namespaceObject, {
  "eraLength": () => (eraLength),
  "eraProgress": () => (eraProgress),
  "indexes": () => (indexes_indexes),
  "info": () => (session_info_info),
  "progress": () => (progress),
  "sessionProgress": () => (sessionProgress)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/society/index.js
var society_namespaceObject = {};
__webpack_require__.r(society_namespaceObject);
__webpack_require__.d(society_namespaceObject, {
  "_members": () => (_members),
  "candidates": () => (candidates),
  "info": () => (society_info_info),
  "member": () => (member),
  "members": () => (members_members)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/staking/index.js
var staking_namespaceObject = {};
__webpack_require__.r(staking_namespaceObject);
__webpack_require__.d(staking_namespaceObject, {
  "_eraExposure": () => (_eraExposure),
  "_eraPrefs": () => (_eraPrefs),
  "_eraSlashes": () => (_eraSlashes),
  "_erasExposure": () => (_erasExposure),
  "_erasPoints": () => (_erasPoints),
  "_erasPrefs": () => (_erasPrefs),
  "_erasRewards": () => (_erasRewards),
  "_erasSlashes": () => (_erasSlashes),
  "_ownExposures": () => (_ownExposures),
  "_ownSlashes": () => (_ownSlashes),
  "_stakerExposures": () => (_stakerExposures),
  "_stakerPoints": () => (_stakerPoints),
  "_stakerPrefs": () => (_stakerPrefs),
  "_stakerRewards": () => (_stakerRewards),
  "_stakerRewardsEras": () => (_stakerRewardsEras),
  "_stakerSlashes": () => (_stakerSlashes),
  "account": () => (account_account),
  "accounts": () => (accounts),
  "currentPoints": () => (currentPoints),
  "electedInfo": () => (electedInfo),
  "eraExposure": () => (eraExposure),
  "eraPrefs": () => (eraPrefs),
  "eraSlashes": () => (eraSlashes),
  "erasExposure": () => (erasExposure),
  "erasHistoric": () => (erasHistoric),
  "erasPoints": () => (erasPoints),
  "erasPrefs": () => (erasPrefs),
  "erasRewards": () => (erasRewards),
  "erasSlashes": () => (erasSlashes),
  "keys": () => (keys),
  "keysMulti": () => (keysMulti),
  "nextElected": () => (nextElected),
  "overview": () => (overview_overview),
  "ownExposure": () => (ownExposure),
  "ownExposures": () => (ownExposures),
  "ownSlash": () => (ownSlash),
  "ownSlashes": () => (ownSlashes),
  "query": () => (query),
  "queryMulti": () => (queryMulti),
  "stakerExposure": () => (stakerExposure),
  "stakerExposures": () => (stakerExposures),
  "stakerPoints": () => (stakerPoints),
  "stakerPrefs": () => (stakerPrefs),
  "stakerRewards": () => (stakerRewards),
  "stakerRewardsMulti": () => (stakerRewardsMulti),
  "stakerRewardsMultiEras": () => (stakerRewardsMultiEras),
  "stakerSlashes": () => (stakerSlashes),
  "stashes": () => (stashes),
  "validators": () => (validators),
  "waitingInfo": () => (waitingInfo)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/technicalCommittee/index.js
var technicalCommittee_namespaceObject = {};
__webpack_require__.r(technicalCommittee_namespaceObject);
__webpack_require__.d(technicalCommittee_namespaceObject, {
  "hasProposals": () => (technicalCommittee_hasProposals),
  "members": () => (technicalCommittee_members),
  "prime": () => (technicalCommittee_prime),
  "proposal": () => (technicalCommittee_proposal),
  "proposalCount": () => (technicalCommittee_proposalCount),
  "proposalHashes": () => (technicalCommittee_proposalHashes),
  "proposals": () => (technicalCommittee_proposals)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/treasury/index.js
var treasury_namespaceObject = {};
__webpack_require__.r(treasury_namespaceObject);
__webpack_require__.d(treasury_namespaceObject, {
  "proposals": () => (treasury_proposals_proposals)
});

// NAMESPACE OBJECT: ./node_modules/@polkadot/api-derive/tx/index.js
var tx_namespaceObject = {};
__webpack_require__.r(tx_namespaceObject);
__webpack_require__.d(tx_namespaceObject, {
  "events": () => (events),
  "signingInfo": () => (signingInfo)
});

;// CONCATENATED MODULE: ./node_modules/@polkadot/util/hex/alphabet.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const U8_TO_HEX = new Array(256);
const U16_TO_HEX = new Array(256 * 256);
const HEX_TO_U8 = {};
const HEX_TO_U16 = {};

for (let n = 0; n < 256; n++) {
  const hex = n.toString(16).padStart(2, '0');
  U8_TO_HEX[n] = hex;
  HEX_TO_U8[hex] = n;
}

for (let i = 0; i < 256; i++) {
  for (let j = 0; j < 256; j++) {
    const hex = U8_TO_HEX[i] + U8_TO_HEX[j];
    const n = i << 8 | j;
    U16_TO_HEX[n] = hex;
    HEX_TO_U16[hex] = n;
  }
}


;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/toHex.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */

function hex(value) {
  const mod = value.length % 2;
  const length = value.length - mod;
  const dv = new DataView(value.buffer, value.byteOffset);
  let result = '';

  for (let i = 0; i < length; i += 2) {
    result += U16_TO_HEX[dv.getUint16(i)];
  }

  if (mod) {
    result += U8_TO_HEX[dv.getUint8(length)];
  }

  return result;
}
/**
 * @name u8aToHex
 * @summary Creates a hex string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToHex } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */


function u8aToHex(value, bitLength = -1, isPrefixed = true) {
  const length = Math.ceil(bitLength / 8);
  return `${isPrefixed ? '0x' : ''}${!value || !value.length ? '' : length > 0 && value.length > length ? `${hex(value.subarray(0, length / 2))}…${hex(value.subarray(value.length - length / 2))}` : hex(value)}`;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/function.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line @typescript-eslint/ban-types

/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */
function isFunction(value) {
  return typeof value === 'function';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/null.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isNull
 * @summary Tests for a `null` values.
 * @description
 * Checks to see if the input value is `null`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNull } from '@polkadot/util';
 *
 * console.log('isNull', isNull(null)); // => true
 * ```
 */
function isNull(value) {
  return value === null;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/undefined.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isUndefined(value) {
  return typeof value === 'undefined';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/assert.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name assert
 * @summary Checks for a valid test, if not Error is thrown.
 * @description
 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
 * @example
 * <BR>
 *
 * ```javascript
 * const { assert } from '@polkadot/util';
 *
 * assert(true, 'True should be true'); // passes
 * assert(false, 'False should not be true'); // Error thrown
 * assert(false, () => 'message'); // Error with 'message'
 * ```
 */
function assert(condition, message) {
  if (!condition) {
    throw new Error(isFunction(message) ? message() : message);
  }
}
/**
 * @name assertReturn
 * @description Returns when the value is not undefined/null, otherwise throws assertion error
 */

function assertReturn(value, message) {
  assert(!isUndefined(value) && !isNull(value), message);
  return value;
}
/**
 * @name assertUnreachable
 * @description An assertion helper that ensures all codepaths are followed
 */

function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-global/index.js
// Copyright 2017-2022 @polkadot/x-global authors & contributors
// SPDX-License-Identifier: Apache-2.0


function evaluateThis(fn) {
  return fn('return this');
}

const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);
function extractGlobal(name, fallback) {
  return typeof xglobal[name] === 'undefined' ? fallback : xglobal[name];
}
function exposeGlobal(name, fallback) {
  if (typeof xglobal[name] === 'undefined') {
    xglobal[name] = fallback;
  }
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-textdecoder/fallback.js
// Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is very limited, only handling Ascii values
class TextDecoder {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-useless-constructor
  constructor(_) {// nothing
  }

  decode(value) {
    let result = '';

    for (let i = 0; i < value.length; i++) {
      result += String.fromCharCode(value[i]);
    }

    return result;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-textdecoder/browser.js
// Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0



const browser_TextDecoder = extractGlobal('TextDecoder', TextDecoder);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/toString.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const decoder = new browser_TextDecoder('utf-8');
/**
 * @name u8aToString
 * @summary Creates a utf-8 string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToString } from '@polkadot/util';
 *
 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
 * ```
 */

function u8aToString(value) {
  return !(value !== null && value !== void 0 && value.length) ? '' : decoder.decode(value);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-textencoder/fallback.js
// Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is very limited, only handling Ascii values
class fallback_TextEncoder {
  encode(value) {
    const u8a = new Uint8Array(value.length);

    for (let i = 0; i < value.length; i++) {
      u8a[i] = value.charCodeAt(i);
    }

    return u8a;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-textencoder/browser.js
// Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0



const browser_TextEncoder = extractGlobal('TextEncoder', fallback_TextEncoder);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/string/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const encoder = new browser_TextEncoder();
/**
 * @name stringToU8a
 * @summary Creates a Uint8Array object from a utf-8 string.
 * @description
 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToU8a } from '@polkadot/util';
 *
 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
 * ```
 */
// eslint-disable-next-line @typescript-eslint/ban-types

function stringToU8a(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-randomvalues/browser.js
// Copyright 2017-2022 @polkadot/x-randomvalues authors & contributors
// SPDX-License-Identifier: Apache-2.0


function getRandomValues(arr) {
  // We use x-global here - this prevents packagers such as rollup
  // confusing this with the "normal" Node.js import and stubbing it
  // (and also aligns with eg. x-fetch, where x-global is used)
  return xglobal.crypto.getRandomValues(arr);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-bridge/wbg.js
// Copyright 2019-2022 @polkadot/wasm-bridge authors & contributors
// SPDX-License-Identifier: Apache-2.0

const DEFAULT_CRYPTO = {
  getRandomValues: getRandomValues
};
const DEFAULT_SELF = {
  crypto: DEFAULT_CRYPTO
};
class Wbg {
  #bridge;

  constructor(bridge) {
    this.#bridge = bridge;
  }

  abort = () => {
    throw new Error('abort');
  };
  __wbindgen_is_undefined = idx => {
    return this.#bridge.getObject(idx) === undefined;
  };
  __wbindgen_throw = (ptr, len) => {
    throw new Error(this.#bridge.getString(ptr, len));
  };
  __wbg_self_1b7a39e3a92c949c = () => {
    return this.#bridge.addObject(DEFAULT_SELF);
  };
  __wbg_require_604837428532a733 = (ptr, len) => {
    throw new Error(`Unable to require ${this.#bridge.getString(ptr, len)}`);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  __wbg_crypto_968f1772287e2df0 = _idx => {
    return this.#bridge.addObject(DEFAULT_CRYPTO);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  __wbg_getRandomValues_a3d34b4fee3c2869 = _idx => {
    return this.#bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
    DEFAULT_CRYPTO.getRandomValues(this.#bridge.getU8a(ptr, len));
  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars

  __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
    throw new Error('randomFillsync is not available'); // getObject(idx).randomFillSync(getU8a(ptr, len));
  };
  __wbindgen_object_drop_ref = idx => {
    this.#bridge.takeObject(idx);
  };
}
function initWbg(bridge) {
  return new Wbg(bridge);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-bridge/bridge.js
// Copyright 2019-2022 @polkadot/wasm-bridge authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable @typescript-eslint/no-non-null-assertion */


class Bridge {
  #cachegetInt32;
  #cachegetUint8;
  #createWasm;
  #heap;
  #heapNext;
  #wasm;
  #wasmError;
  #wasmPromise;
  #wbg;
  #type;

  constructor(createWasm) {
    this.#createWasm = createWasm;
    this.#cachegetInt32 = null;
    this.#cachegetUint8 = null;
    this.#heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
    this.#heapNext = this.#heap.length;
    this.#type = 'none';
    this.#wasm = null;
    this.#wasmError = null;
    this.#wasmPromise = null;
    this.#wbg = { ...new Wbg(this)
    };
  }

  get error() {
    return this.#wasmError;
  }

  get type() {
    return this.#type;
  }

  get wbg() {
    return this.#wbg;
  }

  get wasm() {
    return this.#wasm;
  }

  async init(createWasm) {
    if (!this.#wasmPromise || createWasm) {
      this.#wasmPromise = (createWasm || this.#createWasm)(this.#wbg);
    }

    const {
      error,
      type,
      wasm
    } = await this.#wasmPromise;
    this.#type = type;
    this.#wasm = wasm;
    this.#wasmError = error;
    return this.#wasm;
  }

  getObject(idx) {
    return this.#heap[idx];
  }

  dropObject(idx) {
    if (idx < 36) {
      return;
    }

    this.#heap[idx] = this.#heapNext;
    this.#heapNext = idx;
  }

  takeObject(idx) {
    const ret = this.getObject(idx);
    this.dropObject(idx);
    return ret;
  }

  addObject(obj) {
    if (this.#heapNext === this.#heap.length) {
      this.#heap.push(this.#heap.length + 1);
    }

    const idx = this.#heapNext;
    this.#heapNext = this.#heap[idx];
    this.#heap[idx] = obj;
    return idx;
  }

  getInt32() {
    if (this.#cachegetInt32 === null || this.#cachegetInt32.buffer !== this.#wasm.memory.buffer) {
      this.#cachegetInt32 = new Int32Array(this.#wasm.memory.buffer);
    }

    return this.#cachegetInt32;
  }

  getUint8() {
    if (this.#cachegetUint8 === null || this.#cachegetUint8.buffer !== this.#wasm.memory.buffer) {
      this.#cachegetUint8 = new Uint8Array(this.#wasm.memory.buffer);
    }

    return this.#cachegetUint8;
  }

  getU8a(ptr, len) {
    return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
  }

  getString(ptr, len) {
    return u8aToString(this.getU8a(ptr, len));
  }

  allocU8a(arg) {
    const ptr = this.#wasm.__wbindgen_malloc(arg.length * 1);

    this.getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }

  allocString(arg) {
    return this.allocU8a(stringToU8a(arg));
  }

  resultU8a() {
    const r0 = this.getInt32()[8 / 4 + 0];
    const r1 = this.getInt32()[8 / 4 + 1];
    const ret = this.getU8a(r0, r1).slice();

    this.#wasm.__wbindgen_free(r0, r1 * 1);

    return ret;
  }

  resultString() {
    return u8aToString(this.resultU8a());
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-bridge/init.js
// Copyright 2019-2022 @polkadot/wasm-bundle authors & contributors
// SPDX-License-Identifier: Apache-2.0

function createWasmFn(root, wasmBytes, asmFn) {
  return async wbg => {
    const result = {
      error: null,
      type: 'none',
      wasm: null
    };

    try {
      assert(typeof WebAssembly === 'object' && typeof WebAssembly.instantiate === 'function' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
      const source = await WebAssembly.instantiate(wasmBytes, {
        wbg
      });
      result.wasm = source.instance.exports;
      result.type = 'wasm';
    } catch (error) {
      // if we have a valid supplied asm.js, return that
      if (asmFn) {
        result.wasm = asmFn(wbg);
        result.type = 'asm';
      } else {
        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
        console.error(result.error);
      }
    }

    return result;
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-util/fflate.js
// Copyright 2019-2022 @polkadot/wasm-util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// MIT License
//
// Copyright (c) 2020 Arjun Barrett
//
// Copied from https://github.com/101arrowz/fflate/blob/73c737941ec89d85cdf0ad39ee6f26c5fdc95fd7/src/index.ts
// This only contains the unzlibSync function, no compression, no async, no workers
//
// These 2 issues are addressed as a short-term, stop-gap solution
//   - https://github.com/polkadot-js/api/issues/2963
//   - https://github.com/101arrowz/fflate/issues/17
//
// Only tweaks make here are some TS adjustments (we use strict null checks), the code is otherwise as-is with
// only the single required function provided (compression is still being done in the build with fflate)

/* eslint-disable */
// inflate state
// aliases for shorter compressed code (most minifers don't do this)
const u8 = Uint8Array,
      u16 = Uint16Array,
      u32 = Uint32Array; // code length index map

const clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]); // fixed length extra bits

const fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
/* unused */
0, 0,
/* impossible */
0]); // fixed distance extra bits
// see fleb note

const fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
/* unused */
0, 0]); // get base, reverse index map from extra bits

const freb = (eb, start) => {
  const b = new u16(31);

  for (let i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  } // numbers here are at max 18 bits


  const r = new u32(b[30]);

  for (let i = 1; i < 30; ++i) {
    for (let j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }

  return [b, r];
};

const [fl, revfl] = freb(fleb, 2); // we can ignore the fact that the other numbers are wrong; they never happen anyway

fl[28] = 258, revfl[258] = 28;
const [fd] = freb(fdeb, 0); // map of value to reverse (assuming 16 bits)

const rev = new u16(32768);

for (let i = 0; i < 32768; ++i) {
  // reverse table algorithm from SO
  let x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
} // create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?


const hMap = (cd, mb, r) => {
  const s = cd.length; // index

  let i = 0; // u16 "map": index -> # of codes with bit length = index

  const l = new u16(mb); // length of cd must be 288 (total # of codes)

  for (; i < s; ++i) ++l[cd[i] - 1]; // u16 "map": index -> minimum code for bit length = index


  const le = new u16(mb);

  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }

  let co;

  if (r) {
    // u16 "map": index -> number of actual bits, symbol for code
    co = new u16(1 << mb); // bits to remove for reverser

    const rvb = 15 - mb;

    for (i = 0; i < s; ++i) {
      // ignore 0 lengths
      if (cd[i]) {
        // num encoding both symbol and bits read
        const sv = i << 4 | cd[i]; // free bits

        const r = mb - cd[i]; // start value

        let v = le[cd[i] - 1]++ << r; // m is end value

        for (const m = v | (1 << r) - 1; v <= m; ++v) {
          // every 16 bit value starting with the code yields the same result
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);

    for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
  }

  return co;
}; // fixed length tree


const flt = new u8(288);

for (let i = 0; i < 144; ++i) flt[i] = 8;

for (let i = 144; i < 256; ++i) flt[i] = 9;

for (let i = 256; i < 280; ++i) flt[i] = 7;

for (let i = 280; i < 288; ++i) flt[i] = 8; // fixed distance tree


const fdt = new u8(32);

for (let i = 0; i < 32; ++i) fdt[i] = 5; // fixed length map


const flrm = hMap(flt, 9, 1); // fixed distance map

const fdrm = hMap(fdt, 5, 1); // read d, starting at bit p and mask with m

const bits = (d, p, m) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
}; // read d, starting at bit p continuing for at least 16 bits


const bits16 = (d, p) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
}; // get end of byte


const shft = p => (p >>> 3) + (p & 7 && 1); // typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice


const slc = (v, s, e) => {
  if (s == null || s < 0) s = 0;
  if (e == null || e > v.length) e = v.length; // can't use .constructor in case user-supplied

  const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
}; // find max of array


const max = a => {
  let m = a[0];

  for (let i = 1; i < a.length; ++i) {
    if (a[i] > m) m = a[i];
  }

  return m;
}; // expands raw DEFLATE data


const inflt = (dat, buf, st) => {
  const noSt = !st || st.i;
  if (!st) st = {}; // source length

  const sl = dat.length; // have to estimate size

  const noBuf = !buf || !noSt; // Assumes roughly 33% compression ratio average

  if (!buf) buf = new u8(sl * 3); // ensure buffer can fit at least l elements

  const cbuf = l => {
    let bl = buf.length; // need to increase size to fit

    if (l > bl) {
      // Double or set to necessary, whichever is greater
      const nbuf = new u8(Math.max(bl << 1, l));
      nbuf.set(buf);
      buf = nbuf;
    }
  }; //  last chunk         bitpos           bytes


  let final = st.f || 0,
      pos = st.p || 0,
      bt = st.b || 0,
      lm = st.l,
      dm = st.d,
      lbt = st.m,
      dbt = st.n;
  if (final && !lm) return buf; // total bits

  const tbts = sl << 3;

  do {
    if (!lm) {
      // BFINAL - this is only 1 when last chunk is next
      st.f = final = bits(dat, pos, 1); // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman

      const type = bits(dat, pos + 1, 3);
      pos += 3;

      if (!type) {
        // go to end of byte boundary
        const s = shft(pos) + 4,
              l = dat[s - 4] | dat[s - 3] << 8,
              t = s + l;

        if (t > sl) {
          if (noSt) throw 'unexpected EOF';
          break;
        } // ensure size


        if (noBuf) cbuf(bt + l); // Copy over uncompressed data

        buf.set(dat.subarray(s, t), bt); // Get new bitpos, update byte count

        st.b = bt += l, st.p = pos = t << 3;
        continue;
      } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
        //  literal                            lengths
        const hLit = bits(dat, pos, 31) + 257,
              hcLen = bits(dat, pos + 10, 15) + 4;
        const tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14; // length+distance tree

        const ldt = new u8(tl); // code length tree

        const clt = new u8(19);

        for (let i = 0; i < hcLen; ++i) {
          // use index map to get real code
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }

        pos += hcLen * 3; // code lengths bits

        const clb = max(clt),
              clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts) break; // code lengths map

        const clm = hMap(clt, clb, 1);

        for (let i = 0; i < tl;) {
          const r = clm[bits(dat, pos, clbmsk)]; // bits read

          pos += r & 15; // symbol

          const s = r >>> 4; // code length to copy

          if (s < 16) {
            ldt[i++] = s;
          } else {
            //  copy   count
            let c = 0,
                n = 0;
            if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;

            while (n--) ldt[i++] = c;
          }
        } //    length tree                 distance tree


        const lt = ldt.subarray(0, hLit),
              dt = ldt.subarray(hLit); // max length bits

        lbt = max(lt); // max dist bits

        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else throw 'invalid block type';

      if (pos > tbts) throw 'unexpected EOF';
    } // Make sure the buffer can hold this + the largest possible addition
    // maximum chunk size (practically, theoretically infinite) is 2^17;


    if (noBuf) cbuf(bt + 131072);
    const lms = (1 << lbt) - 1,
          dms = (1 << dbt) - 1;
    const mxa = lbt + dbt + 18;

    while (noSt || pos + mxa < tbts) {
      // bits read, code
      const c = lm[bits16(dat, pos) & lms],
            sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts) throw 'unexpected EOF';
      if (!c) throw 'invalid length/literal';
      if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
        lm = undefined;
        break;
      } else {
        let add = sym - 254; // no extra bits needed if less

        if (sym > 264) {
          // index
          const i = sym - 257,
                b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        } // dist


        const d = dm[bits16(dat, pos) & dms],
              dsym = d >>> 4;
        if (!d) throw 'invalid distance';
        pos += d & 15;
        let dt = fd[dsym];

        if (dsym > 3) {
          const b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }

        if (pos > tbts) throw 'unexpected EOF';
        if (noBuf) cbuf(bt + 131072);
        const end = bt + add;

        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }

        bt = end;
      }
    }

    st.l = lm, st.p = pos, st.b = bt;
    if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);

  return bt == buf.length ? buf : slc(buf, 0, bt);
}; // zlib valid


const zlv = d => {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
  if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
};
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */


function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-util/base64.js
// Copyright 2019-2022 @polkadot/wasm-util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
function base64Decode(data) {
  const bytes = [];
  let byte = 0;
  let bits = 0;

  for (let i = 0; i < data.length && data[i] !== '='; i++) {
    // each character represents 6 bits
    byte = byte << 6 | chars.indexOf(data[i]); // each byte needs to contain 8 bits

    if ((bits += 6) >= 8) {
      bytes.push(byte >>> (bits -= 8) & 0xff);
    }
  }

  return Uint8Array.from(bytes);
}
// EXTERNAL MODULE: ./node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var bytes = __webpack_require__(218);
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto-wasm/bundle.js
// Copyright 2019-2022 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0



const wasmBytes = unzlibSync(base64Decode(bytes.bytes), new Uint8Array(bytes.sizeUncompressed));
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto-init/wasm.js
// Copyright 2019-2022 @polkadot/wasm-crypto-init authors & contributors
// SPDX-License-Identifier: Apache-2.0



const createWasm = createWasmFn('crypto', wasmBytes, null);
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto/init.js
// Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const bridge = new Bridge(createWasm);
async function initBridge(createWasm) {
  return bridge.init(createWasm);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto/bundle.js
// Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





function withWasm(fn) {
  return (...params) => {
    assert(bridge.wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
    return fn(bridge.wasm, ...params);
  };
}

const bip39Generate = withWasm((wasm, words) => {
  wasm.ext_bip39_generate(8, words);
  return bridge.resultString();
});
const bip39ToEntropy = withWasm((wasm, phrase) => {
  wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
  return bridge.resultU8a();
});
const bip39ToMiniSecret = withWasm((wasm, phrase, password) => {
  wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
  return bridge.resultU8a();
});
const bip39ToSeed = withWasm((wasm, phrase, password) => {
  wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
  return bridge.resultU8a();
});
const bip39Validate = withWasm((wasm, phrase) => {
  const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
  return ret !== 0;
});
const ed25519KeypairFromSeed = withWasm((wasm, seed) => {
  wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
  return bridge.resultU8a();
});
const ed25519Sign = withWasm((wasm, pubkey, seckey, message) => {
  wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
  return bridge.resultU8a();
});
const ed25519Verify = withWasm((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
  return ret !== 0;
});
const secp256k1FromSeed = withWasm((wasm, seckey) => {
  wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
  return bridge.resultU8a();
});
const secp256k1Compress = withWasm((wasm, pubkey) => {
  wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
  return bridge.resultU8a();
});
const secp256k1Expand = withWasm((wasm, pubkey) => {
  wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
  return bridge.resultU8a();
});
const secp256k1Recover = withWasm((wasm, msgHash, sig, recovery) => {
  wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig), recovery);
  return bridge.resultU8a();
});
const secp256k1Sign = withWasm((wasm, msgHash, seckey) => {
  wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
  return bridge.resultU8a();
});
const sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
  return bridge.resultU8a();
});
const sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
  return bridge.resultU8a();
});
const sr25519DerivePublicSoft = withWasm((wasm, pubkey, cc) => {
  wasm.ext_sr_derive_public_soft(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(cc));
  return bridge.resultU8a();
});
const sr25519KeypairFromSeed = withWasm((wasm, seed) => {
  wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
  return bridge.resultU8a();
});
const sr25519Sign = withWasm((wasm, pubkey, secret, message) => {
  wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
  return bridge.resultU8a();
});
const sr25519Verify = withWasm((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
  return ret !== 0;
});
const sr25519Agree = withWasm((wasm, pubkey, secret) => {
  wasm.ext_sr_agree(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret));
  return bridge.resultU8a();
});
const vrfSign = withWasm((wasm, secret, context, message, extra) => {
  wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
  return bridge.resultU8a();
});
const vrfVerify = withWasm((wasm, pubkey, context, message, extra, outAndProof) => {
  const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
  return ret !== 0;
});
const blake2b = withWasm((wasm, data, key, size) => {
  wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
  return bridge.resultU8a();
});
const hmacSha256 = withWasm((wasm, key, data) => {
  wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const hmacSha512 = withWasm((wasm, key, data) => {
  wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const keccak256 = withWasm((wasm, data) => {
  wasm.ext_keccak256(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const keccak512 = withWasm((wasm, data) => {
  wasm.ext_keccak512(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const pbkdf2 = withWasm((wasm, data, salt, rounds) => {
  wasm.ext_pbkdf2(8, ...bridge.allocU8a(data), ...bridge.allocU8a(salt), rounds);
  return bridge.resultU8a();
});
const scrypt = withWasm((wasm, password, salt, log2n, r, p) => {
  wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r, p);
  return bridge.resultU8a();
});
const sha256 = withWasm((wasm, data) => {
  wasm.ext_sha256(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const sha512 = withWasm((wasm, data) => {
  wasm.ext_sha512(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
const twox = withWasm((wasm, data, rounds) => {
  wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
  return bridge.resultU8a();
});
function bundle_isReady() {
  return !!bridge.wasm;
}
async function waitReady() {
  try {
    const wasm = await initBridge();
    return !!wasm;
  } catch {
    return false;
  }
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/crypto.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const cryptoIsReady = (/* unused pure expression or super */ null && (isReady));
function cryptoWaitReady() {
  return waitReady().then(() => {
    assert(bundle_isReady(), 'Unable to initialize @polkadot/util-crypto');
    return true;
  }).catch(() => false);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/u8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */
function isU8a(value) {
  return value instanceof Uint8Array;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/hex.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
/**
 * @name isHex
 * @summary Tests for a hex string.
 * @description
 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isHex } from '@polkadot/util';
 *
 * isHex('0x1234'); // => true
 * isHex('0x1234', 8); // => false
 * ```
 */

function isHex(value, bitLength = -1, ignoreLength) {
  return typeof value === 'string' && (value === '0x' || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/hex/stripPrefix.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexStripPrefix
 * @summary Strips any leading `0x` prefix.
 * @description
 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexStripPrefix } from '@polkadot/util';
 *
 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
 * ```
 */

function hexStripPrefix(value) {
  if (!value || value === '0x') {
    return '';
  } else if (REGEX_HEX_PREFIXED.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }

  throw new Error(`Expected hex value to convert, found '${value}'`);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/hex/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToU8a } from '@polkadot/util';
 *
 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
 * ```
 */

function hexToU8a(_value, bitLength = -1) {
  if (!_value) {
    return new Uint8Array();
  }

  const value = hexStripPrefix(_value).toLowerCase();
  const valLength = value.length / 2;
  const endLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > valLength ? endLength - valLength : 0;
  const dv = new DataView(result.buffer, offset);
  const mod = (endLength - offset) % 2;
  const length = endLength - offset - mod;

  for (let i = 0; i < length; i += 2) {
    const idx = i * 2;
    dv.setUint16(i, HEX_TO_U16[value.substring(idx, idx + 4)]);
  }

  if (mod) {
    dv.setUint8(length, HEX_TO_U8[value.substring(value.length - 2)]);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-bigint/index.js
// Copyright 2017-2022 @polkadot/x-bigint authors & contributors
// SPDX-License-Identifier: Apache-2.0


const x_bigint_BigInt = typeof xglobal.BigInt === 'function' && typeof xglobal.BigInt.asIntN === 'function' ? xglobal.BigInt : () => Number.NaN;
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/has.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const hasBigInt = typeof x_bigint_BigInt === 'function' && typeof x_bigint_BigInt.asIntN === 'function';
const hasBuffer = typeof Buffer !== 'undefined';
const hasCjs = typeof require === 'function' && typeof module !== 'undefined';
const hasDirname = typeof __dirname !== 'undefined';
const hasEsm = !hasCjs;
const hasProcess = typeof process === 'object';
const hasWasm = typeof WebAssembly !== 'undefined';
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/buffer.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBuffer
 * @summary Tests for a `Buffer` object instance.
 * @description
 * Checks to see if the input object is an instance of `Buffer`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBuffer } from '@polkadot/util';
 *
 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
 * ```
 */

function isBuffer(value) {
  return hasBuffer && Buffer.isBuffer(value);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0





/**
 * @name u8aToU8a
 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
 * @description
 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToU8a } from '@polkadot/util';
 *
 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
 * ```
 */

function u8aToU8a(value) {
  return value ? Array.isArray(value) || isBuffer(value) ? new Uint8Array(value) : isU8a(value) ? value : isHex(value) ? hexToU8a(value) : stringToU8a(value) : new Uint8Array();
}
// EXTERNAL MODULE: ./node_modules/@scure/base/index.js
var base = __webpack_require__(90);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/base32/helpers.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // re-export the type so *.d.ts files don't have ../src imports

function createDecode({
  coder,
  ipfs
}, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode({
  coder,
  ipfs
}) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createIs(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch (error) {
      return false;
    }
  };
}
function createValidate({
  chars,
  ipfs,
  type
}) {
  return (value, ipfsCompat) => {
    assert(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);

    if (ipfs && ipfsCompat) {
      assert(value[0] === ipfs, () => `Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }

    for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
      assert(chars.includes(value[i]) || value[i] === '=' && (i === value.length - 1 || !chars.includes(value[i + 1])), () => `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
    }

    return true;
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/base58/bs58.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const config = {
  chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
  coder: base/* base58 */.Jq,
  ipfs: 'z',
  type: 'base58'
};
/**
 * @name base58Validate
 * @summary Validates a base58 value.
 * @description
 * Validates that the supplied value is valid base58, throwing exceptions if not
 */

const base58Validate = createValidate(config);
/**
 * @name base58Decode
 * @summary Decodes a base58 value.
 * @description
 * From the provided input, decode the base58 and return the result as an `Uint8Array`.
 */

const base58Decode = createDecode(config, base58Validate);
/**
* @name base58Encode
* @summary Creates a base58 value.
* @description
* From the provided input, create the base58 and return the result as a string.
*/

const base58Encode = createEncode(config);
/**
* @name isBase58
* @description Checks if the input is in base58, returning true/false
*/

const isBase58 = createIs(base58Validate);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/concat.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aConcat
 * @summary Creates a concatenated Uint8Array from the inputs.
 * @description
 * Concatenates the input arrays into a single `UInt8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { { u8aConcat } from '@polkadot/util';
 *
 * u8aConcat(
 *   new Uint8Array([1, 2, 3]),
 *   new Uint8Array([4, 5, 6])
 * ); // [1, 2, 3, 4, 5, 6]
 * ```
 */

function u8aConcat(...list) {
  let length = 0;
  let offset = 0;
  const u8as = new Array(list.length);

  for (let i = 0; i < list.length; i++) {
    u8as[i] = u8aToU8a(list[i]);
    length += u8as[i].length;
  }

  const result = new Uint8Array(length);

  for (let i = 0; i < u8as.length; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/cryptoBrowser.js
const cryptoBrowser_crypto = {
    node: undefined,
    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
};

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/utils.js
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// The import here is via the package name. This is to ensure
// that exports mapping/resolution does fall into place.

// Cast array to different type
const utils_u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
const utils_u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
// Cast array to view
const utils_createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
// There is almost no big endian hardware, but js typed arrays uses platform specific endianess.
// So, just to be sure not to corrupt anything.
if (!isLE)
    throw new Error('Non little-endian hardware is not supported');
const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
 */
function bytesToHex(uint8a) {
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += hexes[uint8a[i]];
    }
    return hex;
}
/**
 * @example hexToBytes('deadbeef')
 */
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte))
            throw new Error('Invalid byte sequence');
        array[i] = byte;
    }
    return array;
}
// Currently avoid insertion of polyfills with packers (browserify/webpack/etc)
// But setTimeout is pretty slow, maybe worth to investigate howto do minimal polyfill here
const nextTick = (() => {
    const nodeRequire = typeof module !== 'undefined' &&
        typeof module.require === 'function' &&
        module.require.bind(module);
    try {
        if (nodeRequire) {
            const { setImmediate } = nodeRequire('timers');
            return () => new Promise((resolve) => setImmediate(resolve));
        }
    }
    catch (e) { }
    return () => new Promise((resolve) => setTimeout(resolve, 0));
})();
// Returns control to thread each 'tick' ms to avoid blocking
async function utils_asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for (let i = 0; i < iters; i++) {
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
            continue;
        await nextTick();
        ts += diff;
    }
}
function utf8ToBytes(str) {
    if (typeof str !== 'string') {
        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    }
    return new TextEncoder().encode(str);
}
function toBytes(data) {
    if (typeof data === 'string')
        data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array))
        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
}
/**
 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
 * @example concatBytes(buf1, buf2)
 */
function concatBytes(...arrays) {
    if (!arrays.every((a) => a instanceof Uint8Array))
        throw new Error('Uint8Array list expected');
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function assertNumber(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
function assertBool(b) {
    if (typeof b !== 'boolean') {
        throw new Error(`Expected boolean, not ${b}`);
    }
}
function assertBytes(bytes, ...lengths) {
    if (bytes instanceof Uint8Array && (!lengths.length || lengths.includes(bytes.length))) {
        return;
    }
    throw new TypeError(`Expected ${lengths} bytes, not ${typeof bytes} with length=${bytes.length}`);
}
function assertHash(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    assertNumber(hash.outputLen);
    assertNumber(hash.blockLen);
}
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
function checkOpts(def, _opts) {
    if (_opts !== undefined && (typeof _opts !== 'object' || !isPlainObject(_opts)))
        throw new TypeError('Options should be object or undefined');
    const opts = Object.assign(def, _opts);
    return opts;
}
function wrapConstructor(hashConstructor) {
    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashConstructor();
    return hashC;
}
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
}
/**
 * Secure PRNG
 */
function randomBytes(bytesLength = 32) {
    if (crypto.web) {
        return crypto.web.getRandomValues(new Uint8Array(bytesLength));
    }
    else if (crypto.node) {
        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);
    }
    else {
        throw new Error("The environment doesn't have randomBytes function");
    }
}

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/_blake2.js

// prettier-ignore
const SIGMA = new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
]);
class BLAKE2 extends Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        assertNumber(blockLen);
        assertNumber(outputLen);
        assertNumber(keyLen);
        if (outputLen < 0 || outputLen > keyLen)
            throw new Error('Blake2: outputLen bigger than keyLen');
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
            throw new Error(`Key should be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen)
            throw new Error(`Salt should be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen)
            throw new Error(`Personalization should be ${persLen} byte long or undefined`);
        this.buffer32 = utils_u32((this.buffer = new Uint8Array(blockLen)));
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { finished, blockLen, buffer, buffer32 } = this;
        if (finished)
            throw new Error('digest() was already called');
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = data.byteOffset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length < this.outputLen)
            throw new Error('_Blake2: Invalid output buffer');
        const { finished, pos, buffer32 } = this;
        if (finished)
            throw new Error('digest() was already called');
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = utils_u32(out);
        this.get().forEach((v, i) => (out32[i] = v));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/_u64.js
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
// for Shift in [0, 32)
const shrSH = (h, l, s) => h >>> s;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l) => l;
const rotr32L = (h, l) => h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/blake2b.js



// Same as SHA-512 but LE
// prettier-ignore
const IV = new Uint32Array([
    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
]);
// Temporary buffer
const BUF = new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = add3L(Al, Bl, Xl);
    Ah = add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
class BLAKE2b extends BLAKE2 {
    constructor(opts = {}) {
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
        if (opts.salt) {
            const salt = utils_u32(toBytes(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = utils_u32(toBytes(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set(toBytes(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = SIGMA;
        for (let i = 0; i < 12; i++) {
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
/**
 * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
 * @param msg - message that would be hashed
 * @param opts - dkLen, key, salt, personalization
 */
const blake2b_blake2b = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/helpers.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // re-export so TS *.d.ts generation is correct

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function createAsHex(fn) {
  return (...args) => u8aToHex(fn(...args));
}
function createBitHasher(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}
function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a = u8aToU8a(value);
    return !hasBigInt || !onlyJs && bundle_isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/blake2/asU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





/**
 * @name blake2AsU8a
 * @summary Creates a blake2b u8a from the input.
 * @description
 * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { blake2AsU8a } from '@polkadot/util-crypto';
 *
 * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
 * ```
 */
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a(data);
  return !hasBigInt || !onlyJs && bundle_isReady() ? blake2b(u8a, u8aToU8a(key), byteLength) : blake2b_blake2b(u8a, {
    dkLen: byteLength,
    key: key || undefined
  });
}
/**
 * @name blake2AsHex
 * @description Creates a blake2b hex from the input.
 */

const blake2AsHex = createAsHex(blake2AsU8a);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/address/sshash.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const SS58_PREFIX = stringToU8a('SS58PRE');
function sshash(key) {
  return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/address/checksum.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix

  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks

  const hash = sshash(decoded.subarray(0, length));
  const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}
;// CONCATENATED MODULE: ./node_modules/@substrate/ss58-registry/esm/index.js
// Copyright (C) 2021-2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/* harmony default export */ const esm = ([
	{
		"prefix": 0,
		"network": "polkadot",
		"displayName": "Polkadot Relay Chain",
		"symbols": [
			"DOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://polkadot.network"
	},
	{
		"prefix": 1,
		"network": "BareSr25519",
		"displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Sr25519",
		"website": null
	},
	{
		"prefix": 2,
		"network": "kusama",
		"displayName": "Kusama Relay Chain",
		"symbols": [
			"KSM"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kusama.network"
	},
	{
		"prefix": 3,
		"network": "BareEd25519",
		"displayName": "Bare 32-bit Ed25519 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "Ed25519",
		"website": null
	},
	{
		"prefix": 4,
		"network": "katalchain",
		"displayName": "Katal Chain",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 5,
		"network": "astar",
		"displayName": "Astar Network",
		"symbols": [
			"ASTR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://astar.network"
	},
	{
		"prefix": 6,
		"network": "bifrost",
		"displayName": "Bifrost",
		"symbols": [
			"BNC"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bifrost.finance/"
	},
	{
		"prefix": 7,
		"network": "edgeware",
		"displayName": "Edgeware",
		"symbols": [
			"EDG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://edgewa.re"
	},
	{
		"prefix": 8,
		"network": "karura",
		"displayName": "Karura",
		"symbols": [
			"KAR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://karura.network/"
	},
	{
		"prefix": 9,
		"network": "reynolds",
		"displayName": "Laminar Reynolds Canary",
		"symbols": [
			"REY"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 10,
		"network": "acala",
		"displayName": "Acala",
		"symbols": [
			"ACA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://acala.network/"
	},
	{
		"prefix": 11,
		"network": "laminar",
		"displayName": "Laminar",
		"symbols": [
			"LAMI"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "http://laminar.network/"
	},
	{
		"prefix": 12,
		"network": "polymesh",
		"displayName": "Polymesh",
		"symbols": [
			"POLYX"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://polymath.network/"
	},
	{
		"prefix": 13,
		"network": "integritee",
		"displayName": "Integritee",
		"symbols": [
			"TEER"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 14,
		"network": "totem",
		"displayName": "Totem",
		"symbols": [
			"TOTEM"
		],
		"decimals": [
			0
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 15,
		"network": "synesthesia",
		"displayName": "Synesthesia",
		"symbols": [
			"SYN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://synesthesia.network/"
	},
	{
		"prefix": 16,
		"network": "kulupu",
		"displayName": "Kulupu",
		"symbols": [
			"KLP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kulupu.network/"
	},
	{
		"prefix": 17,
		"network": "dark",
		"displayName": "Dark Mainnet",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 18,
		"network": "darwinia",
		"displayName": "Darwinia Network",
		"symbols": [
			"RING",
			"KTON"
		],
		"decimals": [
			9,
			9
		],
		"standardAccount": "*25519",
		"website": "https://darwinia.network/"
	},
	{
		"prefix": 20,
		"network": "stafi",
		"displayName": "Stafi",
		"symbols": [
			"FIS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://stafi.io"
	},
	{
		"prefix": 22,
		"network": "dock-pos-mainnet",
		"displayName": "Dock Mainnet",
		"symbols": [
			"DCK"
		],
		"decimals": [
			6
		],
		"standardAccount": "*25519",
		"website": "https://dock.io"
	},
	{
		"prefix": 23,
		"network": "shift",
		"displayName": "ShiftNrg",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 24,
		"network": "zero",
		"displayName": "ZERO",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 25,
		"network": "zero-alphaville",
		"displayName": "ZERO Alphaville",
		"symbols": [
			"ZERO"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://zero.io"
	},
	{
		"prefix": 26,
		"network": "jupiter",
		"displayName": "Jupiter",
		"symbols": [
			"jDOT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://jupiter.patract.io"
	},
	{
		"prefix": 27,
		"network": "kabocha",
		"displayName": "Kabocha",
		"symbols": [
			"KAB"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://kabocha.network"
	},
	{
		"prefix": 28,
		"network": "subsocial",
		"displayName": "Subsocial",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 29,
		"network": "cord",
		"displayName": "CORD Network",
		"symbols": [
			"DHI",
			"WAY"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://cord.network/"
	},
	{
		"prefix": 30,
		"network": "phala",
		"displayName": "Phala Network",
		"symbols": [
			"PHA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://phala.network"
	},
	{
		"prefix": 31,
		"network": "litentry",
		"displayName": "Litentry Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 32,
		"network": "robonomics",
		"displayName": "Robonomics",
		"symbols": [
			"XRT"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://robonomics.network"
	},
	{
		"prefix": 33,
		"network": "datahighway",
		"displayName": "DataHighway",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": null
	},
	{
		"prefix": 34,
		"network": "ares",
		"displayName": "Ares Protocol",
		"symbols": [
			"ARES"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://www.aresprotocol.com/"
	},
	{
		"prefix": 35,
		"network": "vln",
		"displayName": "Valiu Liquidity Network",
		"symbols": [
			"USDv"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://valiu.com/"
	},
	{
		"prefix": 36,
		"network": "centrifuge",
		"displayName": "Centrifuge Chain",
		"symbols": [
			"CFG"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 37,
		"network": "nodle",
		"displayName": "Nodle Chain",
		"symbols": [
			"NODL"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://nodle.io/"
	},
	{
		"prefix": 38,
		"network": "kilt",
		"displayName": "KILT Spiritnet",
		"symbols": [
			"KILT"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://kilt.io/"
	},
	{
		"prefix": 39,
		"network": "mathchain",
		"displayName": "MathChain mainnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 40,
		"network": "mathchain-testnet",
		"displayName": "MathChain testnet",
		"symbols": [
			"MATH"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://mathwallet.org"
	},
	{
		"prefix": 41,
		"network": "poli",
		"displayName": "Polimec Chain",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://polimec.io/"
	},
	{
		"prefix": 42,
		"network": "substrate",
		"displayName": "Substrate",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://substrate.io/"
	},
	{
		"prefix": 43,
		"network": "BareSecp256k1",
		"displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
		"symbols": [],
		"decimals": [],
		"standardAccount": "secp256k1",
		"website": null
	},
	{
		"prefix": 44,
		"network": "chainx",
		"displayName": "ChainX",
		"symbols": [
			"PCX"
		],
		"decimals": [
			8
		],
		"standardAccount": "*25519",
		"website": "https://chainx.org/"
	},
	{
		"prefix": 45,
		"network": "uniarts",
		"displayName": "UniArts Network",
		"symbols": [
			"UART",
			"UINK"
		],
		"decimals": [
			12,
			12
		],
		"standardAccount": "*25519",
		"website": "https://uniarts.me"
	},
	{
		"prefix": 46,
		"network": "reserved46",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 47,
		"network": "reserved47",
		"displayName": "This prefix is reserved.",
		"symbols": [],
		"decimals": [],
		"standardAccount": null,
		"website": null
	},
	{
		"prefix": 48,
		"network": "neatcoin",
		"displayName": "Neatcoin Mainnet",
		"symbols": [
			"NEAT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://neatcoin.org"
	},
	{
		"prefix": 49,
		"network": "picasso",
		"displayName": "Picasso",
		"symbols": [
			"PICA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://picasso.composable.finance"
	},
	{
		"prefix": 50,
		"network": "composable",
		"displayName": "Composable",
		"symbols": [
			"LAYR"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://composable.finance"
	},
	{
		"prefix": 51,
		"network": "oak",
		"displayName": "OAK Network",
		"symbols": [
			"OAK"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://oak.tech"
	},
	{
		"prefix": 52,
		"network": "KICO",
		"displayName": "KICO",
		"symbols": [
			"KICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 53,
		"network": "DICO",
		"displayName": "DICO",
		"symbols": [
			"DICO"
		],
		"decimals": [
			14
		],
		"standardAccount": "*25519",
		"website": "https://dico.io"
	},
	{
		"prefix": 55,
		"network": "xxnetwork",
		"displayName": "xx network",
		"symbols": [
			"XX"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://xx.network"
	},
	{
		"prefix": 63,
		"network": "hydradx",
		"displayName": "HydraDX",
		"symbols": [
			"HDX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://hydradx.io"
	},
	{
		"prefix": 65,
		"network": "aventus",
		"displayName": "AvN Mainnet",
		"symbols": [
			"AVT"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://aventus.io"
	},
	{
		"prefix": 66,
		"network": "crust",
		"displayName": "Crust Network",
		"symbols": [
			"CRU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://crust.network"
	},
	{
		"prefix": 67,
		"network": "genshiro",
		"displayName": "Genshiro Network",
		"symbols": [
			"GENS",
			"EQD",
			"LPT0"
		],
		"decimals": [
			9,
			9,
			9
		],
		"standardAccount": "*25519",
		"website": "https://genshiro.equilibrium.io"
	},
	{
		"prefix": 68,
		"network": "equilibrium",
		"displayName": "Equilibrium Network",
		"symbols": [
			"EQ"
		],
		"decimals": [
			9
		],
		"standardAccount": "*25519",
		"website": "https://equilibrium.io"
	},
	{
		"prefix": 69,
		"network": "sora",
		"displayName": "SORA Network",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 73,
		"network": "zeitgeist",
		"displayName": "Zeitgeist",
		"symbols": [
			"ZTG"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://zeitgeist.pm"
	},
	{
		"prefix": 77,
		"network": "manta",
		"displayName": "Manta network",
		"symbols": [
			"MANTA"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 78,
		"network": "calamari",
		"displayName": "Calamari: Manta Canary Network",
		"symbols": [
			"KMA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://manta.network"
	},
	{
		"prefix": 88,
		"network": "polkadex",
		"displayName": "Polkadex Mainnet",
		"symbols": [
			"PDEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://polkadex.trade"
	},
	{
		"prefix": 98,
		"network": "polkasmith",
		"displayName": "PolkaSmith Canary Network",
		"symbols": [
			"PKS"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 99,
		"network": "polkafoundry",
		"displayName": "PolkaFoundry Network",
		"symbols": [
			"PKF"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://polkafoundry.com"
	},
	{
		"prefix": 101,
		"network": "origintrail-parachain",
		"displayName": "OriginTrail Parachain",
		"symbols": [
			"OTP"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parachain.origintrail.io/"
	},
	{
		"prefix": 105,
		"network": "pontem-network",
		"displayName": "Pontem Network",
		"symbols": [
			"PONT"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://pontem.network"
	},
	{
		"prefix": 110,
		"network": "heiko",
		"displayName": "Heiko",
		"symbols": [
			"HKO"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 113,
		"network": "integritee-incognito",
		"displayName": "Integritee Incognito",
		"symbols": [],
		"decimals": [],
		"standardAccount": "*25519",
		"website": "https://integritee.network"
	},
	{
		"prefix": 128,
		"network": "clover",
		"displayName": "Clover Finance",
		"symbols": [
			"CLV"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://clover.finance"
	},
	{
		"prefix": 131,
		"network": "litmus",
		"displayName": "Litmus Network",
		"symbols": [
			"LIT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://litentry.com/"
	},
	{
		"prefix": 136,
		"network": "altair",
		"displayName": "Altair",
		"symbols": [
			"AIR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://centrifuge.io/"
	},
	{
		"prefix": 172,
		"network": "parallel",
		"displayName": "Parallel",
		"symbols": [
			"PARA"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://parallel.fi/"
	},
	{
		"prefix": 252,
		"network": "social-network",
		"displayName": "Social Network",
		"symbols": [
			"NET"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://social.network"
	},
	{
		"prefix": 255,
		"network": "quartz_mainnet",
		"displayName": "QUARTZ by UNIQUE",
		"symbols": [
			"QTZ"
		],
		"decimals": [
			15
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 268,
		"network": "pioneer_network",
		"displayName": "Pioneer Network by Bit.Country",
		"symbols": [
			"NEER"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://bit.country"
	},
	{
		"prefix": 420,
		"network": "sora_kusama_para",
		"displayName": "SORA Kusama Parachain",
		"symbols": [
			"XOR"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://sora.org"
	},
	{
		"prefix": 789,
		"network": "geek",
		"displayName": "GEEK Network",
		"symbols": [
			"GEEK"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://geek.gl"
	},
	{
		"prefix": 1110,
		"network": "efinity",
		"displayName": "Efinity",
		"symbols": [
			"EFI"
		],
		"decimals": [
			18
		],
		"standardAccount": "Sr25519",
		"website": "https://efinity.io/"
	},
	{
		"prefix": 1284,
		"network": "moonbeam",
		"displayName": "Moonbeam",
		"symbols": [
			"GLMR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1285,
		"network": "moonriver",
		"displayName": "Moonriver",
		"symbols": [
			"MOVR"
		],
		"decimals": [
			18
		],
		"standardAccount": "secp256k1",
		"website": "https://moonbeam.network"
	},
	{
		"prefix": 1328,
		"network": "ajuna",
		"displayName": "Ajuna Network",
		"symbols": [
			"AJUN"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 1337,
		"network": "bajun",
		"displayName": "Bajun Network",
		"symbols": [
			"BAJU"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://ajuna.io"
	},
	{
		"prefix": 2007,
		"network": "kapex",
		"displayName": "Kapex",
		"symbols": [
			"KAPEX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://totemaccounting.com"
	},
	{
		"prefix": 2032,
		"network": "interlay",
		"displayName": "Interlay",
		"symbols": [
			"INTR"
		],
		"decimals": [
			10
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2092,
		"network": "kintsugi",
		"displayName": "Kintsugi",
		"symbols": [
			"KINT"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://interlay.io/"
	},
	{
		"prefix": 2254,
		"network": "subspace_testnet",
		"displayName": "Subspace testnet",
		"symbols": [
			"tSSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 6094,
		"network": "subspace",
		"displayName": "Subspace",
		"symbols": [
			"SSC"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://subspace.network"
	},
	{
		"prefix": 7391,
		"network": "unique_mainnet",
		"displayName": "Unique Network",
		"symbols": [
			"UNQ"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://unique.network"
	},
	{
		"prefix": 10041,
		"network": "basilisk",
		"displayName": "Basilisk",
		"symbols": [
			"BSX"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://bsx.fi"
	},
	{
		"prefix": 11330,
		"network": "cess-testnet",
		"displayName": "CESS Testnet",
		"symbols": [
			"TCESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11331,
		"network": "cess",
		"displayName": "CESS",
		"symbols": [
			"CESS"
		],
		"decimals": [
			12
		],
		"standardAccount": "*25519",
		"website": "https://cess.cloud"
	},
	{
		"prefix": 11820,
		"network": "contextfree",
		"displayName": "Automata ContextFree",
		"symbols": [
			"CTX"
		],
		"decimals": [
			18
		],
		"standardAccount": "*25519",
		"website": "https://ata.network"
	}
]);

;// CONCATENATED MODULE: ./node_modules/@polkadot/networks/defaults/ledger.js
// Copyright 2017-2022 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// These match up with the keys of the ledgerApps object in the @polkadot/hw-ledger/defaults.ts
// and maps to the known slip44 (minus the `0x8` hard derivation flag)
//
// NOTE: Any network here needs to have a genesisHash attached in the ./genesis.ts config
const knownLedger = {
  acala: 0x00000313,
  bifrost: 0x00000314,
  centrifuge: 0x000002eb,
  'dock-mainnet': 0x00000252,
  edgeware: 0x0000020b,
  equilibrium: 0x05f5e0fd,
  genshiro: 0x05f5e0fc,
  karura: 0x000002ae,
  kusama: 0x000001b2,
  'nodle-chain': 0x000003eb,
  polkadot: 0x00000162,
  polymesh: 0x00000253,
  sora: 0x00000269,
  statemine: 0x000001b2,
  // common-good on Kusama, shares derivation
  statemint: 0x00000162,
  // common-good on Polkadot, shares derivation
  xxnetwork: 0x000007a3
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/networks/defaults/genesis.js
// Copyright 2017-2022 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// NOTE: In the case where the network was hard-spooned and multiple genesisHashes
// are provided, it needs to be in reverse order, i.e. most-recent first, oldest
// last. This make lookups for the current a simple genesisHash[0]
// (See Kusama as an example)
const knownGenesis = {
  acala: ['0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'],
  astar: ['0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'],
  basilisk: ['0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755'],
  bifrost: ['0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'],
  centrifuge: ['0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'],
  'dock-mainnet': ['0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae', '0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
  edgeware: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
  equilibrium: ['0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'],
  genshiro: ['0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'],
  hydradx: ['0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc', // Snakenet Gen3-1
  '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9', // Snakenet Gen3
  '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047', // Snakenet Gen2
  '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
  ],
  karura: ['0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'],
  kulupu: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
  kusama: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
  '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
  '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
  ],
  'nodle-chain': ['0xa3d114c2b8d0627c1aa9b134eafcf7d05ca561fdc19fb388bb9457f81809fb23'],
  picasso: ['0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'],
  polkadot: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
  polymesh: ['0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'],
  rococo: ['0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e', '0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897', '0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770', '0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff', '0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a', '0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9', '0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779', '0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215', '0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9', '0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147', '0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd', '0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299'],
  sora: ['0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'],
  stafi: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
  statemine: ['0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'],
  statemint: ['0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f'],
  subsocial: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'],
  westend: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e'],
  xxnetwork: ['0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa']
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/networks/defaults/icons.js
// Copyright 2017-2022 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// these are icon overrides
const knownIcon = {
  centrifuge: 'polkadot',
  kusama: 'polkadot',
  polkadot: 'polkadot',
  sora: 'polkadot',
  statemine: 'polkadot',
  statemint: 'polkadot',
  westmint: 'polkadot'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/networks/defaults/testnets.js
// Copyright 2017-2022 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// testnets should not allow selection
const knownTestnet = {
  '': true,
  // this is the default non-network entry
  'cess-testnet': true,
  'dock-testnet': true,
  jupiter: true,
  'mathchain-testnet': true,
  subspace_testnet: true,
  'zero-alphaville': true
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/networks/interfaces.js
// Copyright 2017-2022 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // These are known prefixes that are not sorted

const UNSORTED = [0, 2, 42];
const TESTNETS = ['testnet'];

function toExpanded(o) {
  const network = o.network || '';
  const nameParts = network.replace(/_/g, '-').split('-');
  const n = o; // ledger additions

  n.slip44 = knownLedger[network];
  n.hasLedgerSupport = !!n.slip44; // general items

  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon[network] || 'substrate'; // filtering

  n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
  return n;
}

function filterSelectable({
  genesisHash,
  prefix
}) {
  return !!genesisHash.length || prefix === 42;
}

function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}

function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
} // This is all the Substrate networks with our additional information


const allNetworks = esm.map(toExpanded); // The list of available/claimed prefixes
//   - no testnets
//   - we only include those where we have a standardAccount
//   - sort by name, however we keep 0, 2, 42 first in the list

const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks); // A filtered list of those chains we have details about (genesisHashes)

const selectableNetworks = availableNetworks.filter(filterSelectable);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/address/defaults.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function networkToPrefix({
  prefix
}) {
  return prefix;
}

const defaults = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(networkToPrefix),
  prefix: 42
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/address/decode.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6




function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  assert(encoded, 'Invalid empty address passed');

  if (isU8a(encoded) || isHex(encoded)) {
    return u8aToU8a(encoded);
  }

  try {
    const decoded = base58Decode(encoded);
    assert(defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
    assert(ignoreChecksum || isValid, 'Invalid decoded address checksum');
    assert([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}
;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/sha3.js


// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
const rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
class Keccak extends Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        assertNumber(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = utils_u32(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (this.finished)
            throw new Error('digest() was already called');
        const { blockLen, state } = this;
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array))
            throw new Error('Keccak: invalid output buffer');
        this.finish();
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= this.blockLen)
                this.keccak();
            const take = Math.min(this.blockLen - this.posOut, len - pos);
            out.set(this.state.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        assertNumber(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        if (out.length < this.outputLen)
            throw new Error('Keccak: invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finish();
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
const sha3_224 = gen(0x06, 144, 224 / 8);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */
const sha3_256 = gen(0x06, 136, 256 / 8);
const sha3_384 = gen(0x06, 104, 384 / 8);
const sha3_512 = gen(0x06, 72, 512 / 8);
const keccak_224 = gen(0x01, 144, 224 / 8);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
const keccak_256 = gen(0x01, 136, 256 / 8);
const keccak_384 = gen(0x01, 104, 384 / 8);
const keccak_512 = gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen !== undefined ? opts.dkLen : outputLen, true));
const shake128 = genShake(0x1f, 168, 128 / 8);
const shake256 = genShake(0x1f, 136, 256 / 8);

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/keccak/asU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name keccakAsU8a
 * @summary Creates a keccak Uint8Array from the input.
 * @description
 * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { keccakAsU8a } from '@polkadot/util-crypto';
 *
 * keccakAsU8a('123'); // => Uint8Array
 * ```
 */

const keccakAsU8a = createDualHasher({
  256: keccak256,
  512: keccak512
}, {
  256: keccak_256,
  512: keccak_512
});
/**
 * @name keccak256AsU8a
 * @description Creates a keccak256 Uint8Array from the input.
 */

const keccak256AsU8a = createBitHasher(256, keccakAsU8a);
/**
 * @name keccak512AsU8a
 * @description Creates a keccak512 Uint8Array from the input.
 */

const keccak512AsU8a = createBitHasher(512, keccakAsU8a);
/**
 * @name keccakAsHex
 * @description Creates a keccak hex string from the input.
 */

const keccakAsHex = createAsHex(keccakAsU8a);
// EXTERNAL MODULE: ./node_modules/@polkadot/wasm-crypto-asmjs/cjs/data.js
var data = __webpack_require__(683);
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto-init/asm.js
// Copyright 2019-2022 @polkadot/wasm-crypto-init authors & contributors
// SPDX-License-Identifier: Apache-2.0



const asm_createWasm = createWasmFn('crypto', null, data.asmJsInit);
;// CONCATENATED MODULE: ./node_modules/@polkadot/wasm-crypto/initOnlyAsm.js
// Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


async function initWasm() {
  await initBridge(asm_createWasm);
}
initWasm().catch(() => {// cannot happen, initWasm doesn't throw
});
;// CONCATENATED MODULE: ./src/background/utils.js
function getEnvironment() {
    try {
        const url = window.location.href
        const env = (url.split(':')[0] === 'chrome-extension') ? 'ext' : 'app'
        return env ;
    } catch (e) {
        return 'ext' ;
    }
}

function parsePolkadotError(result) {
    if (result.dispatchError) {
        try {
            let data = result.dispatchError.asModule;
            let index = data.index;
            let error = data.error;
            return "Transaction error (" + index + "," + error + ")";
        } catch (err) {
            return "Transaction error";
        }
    } else {
        return null;
    }
}

function findAccount(accounts, address) {
    if (accounts) {
        return accounts.find(x => (x.address===address)) ;
    } else {
        return null ;
    }
}


;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js
function _classPrivateFieldBase(receiver, privateKey) {
  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
    throw new TypeError("attempted to use private field on non-instance");
  }

  return receiver;
}
;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js
var id = 0;
function _classPrivateFieldKey(name) {
  return "__private_" + id++ + "_" + name;
}
// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js
var eventemitter3 = __webpack_require__(729);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/format/formatDate.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function zeroPad(value) {
  return value.toString().padStart(2, '0');
}

function formatDate(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}
// EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js
var lib_bn = __webpack_require__(550);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/bn.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBn
 * @summary Tests for a `BN` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { isBn } from '@polkadot/util';
 *
 * console.log('isBn', isBn(new BN(1))); // => true
 * ```
 */

function isBn(value) {
  return lib_bn.isBN(value);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/object.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */
function isObject(value) {
  return !!value && typeof value === 'object';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/logger.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0









const logTo = {
  debug: 'log',
  error: 'error',
  log: 'log',
  warn: 'warn'
};

function formatOther(value) {
  if (value && isObject(value) && value.constructor === Object) {
    const result = {};

    for (const k of Object.keys(value)) {
      result[k] = loggerFormat(value[k]);
    }

    return result;
  }

  return value;
}

function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if (isBn(value)) {
    return value.toString();
  } else if (isU8a(value) || isBuffer(value)) {
    return u8aToHex(u8aToU8a(value));
  }

  return formatOther(value);
}

function formatWithLength(maxLength) {
  return v => {
    if (maxLength <= 0) {
      return v;
    }

    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}

function apply(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction(values[0])) {
    const fnResult = values[0]();
    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }

  console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}

function noop() {// noop
}

function isDebugOn(e, type) {
  return !!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)));
}

function isDebugOff(e, type) {
  return !!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)));
}

function getDebugFlag(env, type) {
  let flag = false;

  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }

  return flag;
}

function parseEnv(type) {
  const env = (hasProcess ? process : {}).env || {};
  const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
  return [getDebugFlag((env.DEBUG || '').toLowerCase().split(','), type), isNaN(maxSize) ? -1 : maxSize];
}
/**
 * @name Logger
 * @summary Creates a consistent log interface for messages
 * @description
 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
 * @example
 * <BR>
 *
 * ```javascript
 * import { logger } from '@polkadot';
 *
 * const l = logger('test');
 * ```
 */


function logger(_type) {
  const type = `${_type.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop,
    error: (...values) => apply('error', type, values),
    log: (...values) => apply('log', type, values),
    noop,
    warn: (...values) => apply('warn', type, values)
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/object/keys.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectKeys
 * @summary A version of Object.keys that is typed for TS
 */
function objectKeys(value) {
  return Object.keys(value);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/object/spread.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */

function objectSpread(dest, ...sources) {
  for (let i = 0; i < sources.length; i++) {
    const src = sources[i];

    if (src) {
      const keys = objectKeys(src);

      for (let j = 0; j < keys.length; j++) {
        const key = keys[j];
        dest[key] = src[key];
      }
    }
  }

  return dest;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/childClass.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isChildClass
 * @summary Tests if the child extends the parent Class
 * @description
 * Checks to see if the child Class extends the parent Class
 * @example
 * <BR>
 *
 * ```javascript
 * import { isChildClass } from '@polkadot/util';
 *
 * console.log('isChildClass', isChildClass(BN, BN); // => true
 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
 * ```
 */
function isChildClass(Parent, Child) {
  // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
  return Child // eslint-disable-next-line no-prototype-builtins
  ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/x-ws/browser.js
// Copyright 2017-2022 @polkadot/x-ws authors & contributors
// SPDX-License-Identifier: Apache-2.0


const WebSocket = xglobal.WebSocket;
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/string.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */
function isString(value) {
  return typeof value === 'string' || value instanceof String;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/bigInt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */
function isBigInt(value) {
  return typeof value === 'bigint';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/stringify.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */

function replacer(_, v) {
  return isBigInt(v) ? v.toString() : v;
}
/**
 * @name stringify
 * @summary Performs a JSON.stringify, with BigInt handling
 * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
 */


function stringify(value, space) {
  return JSON.stringify(value, replacer, space);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/number.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */
function isNumber(value) {
  return typeof value === 'number';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/coder/error.js
// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0

const UNKNOWN = -99999;

function extend(that, name, value) {
  Object.defineProperty(that, name, {
    configurable: true,
    enumerable: false,
    value
  });
}
/**
 * @name RpcError
 * @summary Extension to the basic JS Error.
 * @description
 * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.
 * @example
 * <BR>
 *
 * ```javascript
 * const { RpcError } from '@polkadot/util');
 *
 * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601
 * ```
 */


class RpcError extends Error {
  constructor(message = '', code = UNKNOWN, data) {
    super();
    extend(this, 'message', String(message));
    extend(this, 'name', this.constructor.name);
    extend(this, 'data', data);
    extend(this, 'code', code);

    if (isFunction(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      const {
        stack
      } = new Error(message);
      stack && extend(this, 'stack', stack);
    }
  }

  static CODES = {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    // Rust client
    UNKNOWN
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/coder/index.js
// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0



function formatErrorData(data) {
  if (isUndefined(data)) {
    return '';
  }

  const formatted = `: ${isString(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : stringify(data)}`; // We need some sort of cut-off here since these can be very large and
  // very nested, pick a number and trim the result display to it

  return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
}

function checkError(error) {
  if (error) {
    const {
      code,
      data,
      message
    } = error;
    throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
  }
}
/** @internal */


class RpcCoder {
  #id = 0;

  decodeResponse(response) {
    assert(response && response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');
    const isSubscription = !isUndefined(response.params) && !isUndefined(response.method);
    assert(isNumber(response.id) || isSubscription && (isNumber(response.params.subscription) || isString(response.params.subscription)), 'Invalid id field in decoded object');
    checkError(response.error);
    assert(!isUndefined(response.result) || isSubscription, 'No result found in jsonrpc response');

    if (isSubscription) {
      checkError(response.params.error);
      return response.params.result;
    }

    return response.result;
  }

  encodeJson(method, params) {
    const [id, data] = this.encodeObject(method, params);
    return [id, stringify(data)];
  }

  encodeObject(method, params) {
    const id = ++this.#id;
    return [id, {
      id,
      jsonrpc: '2.0',
      method,
      params
    }];
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/defaults.js
// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HTTP_URL = 'http://127.0.0.1:9933';
const WS_URL = 'ws://127.0.0.1:9944';
/* harmony default export */ const rpc_provider_defaults = ({
  HTTP_URL,
  WS_URL
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/lru.js


// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Assuming all 1.5MB responses, we apply a default allowing for 576MB
// cache space (depending on the historic queries this would vary, metadata
// for Kusama/Polkadot/Substrate falls between 600-750K, 2x for estimate)
const DEFAULT_CAPACITY = 384;

class LRUNode {
  constructor(key) {
    this.key = key;
    this.next = this.prev = this;
  }

} // https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU


var _data = /*#__PURE__*/_classPrivateFieldKey("data");

var _refs = /*#__PURE__*/_classPrivateFieldKey("refs");

var _length = /*#__PURE__*/_classPrivateFieldKey("length");

var _head = /*#__PURE__*/_classPrivateFieldKey("head");

var _tail = /*#__PURE__*/_classPrivateFieldKey("tail");

var _toHead = /*#__PURE__*/_classPrivateFieldKey("toHead");

class LRUCache {
  constructor(capacity = DEFAULT_CAPACITY) {
    Object.defineProperty(this, _toHead, {
      value: _toHead2
    });
    this.capacity = void 0;
    Object.defineProperty(this, _data, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _refs, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _length, {
      writable: true,
      value: 0
    });
    Object.defineProperty(this, _head, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _tail, {
      writable: true,
      value: void 0
    });
    this.capacity = capacity;
    _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = new LRUNode('<empty>');
  }

  get length() {
    return _classPrivateFieldBase(this, _length)[_length];
  }

  get lengthData() {
    return _classPrivateFieldBase(this, _data)[_data].size;
  }

  get lengthRefs() {
    return _classPrivateFieldBase(this, _refs)[_refs].size;
  }

  entries() {
    const keys = this.keys();
    const entries = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      entries[i] = [key, _classPrivateFieldBase(this, _data)[_data].get(key)];
    }

    return entries;
  }

  keys() {
    const keys = [];

    if (_classPrivateFieldBase(this, _length)[_length]) {
      let curr = _classPrivateFieldBase(this, _head)[_head];

      while (curr !== _classPrivateFieldBase(this, _tail)[_tail]) {
        keys.push(curr.key);
        curr = curr.next;
      }

      keys.push(curr.key);
    }

    return keys;
  }

  get(key) {
    const data = _classPrivateFieldBase(this, _data)[_data].get(key);

    if (data) {
      _classPrivateFieldBase(this, _toHead)[_toHead](key);

      return data;
    }

    return null;
  }

  set(key, value) {
    if (_classPrivateFieldBase(this, _data)[_data].has(key)) {
      _classPrivateFieldBase(this, _toHead)[_toHead](key);
    } else {
      const node = new LRUNode(key);

      _classPrivateFieldBase(this, _refs)[_refs].set(node.key, node);

      if (this.length === 0) {
        _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = node;
      } else {
        _classPrivateFieldBase(this, _head)[_head].prev = node;
        node.next = _classPrivateFieldBase(this, _head)[_head];
        _classPrivateFieldBase(this, _head)[_head] = node;
      }

      if (_classPrivateFieldBase(this, _length)[_length] === this.capacity) {
        _classPrivateFieldBase(this, _data)[_data].delete(_classPrivateFieldBase(this, _tail)[_tail].key);

        _classPrivateFieldBase(this, _refs)[_refs].delete(_classPrivateFieldBase(this, _tail)[_tail].key);

        _classPrivateFieldBase(this, _tail)[_tail] = _classPrivateFieldBase(this, _tail)[_tail].prev;
        _classPrivateFieldBase(this, _tail)[_tail].next = _classPrivateFieldBase(this, _head)[_head];
      } else {
        _classPrivateFieldBase(this, _length)[_length] += 1;
      }
    }

    _classPrivateFieldBase(this, _data)[_data].set(key, value);
  }

}

function _toHead2(key) {
  const ref = _classPrivateFieldBase(this, _refs)[_refs].get(key);

  if (ref && ref !== _classPrivateFieldBase(this, _head)[_head]) {
    ref.prev.next = ref.next;
    ref.next.prev = ref.prev;
    ref.next = _classPrivateFieldBase(this, _head)[_head];
    _classPrivateFieldBase(this, _head)[_head].prev = ref;
    _classPrivateFieldBase(this, _head)[_head] = ref;
  }
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/ws/errors.js
// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
// from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
const known = {
  1000: 'Normal Closure',
  1001: 'Going Away',
  1002: 'Protocol Error',
  1003: 'Unsupported Data',
  1004: '(For future)',
  1005: 'No Status Received',
  1006: 'Abnormal Closure',
  1007: 'Invalid frame payload data',
  1008: 'Policy Violation',
  1009: 'Message too big',
  1010: 'Missing Extension',
  1011: 'Internal Error',
  1012: 'Service Restart',
  1013: 'Try Again Later',
  1014: 'Bad Gateway',
  1015: 'TLS Handshake'
};

function getUnmapped(code) {
  if (code <= 1999) {
    return '(For WebSocket standard)';
  } else if (code <= 2999) {
    return '(For WebSocket extensions)';
  } else if (code <= 3999) {
    return '(For libraries and frameworks)';
  } else if (code <= 4999) {
    return '(For applications)';
  }
}

function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return '(Unused)';
  }

  return known[code] || getUnmapped(code) || '(Unknown)';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-provider/ws/index.js


// Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable camelcase */








const ALIASES = {
  chain_finalisedHead: 'chain_finalizedHead',
  chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
  chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
};
const RETRY_DELAY = 2500;
const DEFAULT_TIMEOUT_MS = 60 * 1000;
const TIMEOUT_INTERVAL = 5000;
const MEGABYTE = 1024 * 1024;
const l = logger('api-ws');

function eraseRecord(record, cb) {
  Object.keys(record).forEach(key => {
    if (cb) {
      cb(record[key]);
    }

    delete record[key];
  });
}
/**
 * # @polkadot/rpc-provider/ws
 *
 * @name WsProvider
 *
 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const api = new Api(provider);
 * ```
 *
 * @see [[HttpProvider]]
 */


var _callCache = /*#__PURE__*/_classPrivateFieldKey("callCache");

var _coder = /*#__PURE__*/_classPrivateFieldKey("coder");

var _endpoints = /*#__PURE__*/_classPrivateFieldKey("endpoints");

var _headers = /*#__PURE__*/_classPrivateFieldKey("headers");

var _eventemitter = /*#__PURE__*/_classPrivateFieldKey("eventemitter");

var _handlers = /*#__PURE__*/_classPrivateFieldKey("handlers");

var _isReadyPromise = /*#__PURE__*/_classPrivateFieldKey("isReadyPromise");

var _stats = /*#__PURE__*/_classPrivateFieldKey("stats");

var _waitingForId = /*#__PURE__*/_classPrivateFieldKey("waitingForId");

var _autoConnectMs = /*#__PURE__*/_classPrivateFieldKey("autoConnectMs");

var _endpointIndex = /*#__PURE__*/_classPrivateFieldKey("endpointIndex");

var _isConnected = /*#__PURE__*/_classPrivateFieldKey("isConnected");

var _subscriptions = /*#__PURE__*/_classPrivateFieldKey("subscriptions");

var _timeoutId = /*#__PURE__*/_classPrivateFieldKey("timeoutId");

var _websocket = /*#__PURE__*/_classPrivateFieldKey("websocket");

var _timeout = /*#__PURE__*/_classPrivateFieldKey("timeout");

var _send = /*#__PURE__*/_classPrivateFieldKey("send");

var _emit = /*#__PURE__*/_classPrivateFieldKey("emit");

var _onSocketClose = /*#__PURE__*/_classPrivateFieldKey("onSocketClose");

var _onSocketError = /*#__PURE__*/_classPrivateFieldKey("onSocketError");

var _onSocketMessage = /*#__PURE__*/_classPrivateFieldKey("onSocketMessage");

var _onSocketMessageResult = /*#__PURE__*/_classPrivateFieldKey("onSocketMessageResult");

var _onSocketMessageSubscribe = /*#__PURE__*/_classPrivateFieldKey("onSocketMessageSubscribe");

var _onSocketOpen = /*#__PURE__*/_classPrivateFieldKey("onSocketOpen");

var _resubscribe = /*#__PURE__*/_classPrivateFieldKey("resubscribe");

var _timeoutHandlers = /*#__PURE__*/_classPrivateFieldKey("timeoutHandlers");

class WsProvider {
  /**
   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
   * @param {boolean} autoConnect Whether to connect automatically or not.
   * @param {number} [timeout] Custom timeout value
   */
  constructor(endpoint = rpc_provider_defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
    Object.defineProperty(this, _send, {
      value: _send2
    });
    Object.defineProperty(this, _callCache, {
      writable: true,
      value: new LRUCache()
    });
    Object.defineProperty(this, _coder, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _endpoints, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _headers, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _eventemitter, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _handlers, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _isReadyPromise, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _stats, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _waitingForId, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _autoConnectMs, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _endpointIndex, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isConnected, {
      writable: true,
      value: false
    });
    Object.defineProperty(this, _subscriptions, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _timeoutId, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _websocket, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _timeout, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _emit, {
      writable: true,
      value: (type, ...args) => {
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter].emit(type, ...args);
      }
    });
    Object.defineProperty(this, _onSocketClose, {
      writable: true,
      value: event => {
        const error = new Error(`disconnected from ${_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);

        if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
          l.error(error.message);
        }

        _classPrivateFieldBase(this, _isConnected)[_isConnected] = false;

        if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
          _classPrivateFieldBase(this, _websocket)[_websocket].onclose = null;
          _classPrivateFieldBase(this, _websocket)[_websocket].onerror = null;
          _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = null;
          _classPrivateFieldBase(this, _websocket)[_websocket].onopen = null;
          _classPrivateFieldBase(this, _websocket)[_websocket] = null;
        }

        if (_classPrivateFieldBase(this, _timeoutId)[_timeoutId]) {
          clearInterval(_classPrivateFieldBase(this, _timeoutId)[_timeoutId]);
          _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = null;
        }

        _classPrivateFieldBase(this, _emit)[_emit]('disconnected'); // reject all hanging requests


        eraseRecord(_classPrivateFieldBase(this, _handlers)[_handlers], h => {
          try {
            h.callback(error, undefined);
          } catch (err) {
            // does not throw
            l.error(err);
          }
        });
        eraseRecord(_classPrivateFieldBase(this, _waitingForId)[_waitingForId]);

        if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {// does not throw
            });
          }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
        }
      }
    });
    Object.defineProperty(this, _onSocketError, {
      writable: true,
      value: error => {
        l.debug(() => ['socket error', error]);

        _classPrivateFieldBase(this, _emit)[_emit]('error', error);
      }
    });
    Object.defineProperty(this, _onSocketMessage, {
      writable: true,
      value: message => {
        l.debug(() => ['received', message.data]);
        _classPrivateFieldBase(this, _stats)[_stats].total.bytesRecv += message.data.length;
        const response = JSON.parse(message.data);
        return isUndefined(response.method) ? _classPrivateFieldBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
      }
    });
    Object.defineProperty(this, _onSocketMessageResult, {
      writable: true,
      value: response => {
        const handler = _classPrivateFieldBase(this, _handlers)[_handlers][response.id];

        if (!handler) {
          l.debug(() => `Unable to find handler for id=${response.id}`);
          return;
        }

        try {
          const {
            method,
            params,
            subscription
          } = handler;

          const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update
          // immediately if we have some queued results already


          handler.callback(null, result);

          if (subscription) {
            const subId = `${subscription.type}::${result}`;
            _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId] = objectSpread({}, subscription, {
              method,
              params
            }); // if we have a result waiting for this subscription already

            if (_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]) {
              _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]);
            }
          }
        } catch (error) {
          handler.callback(error, undefined);
        }

        delete _classPrivateFieldBase(this, _handlers)[_handlers][response.id];
      }
    });
    Object.defineProperty(this, _onSocketMessageSubscribe, {
      writable: true,
      value: response => {
        const method = ALIASES[response.method] || response.method || 'invalid';
        const subId = `${method}::${response.params.subscription}`;

        const handler = _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId];

        if (!handler) {
          // store the JSON, we could have out-of-order subid coming in
          _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId] = response;
          l.debug(() => `Unable to find handler for subscription=${subId}`);
          return;
        } // housekeeping


        delete _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId];

        try {
          const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response);

          handler.callback(null, result);
        } catch (error) {
          handler.callback(error, undefined);
        }
      }
    });
    Object.defineProperty(this, _onSocketOpen, {
      writable: true,
      value: () => {
        assert(!isNull(_classPrivateFieldBase(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');
        l.debug(() => ['connected to', _classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]]);
        _classPrivateFieldBase(this, _isConnected)[_isConnected] = true;

        _classPrivateFieldBase(this, _emit)[_emit]('connected');

        _classPrivateFieldBase(this, _resubscribe)[_resubscribe]();

        return true;
      }
    });
    Object.defineProperty(this, _resubscribe, {
      writable: true,
      value: () => {
        const subscriptions = _classPrivateFieldBase(this, _subscriptions)[_subscriptions];

        _classPrivateFieldBase(this, _subscriptions)[_subscriptions] = {};
        Promise.all(Object.keys(subscriptions).map(async id => {
          const {
            callback,
            method,
            params,
            type
          } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where
          // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
          // are not included (and will not be re-broadcast)

          if (type.startsWith('author_')) {
            return;
          }

          try {
            await this.subscribe(type, method, params, callback);
          } catch (error) {
            l.error(error);
          }
        })).catch(l.error);
      }
    });
    Object.defineProperty(this, _timeoutHandlers, {
      writable: true,
      value: () => {
        const now = Date.now();
        const ids = Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]);

        for (let i = 0; i < ids.length; i++) {
          const handler = _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];

          if (now - handler.start > _classPrivateFieldBase(this, _timeout)[_timeout]) {
            try {
              handler.callback(new Error(`No response received from RPC endpoint in ${_classPrivateFieldBase(this, _timeout)[_timeout] / 1000}s`), undefined);
            } catch {// ignore
            }

            _classPrivateFieldBase(this, _stats)[_stats].total.timeout++;
            delete _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];
          }
        }
      }
    });
    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
    assert(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');
    endpoints.forEach(endpoint => {
      assert(/^(wss|ws):\/\//.test(endpoint), () => `Endpoint should start with 'ws://', received '${endpoint}'`);
    });
    _classPrivateFieldBase(this, _eventemitter)[_eventemitter] = new eventemitter3();
    _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
    _classPrivateFieldBase(this, _coder)[_coder] = new RpcCoder();
    _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = -1;
    _classPrivateFieldBase(this, _endpoints)[_endpoints] = endpoints;
    _classPrivateFieldBase(this, _headers)[_headers] = headers;
    _classPrivateFieldBase(this, _websocket)[_websocket] = null;
    _classPrivateFieldBase(this, _stats)[_stats] = {
      active: {
        requests: 0,
        subscriptions: 0
      },
      total: {
        bytesRecv: 0,
        bytesSent: 0,
        cached: 0,
        requests: 0,
        subscriptions: 0,
        timeout: 0
      }
    };
    _classPrivateFieldBase(this, _timeout)[_timeout] = timeout || DEFAULT_TIMEOUT_MS;

    if (autoConnectMs > 0) {
      this.connectWithRetry().catch(() => {// does not throw
      });
    }

    _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].once('connected', () => {
        resolve(this);
      });
    });
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */


  get hasSubscriptions() {
    return true;
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */


  get isConnected() {
    return _classPrivateFieldBase(this, _isConnected)[_isConnected];
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */


  get isReady() {
    return _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise];
  }
  /**
   * @description Returns a clone of the object
   */


  clone() {
    return new WsProvider(_classPrivateFieldBase(this, _endpoints)[_endpoints]);
  }
  /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async connect() {
    try {
      _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldBase(this, _endpoints)[_endpoints].length;
      _classPrivateFieldBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
      : new WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldBase(this, _headers)[_headers], undefined, {
        // default: true
        fragmentOutgoingMessages: true,
        // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)
        fragmentationThreshold: 1 * MEGABYTE,
        // default: 1MiB (also align with maxReceivedMessageSize)
        maxReceivedFrameSize: 24 * MEGABYTE,
        // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that, 16M is ok there)
        maxReceivedMessageSize: 24 * MEGABYTE
      });
      _classPrivateFieldBase(this, _websocket)[_websocket].onclose = _classPrivateFieldBase(this, _onSocketClose)[_onSocketClose];
      _classPrivateFieldBase(this, _websocket)[_websocket].onerror = _classPrivateFieldBase(this, _onSocketError)[_onSocketError];
      _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldBase(this, _onSocketMessage)[_onSocketMessage];
      _classPrivateFieldBase(this, _websocket)[_websocket].onopen = _classPrivateFieldBase(this, _onSocketOpen)[_onSocketOpen]; // timeout any handlers that have not had a response

      _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = setInterval(() => _classPrivateFieldBase(this, _timeoutHandlers)[_timeoutHandlers](), TIMEOUT_INTERVAL);
    } catch (error) {
      l.error(error);

      _classPrivateFieldBase(this, _emit)[_emit]('error', error);

      throw error;
    }
  }
  /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */


  async connectWithRetry() {
    if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
      try {
        await this.connect();
      } catch (error) {
        setTimeout(() => {
          this.connectWithRetry().catch(() => {// does not throw
          });
        }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
      }
    }
  }
  /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async disconnect() {
    // switch off autoConnect, we are in manual mode now
    _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = 0;

    try {
      if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
        // 1000 - Normal closure; the connection successfully completed
        _classPrivateFieldBase(this, _websocket)[_websocket].close(1000);
      }
    } catch (error) {
      l.error(error);

      _classPrivateFieldBase(this, _emit)[_emit]('error', error);

      throw error;
    }
  }
  /**
   * @description Returns the connection stats
   */


  get stats() {
    return {
      active: {
        requests: Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]).length,
        subscriptions: Object.keys(_classPrivateFieldBase(this, _subscriptions)[_subscriptions]).length
      },
      total: _classPrivateFieldBase(this, _stats)[_stats].total
    };
  }
  /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */


  on(type, sub) {
    _classPrivateFieldBase(this, _eventemitter)[_eventemitter].on(type, sub);

    return () => {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].removeListener(type, sub);
    };
  }
  /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */


  send(method, params, isCacheable, subscription) {
    _classPrivateFieldBase(this, _stats)[_stats].total.requests++;

    const [id, body] = _classPrivateFieldBase(this, _coder)[_coder].encodeJson(method, params);

    let resultPromise = isCacheable ? _classPrivateFieldBase(this, _callCache)[_callCache].get(body) : null;

    if (!resultPromise) {
      resultPromise = _classPrivateFieldBase(this, _send)[_send](id, body, method, params, subscription);

      if (isCacheable) {
        _classPrivateFieldBase(this, _callCache)[_callCache].set(body, resultPromise);
      }
    } else {
      _classPrivateFieldBase(this, _stats)[_stats].total.cached++;
    }

    return resultPromise;
  }

  /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */
  subscribe(type, method, params, callback) {
    _classPrivateFieldBase(this, _stats)[_stats].total.subscriptions++; // subscriptions are not cached, LRU applies to .at(<blockHash>) only

    return this.send(method, params, false, {
      callback,
      type
    });
  }
  /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */


  async unsubscribe(type, method, id) {
    const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
    // the assigned id now does not match what the API user originally received. It has
    // a slight complication in solving - since we cannot rely on the send id, but rather
    // need to find the actual subscription id to map it

    if (isUndefined(_classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription])) {
      l.debug(() => `Unable to find active subscription=${subscription}`);
      return false;
    }

    delete _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription];

    try {
      return this.isConnected && !isNull(_classPrivateFieldBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
    } catch (error) {
      return false;
    }
  }

}

async function _send2(id, body, method, params, subscription) {
  return new Promise((resolve, reject) => {
    try {
      assert(this.isConnected && !isNull(_classPrivateFieldBase(this, _websocket)[_websocket]), 'WebSocket is not connected');

      const callback = (error, result) => {
        error ? reject(error) : resolve(result);
      };

      l.debug(() => ['calling', method, body]);
      _classPrivateFieldBase(this, _handlers)[_handlers][id] = {
        callback,
        method,
        params,
        start: Date.now(),
        subscription
      };
      _classPrivateFieldBase(this, _stats)[_stats].total.bytesSent += body.length;

      _classPrivateFieldBase(this, _websocket)[_websocket].send(body);
    } catch (error) {
      reject(error);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/packageInfo.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Do not edit, auto-generated by @polkadot/dev
const packageInfo = {
  name: '@polkadot/api',
  path: ( true) ? new URL("file:///Users/randombishop/Documents/CRYPTO_II/wika_app/extension/node_modules/@polkadot/api/packageInfo.js").pathname.substring(0, new URL("file:///Users/randombishop/Documents/CRYPTO_II/wika_app/extension/node_modules/@polkadot/api/packageInfo.js").pathname.lastIndexOf('/') + 1) : 0,
  type: 'esm',
  version: '8.4.2'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/find.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

function findCall(registry, callIndex) {
  return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
  return registry.findMetaError(u8aToU8a(errorIndex));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js

var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });
//# sourceMappingURL=EmptyError.js.map
;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction_isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var UnsubscriptionError = createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction_isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError) {
                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction_isFunction(value.remove) && isFunction_isFunction(value.add) && isFunction_isFunction(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if (isFunction_isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/config.js
var config_config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
        var onUnhandledError = config_config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop_noop() { }
//# sourceMappingURL=noop.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var context = null;
function errorContext(cb) {
    if (config_config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function captureError(err) {
    if (config_config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription));

var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config_config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));

function handleUnhandledError(error) {
    if (config_config.useDeprecatedSynchronousErrorHandling) {
        captureError(error);
    }
    else {
        reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config_config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: noop_noop,
    error: defaultErrorHandler,
    complete: noop_noop,
};
//# sourceMappingURL=Subscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js


function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
//# sourceMappingURL=firstValueFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js

function isPromise(value) {
    return isFunction_isFunction(value === null || value === void 0 ? void 0 : value.then);
}
//# sourceMappingURL=isPromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Observable.js







var Observable_Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config_config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction_isFunction(value.next) && isFunction_isFunction(value.error) && isFunction_isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
}
//# sourceMappingURL=Observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js


function isInteropObservable(input) {
    return isFunction_isFunction(input[observable]);
}
//# sourceMappingURL=isInteropObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js

function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
//# sourceMappingURL=isAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
//# sourceMappingURL=throwUnobservableError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator_iterator = getSymbolIterator();
//# sourceMappingURL=iterator.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js


function isIterable(input) {
    return isFunction_isFunction(input === null || input === void 0 ? void 0 : input[iterator_iterator]);
}
//# sourceMappingURL=isIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js


function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) {}
                    return [4, __await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, __await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, __await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
//# sourceMappingURL=isReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js












function innerFrom(input) {
    if (input instanceof Observable_Observable) {
        return input;
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromInteropObservable(input);
        }
        if (isArrayLike(input)) {
            return fromArrayLike(input);
        }
        if (isPromise(input)) {
            return fromPromise(input);
        }
        if (isAsyncIterable(input)) {
            return fromAsyncIterable(input);
        }
        if (isIterable(input)) {
            return fromIterable(input);
        }
        if (isReadableStreamLike(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
    return new Observable_Observable(function (subscriber) {
        var obs = obj[observable]();
        if (isFunction_isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new Observable_Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new Observable_Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, reportUnhandledError);
    });
}
function fromIterable(iterable) {
    return new Observable_Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new Observable_Observable(function (subscriber) {
        innerFrom_process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function innerFrom_process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return __awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = __asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/lift.js

function hasLift(source) {
    return isFunction_isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
//# sourceMappingURL=lift.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js


function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = (function (_super) {
    __extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(Subscriber));

//# sourceMappingURL=OperatorSubscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js



function switchMap(project, resultSelector) {
    return operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
//# sourceMappingURL=switchMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js

function isScheduler(value) {
    return value && isFunction_isFunction(value.schedule);
}
//# sourceMappingURL=isScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/args.js


function last(arr) {
    return arr[arr.length - 1];
}
function popResultSelector(args) {
    return isFunction_isFunction(last(args)) ? args.pop() : undefined;
}
function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
    return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
//# sourceMappingURL=args.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
//# sourceMappingURL=executeSchedule.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js



function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
//# sourceMappingURL=observeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js

function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
//# sourceMappingURL=subscribeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js



function scheduleObservable(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=scheduleObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js



function schedulePromise(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=schedulePromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js

function scheduleArray(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
//# sourceMappingURL=scheduleArray.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js




function scheduleIterable(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var iterator;
        executeSchedule(subscriber, scheduler, function () {
            iterator = input[iterator_iterator]();
            executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return isFunction_isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
//# sourceMappingURL=scheduleIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js


function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable_Observable(function (subscriber) {
        executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
//# sourceMappingURL=scheduleAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js


function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
//# sourceMappingURL=scheduleReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js













function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        }
        if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        if (isAsyncIterable(input)) {
            return scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable(input)) {
            return scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike(input)) {
            return scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw createInvalidObservableTypeError(input);
}
//# sourceMappingURL=scheduled.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/from.js


function from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}
//# sourceMappingURL=from.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/of.js


function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    return from(args, scheduler);
}
//# sourceMappingURL=of.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/map.js


function map(project, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
//# sourceMappingURL=map.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/object/property.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */

function objectProperty(that, key, getter) {
  // We use both the hasOwnProperty as well as isUndefined checks here, since it may be set
  // in inherited classes and _Own_ properties refers to the class only, not only parents
  if (!Object.prototype.hasOwnProperty.call(that, key) && isUndefined(that[key])) {
    Object.defineProperty(that, key, {
      enumerable: true,
      // Since we don't use any additional this internally, we can use arrow (unlike lazy)
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: () => getter(key)
    });
  }
}
/**
 * @name objectProperties
 * @summary Assign get properties on the input object
 */

function objectProperties(that, keys, getter) {
  for (let i = 0; i < keys.length; i++) {
    objectProperty(that, keys[i], k => getter(k, i));
  }
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/util.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

function hasEq(o) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return isFunction(o.eq);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/compareMap.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0



function hasMismatch(a, b) {
  return isUndefined(a) || (hasEq(a) ? !a.eq(b) : a !== b);
}

function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}

function compareMapArray(a, b) {
  // equal number of entries and each entry in the array should match
  return a.size === b.length && !b.some(e => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
} // NOTE These are used internally and when comparing objects, expects that
// when the second is an Map<string, Codec> that the first has to be as well


function compareMap(a, b) {
  if (Array.isArray(b)) {
    return compareMapArray(a, b);
  } else if (b instanceof Map) {
    return compareMapArray(a, [...b.entries()]);
  } else if (isObject(b)) {
    return compareMapArray(a, Object.entries(b));
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Json.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */

function decodeJson(value) {
  return Object.entries(value || {});
}
/**
 * @name Json
 * @description
 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
 * @noInheritDoc
 */


class Json extends Map {
  constructor(registry, value) {
    const decoded = decodeJson(value);
    super(decoded);
    this.registry = registry;
    objectProperties(this, decoded.map(([k]) => k), k => this.get(k));
  }
  /**
   * @description Always 0, never encodes as a Uint8Array
   */


  get encodedLength() {
    return 0;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return [...this.keys()].length === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareMap(this, other);
  }

  getT(key) {
    return this.get(key);
  }
  /**
   * @description Unimplemented, will throw
   */


  inspect() {
    throw new Error('Unimplemented');
  }
  /**
   * @description Unimplemented, will throw
   */


  toHex() {
    throw new Error('Unimplemented');
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction(value.toHuman) ? value.toHuman() : value;
      return json;
    }, {});
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = value;
      return json;
    }, {});
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Json';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return stringify(this.toJSON());
  }
  /**
   * @description Unimplemented, will throw
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    throw new Error('Unimplemented');
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/ascii.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



const FORMAT = [9, 10, 13];
/** @internal */

function isAsciiByte(b) {
  return b < 127 && (b >= 32 || FORMAT.includes(b));
}

function isAsciiChar(s) {
  return isAsciiByte(s.charCodeAt(0));
}
/**
 * @name isAscii
 * @summary Tests if the input is printable ASCII
 * @description
 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
 */


function isAscii(value) {
  const isStringIn = isString(value);

  if (value) {
    return isStringIn && !isHex(value) ? value.toString().split('').every(isAsciiChar) : u8aToU8a(value).every(isAsciiByte);
  }

  return isStringIn;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/utf8.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from https://github.com/JulienPalard/is_utf8/blob/master/is_utf8.c


/**
 * @name isUtf8
 * @summary Tests if the input is valid Utf8
 * @description
 * Checks to see if the input string or Uint8Array is valid Utf8
 */

function isUtf8(value) {
  if (!value) {
    return isString(value);
  }

  const u8a = u8aToU8a(value);
  const len = u8a.length;
  let i = 0;

  while (i < len) {
    if (u8a[i] <= 0x7F)
      /* 00..7F */
      {
        i += 1;
      } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
      /* C2..DF 80..BF */
      {
        if (i + 1 < len)
          /* Expect a 2nd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
              // *faulty_bytes = 2;
              return false;
            }
          } else {
          // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 2;
      } else if (u8a[i] === 0xE0)
      /* E0 A0..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte of E0, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
      /* E1..EC 80..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte between E1 and EC, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] === 0xED)
      /* ED 80..9F 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
              // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte of ED, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
      /* EE..EF 80..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte between EE and EF, two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] === 0xF0)
      /* F0 90..BF 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F0, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
      /* F1..F3 80..BF 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else if (u8a[i] === 0xF4)
      /* F4 80..8F 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
              // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F4, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else {
      // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
      // *faulty_bytes = 1;
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Raw.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Raw
 * @description
 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
 * from other implementations where it will consume the full Uint8Array as passed to it.
 * As such it is meant to be subclassed where the wrapper takes care of the
 * actual lengths instead of used directly.
 * @noInheritDoc
 */

class Raw extends Uint8Array {
  constructor(registry, value, initialU8aLength) {
    super(u8aToU8a(value));
    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */


  get isAscii() {
    return isAscii(this);
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */


  get isEmpty() {
    return !this.length || isUndefined(this.find(b => !!b));
  }
  /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */


  get isUtf8() {
    return isUtf8(this);
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return this.length * 8;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    if (other instanceof Uint8Array) {
      return this.length === other.length && !this.some((b, index) => b !== other[index]);
    }

    return this.eq(u8aToU8a(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Create a new slice from the actual buffer. (compat)
   * @param start The position to start at
   * @param end The position to end at
   */


  slice(start, end) {
    // Like subarray below, we have to follow this approach since we are extending the TypeArray.
    // This happens especially when it comes to further extensions, the length may be an override
    return Uint8Array.from(this).slice(start, end);
  }
  /**
   * @description Create a new subarray from the actual buffer. (compat)
   * @param begin The position to start at
   * @param end The position to end at
   */


  subarray(begin, end) {
    return Uint8Array.from(this).subarray(begin, end);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    if (this.isAscii) {
      const text = this.toUtf8(); // ensure we didn't end up with multibyte codepoints

      if (isAscii(text)) {
        return text;
      }
    }

    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Raw';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return Uint8Array.from(this);
  }
  /**
   * @description Returns the wrapped data as a UTF-8 string
   */


  toUtf8() {
    assert(this.isUtf8, 'The character sequence is not a valid Utf8 string');
    return u8aToString(this);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/DoNotConstruct.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */
class DoNotConstruct {
  #neverError;

  constructor(registry, typeName = 'DoNotConstruct') {
    this.registry = registry;
    this.#neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
    throw this.#neverError;
  }

  static with(typeName) {
    return class extends DoNotConstruct {
      constructor(registry) {
        super(registry, typeName);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    throw this.#neverError;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    throw this.#neverError;
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */


  get isEmpty() {
    throw this.#neverError;
  }

  eq() {
    throw this.#neverError;
  }

  inspect() {
    throw this.#neverError;
  }

  toHex() {
    throw this.#neverError;
  }

  toHuman() {
    throw this.#neverError;
  }

  toJSON() {
    throw this.#neverError;
  }

  toRawType() {
    throw this.#neverError;
  }

  toString() {
    throw this.#neverError;
  }

  toU8a() {
    throw this.#neverError;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/boolean.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */
function isBoolean(value) {
  return typeof value === 'boolean';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/toBn.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name u8aToBn
 * @summary Creates a BN from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
 * @param value The value to convert
 * @param options Options to pass while converting
 * @param options.isLe Convert using Little Endian (default)
 * @param options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBn } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */

/** @deprecated Use hexToBn (value?: string | null, options?: ToBnOptions) */
function u8aToBn(value, options = {}) {
  // NOTE: This is the same process as followed in the hexToBn conversion
  // For Uint8Array, default to LE
  const {
    isLe,
    isNegative
  } = objectSpread({
    isLe: true,
    isNegative: false
  }, isBoolean(options) ? {
    isLe: options
  } : options);
  const bn = new lib_bn(value, isLe ? 'le' : 'be');
  return isNegative && value.length ? bn.fromTwos(value.length * 8) : bn;
}


;// CONCATENATED MODULE: ./node_modules/@polkadot/util/compact/fromU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name compactFromU8a
 * @description Retrives the offset and encoded length from a compact-prefixed value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactFromU8a } from '@polkadot/util';
 *
 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
 *
 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
 * ```
 */

function compactFromU8a(input) {
  const u8a = u8aToU8a(input);
  const flag = u8a[0] & 0b11; // The u8a is manually converted here, it is 2x faster that doing an
  // additional call to u8aToBn

  if (flag === 0b00) {
    return [1, new lib_bn(u8a[0] >>> 2)];
  } else if (flag === 0b01) {
    return [2, new lib_bn(u8a[0] + u8a[1] * 0x100 >>> 2)];
  } else if (flag === 0b10) {
    return [4, new lib_bn(u8a[0] + u8a[1] * 0x100 + u8a[2] * 0x10000 + u8a[3] * 0x1000000 >>> 2)];
  } // add 5 to shifted (4 for base length, 1 for this byte)


  const offset = (u8a[0] >>> 2) + 5;
  return [offset, u8aToBn(u8a.subarray(1, offset))];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/consts.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name BN_ZERO
 * @summary BN constant for 0.
 */

const BN_ZERO = new lib_bn(0);
/**
 * @name BN_ONE
 * @summary BN constant for 1.
 */

const BN_ONE = new lib_bn(1);
/**
 * @name BN_TWO
 * @summary BN constant for 2.
 */

const BN_TWO = new lib_bn(2);
/**
 * @name BN_THREE
 * @summary BN constant for 3.
 */

const BN_THREE = new lib_bn(3);
/**
 * @name BN_FOUR
 * @summary BN constant for 4.
 */

const BN_FOUR = new lib_bn(4);
/**
 * @name BN_FIVE
 * @summary BN constant for 5.
 */

const BN_FIVE = new lib_bn(5);
/**
 * @name BN_SIX
 * @summary BN constant for 6.
 */

const BN_SIX = new lib_bn(6);
/**
 * @name BN_SEVEN
 * @summary BN constant for 7.
 */

const BN_SEVEN = new lib_bn(7);
/**
 * @name BN_EIGHT
 * @summary BN constant for 8.
 */

const BN_EIGHT = new lib_bn(8);
/**
 * @name BN_NINE
 * @summary BN constant for 9.
 */

const BN_NINE = new lib_bn(9);
/**
 * @name BN_TEN
 * @summary BN constant for 10.
 */

const BN_TEN = new lib_bn(10);
/**
 * @name BN_HUNDRED
 * @summary BN constant for 100.
 */

const BN_HUNDRED = new lib_bn(100);
/**
 * @name BN_THOUSAND
 * @summary BN constant for 1,000.
 */

const BN_THOUSAND = new lib_bn(1000);
/**
 * @name BN_MILLION
 * @summary BN constant for 1,000,000.
 */

const BN_MILLION = new lib_bn(1000000);
/**
 * @name BN_BILLION
 * @summary BN constant for 1,000,000,000.
 */

const BN_BILLION = new lib_bn(1000000000);
/**
 * @name BN_QUINTILL
 * @summary BN constant for 1,000,000,000,000,000,000.
 */

const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
/**
 * @name BN_MAX_INTEGER
 * @summary BN constant for MAX_SAFE_INTEGER
 */

const BN_MAX_INTEGER = new lib_bn(Number.MAX_SAFE_INTEGER);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/hex/toBn.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name hexToBn
 * @summary Creates a BN.js object from a hex string.
 * @description
 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @param _value The value to convert
 * @param _options Options to pass while converting
 * @param _options.isLe Convert using Little Endian
 * @param _options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToBn } from '@polkadot/util';
 *
 * hexToBn('0x123480001f'); // => BN(0x123480001f)
 * ```
 */

/** @deprecated Use hexToBn (value?: string | null, options?: ToBnOptions) */
function hexToBn(value, options = {}) {
  if (!value || value === '0x') {
    return new lib_bn(0);
  } // For hex, default to BE


  const {
    isLe,
    isNegative
  } = objectSpread({
    isLe: false,
    isNegative: false
  }, isBoolean(options) ? {
    isLe: options
  } : options);
  const stripped = hexStripPrefix(value);
  const bn = new lib_bn(stripped, 16, isLe ? 'le' : 'be'); // fromTwos takes as parameter the number of bits, which is the hex length
  // multiplied by 4 (2 bytes being 8 bits)

  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}


;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/helpers.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


function isOn(...fns) {
  return value => (isObject(value) || isFunction(value)) && fns.every(f => isFunction(value[f]));
}
function isOnObject(...fns) {
  return value => isObject(value) && fns.every(f => isFunction(value[f]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/toBigInt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const isToBigInt = isOn('toBigInt');
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/toBn.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const isToBn = isOn('toBn');
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/toBn.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0






/**
 * @name bnToBn
 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
 * @description
 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToBn } from '@polkadot/util';
 *
 * bnToBn(0x1234); // => BN(0x1234)
 * bnToBn(new BN(0x1234)); // => BN(0x1234)
 * ```
 */

function bnToBn(value) {
  return value ? lib_bn.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new lib_bn(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new lib_bn(value.toBigInt().toString()) : new lib_bn(value) : new lib_bn(0);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



const DEFAULT_OPTS = {
  bitLength: -1,
  isLe: true,
  isNegative: false
};
/**
 * @name bnToU8a
 * @summary Creates a Uint8Array object from a BN.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bnToU8a } from '@polkadot/util';
 *
 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
 * ```
 */

/** @deprecated Use bnToU8a(value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */
function bnToU8a(value, arg1 = DEFAULT_OPTS, arg2) {
  const {
    bitLength,
    isLe,
    isNegative
  } = objectSpread({
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, isNumber(arg1) ? {
    bitLength: arg1,
    isLe: arg2
  } : arg1);
  const valueBn = bnToBn(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);

  if (!value) {
    return bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
  }

  const output = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
  return output;
}


;// CONCATENATED MODULE: ./node_modules/@polkadot/util/compact/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



const MAX_U8 = BN_TWO.pow(new lib_bn(8 - 2)).isub(BN_ONE);
const MAX_U16 = BN_TWO.pow(new lib_bn(16 - 2)).isub(BN_ONE);
const MAX_U32 = BN_TWO.pow(new lib_bn(32 - 2)).isub(BN_ONE);
const BL_16 = {
  bitLength: 16
};
const BL_32 = {
  bitLength: 32
};
/**
 * @name compactToU8a
 * @description Encodes a number into a compact representation
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactToU8a } from '@polkadot/util';
 *
 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
 * ```
 */

function compactToU8a(value) {
  const bn = bnToBn(value);

  if (bn.lte(MAX_U8)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U16)) {
    return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
  } else if (bn.lte(MAX_U32)) {
    return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
  }

  const u8a = bnToU8a(bn);
  let length = u8a.length; // adjust to the minimum number of bytes

  while (u8a[length - 1] === 0) {
    length--;
  }

  assert(length >= 4, 'Invalid length, previous checks match anything less than 2^30');
  return u8aConcat( // subtract 4 as minimum (also catered for in decoding)
  [(length - 4 << 2) + 0b11], u8a.subarray(0, length));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/compareArray.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // NOTE These are used internally and when comparing objects, expects that
// when the second is an Codec[] that the first has to be as well

function compareArray(a, b) {
  if (Array.isArray(b)) {
    return a.length === b.length && isUndefined(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/abstract/AbstractArray.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name AbstractArray
 * @description
 * This manages codec arrays. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 * @noInheritDoc
 */

class AbstractArray extends Array {
  constructor(registry, values, initialU8aLength) {
    super(values.length); // explicitly set the values here - this removes the need for any extra allocations

    for (let i = 0; i < values.length; i++) {
      this[i] = values[i];
    }

    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    // We need to loop through all entries since they may have a variable length themselves,
    // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
    let total = compactToU8a(this.length).length;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareArray(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      inner: this.inspectInner(),
      outer: [compactToU8a(this.length)]
    };
  }

  inspectInner() {
    const inner = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      inner[i] = this[i].inspect();
    }

    return inner;
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */


  toArray() {
    return Array.from(this);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toHuman(isExtended);
    }

    return result;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toJSON();
    }

    return result;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toString();
    }

    return `[${result.join(', ')}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = this.toU8aInner();
    return isBare ? u8aConcat(...encoded) : u8aConcat(compactToU8a(this.length), ...encoded);
  }

  toU8aInner(isBare) {
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }

    return encoded;
  } // Below are methods that we override. When we do a `new Vec(...).map()`,
  // we want it to return an Array. We only override the methods that return a
  // new instance.

  /**
   * @description Concatenates two arrays
   */


  concat(other) {
    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
  }
  /**
   * @description Filters the array with the callback
   */


  filter(callbackfn, thisArg) {
    return this.toArray().filter(callbackfn, thisArg);
  }
  /**
   * @description Maps the array with the callback
   */


  map(callbackfn, thisArg) {
    return this.toArray().map(callbackfn, thisArg);
  }
  /**
   * @description Checks if the array includes a specific value
   */


  includes(check) {
    return this.some(value => value.eq(check));
  }
  /**
   * @description Returns a slice of an array
   */


  slice(start, end) {
    return this.toArray().slice(start, end);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/is/codec.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

const checkCodec = isOnObject('toHex', 'toU8a');
const checkRegistry = isOnObject('get');
function isCodec(value) {
  return checkCodec(value) && checkRegistry(value.registry);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/string/camelCase.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Inspired from https://stackoverflow.com/a/2970667
//
// this is not as optimal as the original answer (we split into multiple),
// however it does pass the tests (which the original doesn't) and it is still
// a 10+x improvement over the original camelcase npm package (at running)
//
// original: 20.88 μs/op
//     this:  2.86 μs/op
//
// Caveat of this: only Ascii, but acceptable for the intended usecase
function converter(fn) {
  const format = (w, i) => fn(w[0], i) + w.slice(1);

  return value => value.toString() // replace all seperators (including consequtive) with spaces
  .replace(/[-_., ]+/g, ' ') // we don't want leading or trailing spaces
  .trim() // split into words
  .split(' ') // apply the formatting
  .map((w, i) => format(w.toUpperCase() === w // all full uppercase + letters are changed to lowercase
  ? w.toLowerCase() // all consecutive capitals + letters are changed to lowercase
  // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
  : w.replace(/^[A-Z0-9]{2,}[^a-z]/, w => w.slice(0, w.length - 1).toLowerCase() + w.slice(-1).toUpperCase()), i)) // combine into a single word
  .join('');
}
/**
 * @name stringCamelCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
 */


const stringCamelCase = converter((w, i) => i ? w.toUpperCase() : w.toLowerCase());
/**
 * @name stringPascalCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
 */

const stringPascalCase = converter(w => w.toUpperCase());
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/typeToConstructor.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

function typeToConstructor(registry, type) {
  return isString(type) ? registry.createClassUnsafe(type) : type;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/mapToTypeMap.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
 */

function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const output = {};

  for (let i = 0; i < entries.length; i++) {
    output[entries[i][0]] = typeToConstructor(registry, entries[i][1]);
  }

  return output;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/typesToMap.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0
function typesToMap(registry, Types) {
  const entries = Object.entries(Types);
  const result = {};

  for (let i = 0; i < entries.length; i++) {
    const [key, Type] = entries[i];
    result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Null.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Null
 * @description
 * Implements a type that does not contain anything (apart from `null`)
 */

class Null {
  // Added for compatibility reasons, e.g. see Option
  initialU8aLength = 0;

  constructor(registry) {
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 0;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    throw new Error('.hash is not implemented on Null');
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */


  get isEmpty() {
    return true;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return other instanceof Null || isNull(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {};
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return '0x';
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return null;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Null';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return '';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return new Uint8Array();
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Enum.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


 // export interface, this is used in Enum.with, so required as public by TS

function isRustEnum(def) {
  const defValues = Object.values(def);

  if (defValues.some(v => isNumber(v))) {
    assert(defValues.every(v => isNumber(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
    return false;
  }

  return true;
}

function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;

  if (Array.isArray(_def)) {
    for (let i = 0; i < _def.length; i++) {
      def[_def[i]] = {
        Type: Null,
        index: i
      };
    }

    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum(_def)) {
    const entries = Object.entries(mapToTypeMap(registry, _def));

    for (let i = 0; i < entries.length; i++) {
      const [key, Type] = entries[i];
      def[key] = {
        Type,
        index: i
      };
    }

    isBasic = !Object.values(def).some(({
      Type
    }) => Type !== Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);

    for (let i = 0; i < entries.length; i++) {
      const [key, index] = entries[i];
      def[key] = {
        Type: Null,
        index
      };
    }

    isBasic = true;
    isIndexed = true;
  }

  return {
    def,
    isBasic,
    isIndexed
  };
}

function createFromValue(registry, def, index = 0, value) {
  const entry = Object.values(def).find(e => e.index === index);
  assert(!isUndefined(entry), () => `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
  return {
    index,
    value: isCodec(value) && value instanceof entry.Type ? value : new entry.Type(registry, value)
  };
}

function decodeFromJSON(registry, def, key, value) {
  // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
  // additionally force to lower to ensure forward compat
  const keys = Object.keys(def).map(k => k.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys.indexOf(keyLower);
  assert(index !== -1, () => `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);

  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error) {
    throw new Error(`Enum(${key}):: ${error.message}`);
  }
}

function decodeEnum(registry, def, value, index) {
  // NOTE We check the index path first, before looking at values - this allows treating
  // the optional indexes before anything else, more-specific > less-specific
  if (isNumber(index)) {
    return createFromValue(registry, def, index, value);
  } else if (isU8a(value) || isHex(value)) {
    const u8a = u8aToU8a(value); // nested, we don't want to match isObject below

    if (u8a.length) {
      return createFromValue(registry, def, u8a[0], u8a.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if (isNumber(value)) {
    return createFromValue(registry, def, value);
  } else if (isString(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if (isObject(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  } // Worst-case scenario, return the first with default


  return createFromValue(registry, def, Object.values(def)[0].index);
}
/**
 * @name Enum
 * @description
 * This implements an enum, that based on the value wraps a different type. It is effectively
 * an extension to enum where the value type is determined by the actual index.
 */


class Enum {
  #def;
  #entryIndex;
  #indexes;
  #isBasic;
  #isIndexed;
  #raw;

  constructor(registry, Types, value, index) {
    const {
      def,
      isBasic,
      isIndexed
    } = extractDef(registry, Types); // shortcut isU8a as used in SCALE decoding

    const decoded = isU8a(value) && value.length && !isNumber(index) ? createFromValue(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
    this.registry = registry;
    this.#def = def;
    this.#isBasic = isBasic;
    this.#isIndexed = isIndexed;
    this.#indexes = Object.values(def).map(({
      index
    }) => index);
    this.#entryIndex = this.#indexes.indexOf(decoded.index) || 0;
    this.#raw = decoded.value;

    if (this.#raw.initialU8aLength) {
      this.initialU8aLength = 1 + this.#raw.initialU8aLength;
    }
  }

  static with(Types) {
    const keys = Array.isArray(Types) ? Types : Object.keys(Types);
    const asKeys = new Array(keys.length);
    const isKeys = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      const name = stringPascalCase(keys[i].replace(' ', '_'));
      asKeys[i] = `as${name}`;
      isKeys[i] = `is${name}`;
    }

    return class extends Enum {
      constructor(registry, value, index) {
        super(registry, Types, value, index);
        objectProperties(this, isKeys, (_, i) => this.type === keys[i]);
        objectProperties(this, asKeys, (k, i) => {
          assert(this[isKeys[i]], () => `Cannot convert '${this.type}' via ${k}`);
          return this.value;
        });
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 1 + this.#raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The index of the enum value
   */


  get index() {
    return this.#indexes[this.#entryIndex];
  }
  /**
   * @description The value of the enum
   */


  get inner() {
    return this.#raw;
  }
  /**
   * @description true if this is a basic enum (no values)
   */


  get isBasic() {
    return this.#isBasic;
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.#raw.isEmpty;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   */


  get isNone() {
    return this.#raw instanceof Null;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   * @deprecated use isNone
   */


  get isNull() {
    return this.isNone;
  }
  /**
   * @description The available keys for this enum
   */


  get defIndexes() {
    return this.#indexes;
  }
  /**
   * @description The available keys for this enum
   */


  get defKeys() {
    return Object.keys(this.#def);
  }
  /**
   * @description The name of the type this enum value represents
   */


  get type() {
    return this.defKeys[this.#entryIndex];
  }
  /**
   * @description The value of the enum
   */


  get value() {
    return this.#raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    // cater for the case where we only pass the enum index
    if (isU8a(other)) {
      return !this.toU8a().some((entry, index) => entry !== other[index]);
    } else if (isNumber(other)) {
      return this.toNumber() === other;
    } else if (this.#isBasic && isString(other)) {
      return this.type === other;
    } else if (isHex(other)) {
      return this.toHex() === other;
    } else if (isCodec(other) && other instanceof Enum) {
      return this.index === other.index && this.value.eq(other.value);
    } else if (isObject(other)) {
      return this.value.eq(other[this.type]);
    } // compare the actual wrapper value


    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    if (this.isBasic) {
      return {
        outer: [new Uint8Array([this.index])]
      };
    }

    const {
      inner,
      outer = []
    } = this.#raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.#isBasic || this.isNone ? this.type : {
      [this.type]: this.#raw.toHuman(isExtended)
    };
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.#isBasic ? this.type : {
      [stringCamelCase(this.type)]: this.#raw.toJSON()
    };
  }
  /**
   * @description Returns the number representation for the value
   */


  toNumber() {
    return this.index;
  }
  /**
   * @description Returns a raw struct representation of the enum types
   */


  _toRawStruct() {
    if (this.#isBasic) {
      return this.#isIndexed ? this.defKeys.reduce((out, key, index) => {
        out[key] = this.#indexes[index];
        return out;
      }, {}) : this.defKeys;
    }

    const typeMap = Object.entries(this.#def).reduce((out, [key, {
      Type
    }]) => {
      out[key] = Type;
      return out;
    }, {});
    return typesToMap(this.registry, typeMap);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return stringify({
      _enum: this._toRawStruct()
    });
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.isNone ? this.type : stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return u8aConcat(new Uint8Array(isBare ? [] : [this.index]), this.#raw.toU8a(isBare));
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/decodeU8a.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


function formatFailure(error, type, u8a, key) {
  return `decodeU8a: failed at ${u8aToHex(u8a)}…${key ? ` on ${key}` : ''}${type ? `: ${type}` : ''}:: ${error.message}`;
}

function getRawType(registry, Type) {
  try {
    return new Type(registry).toRawType();
  } catch {
    return null;
  }
}
/**
 * Given an u8a, and an array of Type constructors, decode the u8a against the
 * types, and return an array of decoded values.
 *
 * @param u8a - The u8a to decode.
 * @param result - The result array (will be returned with values pushed)
 * @param types - The array of CodecClass to decode the U8a against.
 */


function decodeU8a(registry, u8a, types, withZip) {
  const [Types, keys] = Array.isArray(types) ? [types, []] : [Object.values(types), Object.keys(types)];
  const result = new Array(Types.length);
  let offset = 0;

  for (let i = 0; i < Types.length; i++) {
    try {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = withZip ? [keys[i], value] : value;
    } catch (error) {
      throw new Error(formatFailure(error, getRawType(registry, Types[i]), u8a.subarray(offset, offset + 16), keys[i]));
    }
  }

  return [result, offset];
} // Split from decodeU8a since this is specialized to 1 instance ... yes duplication, but
// since we have to do less checks (and these are intensive anyway), much faster

function decodeU8aVec(registry, u8a, start, Type, count) {
  const result = new Array(count);
  let offset = start;

  for (let i = 0; i < count; i++) {
    try {
      const value = new Type(registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
    } catch (error) {
      throw new Error(formatFailure(error, getRawType(registry, Type), u8a.subarray(offset, offset + 16)));
    }
  }

  return [result, offset, offset - start];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Struct.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0



/** @internal */
function decodeStructFromObject(registry, Types, value, jsonMap) {
  let jsonObj;
  const inputKeys = Object.keys(Types);
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  assert(typeofArray || typeofMap || isObject(value), () => `Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
  assert(!typeofArray || value.length === inputKeys.length, () => `Struct: Unable to map ${stringify(value)} array to object with known keys ${inputKeys.join(', ')}`);
  const raw = new Array(inputKeys.length);

  for (let i = 0; i < inputKeys.length; i++) {
    const key = inputKeys[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type = Types[key];
    let assign;

    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];

        if (isUndefined(assign)) {
          if (isUndefined(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};

            for (let e = 0; e < entries.length; e++) {
              jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
            }
          }

          assign = jsonKey && jsonObj[jsonKey];
        }
      }

      raw[i] = [key, assign instanceof Type ? assign : new Type(registry, assign)];
    } catch (error) {
      let type = Type.name;

      try {
        type = new Type(registry).toRawType();
      } catch (error) {// ignore
      }

      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }

  return [raw, 0];
}
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */


class Struct extends Map {
  #registry;
  #jsonMap;
  #Types;

  constructor(registry, Types, value, jsonMap = new Map()) {
    const typeMap = mapToTypeMap(registry, Types);
    const [decoded, decodedLength] = isU8a(value) ? decodeU8a(registry, value, typeMap, true) : isHex(value) ? decodeU8a(registry, u8aToU8a(value), typeMap, true) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
    super(decoded);
    this.#registry = registry;
    this.initialU8aLength = decodedLength;
    this.#jsonMap = jsonMap;
    this.#Types = typeMap;
  }

  static with(Types, jsonMap) {
    const keys = Object.keys(Types);
    return class extends Struct {
      constructor(registry, value) {
        super(registry, Types, value, jsonMap);
        objectProperties(this, keys, k => this.get(k));
      }

    };
  }
  /**
   * @description The available keys for this struct
   */


  get defKeys() {
    return Object.keys(this.#Types);
  }

  getT(key) {
    return this.get(key);
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }

    return true;
  }
  /**
   * @description Returns the Type description of the structure
   */


  get Type() {
    const result = {};
    const defs = Object.entries(this.#Types);

    for (let i = 0; i < defs.length; i++) {
      const [key, Type] = defs[i];
      result[key] = new Type(this.registry).toRawType();
    }

    return result;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (const v of this.values()) {
      total += v.encodedLength;
    }

    return total;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }

  get registry() {
    return this.#registry;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param name The name of the entry to retrieve
   */


  get(name) {
    return super.get(name);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */


  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const inner = new Array();

    for (const [k, v] of this.entries()) {
      inner.push({ ...v.inspect(),
        name: stringCamelCase(k)
      });
    }

    return {
      inner
    };
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */


  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k] = v && v.toHuman(isExtended);
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = {};

    for (const [k, v] of this.entries()) {
      const jsonKey = this.#jsonMap.get(k) || k;
      json[jsonKey] = v && v.toJSON();
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return stringify(typesToMap(this.registry, this.#Types));
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = [];

    for (const [k, v] of this.entries()) {
      if (v && isFunction(v.toU8a)) {
        encoded.push(v.toU8a(!isBare || isBoolean(isBare) ? isBare : isBare[k]));
      }
    }

    return u8aConcat(...encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/sortValues.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal **/
function sortValues_isArrayLike(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
/** @internal **/


function sortValues_isCodec(arg) {
  return isFunction(arg && arg.toU8a);
}
/** @internal **/


function isEnum(arg) {
  return sortValues_isCodec(arg) && isNumber(arg.index) && sortValues_isCodec(arg.value);
}
/** @internal */


function isNumberLike(arg) {
  return isNumber(arg) || isBn(arg) || isBigInt(arg);
}
/** @internal */


function sortArray(a, b) {
  // Vec, Tuple, Bytes etc.
  let sortRes = 0;
  const minLen = Math.min(a.length, b.length);

  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b[i]);

    if (sortRes !== 0) {
      return sortRes;
    }
  }

  return a.length - b.length;
}
/**
* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
*/


function sortAsc(a, b) {
  if (isNumberLike(a) && isNumberLike(b)) {
    return bnToBn(a).cmp(bnToBn(b));
  } else if (a instanceof Map && b instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b.values()));
  } else if (isEnum(a) && isEnum(b)) {
    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
  } else if (sortValues_isArrayLike(a) && sortValues_isArrayLike(b)) {
    return sortArray(a, b);
  } else if (sortValues_isCodec(a) && sortValues_isCodec(b)) {
    // Text, Bool etc.
    return sortAsc(a.toU8a(true), b.toU8a(true));
  }

  throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
  return new Set(Array.from(set).sort(sortAsc));
}
function sortMap(map) {
  return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/Map.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0





const Map_l = logger('Map');
/** @internal */

function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
  const output = new Map();
  const [offset, length] = compactFromU8a(u8a);
  const count = length.toNumber();
  const types = [];

  for (let i = 0; i < count; i++) {
    types.push(KeyClass, ValClass);
  }

  const [values, decodedLength] = decodeU8a(registry, u8a.subarray(offset), types);

  for (let i = 0; i < values.length; i += 2) {
    output.set(values[i], values[i + 1]);
  }

  return [KeyClass, ValClass, output, offset + decodedLength];
}
/** @internal */


function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output = new Map();

  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;

    try {
      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      Map_l.error('Failed to decode key or value:', error.message);
      throw error;
    }
  }

  return [KeyClass, ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */


function decodeMap(registry, keyType, valType, value) {
  const KeyClass = typeToConstructor(registry, keyType);
  const ValClass = typeToConstructor(registry, valType);

  if (!value) {
    return [KeyClass, ValClass, new Map(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if (isObject(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }

  throw new Error('Map: cannot decode type');
}

class CodecMap extends Map {
  #KeyClass;
  #ValClass;
  #type;

  constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
    const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
    super(type === 'BTreeMap' ? sortMap(decoded) : decoded);
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.#KeyClass = KeyClass;
    this.#ValClass = ValClass;
    this.#type = type;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let len = compactToU8a(this.size).length;

    for (const [k, v] of this.entries()) {
      len += k.encodedLength + v.encodedLength;
    }

    return len;
  }
  /**
   * @description Returns a hash of the value
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const inner = new Array();

    for (const [k, v] of this.entries()) {
      inner.push(k.inspect());
      inner.push(v.inspect());
    }

    return {
      inner,
      outer: [compactToU8a(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toHuman(isExtended);
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toJSON();
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `${this.#type}<${this.registry.getClassName(this.#KeyClass) || new this.#KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.#ValClass) || new this.#ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array();

    if (!isBare) {
      encoded.push(compactToU8a(this.size));
    }

    for (const [k, v] of this.entries()) {
      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
    }

    return u8aConcat(...encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/BTreeMap.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

class BTreeMap extends CodecMap {
  static with(keyType, valType) {
    return class extends BTreeMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value, 'BTreeMap');
      }

    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/compareSet.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


function compareSetArray(a, b) {
  // equal number of entries and each entry in the array should match
  return a.size === b.length && !b.some(e => !a.has(e));
} // NOTE These are used internally and when comparing objects, expects that
// when the second is an Set<string, Codec> that the first has to be as well


function compareSet(a, b) {
  if (Array.isArray(b)) {
    return compareSetArray(a, b);
  } else if (b instanceof Set) {
    return compareSetArray(a, [...b.values()]);
  } else if (isObject(b)) {
    return compareSetArray(a, Object.values(b));
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/BTreeSet.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


const BTreeSet_l = logger('BTreeSet');
/** @internal */

function decodeSetFromU8a(registry, ValClass, u8a) {
  const output = new Set();
  const [offset, length] = compactFromU8a(u8a);
  const [values, decodedLength] = decodeU8aVec(registry, u8a, offset, ValClass, length.toNumber());

  for (let i = 0; i < values.length; i++) {
    output.add(values[i]);
  }

  return [ValClass, output, decodedLength];
}
/** @internal */


function decodeSetFromSet(registry, ValClass, value) {
  const output = new Set();
  value.forEach(val => {
    try {
      output.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      BTreeSet_l.error('Failed to decode key or value:', error.message);
      throw error;
    }
  });
  return [ValClass, output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */


function decodeSet(registry, valType, value) {
  const ValClass = typeToConstructor(registry, valType);

  if (!value) {
    return [ValClass, new Set(), 0];
  } else if (isU8a(value) || isHex(value)) {
    return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }

  throw new Error('BTreeSet: cannot decode type');
}

class BTreeSet extends Set {
  #ValClass;

  constructor(registry, valType, rawValue) {
    const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
    super(sortSet(values));
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.#ValClass = ValClass;
  }

  static with(valType) {
    return class extends BTreeSet {
      constructor(registry, value) {
        super(registry, valType, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let len = compactToU8a(this.size).length;

    for (const v of this.values()) {
      len += v.encodedLength;
    }

    return len;
  }
  /**
   * @description Returns a hash of the value
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */


  get strings() {
    return [...super.values()].map(v => v.toString());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return compareSet(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const inner = new Array();

    for (const v of this.values()) {
      inner.push(v.inspect());
    }

    return {
      inner,
      outer: [compactToU8a(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = [];

    for (const v of this.values()) {
      json.push(v.toHuman(isExtended));
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = [];

    for (const v of this.values()) {
      json.push(v.toJSON());
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `BTreeSet<${this.registry.getClassName(this.#ValClass) || new this.#ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array();

    if (!isBare) {
      encoded.push(compactToU8a(this.size));
    }

    for (const v of this.values()) {
      encoded.push(v.toU8a(isBare));
    }

    return u8aConcat(...encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Compact.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name Compact
 * @description
 * A compact length-encoding codec wrapper. It performs the same function as Length, however
 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
 * a number and making the compact representation thereof
 */

class Compact {
  #Type;
  #raw;

  constructor(registry, Type, value = 0) {
    this.registry = registry;
    this.#Type = typeToConstructor(registry, Type);
    const [raw, decodedLength] = Compact.decodeCompact(registry, this.#Type, value);
    this.initialU8aLength = decodedLength;
    this.#raw = raw;
  }

  static with(Type) {
    return class extends Compact {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /** @internal */


  static decodeCompact(registry, Type, value) {
    if (isU8a(value)) {
      const [decodedLength, bn] = compactFromU8a(value);
      return [new Type(registry, bn), decodedLength];
    } else if (value instanceof Compact) {
      return [new Type(registry, value.#raw), 0];
    } else if (value instanceof Type) {
      return [value, 0];
    }

    return [new Type(registry, value), 0];
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.#raw.isEmpty;
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return this.#raw.bitLength();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this.#raw.eq(other instanceof Compact ? other.#raw : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a BigInt representation of the number
   */


  toBigInt() {
    return this.#raw.toBigInt();
  }
  /**
   * @description Returns the BN representation of the number
   */


  toBn() {
    return this.#raw.toBn();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex(isLe) {
    return this.#raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.#raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.#raw.toJSON();
  }
  /**
   * @description Returns the number representation for the value
   */


  toNumber() {
    return this.#raw.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Compact<${this.registry.getClassName(this.#Type) || this.#raw.toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.#raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return compactToU8a(this.#raw.toBn());
  }
  /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */


  unwrap() {
    return this.#raw;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/HashMap.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

class HashMap extends CodecMap {
  static with(keyType, valType) {
    return class extends HashMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value);
      }

    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/toHex.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




const ZERO_STR = '0x00';
const toHex_DEFAULT_OPTS = {
  bitLength: -1,
  isLe: false,
  isNegative: false
};
/**
 * @name bnToHex
 * @summary Creates a hex value from a BN.js bignumber object.
 * @description
 * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToHex } from '@polkadot/util';
 *
 * bnToHex(new BN(0x123456)); // => '0x123456'
 * ```
 */

/** @deprecated Use bnToHex (value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */
function bnToHex(value, arg1 = toHex_DEFAULT_OPTS, arg2) {
  return !value ? ZERO_STR : u8aToHex(bnToU8a(value, objectSpread( // We spread here, the default for hex values is BE (JSONRPC via substrate)
  {
    isLe: false,
    isNegative: false
  }, isNumber(arg1) ? {
    bitLength: arg1,
    isLe: arg2
  } : arg1)));
}


;// CONCATENATED MODULE: ./node_modules/@polkadot/util/format/formatDecimal.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line prefer-regex-literals
const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
function formatDecimal(value) {
  // We can do this by adjusting the regx, however for the sake of clarity
  // we rather strip and re-add the negative sign in the output
  const isNegative = value[0].startsWith('-');
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/format/si.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SI_MID = 8;
const SI = [{
  power: -24,
  text: 'yocto',
  value: 'y'
}, {
  power: -21,
  text: 'zepto',
  value: 'z'
}, {
  power: -18,
  text: 'atto',
  value: 'a'
}, {
  power: -15,
  text: 'femto',
  value: 'f'
}, {
  power: -12,
  text: 'pico',
  value: 'p'
}, {
  power: -9,
  text: 'nano',
  value: 'n'
}, {
  power: -6,
  text: 'micro',
  value: 'µ'
}, {
  power: -3,
  text: 'milli',
  value: 'm'
}, {
  power: 0,
  text: 'Unit',
  value: '-'
}, // position 8
{
  power: 3,
  text: 'Kilo',
  value: 'k'
}, {
  power: 6,
  text: 'Mill',
  value: 'M'
}, // Mega, M
{
  power: 9,
  text: 'Bill',
  value: 'B'
}, // Giga, G
{
  power: 12,
  text: 'Tril',
  value: 'T'
}, // Tera, T
{
  power: 15,
  text: 'Peta',
  value: 'P'
}, {
  power: 18,
  text: 'Exa',
  value: 'E'
}, {
  power: 21,
  text: 'Zeta',
  value: 'Z'
}, {
  power: 24,
  text: 'Yotta',
  value: 'Y'
}]; // Given a SI type (e.g. k, m, Y) find the SI definition

function findSi(type) {
  // use a loop here, better RN support (which doesn't have [].find)
  for (let i = 0; i < SI.length; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }

  return SI[SI_MID];
}
function calcSi(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }

  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/format/formatBalance.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0





const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = SI[SI_MID].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;

function getUnits(si, withSi, withSiFull, withUnit) {
  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
  return withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${unit}` : '' : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}` : '';
}

function getPrePost(text, decimals, forceUnit) {
  // NOTE We start at midpoint (8) minus 1 - this means that values display as
  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil
  // so there are at most 3 decimal before the decimal separator
  const si = calcSi(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const prefix = text.substring(0, mid);
  const padding = mid < 0 ? 0 - mid : 0;
  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substring(mid < 0 ? 0 : mid)}0000`.substring(0, 4);
  return [si, prefix || '0', postfix];
} // Formats a string/number with <prefix>.<postfix><type> notation


function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
  let text = bnToBn(input).toString();

  if (text.length === 0 || text === '0') {
    return '0';
  } // extract options - the boolean case is for backwards-compat


  const {
    decimals = optDecimals,
    forceUnit = undefined,
    withSi = true,
    withSiFull = false,
    withUnit = true
  } = isBoolean(options) ? {
    withSi: options
  } : options; // strip the negative sign so we can work with clean groupings, re-add this in the
  // end when we return the result (from here on we work with positive numbers)

  let sign = '';

  if (text[0].startsWith('-')) {
    sign = '-';
    text = text.substring(1);
  }

  const [si, prefix, postfix] = getPrePost(text, decimals, forceUnit);
  const units = getUnits(si, withSi, withSiFull, withUnit);
  return `${sign}${formatDecimal(prefix)}.${postfix}${units}`;
}

const formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method

formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method

formatBalance.getDefaults = () => {
  return {
    decimals: defaultDecimals,
    unit: defaultUnit
  };
}; // get allowable options to display in a dropdown
// eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.getOptions = (decimals = defaultDecimals) => {
  return SI.filter(({
    power
  }) => power < 0 ? decimals + power >= 0 : true);
}; // Sets the default decimals to use for formatting (ui-wide)
// eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.setDefaults = ({
  decimals,
  unit
}) => {
  defaultDecimals = isUndefined(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
  defaultUnit = isUndefined(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
  SI[SI_MID].text = defaultUnit;
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/format/formatNumber.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


function formatNumber(value) {
  return formatDecimal(bnToBn(value).toString());
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/abstract/AbstractInt.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
// In this case however, we always print any >32 as hex

const MAX_NUMBER_BITS = 52;
const MUL_P = new lib_bn(10000);
const FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];

function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
/** @internal */


function decodeAbstractInt(value, isNegative) {
  if (isBn(value)) {
    return value.toString();
  } else if (isHex(value, -1, true)) {
    return hexToBn(value, {
      isLe: false,
      isNegative
    }).toString();
  } else if (isNumber(value)) {
    assert(value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER && Math.floor(value) === value, 'Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1');
  } else if (isString(value)) {
    assert(!(value.includes('.') || value.includes(',') || value.includes('e')), 'String should not contain decimal points or scientific notation');
  }

  return bnToBn(value).toString();
}
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */


class AbstractInt extends lib_bn {
  #bitLength;
  #isSigned;

  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
    // Construct via a string, which will be passed in the BN constructor.
    // It would be ideal to actually return a BN, but there is an issue:
    // https://github.com/indutny/bn.js/issues/206
    super( // shortcut isU8a as used in SCALE decoding
    isU8a(value) ? u8aToBn(value.subarray(0, bitLength / 8), {
      isLe: true,
      isNegative: isSigned
    }).toString() : decodeAbstractInt(value, isSigned));
    this.registry = registry;
    this.#bitLength = bitLength;
    this.encodedLength = this.#bitLength / 8;
    this.#isSigned = isSigned;
    const isPositive = this.gte(BN_ZERO);
    const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
    assert(isSigned || isPositive, () => `${this.toRawType()}: Negative number passed to unsigned type`);
    assert(super.bitLength() <= maxBits, () => `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */


  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Checks if the value is an unsigned type
   */


  get isUnsigned() {
    return !this.#isSigned;
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return this.#bitLength;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  eq(other) {
    // Here we are actually overriding the built-in .eq to take care of both
    // number and BN inputs (no `.eqn` needed) - numbers will be converted
    return super.eq(isHex(other) ? hexToBn(other.toString(), {
      isLe: false,
      isNegative: this.#isSigned
    }) : bnToBn(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description True if this value is the max of the type
   */


  isMax() {
    const u8a = this.toU8a().filter(b => b === 0xff);
    return u8a.length === this.#bitLength / 8;
  }
  /**
   * @description Returns a BigInt representation of the number
   */


  toBigInt() {
    return BigInt(this.toString());
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */


  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex(isLe = false) {
    // For display/JSON, this is BE, for compare, use isLe
    return bnToHex(this, {
      bitLength: this.bitLength(),
      isLe,
      isNegative: !this.isUnsigned
    });
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toHuman(isExpanded) {
    const rawType = this.toRawType();

    if (rawType === 'Balance') {
      return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs
      // to. as it stands we will always format (incorrectly) against the first token defined
      : formatBalance(this, {
        decimals: this.registry.chainDecimals[0],
        withSi: true,
        withUnit: this.registry.chainTokens[0]
      });
    }

    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
    return divisor ? toPercentage(this, divisor) : formatNumber(this);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON(onlyHex = false) {
    // FIXME this return type should by string | number, however BN returns string
    // Options here are
    //   - super.bitLength() - the actual used bits
    //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
    return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    // NOTE In the case of balances, which have a special meaning on the UI
    // and can be interpreted differently, return a specific value for it so
    // underlying it always matches (no matter which length it actually is)
    return this instanceof this.registry.createClassUnsafe('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
  }
  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */


  toString(base) {
    // only included here since we do not inherit docs
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return bnToU8a(this, {
      bitLength: this.bitLength(),
      isLe: true,
      isNegative: !this.isUnsigned
    });
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Int.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Int
 * @description
 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */

class Int extends AbstractInt {
  constructor(registry, value = 0, bitLength) {
    super(registry, value, bitLength, true);
  }

  static with(bitLength, typeName) {
    return class extends Int {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Option.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0




class None extends Null {
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return 'None';
  }

}
/** @internal */


function decodeOption(registry, Type, value) {
  // In the case of an option, unwrap the inner
  if (value instanceof Option) {
    value = value.value;
  }

  if (isNull(value) || isUndefined(value) || value === '0x' || value instanceof None) {
    return new None(registry);
  } else if (value instanceof Type) {
    // don't re-create, use as it (which also caters for derived types)
    return value;
  } else if (isU8a(value)) {
    // the isU8a check happens last in the if-tree - since the wrapped value
    // may be an instance of it, so Type and Option checks go in first
    return !value.length || value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1));
  }

  return new Type(registry, value);
}
/**
 * @name Option
 * @description
 * An Option is an optional field. Basically the first byte indicates that there is
 * is value to follow. If the byte is `1` there is an actual value. So the Option
 * implements that - decodes, checks for optionality and wraps the required structure
 * with a value if/as required/found.
 */


class Option {
  #Type;
  #initialU8aLength;
  #raw;

  constructor(registry, typeName, value) {
    const Type = typeToConstructor(registry, typeName);
    const decoded = isU8a(value) && value.length && !isCodec(value) ? value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1)) : decodeOption(registry, Type, value);
    this.registry = registry;
    this.#Type = Type;
    this.#raw = decoded;

    if (decoded && decoded.initialU8aLength) {
      this.#initialU8aLength = 1 + decoded.initialU8aLength;
    }
  }

  static with(Type) {
    return class extends Option {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    // boolean byte (has value, doesn't have) along with wrapped length
    return 1 + this.#raw.encodedLength;
  }
  /**
   * @description The length of the initial encoded value (Only available when constructed from a Uint8Array)
   */


  get initialU8aLength() {
    return this.#initialU8aLength;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the Option has no value
   */


  get isEmpty() {
    return this.isNone;
  }
  /**
   * @description Checks if the Option has no value
   */


  get isNone() {
    return this.#raw instanceof None;
  }
  /**
   * @description Checks if the Option has a value
   */


  get isSome() {
    return !this.isNone;
  }
  /**
   * @description The actual value for the Option
   */


  get value() {
    return this.#raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    if (other instanceof Option) {
      return this.isSome === other.isSome && this.value.eq(other.value);
    }

    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    if (this.isNone) {
      return {
        outer: [new Uint8Array([0])]
      };
    }

    const {
      inner,
      outer = []
    } = this.#raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([1]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    // This attempts to align with the JSON encoding - actually in this case
    // the isSome value is correct, however the `isNone` may be problematic
    return this.isNone ? '0x' : u8aToHex(this.toU8a().subarray(1));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.#raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.isNone ? null : this.#raw.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType(isBare) {
    const wrapped = this.registry.getClassName(this.#Type) || new this.#Type(this.registry).toRawType();
    return isBare ? wrapped : `Option<${wrapped}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.#raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    if (isBare) {
      return this.#raw.toU8a(true);
    }

    const u8a = new Uint8Array(this.encodedLength);

    if (this.isSome) {
      u8a.set([1]);
      u8a.set(this.#raw.toU8a(), 1);
    }

    return u8a;
  }
  /**
   * @description Returns the value that the Option represents (if available), throws if null
   */


  unwrap() {
    assert(this.isSome, 'Option: unwrapping a None value');
    return this.#raw;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */


  unwrapOr(defaultValue) {
    return this.isSome ? this.unwrap() : defaultValue;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */


  unwrapOrDefault() {
    return this.isSome ? this.unwrap() : new this.#Type(this.registry);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Tuple.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0




/** @internal */
function decodeTuple(registry, Classes, value) {
  if (isU8a(value) || isHex(value)) {
    return decodeU8a(registry, u8aToU8a(value), Classes);
  }

  const Types = Array.isArray(Classes) ? Classes : Object.values(Classes);
  return [Types.map((Type, index) => {
    try {
      const entry = value === null || value === void 0 ? void 0 : value[index];

      if (entry instanceof Type) {
        return entry;
      }

      return new Type(registry, entry);
    } catch (error) {
      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
    }
  }), 0];
}
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */


class Tuple extends AbstractArray {
  #Types;

  constructor(registry, Types, value) {
    const Classes = Array.isArray(Types) ? Types.map(t => typeToConstructor(registry, t)) : isFunction(Types) || isString(Types) ? [typeToConstructor(registry, Types)] : mapToTypeMap(registry, Types);
    const [values, decodedLength] = isU8a(value) ? decodeU8a(registry, value, Classes) : decodeTuple(registry, Classes, value);
    super(registry, values, decodedLength);
    this.#Types = Classes;
  }

  static with(Types) {
    return class extends Tuple {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description The types definition of the tuple
   */


  get Types() {
    return Array.isArray(this.#Types) ? this.#Types.map(T => new T(this.registry).toRawType()) : Object.keys(this.#Types);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    const types = (Array.isArray(this.#Types) ? this.#Types : Object.values(this.#Types)).map(T => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types.join(',')})`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    // Overwrite the default toString representation of Array.
    return stringify(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return u8aConcat(...this.toU8aInner(isBare));
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/Range.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */
class Range extends Tuple {
  #rangeName;

  constructor(registry, Type, value, rangeName = 'Range') {
    super(registry, {
      end: Type,
      start: Type
    }, value);
    this.#rangeName = rangeName;
  }

  static with(Types) {
    return class extends Range {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }
  /**
   * @description Returns the starting range value
   */


  get start() {
    return this[0];
  }
  /**
   * @description Returns the ending range value
   */


  get end() {
    return this[1];
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `${this.#rangeName}<${this.start.toRawType()}>`;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/RangeInclusive.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

class RangeInclusive extends Range {
  constructor(registry, Type, value) {
    super(registry, Type, value, 'RangeInclusive');
  }

  static with(Type) {
    return class extends RangeInclusive {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Result.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name Result
 * @description
 * A Result maps to the Rust Result type, that can either wrap a success or error value
 */

class Result extends Enum {
  constructor(registry, Ok, Err, value) {
    // NOTE This is order-dependent, Ok (with index 0) needs to be first
    // eslint-disable-next-line sort-keys
    super(registry, {
      Ok,
      Err
    }, value);
  }

  static with(Types) {
    return class extends Result {
      constructor(registry, value) {
        super(registry, Types.Ok, Types.Err, value);
      }

    };
  }
  /**
   * @description Returns the wrapper Err value (if isErr)
   */


  get asErr() {
    assert(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');
    return this.value;
  }
  /**
   * @deprecated Use asErr
   */


  get asError() {
    return this.asErr;
  }
  /**
   * @description Returns the wrapper Ok value (if isOk)
   */


  get asOk() {
    assert(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');
    return this.value;
  }
  /**
   * @description Checks if the Result has no value
   */


  get isEmpty() {
    return this.isOk && this.value.isEmpty;
  }
  /**
   * @description Checks if the Result wraps an Err value
   */


  get isErr() {
    return !this.isOk;
  }
  /**
   * @deprecated Use isErr
   */


  get isError() {
    return this.isErr;
  }
  /**
   * @description Checks if the Result wraps an Ok value
   */


  get isOk() {
    return this.index === 0;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    const Types = this._toRawStruct();

    return `Result<${Types.Ok},${Types.Err}>`;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Set.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0



function encodeSet(setValues, values) {
  const encoded = new lib_bn(0);

  for (let i = 0; i < values.length; i++) {
    encoded.ior(bnToBn(setValues[values[i]] || 0));
  }

  return encoded;
}
/** @internal */


function decodeSetArray(setValues, values) {
  const result = new Array(values.length);

  for (let i = 0; i < values.length; i++) {
    const key = values[i];
    assert(!isUndefined(setValues[key]), () => `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
    result[i] = key;
  }

  return result;
}
/** @internal */


function decodeSetNumber(setValues, _value) {
  const bn = bnToBn(_value);
  const keys = Object.keys(setValues);
  const result = [];

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
      result.push(key);
    }
  }

  const computed = encodeSet(setValues, result);
  assert(bn.eq(computed), () => `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
  return result;
}
/** @internal */


function Set_decodeSet(setValues, value = 0, bitLength) {
  assert(bitLength % 8 === 0, () => `Expected valid bitLength, power of 8, found ${bitLength}`);
  const byteLength = bitLength / 8;

  if (isU8a(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {
      isLe: true
    }));
  } else if (isString(value)) {
    return Set_decodeSet(setValues, u8aToU8a(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }

  return decodeSetNumber(setValues, value);
}
/**
 * @name Set
 * @description
 * An Set is an array of string values, represented an an encoded type by
 * a bitwise representation of the values.
 */


class CodecSet extends Set {
  #allowed;
  #byteLength;

  constructor(registry, setValues, value, bitLength = 8) {
    super(Set_decodeSet(setValues, value, bitLength));
    this.registry = registry;
    this.#allowed = setValues;
    this.#byteLength = bitLength / 8;
  }

  static with(values, bitLength) {
    const keys = Object.keys(values);
    const isKeys = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      isKeys[i] = `is${stringPascalCase(keys[i])}`;
    }

    return class extends CodecSet {
      constructor(registry, value) {
        super(registry, values, value, bitLength);
        objectProperties(this, isKeys, (_, i) => this.strings.includes(keys[i]));
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.#byteLength;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description true is the Set contains no values
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */


  get strings() {
    return [...super.values()];
  }
  /**
   * @description The encoded value for the set members
   */


  get valueEncoded() {
    return encodeSet(this.#allowed, this.strings);
  }
  /**
   * @description adds a value to the Set (extended to allow for validity checking)
   */


  add = key => {
    // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
    // we have the isUndefined(this._setValues) in here as well, add is used internally
    // in the Set constructor (so it is undefined at this point, and should allow)
    assert(isUndefined(this.#allowed) || !isUndefined(this.#allowed[key]), () => `Set: Invalid key '${key}' on add`);
    super.add(key);
    return this;
  };
  /**
   * @description Compares the value of the input to see if there is a match
   */

  eq(other) {
    if (Array.isArray(other)) {
      // we don't actually care about the order, sort the values
      return compareArray(this.strings.sort(), other.sort());
    } else if (other instanceof Set) {
      return this.eq([...other.values()]);
    } else if (isNumber(other) || isBn(other)) {
      return this.valueEncoded.eq(bnToBn(other));
    }

    return false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.strings;
  }
  /**
   * @description The encoded value for the set members
   */


  toNumber() {
    return this.valueEncoded.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return stringify({
      _set: this.#allowed
    });
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return `[${this.strings.join(', ')}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return bnToU8a(this.valueEncoded, {
      bitLength: this.#byteLength * 8,
      isLe: true
    });
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/UInt.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name UInt
 * @description
 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */

class UInt extends AbstractInt {
  static with(bitLength, typeName) {
    return class extends UInt {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/compact/addLength.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name compactAddLength
 * @description Adds a length prefix to the input value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactAddLength } from '@polkadot/util';
 *
 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
 * ```
 */

function compactAddLength(input) {
  return u8aConcat(compactToU8a(input.length), input);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/Bytes.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // Bytes are used for things like on-chain code, so it has a healthy limit

const MAX_LENGTH = 10 * 1024 * 1024;
/** @internal */

function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  } // handle all other Uint8Array inputs, these do have a length prefix


  const [offset, length] = compactFromU8a(value);
  const total = offset + length.toNumber();
  assert(length.lten(MAX_LENGTH), () => `Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
  assert(total <= value.length, () => `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  return [value.subarray(offset, total), total];
}
/**
 * @name Bytes
 * @description
 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
 * as what is found in [[Text]] and [[Vec]])
 */


class Bytes extends Raw {
  constructor(registry, value) {
    const [u8a, decodedLength] = isU8a(value) && !(isCodec(value) && value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString(value) ? [u8aToU8a(value), 0] : [value, 0];
    super(registry, u8a, decodedLength);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length + compactToU8a(this.length).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const clength = compactToU8a(this.length);
    return {
      outer: this.length ? [clength, super.toU8a()] : [clength]
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Bytes';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return isBare ? super.toU8a(isBare) : compactAddLength(this);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Vec.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0



const Vec_MAX_LENGTH = 64 * 1024;
const Vec_l = logger('Vec');
function decodeVec(registry, Type, value, length = -1) {
  if (Array.isArray(value)) {
    const result = new Array(value.length);

    for (let i = 0; i < value.length; i++) {
      const entry = value[i];

      try {
        result[i] = entry instanceof Type ? entry : new Type(registry, entry);
      } catch (error) {
        Vec_l.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }

    return [result, 0, 0];
  }

  const u8a = u8aToU8a(value);
  let offset = 0;

  if (length === -1) {
    const [_offset, _length] = compactFromU8a(u8a);
    assert(_length.lten(Vec_MAX_LENGTH), () => `Vec length ${_length.toString()} exceeds ${Vec_MAX_LENGTH}`);
    length = _length.toNumber();
    offset = _offset;
  }

  return decodeU8aVec(registry, u8a, offset, Type, length);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */

class Vec extends AbstractArray {
  #Type;

  constructor(registry, Type, value = []) {
    const Clazz = typeToConstructor(registry, Type);
    const [values, decodedLength] = decodeVec(registry, Clazz, value);
    super(registry, values, decodedLength);
    this.#Type = Clazz;
  }

  static with(Type) {
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return this.#Type.name;
  }
  /**
   * @description Finds the index of the value in the array
   */


  indexOf(_other) {
    // convert type first, this removes overhead from the eq
    const other = _other instanceof this.#Type ? _other : new this.#Type(this.registry, _other);

    for (let i = 0; i < this.length; i++) {
      if (other.eq(this[i])) {
        return i;
      }
    }

    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Vec<${this.registry.getClassName(this.#Type) || new this.#Type(this.registry).toRawType()}>`;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/U8aFixed.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */

function decodeU8aFixed(value, bitLength) {
  const u8a = u8aToU8a(value);
  const byteLength = bitLength / 8;

  if (!u8a.length) {
    return [new Uint8Array(byteLength), 0];
  }

  assert(isU8a(value) ? u8a.length >= byteLength : u8a.length === byteLength, () => `Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
  return [u8a.subarray(0, byteLength), byteLength];
}
/**
 * @name U8aFixed
 * @description
 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
 * to be used directly, rather is should be subclassed with the specific lengths.
 */


class U8aFixed extends Raw {
  constructor(registry, value = new Uint8Array(), bitLength = 256) {
    const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
    super(registry, u8a, decodedLength);
  }

  static with(bitLength, typeName) {
    return class extends U8aFixed {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `[u8;${this.length}]`;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/VecFixed.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0




/** @internal */

function decodeVecFixed(registry, value, Type, length) {
  const [values, decodedLength, decodedLengthNoOffset] = decodeVec(registry, Type, value, length);

  while (values.length < length) {
    values.push(new Type(registry));
  }

  assert(values.length === length, () => `Expected a length of exactly ${length} entries`);
  return [values, decodedLength, decodedLengthNoOffset];
}
/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */


class VecFixed extends AbstractArray {
  #Type;

  constructor(registry, Type, length, value = []) {
    const Clazz = typeToConstructor(registry, Type);
    const [values,, decodedLengthNoOffset] = isU8a(value) ? decodeU8aVec(registry, value, 0, Clazz, length) : decodeVecFixed(registry, value, Clazz, length);
    super(registry, values, decodedLengthNoOffset);
    this.#Type = Clazz;
  }

  static with(Type, length) {
    return class extends VecFixed {
      constructor(registry, value) {
        super(registry, Type, length, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return new this.#Type(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      inner: this.inspectInner()
    };
  }

  toU8a() {
    // we override, we don't add the length prefix for ourselves, and at the same time we
    // ignore isBare on entries, since they should be properly encoded at all times
    const encoded = this.toU8aInner();
    return encoded.length ? u8aConcat(...encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `[${this.Type};${this.length}]`;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/compact/stripLength.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name compactStripLength
 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactStripLength } from '@polkadot/util';
 *
 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
 * ```
 */

function compactStripLength(input) {
  const [offset, length] = compactFromU8a(input);
  const total = offset + length.toNumber();
  return [total, input.subarray(offset, total)];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0





function decodeRaw(registry, typeName, value) {
  const Type = typeToConstructor(registry, typeName);

  if (isU8a(value) || isHex(value)) {
    try {
      const [, u8a] = isHex(value) || value instanceof Raw ? [0, value] : compactStripLength(value);
      return [Type, new Type(registry, u8a), value];
    } catch {
      return [Type, null, value];
    }
  }

  const instance = new Type(registry, value);
  return [Type, instance, compactAddLength(instance.toU8a())];
}

class WrapperKeepOpaque extends Bytes {
  #Type;
  #decoded;
  #opaqueName;

  constructor(registry, typeName, value, opaqueName = 'WrapperKeepOpaque') {
    const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
    super(registry, u8a);
    this.#Type = Type;
    this.#decoded = decoded;
    this.#opaqueName = opaqueName;
  }

  static with(Type) {
    return class extends WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */


  get isDecoded() {
    return !!this.#decoded;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return this.#decoded ? {
      inner: [this.#decoded.inspect()],
      outer: [compactToU8a(this.length)]
    } : {
      outer: [compactToU8a(this.length), this.toU8a(true)]
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.#decoded ? this.#decoded.toHuman(isExtended) : super.toHuman();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `${this.#opaqueName}<${this.registry.getClassName(this.#Type) || (this.#decoded ? this.#decoded.toRawType() : new this.#Type(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */


  toString() {
    return this.#decoded ? this.#decoded.toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */


  unwrap() {
    return assertReturn(this.#decoded, () => `${this.#opaqueName}: unwrapping an undecodable value`);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

class WrapperOpaque extends WrapperKeepOpaque {
  constructor(registry, typeName, value) {
    super(registry, typeName, value, 'WrapperOpaque');
  }

  static with(Type) {
    return class extends WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
   */


  get inner() {
    return this.unwrap();
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/types/types.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0
let TypeDefInfo;

(function (TypeDefInfo) {
  TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
  TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
  TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
  TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
  TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
  TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
  TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
  TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
  TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
  TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
  TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
  TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
  TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
  TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
  TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
  TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
  TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
  TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
  TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
  TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
  TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
  TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
  TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/utils/sanitize.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt', 'WrapperKeepOpaque', 'WrapperOpaque']);
const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple

const mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>
cleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>
removeExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>
removeExtensions('Weak', false), // Remove all the trait prefixes
removeTraits(), // remove PairOf<T> -> (T, T)
removePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`
removeWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
removeGenerics(), // alias String -> Text (compat with jsonrpc methods)
alias('String', 'Text'), // alias Vec<u8> -> Bytes
alias('Vec<u8>', 'Bytes'), alias('&\\[u8\\]', 'Bytes'), alias("&'static\\[u8\\]", 'Bytes'), // alias RawAddress -> Address
alias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime
alias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec
alias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`
flattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
removeColons()]; // given a starting index, find the closing >

function findClosing(value, start) {
  let depth = 0;

  for (let index = start; index < value.length; index++) {
    if (value[index] === '>') {
      if (!depth) {
        return index;
      }

      depth--;
    } else if (value[index] === '<') {
      depth++;
    }
  }

  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
  const from = new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g');

  const to = src => {
    from.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest;
  };

  return value => value.replace(from, to);
}
function cleanupCompact() {
  return value => {
    for (let index = 0; index < value.length; index++) {
      if (value[index] === '<') {
        const end = findClosing(value, index + 1) - 14;

        if (value.substring(end, end + 14) === ' as HasCompact') {
          value = `Compact<${value.substring(index + 1, end)}>`;
        }
      }
    }

    return value;
  };
}
function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return value => {
    from1.lastIndex = 0;
    return value // tuples may have trailing commas, e.g. (u32, BlockNumber, )
    .replace(from1, ')') // change (u32) -> u32
    .replace(from2, '$1');
  };
}

function replaceTagWith(value, matcher, replacer) {
  let index = -1;

  while (true) {
    index = value.indexOf(matcher, index + 1);

    if (index === -1) {
      return value;
    }

    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
  }
} // remove the Bounded* or Weak* wrappers


function removeExtensions(type, isSized) {
  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `${type}${tag}<`, inner => {
    const parts = inner.split(',').map(s => s.trim()).filter(s => s);

    if (isSized) {
      parts.pop();
    }

    return `${tag}<${parts.join(',')}>`;
  }), value);
}
function removeColons() {
  return (value, {
    allowNamespaces
  } = {}) => {
    let index = 0;

    while (index !== -1) {
      index = value.indexOf('::');

      if (index === 0) {
        value = value.substring(2);
      } else if (index !== -1) {
        if (allowNamespaces) {
          return value;
        }

        let start = index;

        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }

        value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
      }
    }

    return value;
  };
}
function removeGenerics() {
  return value => {
    for (let index = 0; index < value.length; index++) {
      if (value[index] === '<') {
        // check against the allowed wrappers, be it Vec<..>, Option<...> ...
        const box = ALLOWED_BOXES.find(box => {
          const start = index - box.length;
          return start >= 0 && value.substring(start, start + box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        }); // we have not found anything, unwrap generic innards

        if (!box) {
          const end = findClosing(value, index + 1);
          value = `${value.substring(0, index)}${value.substring(end + 1)}`;
        }
      }
    }

    return value;
  };
} // remove the PairOf wrappers

function removePairOf() {
  const replacer = inner => `(${inner},${inner})`;

  return value => replaceTagWith(value, 'PairOf<', replacer);
} // remove the type traits

function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return value => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value // remove all whitespaces
    .replace(from1, '') // anything `T::<type>` to end up as `<type>`
    .replace(from2, '') // replace `<T as Trait>::` (whitespaces were removed above)
    .replace(from3, '') // replace `<T as something::Trait>::` (whitespaces were removed above)
    .replace(from4, '') // replace <Lookup as StaticLookup>
    .replace(from5, 'Lookup') // replace `<...>::Type`
    .replace(from6, '');
  };
} // remove wrapping values, i.e. Box<Proposal> -> Proposal

function removeWrap(check) {
  const replacer = inner => inner;

  return value => replaceTagWith(value, check, replacer);
}
const sanitizeMap = new Map(); // eslint-disable-next-line @typescript-eslint/ban-types

function sanitize(value, options) {
  let result = value.toString();

  if (!options) {
    const memoized = sanitizeMap.get(result);

    if (memoized) {
      return memoized;
    }
  }

  for (let i = 0; i < mappings.length; i++) {
    result = mappings[i](result, options);
  }

  result = result.trim();

  if (!options) {
    sanitizeMap.set(value.toString(), result);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/util/typeSplit.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0


function isNotNested(...counters) {
  return !counters.some(counter => counter !== 0);
} // safely split a string on ', ' while taking care of any nested occurences


function typeSplit(type) {
  let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
  const result = [];

  const extract = index => {
    if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
      result.push(type.substring(start, index).trim());
      start = index + 1;
    }
  };

  for (let index = 0; index < type.length; index++) {
    switch (type[index]) {
      // if we are not nested, add the type
      case ',':
        extract(index);
        break;
      // adjust compact/vec (and friends) depth

      case '<':
        cDepth++;
        break;

      case '>':
        cDepth--;
        break;
      // adjust fixed vec depths

      case '[':
        fDepth++;
        break;

      case ']':
        fDepth--;
        break;
      // adjust struct depth

      case '{':
        sDepth++;
        break;

      case '}':
        sDepth--;
        break;
      // adjust tuple depth

      case '(':
        tDepth++;
        break;

      case ')':
        tDepth--;
        break;
    }
  }

  assert(isNotNested(cDepth, fDepth, sDepth, tDepth), () => `Invalid definition (missing terminators) found in ${type}`); // the final leg of the journey

  result.push(type.substring(start, type.length).trim());
  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/util/getTypeDef.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0




const MAX_NESTED = 64;
const KNOWN_INTERNALS = ['_alias', '_fallback'];

function getTypeString(typeOrObj) {
  return isString(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
}

function getTypeDef_isRustEnum(details) {
  const values = Object.values(details);

  if (values.some(v => isNumber(v))) {
    assert(values.every(v => isNumber(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
    return false;
  }

  return true;
} // decode an enum of either of the following forms
//  { _enum: ['A', 'B', 'C'] }
//  { _enum: { A: AccountId, B: Balance, C: u32 } }
//  { _enum: { A: 1, B: 2 } }


function _decodeEnum(value, details, count, fallbackType) {
  value.info = TypeDefInfo.Enum;
  value.fallbackType = fallbackType; // not as pretty, but remain compatible with oo7 for both struct and Array types

  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
  } else if (getTypeDef_isRustEnum(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || 'Null'), {
      name
    }, count), {
      index
    }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
  }

  return value;
} // decode a set of the form
//   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }


function _decodeSet(value, details, fallbackType) {
  value.info = TypeDefInfo.Set;
  value.fallbackType = fallbackType;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
    index,
    info: TypeDefInfo.Plain,
    name,
    type: 'Null'
  }));
  return value;
} // decode a struct, set or enum
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeStruct(value, type, _, count) {
  const parsed = JSON.parse(type);
  const keys = Object.keys(parsed);

  if (keys.includes('_enum')) {
    return _decodeEnum(value, parsed._enum, count, parsed._fallback);
  } else if (keys.includes('_set')) {
    return _decodeSet(value, parsed._set, parsed._fallback);
  }

  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
  value.fallbackType = parsed._fallback;
  value.sub = keys.filter(name => !KNOWN_INTERNALS.includes(name)).map(name => getTypeDef(getTypeString(parsed[name]), {
    name
  }, count));
  return value;
} // decode a fixed vector, e.g. [u8;32]
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeFixedVec(value, type, _, count) {
  const max = type.length - 1;
  let index = -1;
  let inner = 0;

  for (let i = 1; i < max && index === -1; i++) {
    if (type[i] === ';' && inner === 0) {
      index = i;
    } else if (['[', '(', '<'].includes(type[i])) {
      inner++;
    } else if ([']', ')', '>'].includes(type[i])) {
      inner--;
    }
  }

  assert(index !== -1, () => `${type}: Unable to extract location of ';'`);
  const vecType = type.substring(1, index);
  const [strLength, displayName] = type.substring(index + 1, max).split(';');
  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

  assert(length <= 256, () => `${type}: Only support for [Type; <length>], where length <= 256`);
  value.displayName = displayName;
  value.length = length;
  value.sub = getTypeDef(vecType, {}, count);
  return value;
} // decode a tuple


function _decodeTuple(value, _, subType, count) {
  value.sub = subType.length === 0 ? [] : typeSplit(subType).map(inner => getTypeDef(inner, {}, count));
  return value;
} // decode a Int/UInt<bitLength[, name]>
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeAnyInt(value, type, _, clazz) {
  const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(',');
  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

  assert(length <= 8192 && length % 8 === 0, () => `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
  value.displayName = displayName;
  value.length = length;
  return value;
}

function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, 'Int');
}

function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, 'UInt');
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeDoNotConstruct(value, type, _) {
  const NAME_LENGTH = 'DoNotConstruct'.length;
  value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
  return value;
}

function hasWrapper(type, [start, end]) {
  return type.substring(0, start.length) === start && type.slice(-1 * end.length) === end;
}

const nestedExtraction = [['[', ']', TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', TypeDefInfo.Struct, _decodeStruct], ['(', ')', TypeDefInfo.Tuple, _decodeTuple], // the inner for these are the same as tuple, multiple values
['BTreeMap<', '>', TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', TypeDefInfo.Int, _decodeInt], ['Result<', '>', TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
const wrappedExtraction = [['BTreeSet<', '>', TypeDefInfo.BTreeSet], ['Compact<', '>', TypeDefInfo.Compact], ['Linkage<', '>', TypeDefInfo.Linkage], ['Option<', '>', TypeDefInfo.Option], ['Range<', '>', TypeDefInfo.Range], ['RangeInclusive<', '>', TypeDefInfo.RangeInclusive], ['Vec<', '>', TypeDefInfo.Vec], ['WrapperKeepOpaque<', '>', TypeDefInfo.WrapperKeepOpaque], ['WrapperOpaque<', '>', TypeDefInfo.WrapperOpaque]];

function extractSubType(type, [start, end]) {
  return type.substring(start.length, type.length - end.length);
} // eslint-disable-next-line @typescript-eslint/ban-types


function getTypeDef(_type, {
  displayName,
  name
} = {}, count = 0) {
  // create the type via Type, allowing types to be sanitized
  const type = sanitize(_type);
  const value = {
    displayName,
    info: TypeDefInfo.Plain,
    name,
    type
  };
  assert(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
  const nested = nestedExtraction.find(nested => hasWrapper(type, nested));

  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count);
  }

  const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));

  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
  }

  return value;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/create/class.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0





function getTypeDefType({
  lookupName,
  type
}) {
  return lookupName || type;
}

function getSubDefArray(value) {
  assert(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${stringify(value)}`);
  return value.sub;
}

function getSubDef(value) {
  assert(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${stringify(value)}`);
  return value.sub;
}

function getSubType(value) {
  return getTypeDefType(getSubDef(value));
} // create a maps of type string CodecClasss from the input


function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map = {};

  for (let i = 0; i < subs.length; i++) {
    map[subs[i].name] = getTypeDefType(subs[i]);
  }

  return map;
} // create an array of type string CodecClasss from the input


function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}

function createInt(Clazz, {
  displayName,
  length
}) {
  assert(isNumber(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  return Clazz.with(length, displayName);
}

function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}

function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}

const infoMapping = {
  [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(BTreeMap, value),
  [TypeDefInfo.BTreeSet]: (registry, value) => createWithSub(BTreeSet, value),
  [TypeDefInfo.Compact]: (registry, value) => createWithSub(Compact, value),
  [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct["with"](value.displayName || value.type),
  [TypeDefInfo.Enum]: (registry, value) => {
    const subs = getSubDefArray(value);
    return Enum["with"](subs.every(({
      type
    }) => type === 'Null') ? subs.reduce((out, {
      index,
      name
    }, count) => {
      out[name] = index || count;
      return out;
    }, {}) : getTypeClassMap(value));
  },
  [TypeDefInfo.HashMap]: (registry, value) => createHashMap(HashMap, value),
  [TypeDefInfo.Int]: (registry, value) => createInt(Int, value),
  // We have circular deps between Linkage & Struct
  [TypeDefInfo.Linkage]: (registry, value) => {
    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys

    const Clazz = Struct["with"]({
      previous: type,
      next: type
    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

    Clazz.prototype.toRawType = function () {
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
      return `Linkage<${this.next.toRawType(true)}>`;
    };

    return Clazz;
  },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [TypeDefInfo.Null]: (registry, _) => Null,
  [TypeDefInfo.Option]: (registry, value) => createWithSub(Option, value),
  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
  [TypeDefInfo.Range]: (registry, value) => createWithSub(Range, value),
  [TypeDefInfo.RangeInclusive]: (registry, value) => createWithSub(RangeInclusive, value),
  [TypeDefInfo.Result]: (registry, value) => {
    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define

    return Result["with"]({
      Err,
      Ok
    });
  },
  [TypeDefInfo.Set]: (registry, value) => CodecSet["with"](getSubDefArray(value).reduce((result, {
    index,
    name
  }) => {
    result[name] = index;
    return result;
  }, {}), value.length),
  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
  [TypeDefInfo.Struct]: (registry, value) => Struct["with"](getTypeClassMap(value), value.alias),
  [TypeDefInfo.Tuple]: (registry, value) => Tuple["with"](getTypeClassArray(value)),
  [TypeDefInfo.UInt]: (registry, value) => createInt(UInt, value),
  [TypeDefInfo.Vec]: (registry, {
    sub
  }) => {
    assert(sub && !Array.isArray(sub), 'Expected type information for vector');
    return sub.type === 'u8' ? Bytes : Vec["with"](getTypeDefType(sub));
  },
  [TypeDefInfo.VecFixed]: (registry, {
    displayName,
    length,
    sub
  }) => {
    assert(sub && isNumber(length) && !Array.isArray(sub), 'Expected length & type information for fixed vector');
    return sub.type === 'u8' ? U8aFixed["with"](length * 8, displayName) : VecFixed["with"](getTypeDefType(sub), length);
  },
  [TypeDefInfo.WrapperKeepOpaque]: (registry, value) => createWithSub(WrapperKeepOpaque, value),
  [TypeDefInfo.WrapperOpaque]: (registry, value) => createWithSub(WrapperOpaque, value)
};
function constructTypeClass(registry, typeDef) {
  try {
    const Type = infoMapping[typeDef.info](registry, typeDef);
    assert(Type, 'No class created'); // don't clobber any existing

    if (!Type.__fallbackType && typeDef.fallbackType) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore ...this is the only place we we actually assign this...
      Type.__fallbackType = typeDef.fallbackType;
    }

    return Type;
  } catch (error) {
    throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
  }
} // Returns the type Class for construction

function getTypeClass(registry, typeDef) {
  return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/eq.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aEq
 * @summary Compares two Uint8Arrays for equality.
 * @description
 * For `UInt8Array` (or hex string) input values true if there is a match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */

function u8aEq(a, b) {
  const u8aa = u8aToU8a(a);
  const u8ab = u8aToU8a(b);

  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod = u8aa.length % 4;
    const length = u8aa.length - mod;

    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }

    for (let i = length; i < u8aa.length; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }

    return true;
  }

  return false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/create/type.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0


 // With isPedantic, actually check that the encoding matches that supplied. This
// is much slower, but verifies that we have the correct types defined

function checkInstance(created, matcher) {
  const u8a = created.toU8a();
  const rawType = created.toRawType();
  const isOk = // full match, all ok
  u8aEq(u8a, matcher) || // on a length-prefixed type, just check the actual length
  ['Bytes', 'Text', 'Type'].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
  created.isEmpty && matcher.every(v => !v);
  assert(isOk, () => `${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
}

function checkPedantic(created, [value], isPedantic = false) {
  if (isPedantic) {
    if (isU8a(value)) {
      checkInstance(created, value);
    } else if (isHex(value)) {
      checkInstance(created, u8aToU8a(value));
    }
  }
} // Initializes a type with a value. This also checks for fallbacks and in the cases
// where isPedantic is specified (storage decoding), also check the format/structure


function initType(registry, Type, params = [], {
  blockHash,
  isOptional,
  isPedantic
} = {}) {
  const created = new (isOptional ? Option["with"](Type) : Type)(registry, ...params);
  checkPedantic(created, params, isPedantic);

  if (blockHash) {
    created.createdAtHash = createTypeUnsafe(registry, 'Hash', [blockHash]);
  }

  return created;
} // An unsafe version of the `createType` below. It's unsafe because the `type`
// argument here can be any string, which, when it cannot parse, will yield a
// runtime error.


function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;

  try {
    Clazz = createClassUnsafe(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error) {
    firstError = new Error(`createType(${type}):: ${error.message}`);
  }

  if (Clazz && Clazz.__fallbackType) {
    try {
      Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {// swallow, we will throw the first error again
    }
  }

  throw firstError;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/lazy.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

function lazyMethod(result, item, creator, getName) {
  const name = getName ? getName(item) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function () {
      // This check should _always_ be false and unneeded, since we override
      // with a value below ... however we ensure we are quire vigilant against
      // all environment failures, so we are rather be safe than sorry
      if (isUndefined(value)) {
        value = creator(item);

        try {
          // re-define the property as a value, next time around this
          // getter will only return the computed value
          Object.defineProperty(this, name, {
            value
          });
        } catch {// ignore any errors, since this _should_ not happen due to
          // the "configurable" property above. But if it ever does
          // from here-on we will be the cached value the next time
          // around (with a very slight dip in performance)
        }
      }

      return value;
    }
  });
}
function lazyMethods(result, items, creator, getName) {
  for (let i = 0; i < items.length; i++) {
    lazyMethod(result, items[i], creator, getName);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const emptyCheck = {
  extrinsic: {},
  payload: {}
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

const polkadot = {
  LimitParathreadCommits: emptyCheck,
  OnlyStakingAndClaims: emptyCheck,
  PrevalidateAttests: emptyCheck,
  RestrictFunctionality: emptyCheck,
  TransactionCallFilter: emptyCheck,
  ValidateDoubleVoteReports: emptyCheck
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

const shell = {
  DisallowSigned: emptyCheck
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const statemint = {
  ChargeAssetTxPayment: {
    extrinsic: {
      tip: 'Compact<Balance>',
      // eslint-disable-next-line sort-keys
      assetId: 'Option<AssetId>'
    },
    payload: {}
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

const CheckMortality = {
  extrinsic: {
    era: 'ExtrinsicEra'
  },
  payload: {
    blockHash: 'Hash'
  }
};
const substrate = {
  ChargeTransactionPayment: {
    extrinsic: {
      tip: 'Compact<Balance>'
    },
    payload: {}
  },
  CheckBlockGasLimit: emptyCheck,
  CheckEra: CheckMortality,
  CheckGenesis: {
    extrinsic: {},
    payload: {
      genesisHash: 'Hash'
    }
  },
  CheckMortality,
  CheckNonZeroSender: emptyCheck,
  CheckNonce: {
    extrinsic: {
      nonce: 'Compact<Index>'
    },
    payload: {}
  },
  CheckSpecVersion: {
    extrinsic: {},
    payload: {
      specVersion: 'u32'
    }
  },
  CheckTxVersion: {
    extrinsic: {},
    payload: {
      transactionVersion: 'u32'
    }
  },
  CheckVersion: {
    extrinsic: {},
    payload: {
      specVersion: 'u32'
    }
  },
  CheckWeight: emptyCheck,
  LockStakingStatus: emptyCheck,
  ValidateEquivocationReport: emptyCheck
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0




 // A mapping of the known signed extensions to the extra fields that they
// contain. Unlike in the actual extensions, we define the extra fields not
// as a Tuple, but rather as a struct so they can be named. These will be
// expanded into the various fields when added to the payload (we only
// support V4 onwards with these, V3 and earlier are deemed fixed))

const allExtensions = objectSpread({}, substrate, polkadot, shell, statemint); // the v4 signed extensions prior to the point of exposing these to the
// metadata. This may not match 100% with the current defaults and are used
// when not specified in the metadata (which is for very old chains). The
// order is important here, as applied by default

const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];
function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter(k => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions // Always allow user extensions first - these should provide overrides
  .map(k => userExtensions[k] || allExtensions[k]).filter(info => !!info).reduce((result, info) => objectSpread(result, info[type]), {});
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/Event.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



/** @internal */
function decodeEvent(registry, value) {
  if (!value || !value.length) {
    return {
      DataType: Null
    };
  }

  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
/**
 * @name GenericEventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */


class GenericEventData extends Tuple {
  #meta;
  #method;
  #section;
  #typeDef;

  constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
    const fields = (meta === null || meta === void 0 ? void 0 : meta.fields) || [];
    super(registry, fields.map(({
      type
    }) => registry.createLookupType(type)), value);
    this.#meta = meta;
    this.#method = method;
    this.#section = section;
    this.#typeDef = fields.map(({
      type
    }) => registry.lookup.getTypeDef(type));
  }
  /**
   * @description The wrapped [[EventMetadata]]
   */


  get meta() {
    return this.#meta;
  }
  /**
   * @description The method as a string
   */


  get method() {
    return this.#method;
  }
  /**
   * @description The section as a string
   */


  get section() {
    return this.#section;
  }
  /**
   * @description The [[TypeDef]] for this event
   */


  get typeDef() {
    return this.#typeDef;
  }

}
/**
 * @name GenericEvent
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */

class GenericEvent extends Struct {
  // Currently we _only_ decode from Uint8Array, since we expect it to
  // be used via EventRecord
  constructor(registry, _value) {
    const {
      DataType,
      value
    } = decodeEvent(registry, _value);
    super(registry, {
      index: 'EventId',
      // eslint-disable-next-line sort-keys
      data: DataType
    }, value);
  }
  /**
   * @description The wrapped [[EventData]]
   */


  get data() {
    return this.getT('data');
  }
  /**
   * @description The [[EventId]], identifying the raw event
   */


  get index() {
    return this.getT('index');
  }
  /**
   * @description The [[EventMetadata]] with the documentation
   */


  get meta() {
    return this.data.meta;
  }
  /**
   * @description The method string identifying the event
   */


  get method() {
    return this.data.method;
  }
  /**
   * @description The section string identifying the event
   */


  get section() {
    return this.data.section;
  }
  /**
   * @description The [[TypeDef]] for the event
   */


  get typeDef() {
    return this.data.typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return objectSpread({
      method: this.method,
      section: this.section
    }, isExpanded ? {
      docs: this.meta.docs.map(d => d.toString())
    } : null, super.toHuman(isExpanded));
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/base/Base.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */
class Base {
  #registry;
  #raw;

  constructor(registry, value, initialU8aLength) {
    this.#registry = registry;
    this.#raw = value;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }

  get inner() {
    return this.#raw;
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.#raw.isEmpty;
  }

  get registry() {
    return this.#registry;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this.#raw.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return this.#raw.inspect();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex(isLe) {
    return this.#raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.#raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.#raw.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.#raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.#raw.toU8a(isBare);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Base';
  }

  unwrap() {
    return this.#raw;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/constants.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BIT_SIGNED = 0b10000000;
const BIT_UNSIGNED = 0;
const EMPTY_U8A = new Uint8Array();
const DEFAULT_VERSION = 4;
const IMMORTAL_ERA = new Uint8Array([0]);
const UNMASK_VERSION = 0b01111111;
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/Extrinsic.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const VERSIONS = ['ExtrinsicUnknown', // v0 is unknown
'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];

/** @internal */

function newFromValue(registry, value, version) {
  if (value instanceof GenericExtrinsic) {
    return value.unwrap();
  }

  const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
  const type = VERSIONS[version & UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
  // slice for "only add extrinsic types", and more string definitions become unwieldy

  return registry.createTypeUnsafe(type, [value, {
    isSigned,
    version
  }]);
}
/** @internal */


function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
  if (isU8a(value) || Array.isArray(value) || isHex(value)) {
    return Extrinsic_decodeU8a(registry, u8aToU8a(value), version);
  } else if (value instanceof registry.createClassUnsafe('Call')) {
    return newFromValue(registry, {
      method: value
    }, version);
  }

  return newFromValue(registry, value, version);
}
/** @internal */


function Extrinsic_decodeU8a(registry, value, version) {
  if (!value.length) {
    return newFromValue(registry, new Uint8Array(), version);
  }

  const [offset, length] = compactFromU8a(value);
  const total = offset + length.toNumber();
  assert(total <= value.length, () => `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
  const data = value.subarray(offset, total);
  return newFromValue(registry, data.subarray(1), data[0]);
}

class ExtrinsicBase extends Base {
  constructor(registry, value, initialU8aLength) {
    super(registry, value, initialU8aLength);
    const signKeys = Object.keys(registry.getSignedExtensionTypes());

    const getter = key => this.inner.signature[key]; // This is on the abstract class, ensuring that hasOwnProperty operates
    // correctly, i.e. it needs to be on the base class exposing it


    for (let i = 0; i < signKeys.length; i++) {
      objectProperty(this, signKeys[i], getter);
    }
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */


  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */


  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */


  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */


  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */


  get era() {
    return this.inner.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` id the extrinsic is signed
   */


  get isSigned() {
    return this.inner.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */


  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */


  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */


  get method() {
    return this.inner.method;
  }
  /**
   * @description The nonce for this extrinsic
   */


  get nonce() {
    return this.inner.signature.nonce;
  }

  get registry() {
    return super.registry;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */


  get signature() {
    return this.inner.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.inner.signature.signer;
  }
  /**
   * @description Forwards compat
   */


  get tip() {
    return this.inner.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */


  get type() {
    return this.inner.version;
  }

  get inner() {
    return this.unwrap();
  }
  /**
   * @description Returns the encoded version flag
  */


  get version() {
    return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
  }
  /**
   * @description Checks if the source matches this in type
   */


  is(other) {
    return this.method.is(other);
  }

  unwrap() {
    return super.unwrap();
  }

}
/**
 * @name GenericExtrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */


class GenericExtrinsic extends ExtrinsicBase {
  #hashCache;

  constructor(registry, value, {
    version
  } = {}) {
    super(registry, decodeExtrinsic(registry, value, version));
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    if (!this.#hashCache) {
      this.#hashCache = super.hash;
    }

    return this.#hashCache;
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */


  addSignature(signer, signature, payload) {
    this.inner.addSignature(signer, signature, payload);
    this.#hashCache = undefined;
    return this;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const encoded = u8aConcat(...this.toU8aInner());
    return {
      inner: this.inner.inspect().inner,
      outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
    };
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.inner.sign(account, options);
    this.#hashCache = undefined;
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */


  signFake(signer, options) {
    this.inner.signFake(signer, options);
    this.#hashCache = undefined;
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex(isBare) {
    return u8aToHex(this.toU8a(isBare));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return objectSpread({}, {
      isSigned: this.isSigned,
      method: this.method.toHuman(isExpanded)
    }, this.isSigned ? {
      era: this.era.toHuman(isExpanded),
      nonce: this.nonce.toHuman(isExpanded),
      signature: this.signature.toHex(),
      signer: this.signer.toHuman(isExpanded),
      tip: this.tip.toHuman(isExpanded)
    } : null);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Extrinsic';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */


  toU8a(isBare) {
    const encoded = u8aConcat(...this.toU8aInner());
    return isBare ? encoded : compactAddLength(encoded);
  }

  toU8aInner() {
    // we do not apply bare to the internal values, rather this only determines out length addition,
    // where we strip all lengths this creates an extrinsic that cannot be decoded
    return [new Uint8Array([this.version]), this.inner.toU8a()];
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U64.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u64
 * @description
 * A 64-bit unsigned integer
 */

class u64 extends UInt["with"](64) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u64';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0




function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;

  while (binary[binary.length - 1 - index] === '0') {
    index++;
  }

  return index;
}
/** @internal */


function decodeMortalEra(registry, value) {
  if (isU8a(value) || isHex(value) || Array.isArray(value)) {
    return decodeMortalU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [new u64(registry), new u64(registry)];
  } else if (isObject(value)) {
    return decodeMortalObject(registry, value);
  }

  throw new Error('Invalid data passed to Mortal era');
}
/** @internal */


function decodeMortalObject(registry, value) {
  const {
    current,
    period
  } = value;
  let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
  calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
  const phase = current % calPeriod;
  const quantizeFactor = Math.max(calPeriod >> 12, 1);
  const quantizedPhase = phase / quantizeFactor * quantizeFactor;
  return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
}
/** @internal */


function decodeMortalU8a(registry, value) {
  if (value.length === 0) {
    return [new u64(registry), new u64(registry)];
  }

  const first = u8aToBn(value.subarray(0, 1)).toNumber();
  const second = u8aToBn(value.subarray(1, 2)).toNumber();
  const encoded = first + (second << 8);
  const period = 2 << encoded % (1 << 4);
  const quantizeFactor = Math.max(period >> 12, 1);
  const phase = (encoded >> 4) * quantizeFactor;
  assert(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
  return [new u64(registry, period), new u64(registry, phase)];
}
/** @internal */
// eslint-disable-next-line @typescript-eslint/ban-types


function decodeExtrinsicEra(value = new Uint8Array()) {
  if (isU8a(value)) {
    return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
  } else if (!value) {
    return new Uint8Array([0]);
  } else if (value instanceof GenericExtrinsicEra) {
    return decodeExtrinsicEra(value.toU8a());
  } else if (isHex(value)) {
    return decodeExtrinsicEra(hexToU8a(value));
  } else if (isObject(value)) {
    const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
    const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
    const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera'); // this is to de-serialize from JSON

    return mortal ? {
      MortalEra: mortal[1]
    } : immortal ? {
      ImmortalEra: immortal[1]
    } : {
      MortalEra: value
    };
  }

  throw new Error('Invalid data passed to Era');
}
/**
 * @name ImmortalEra
 * @description
 * The ImmortalEra for an extrinsic
 */


class ImmortalEra extends Raw {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  constructor(registry, value) {
    // For immortals, we always provide the known value (i.e. treated as a
    // constant no matter how it is constructed - it is a fixed structure)
    super(registry, IMMORTAL_ERA);
  }

}
/**
 * @name MortalEra
 * @description
 * The MortalEra for an extrinsic, indicating period and phase
 */

class MortalEra extends Tuple {
  constructor(registry, value) {
    super(registry, {
      period: u64,
      phase: u64
    }, decodeMortalEra(registry, value));
  }
  /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */


  get encodedLength() {
    return 2;
  }
  /**
   * @description The period of this Mortal wraps as a [[U64]]
   */


  get period() {
    return this[0];
  }
  /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */


  get phase() {
    return this[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return {
      period: formatNumber(this.period),
      phase: formatNumber(this.phase)
    };
  }
  /**
   * @description Returns a JSON representation of the actual value
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    const period = this.period.toNumber();
    const phase = this.phase.toNumber();
    const quantizeFactor = Math.max(period >> 12, 1);
    const trailingZeros = getTrailingZeros(period);
    const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);
    const first = encoded >> 8;
    const second = encoded & 0xff;
    return new Uint8Array([second, first]);
  }
  /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */


  birth(current) {
    // FIXME No toNumber() here
    return Math.floor((Math.max(bnToBn(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
  }
  /**
   * @description Get the block number of the first block at which the era has ended.
   */


  death(current) {
    // FIXME No toNumber() here
    return this.birth(current) + this.period.toNumber();
  }

}
/**
 * @name GenericExtrinsicEra
 * @description
 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
 */

class GenericExtrinsicEra extends Enum {
  constructor(registry, value) {
    super(registry, {
      ImmortalEra,
      MortalEra
    }, decodeExtrinsicEra(value));
  }
  /**
   * @description Override the encoded length method
   */


  get encodedLength() {
    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
  }
  /**
   * @description Returns the item as a [[ImmortalEra]]
   */


  get asImmortalEra() {
    assert(this.isImmortalEra, () => `Cannot convert '${this.type}' via asImmortalEra`);
    return this.inner;
  }
  /**
   * @description Returns the item as a [[MortalEra]]
   */


  get asMortalEra() {
    assert(this.isMortalEra, () => `Cannot convert '${this.type}' via asMortalEra`);
    return this.inner;
  }
  /**
   * @description `true` if Immortal
   */


  get isImmortalEra() {
    return this.index === 0;
  }
  /**
   * @description `true` if Mortal
   */


  get isMortalEra() {
    return this.index > 0;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const ExtrinsicPayload_VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown
'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
/** @internal */

function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
  if (value instanceof GenericExtrinsicPayload) {
    return value.unwrap();
  }

  return registry.createTypeUnsafe(ExtrinsicPayload_VERSIONS[version] || ExtrinsicPayload_VERSIONS[0], [value, {
    version
  }]);
}
/**
 * @name GenericExtrinsicPayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */


class GenericExtrinsicPayload extends Base {
  constructor(registry, value, {
    version
  } = {}) {
    super(registry, decodeExtrinsicPayload(registry, value, version));
  }
  /**
   * @description The block [[Hash]] the signature applies to (mortal/immortal)
   */


  get blockHash() {
    return this.inner.blockHash;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */


  get era() {
    return this.inner.era;
  }
  /**
   * @description The genesis block [[Hash]] the signature applies to
   */


  get genesisHash() {
    // NOTE only v3+
    return this.inner.genesisHash || this.registry.createTypeUnsafe('Hash', []);
  }
  /**
   * @description The [[Raw]] contained in the payload
   */


  get method() {
    return this.inner.method;
  }
  /**
   * @description The [[Index]]
   */


  get nonce() {
    return this.inner.nonce;
  }
  /**
   * @description The specVersion as a [[u32]] for this payload
   */


  get specVersion() {
    // NOTE only v3+
    return this.inner.specVersion || this.registry.createTypeUnsafe('u32', []);
  }
  /**
   * @description The [[Balance]]
   */


  get tip() {
    // NOTE from v2+
    return this.inner.tip || this.registry.createTypeUnsafe('Compact<Balance>', []);
  }
  /**
   * @description The transaction version as a [[u32]] for this payload
   */


  get transactionVersion() {
    // NOTE only v4+
    return this.inner.transactionVersion || this.registry.createTypeUnsafe('u32', []);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this.inner.eq(other);
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair) {
    const signature = this.inner.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra
    // information, such as for instance the payload, i.e. `payload: this.toHex()`
    // For the case here we sign via the extrinsic, we ignore the return, so generally
    // this is applicable for external signing

    return {
      signature: u8aToHex(signature)
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this.inner.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toHex();
  }
  /**
   * @description Returns a serialized u8a form
   */


  toU8a(isBare) {
    // call our parent, with only the method stripped
    return super.toU8a(isBare ? {
      method: true
    } : false);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name GenericExtrinsicPayloadUnknown
 * @description
 * A default handler for payloads where the version is not known (default throw)
 */

class GenericExtrinsicPayloadUnknown extends Struct {
  constructor(registry, value, {
    version = 0
  } = {}) {
    super(registry, {});
    throw new Error(`Unsupported extrinsic payload version ${version}`);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name GenericExtrinsicUnknown
 * @description
 * A default handler for extrinsics where the version is not known (default throw)
 */

class GenericExtrinsicUnknown extends Struct {
  constructor(registry, value, {
    isSigned = false,
    version = 0
  } = {}) {
    super(registry, {});
    throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/SignerPayload.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


const knownTypes = {
  address: 'Address',
  blockHash: 'Hash',
  blockNumber: 'BlockNumber',
  era: 'ExtrinsicEra',
  genesisHash: 'Hash',
  method: 'Call',
  nonce: 'Compact<Index>',
  runtimeVersion: 'RuntimeVersion',
  signedExtensions: 'Vec<Text>',
  tip: 'Compact<Balance>',
  version: 'u8'
};
/**
 * @name GenericSignerPayload
 * @description
 * A generic signer payload that can be used for serialization between API and signer
 */

class GenericSignerPayload extends Struct {
  #extraTypes;

  constructor(registry, value) {
    const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
    super(registry, objectSpread({}, extensionTypes, knownTypes), value);
    this.#extraTypes = {};

    const getter = key => this.get(key); // add all extras that are not in the base types


    for (const [key, type] of Object.entries(extensionTypes)) {
      if (!knownTypes[key]) {
        this.#extraTypes[key] = type;
      }

      objectProperty(this, key, getter);
    }
  }

  get address() {
    return this.getT('address');
  }

  get blockHash() {
    return this.getT('blockHash');
  }

  get blockNumber() {
    return this.getT('blockNumber');
  }

  get era() {
    return this.getT('era');
  }

  get genesisHash() {
    return this.getT('genesisHash');
  }

  get method() {
    return this.getT('method');
  }

  get nonce() {
    return this.getT('nonce');
  }

  get runtimeVersion() {
    return this.getT('runtimeVersion');
  }

  get signedExtensions() {
    return this.getT('signedExtensions');
  }

  get tip() {
    return this.getT('tip');
  }

  get version() {
    return this.getT('version');
  }
  /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */


  toPayload() {
    const result = {};
    const keys = Object.keys(this.#extraTypes); // add any explicit overrides we may have

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const value = this.get(key);
      const isOption = value instanceof Option; // Don't include Option.isNone

      if (!isOption || value.isSome) {
        result[key] = value.toHex();
      }
    }

    return objectSpread(result, {
      // the known defaults as managed explicitly and has different
      // formatting in cases, e.g. we mostly expose a hex format here
      address: this.address.toString(),
      blockHash: this.blockHash.toHex(),
      blockNumber: this.blockNumber.toHex(),
      era: this.era.toHex(),
      genesisHash: this.genesisHash.toHex(),
      method: this.method.toHex(),
      nonce: this.nonce.toHex(),
      signedExtensions: this.signedExtensions.map(e => e.toString()),
      specVersion: this.runtimeVersion.specVersion.toHex(),
      tip: this.tip.toHex(),
      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
      version: this.version.toNumber()
    });
  }
  /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */


  toRaw() {
    const payload = this.toPayload();
    const data = u8aToHex(this.registry.createTypeUnsafe('ExtrinsicPayload', [payload, {
      version: payload.version
    }]) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
    .toU8a({
      method: true
    }));
    return {
      address: payload.address,
      data,
      type: 'payload'
    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


const EXTRINSIC_VERSION = 4;

/**
 * @name GenericExtrinsicV4
 * @description
 * The third generation of compact extrinsics
 */
class GenericExtrinsicV4 extends Struct {
  constructor(registry, value, {
    isSigned
  } = {}) {
    super(registry, {
      signature: 'ExtrinsicSignatureV4',
      // eslint-disable-next-line sort-keys
      method: 'Call'
    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */


  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof GenericExtrinsicV4) {
      return value;
    } else if (value instanceof registry.createClassUnsafe('Call')) {
      return {
        method: value
      };
    } else if (isU8a(value)) {
      // here we decode manually since we need to pull through the version information
      const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, {
        isSigned
      }]);
      const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);
      return {
        method,
        signature
      };
    }

    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */


  get method() {
    return this.getT('method');
  }

  get registry() {
    return super.registry;
  }
  /**
   * @description The [[ExtrinsicSignatureV4]]
   */


  get signature() {
    return this.getT('signature');
  }
  /**
   * @description The version for the signature
   */


  get version() {
    return EXTRINSIC_VERSION;
  }
  /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */


  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.signature.sign(this.method, account, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */


  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/util.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// a helper function for both types of payloads, Raw and metadata-known
function sign(registry, signerPair, u8a, options) {
  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
  return signerPair.sign(encoded, options);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name GenericExtrinsicPayloadV4
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is
 * variable length based on the contents included
 */

class GenericExtrinsicPayloadV4 extends Struct {
  #signOptions;

  constructor(registry, value) {
    super(registry, objectSpread({
      method: 'Bytes'
    }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature
    // this is an enum, in the case of AnySignature, this is a Hash only
    // (which may be 64 or 65 bytes)

    this.#signOptions = {
      withType: registry.createTypeUnsafe('ExtrinsicSignature', []) instanceof Enum
    };
  }
  /**
   * @description The block [[Hash]] the signature applies to (mortal/immortal)
   */


  get blockHash() {
    return this.getT('blockHash');
  }
  /**
   * @description The [[ExtrinsicEra]]
   */


  get era() {
    return this.getT('era');
  }
  /**
   * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
   */


  get genesisHash() {
    return this.getT('genesisHash');
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */


  get method() {
    return this.getT('method');
  }
  /**
   * @description The [[Index]]
   */


  get nonce() {
    return this.getT('nonce');
  }
  /**
   * @description The specVersion for this signature
   */


  get specVersion() {
    return this.getT('specVersion');
  }
  /**
   * @description The tip [[Balance]]
   */


  get tip() {
    return this.getT('tip');
  }
  /**
   * @description The transactionVersion for this signature
   */


  get transactionVersion() {
    return this.getT('transactionVersion');
  }
  /**
   * @description
   * The (optional) asset id for this signature for chains that support transaction fees in assets
   */


  get assetId() {
    return this.getT('assetId');
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair) {
    // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
    // don't want the method (Bytes) to have the length prefix included. This
    // means that the data-as-signed is un-decodable, but is also doesn't need
    // the extra information, only the pure data (and is not decoded) ...
    // The same applies to V1..V3, if we have a V5, carrythis comment
    return sign(this.registry, signerPair, this.toU8a({
      method: true
    }), this.#signOptions);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



 // Ensure we have enough data for all types of signatures

const FAKE_SIGNATURE = new Uint8Array(256).fill(1);

function toAddress(registry, address) {
  return registry.createTypeUnsafe('Address', [isU8a(address) ? u8aToHex(address) : address]);
}
/**
 * @name GenericExtrinsicSignatureV4
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */


class GenericExtrinsicSignatureV4 extends Struct {
  #signKeys;

  constructor(registry, value, {
    isSigned
  } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    super(registry, objectSpread( // eslint-disable-next-line sort-keys
    {
      signer: 'Address',
      signature: 'ExtrinsicSignature'
    }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
    this.#signKeys = Object.keys(signTypes);
    objectProperties(this, this.#signKeys, k => this.get(k));
  }
  /** @internal */


  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return EMPTY_U8A;
    } else if (value instanceof GenericExtrinsicSignatureV4) {
      return value;
    }

    return isSigned ? value : EMPTY_U8A;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */


  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */


  get era() {
    return this.getT('era');
  }
  /**
   * @description The [[Index]] for the signature
   */


  get nonce() {
    return this.getT('nonce');
  }

  get registry() {
    return super.registry;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */


  get signature() {
    // the second case here is when we don't have an enum signature, treat as raw
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */


  get multiSignature() {
    return this.getT('signature');
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.getT('signer');
  }
  /**
   * @description The [[Balance]] tip
   */


  get tip() {
    return this.getT('tip');
  }

  _injectSignature(signer, signature, payload) {
    // use the fields exposed to guide the getters
    for (let i = 0; i < this.#signKeys.length; i++) {
      const k = this.#signKeys[i];
      const v = payload.get(k);

      if (!isUndefined(v)) {
        this.set(k, v);
      }
    } // additional fields (exposed in struct itself)


    this.set('signer', signer);
    this.set('signature', signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */


  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe('ExtrinsicSignature', [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */


  createPayload(method, options) {
    const {
      era,
      runtimeVersion: {
        specVersion,
        transactionVersion
      }
    } = options;
    return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
      era: era || IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */


  sign(method, account, options) {
    assert(account && account.addressRaw, () => `Expected a valid keypair for signing, found ${stringify(account)}`);
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe('ExtrinsicSignature', [payload.sign(account)]), payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */


  signFake(method, address, options) {
    assert(address, () => `Expected a valid address for signing, found ${stringify(address)}`);
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe('ExtrinsicSignature', [FAKE_SIGNATURE]), payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/v4/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/types/extrinsic/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0







;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



function isInvalidChar(char, byte) {
  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}

function isEthereumChecksum(_address) {
  const address = _address.replace('0x', '');

  const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);

  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ethereum/isAddress.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function isEthereumAddress(address) {
  if (!address || address.length !== 42 || !isHex(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }

  return isEthereumChecksum(address);
}
// EXTERNAL MODULE: crypto (ignored)
var crypto_ignored_ = __webpack_require__(856);
;// CONCATENATED MODULE: ./node_modules/@noble/secp256k1/lib/esm/index.js
/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */

const esm_0n = BigInt(0);
const esm_1n = BigInt(1);
const esm_2n = BigInt(2);
const _3n = BigInt(3);
const _8n = BigInt(8);
const POW_2_256 = esm_2n ** BigInt(256);
const CURVE = {
    a: esm_0n,
    b: BigInt(7),
    P: POW_2_256 - esm_2n ** BigInt(32) - BigInt(977),
    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),
    h: esm_1n,
    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
};

function weistrass(x) {
    const { a, b } = CURVE;
    const x2 = mod(x * x);
    const x3 = mod(x2 * x);
    return mod(x3 + a * x + b);
}
const USE_ENDOMORPHISM = CURVE.a === esm_0n;
class JacobianPoint {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static fromAffine(p) {
        if (!(p instanceof Point)) {
            throw new TypeError('JacobianPoint#fromAffine: expected Point');
        }
        return new JacobianPoint(p.x, p.y, esm_1n);
    }
    static toAffineBatch(points) {
        const toInv = invertBatch(points.map((p) => p.z));
        return points.map((p, i) => p.toAffine(toInv[i]));
    }
    static normalizeZ(points) {
        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
    }
    equals(other) {
        if (!(other instanceof JacobianPoint))
            throw new TypeError('JacobianPoint expected');
        const { x: X1, y: Y1, z: Z1 } = this;
        const { x: X2, y: Y2, z: Z2 } = other;
        const Z1Z1 = mod(Z1 ** esm_2n);
        const Z2Z2 = mod(Z2 ** esm_2n);
        const U1 = mod(X1 * Z2Z2);
        const U2 = mod(X2 * Z1Z1);
        const S1 = mod(mod(Y1 * Z2) * Z2Z2);
        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
        return U1 === U2 && S1 === S2;
    }
    negate() {
        return new JacobianPoint(this.x, mod(-this.y), this.z);
    }
    double() {
        const { x: X1, y: Y1, z: Z1 } = this;
        const A = mod(X1 ** esm_2n);
        const B = mod(Y1 ** esm_2n);
        const C = mod(B ** esm_2n);
        const D = mod(esm_2n * (mod((X1 + B) ** esm_2n) - A - C));
        const E = mod(_3n * A);
        const F = mod(E ** esm_2n);
        const X3 = mod(F - esm_2n * D);
        const Y3 = mod(E * (D - X3) - _8n * C);
        const Z3 = mod(esm_2n * Y1 * Z1);
        return new JacobianPoint(X3, Y3, Z3);
    }
    add(other) {
        if (!(other instanceof JacobianPoint))
            throw new TypeError('JacobianPoint expected');
        const { x: X1, y: Y1, z: Z1 } = this;
        const { x: X2, y: Y2, z: Z2 } = other;
        if (X2 === esm_0n || Y2 === esm_0n)
            return this;
        if (X1 === esm_0n || Y1 === esm_0n)
            return other;
        const Z1Z1 = mod(Z1 ** esm_2n);
        const Z2Z2 = mod(Z2 ** esm_2n);
        const U1 = mod(X1 * Z2Z2);
        const U2 = mod(X2 * Z1Z1);
        const S1 = mod(mod(Y1 * Z2) * Z2Z2);
        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
        const H = mod(U2 - U1);
        const r = mod(S2 - S1);
        if (H === esm_0n) {
            if (r === esm_0n) {
                return this.double();
            }
            else {
                return JacobianPoint.ZERO;
            }
        }
        const HH = mod(H ** esm_2n);
        const HHH = mod(H * HH);
        const V = mod(U1 * HH);
        const X3 = mod(r ** esm_2n - HHH - esm_2n * V);
        const Y3 = mod(r * (V - X3) - S1 * HHH);
        const Z3 = mod(Z1 * Z2 * H);
        return new JacobianPoint(X3, Y3, Z3);
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
        let n = normalizeScalar(scalar);
        const G = JacobianPoint.BASE;
        const P0 = JacobianPoint.ZERO;
        if (n === esm_0n)
            return P0;
        if (n === esm_1n)
            return this;
        if (!USE_ENDOMORPHISM) {
            let p = P0;
            let d = this;
            while (n > esm_0n) {
                if (n & esm_1n)
                    p = p.add(d);
                d = d.double();
                n >>= esm_1n;
            }
            return p;
        }
        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
        let k1p = P0;
        let k2p = P0;
        let d = this;
        while (k1 > esm_0n || k2 > esm_0n) {
            if (k1 & esm_1n)
                k1p = k1p.add(d);
            if (k2 & esm_1n)
                k2p = k2p.add(d);
            d = d.double();
            k1 >>= esm_1n;
            k2 >>= esm_1n;
        }
        if (k1neg)
            k1p = k1p.negate();
        if (k2neg)
            k2p = k2p.negate();
        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
        return k1p.add(k2p);
    }
    precomputeWindow(W) {
        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
        const points = [];
        let p = this;
        let base = p;
        for (let window = 0; window < windows; window++) {
            base = p;
            points.push(base);
            for (let i = 1; i < 2 ** (W - 1); i++) {
                base = base.add(p);
                points.push(base);
            }
            p = base.double();
        }
        return points;
    }
    wNAF(n, affinePoint) {
        if (!affinePoint && this.equals(JacobianPoint.BASE))
            affinePoint = Point.BASE;
        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
        if (256 % W) {
            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
        }
        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
        if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
                precomputes = JacobianPoint.normalizeZ(precomputes);
                pointPrecomputes.set(affinePoint, precomputes);
            }
        }
        let p = JacobianPoint.ZERO;
        let f = JacobianPoint.ZERO;
        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
        const windowSize = 2 ** (W - 1);
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window = 0; window < windows; window++) {
            const offset = window * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
                wbits -= maxNumber;
                n += esm_1n;
            }
            if (wbits === 0) {
                let pr = precomputes[offset];
                if (window % 2)
                    pr = pr.negate();
                f = f.add(pr);
            }
            else {
                let cached = precomputes[offset + Math.abs(wbits) - 1];
                if (wbits < 0)
                    cached = cached.negate();
                p = p.add(cached);
            }
        }
        return { p, f };
    }
    multiply(scalar, affinePoint) {
        let n = normalizeScalar(scalar);
        let point;
        let fake;
        if (USE_ENDOMORPHISM) {
            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
            if (k1neg)
                k1p = k1p.negate();
            if (k2neg)
                k2p = k2p.negate();
            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
        }
        else {
            const { p, f } = this.wNAF(n, affinePoint);
            point = p;
            fake = f;
        }
        return JacobianPoint.normalizeZ([point, fake])[0];
    }
    toAffine(invZ = invert(this.z)) {
        const { x, y, z } = this;
        const iz1 = invZ;
        const iz2 = mod(iz1 * iz1);
        const iz3 = mod(iz2 * iz1);
        const ax = mod(x * iz2);
        const ay = mod(y * iz3);
        const zz = mod(z * iz1);
        if (zz !== esm_1n)
            throw new Error('invZ was invalid');
        return new Point(ax, ay);
    }
}
JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, esm_1n);
JacobianPoint.ZERO = new JacobianPoint(esm_0n, esm_1n, esm_0n);
const pointPrecomputes = new WeakMap();
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
    }
    static fromCompressedHex(bytes) {
        const isShort = bytes.length === 32;
        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
        if (!isValidFieldElement(x))
            throw new Error('Point is not on curve');
        const y2 = weistrass(x);
        let y = sqrtMod(y2);
        const isYOdd = (y & esm_1n) === esm_1n;
        if (isShort) {
            if (isYOdd)
                y = mod(-y);
        }
        else {
            const isFirstByteOdd = (bytes[0] & 1) === 1;
            if (isFirstByteOdd !== isYOdd)
                y = mod(-y);
        }
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromUncompressedHex(bytes) {
        const x = bytesToNumber(bytes.subarray(1, 33));
        const y = bytesToNumber(bytes.subarray(33, 65));
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        const len = bytes.length;
        const header = bytes[0];
        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {
            return this.fromCompressedHex(bytes);
        }
        if (len === 65 && header === 0x04)
            return this.fromUncompressedHex(bytes);
        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);
    }
    static fromPrivateKey(privateKey) {
        return Point.BASE.multiply(normalizePrivateKey(privateKey));
    }
    static fromSignature(msgHash, signature, recovery) {
        msgHash = ensureBytes(msgHash);
        const h = truncateHash(msgHash);
        const { r, s } = normalizeSignature(signature);
        if (recovery !== 0 && recovery !== 1) {
            throw new Error('Cannot recover signature: invalid recovery bit');
        }
        if (h === esm_0n)
            throw new Error('Cannot recover signature: msgHash cannot be 0');
        const prefix = recovery & 1 ? '03' : '02';
        const R = Point.fromHex(prefix + numTo32bStr(r));
        const { n } = CURVE;
        const rinv = invert(r, n);
        const u1 = mod(-h * rinv, n);
        const u2 = mod(s * rinv, n);
        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
            throw new Error('Cannot recover signature: point at infinify');
        Q.assertValidity();
        return Q;
    }
    toRawBytes(isCompressed = false) {
        return esm_hexToBytes(this.toHex(isCompressed));
    }
    toHex(isCompressed = false) {
        const x = numTo32bStr(this.x);
        if (isCompressed) {
            const prefix = this.y & esm_1n ? '03' : '02';
            return `${prefix}${x}`;
        }
        else {
            return `04${x}${numTo32bStr(this.y)}`;
        }
    }
    toHexX() {
        return this.toHex(true).slice(2);
    }
    toRawX() {
        return this.toRawBytes(true).slice(1);
    }
    assertValidity() {
        const msg = 'Point is not on elliptic curve';
        const { x, y } = this;
        if (!isValidFieldElement(x) || !isValidFieldElement(y))
            throw new Error(msg);
        const left = mod(y * y);
        const right = weistrass(x);
        if (mod(left - right) !== esm_0n)
            throw new Error(msg);
    }
    equals(other) {
        return this.x === other.x && this.y === other.y;
    }
    negate() {
        return new Point(this.x, mod(-this.y));
    }
    double() {
        return JacobianPoint.fromAffine(this).double().toAffine();
    }
    add(other) {
        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiply(scalar) {
        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
    multiplyAndAddUnsafe(Q, a, b) {
        const P = JacobianPoint.fromAffine(this);
        const aP = P.multiply(a);
        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
        const sum = aP.add(bQ);
        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();
    }
}
Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
Point.ZERO = new Point(esm_0n, esm_0n);
function sliceDER(s) {
    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;
}
function parseDERInt(data) {
    if (data.length < 2 || data[0] !== 0x02) {
        throw new Error(`Invalid signature integer tag: ${esm_bytesToHex(data)}`);
    }
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len) {
        throw new Error(`Invalid signature integer: wrong length`);
    }
    if (res[0] === 0x00 && res[1] <= 0x7f) {
        throw new Error('Invalid signature integer: trailing length');
    }
    return { data: bytesToNumber(res), left: data.subarray(len + 2) };
}
function parseDERSignature(data) {
    if (data.length < 2 || data[0] != 0x30) {
        throw new Error(`Invalid signature tag: ${esm_bytesToHex(data)}`);
    }
    if (data[1] !== data.length - 2) {
        throw new Error('Invalid signature: incorrect length');
    }
    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));
    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);
    if (rBytesLeft.length) {
        throw new Error(`Invalid signature: left bytes after parsing: ${esm_bytesToHex(rBytesLeft)}`);
    }
    return { r, s };
}
class Signature {
    constructor(r, s) {
        this.r = r;
        this.s = s;
        this.assertValidity();
    }
    static fromCompact(hex) {
        const arr = isUint8a(hex);
        const name = 'Signature.fromCompact';
        if (typeof hex !== 'string' && !arr)
            throw new TypeError(`${name}: Expected string or Uint8Array`);
        const str = arr ? esm_bytesToHex(hex) : hex;
        if (str.length !== 128)
            throw new Error(`${name}: Expected 64-byte hex`);
        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
    }
    static fromDER(hex) {
        const arr = isUint8a(hex);
        if (typeof hex !== 'string' && !arr)
            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
        const { r, s } = parseDERSignature(arr ? hex : esm_hexToBytes(hex));
        return new Signature(r, s);
    }
    static fromHex(hex) {
        return this.fromDER(hex);
    }
    assertValidity() {
        const { r, s } = this;
        if (!isWithinCurveOrder(r))
            throw new Error('Invalid Signature: r must be 0 < r < n');
        if (!isWithinCurveOrder(s))
            throw new Error('Invalid Signature: s must be 0 < s < n');
    }
    hasHighS() {
        const HALF = CURVE.n >> esm_1n;
        return this.s > HALF;
    }
    normalizeS() {
        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;
    }
    toDERRawBytes(isCompressed = false) {
        return esm_hexToBytes(this.toDERHex(isCompressed));
    }
    toDERHex(isCompressed = false) {
        const sHex = sliceDER(numberToHexUnpadded(this.s));
        if (isCompressed)
            return sHex;
        const rHex = sliceDER(numberToHexUnpadded(this.r));
        const rLen = numberToHexUnpadded(rHex.length / 2);
        const sLen = numberToHexUnpadded(sHex.length / 2);
        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);
        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
    }
    toRawBytes() {
        return this.toDERRawBytes();
    }
    toHex() {
        return this.toDERHex();
    }
    toCompactRawBytes() {
        return esm_hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
        return numTo32bStr(this.r) + numTo32bStr(this.s);
    }
}
function esm_concatBytes(...arrays) {
    if (!arrays.every(isUint8a))
        throw new Error('Uint8Array list expected');
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function isUint8a(bytes) {
    return bytes instanceof Uint8Array;
}
const esm_hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
function esm_bytesToHex(uint8a) {
    if (!(uint8a instanceof Uint8Array))
        throw new Error('Expected Uint8Array');
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += esm_hexes[uint8a[i]];
    }
    return hex;
}
function numTo32bStr(num) {
    if (num > POW_2_256)
        throw new Error('Expected number < 2^256');
    return num.toString(16).padStart(64, '0');
}
function numTo32b(num) {
    return esm_hexToBytes(numTo32bStr(num));
}
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);
    }
    return BigInt(`0x${hex}`);
}
function esm_hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
            throw new Error('Invalid byte sequence');
        array[i] = byte;
    }
    return array;
}
function bytesToNumber(bytes) {
    return hexToNumber(esm_bytesToHex(bytes));
}
function ensureBytes(hex) {
    return hex instanceof Uint8Array ? Uint8Array.from(hex) : esm_hexToBytes(hex);
}
function normalizeScalar(num) {
    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)
        return BigInt(num);
    if (typeof num === 'bigint' && isWithinCurveOrder(num))
        return num;
    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');
}
function mod(a, b = CURVE.P) {
    const result = a % b;
    return result >= esm_0n ? result : b + result;
}
function pow2(x, power) {
    const { P } = CURVE;
    let res = x;
    while (power-- > esm_0n) {
        res *= res;
        res %= P;
    }
    return res;
}
function sqrtMod(x) {
    const { P } = CURVE;
    const _6n = BigInt(6);
    const _11n = BigInt(11);
    const _22n = BigInt(22);
    const _23n = BigInt(23);
    const _44n = BigInt(44);
    const _88n = BigInt(88);
    const b2 = (x * x * x) % P;
    const b3 = (b2 * b2 * x) % P;
    const b6 = (pow2(b3, _3n) * b3) % P;
    const b9 = (pow2(b6, _3n) * b3) % P;
    const b11 = (pow2(b9, esm_2n) * b2) % P;
    const b22 = (pow2(b11, _11n) * b11) % P;
    const b44 = (pow2(b22, _22n) * b22) % P;
    const b88 = (pow2(b44, _44n) * b44) % P;
    const b176 = (pow2(b88, _88n) * b88) % P;
    const b220 = (pow2(b176, _44n) * b44) % P;
    const b223 = (pow2(b220, _3n) * b3) % P;
    const t1 = (pow2(b223, _23n) * b22) % P;
    const t2 = (pow2(t1, _6n) * b2) % P;
    return pow2(t2, esm_2n);
}
function invert(number, modulo = CURVE.P) {
    if (number === esm_0n || modulo <= esm_0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    }
    let a = mod(number, modulo);
    let b = modulo;
    let x = esm_0n, y = esm_1n, u = esm_1n, v = esm_0n;
    while (a !== esm_0n) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== esm_1n)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
function invertBatch(nums, p = CURVE.P) {
    const scratch = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i) => {
        if (num === esm_0n)
            return acc;
        scratch[i] = acc;
        return mod(acc * num, p);
    }, esm_1n);
    const inverted = invert(lastMultiplied, p);
    nums.reduceRight((acc, num, i) => {
        if (num === esm_0n)
            return acc;
        scratch[i] = mod(acc * scratch[i], p);
        return mod(acc * num, p);
    }, inverted);
    return scratch;
}
const divNearest = (a, b) => (a + b / esm_2n) / b;
const POW_2_128 = esm_2n ** BigInt(128);
function splitScalarEndo(k) {
    const { n } = CURVE;
    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
    const b1 = -esm_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
    const b2 = a1;
    const c1 = divNearest(b2 * k, n);
    const c2 = divNearest(-b1 * k, n);
    let k1 = mod(k - c1 * a1 - c2 * a2, n);
    let k2 = mod(-c1 * b1 - c2 * b2, n);
    const k1neg = k1 > POW_2_128;
    const k2neg = k2 > POW_2_128;
    if (k1neg)
        k1 = n - k1;
    if (k2neg)
        k2 = n - k2;
    if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);
    }
    return { k1neg, k1, k2neg, k2 };
}
function truncateHash(hash) {
    const { n } = CURVE;
    const byteLength = hash.length;
    const delta = byteLength * 8 - 256;
    let h = bytesToNumber(hash);
    if (delta > 0)
        h = h >> BigInt(delta);
    if (h >= n)
        h -= n;
    return h;
}
class HmacDrbg {
    constructor() {
        this.v = new Uint8Array(32).fill(1);
        this.k = new Uint8Array(32).fill(0);
        this.counter = 0;
    }
    hmac(...values) {
        return utils.hmacSha256(this.k, ...values);
    }
    hmacSync(...values) {
        if (typeof utils.hmacSha256Sync !== 'function')
            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');
        const res = utils.hmacSha256Sync(this.k, ...values);
        if (res instanceof Promise)
            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');
        return res;
    }
    incr() {
        if (this.counter >= 1000) {
            throw new Error('Tried 1,000 k values for sign(), all were invalid');
        }
        this.counter += 1;
    }
    async reseed(seed = new Uint8Array()) {
        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);
        this.v = await this.hmac(this.v);
        if (seed.length === 0)
            return;
        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);
        this.v = await this.hmac(this.v);
    }
    reseedSync(seed = new Uint8Array()) {
        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);
        this.v = this.hmacSync(this.v);
        if (seed.length === 0)
            return;
        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);
        this.v = this.hmacSync(this.v);
    }
    async generate() {
        this.incr();
        this.v = await this.hmac(this.v);
        return this.v;
    }
    generateSync() {
        this.incr();
        this.v = this.hmacSync(this.v);
        return this.v;
    }
}
function isWithinCurveOrder(num) {
    return esm_0n < num && num < CURVE.n;
}
function isValidFieldElement(num) {
    return esm_0n < num && num < CURVE.P;
}
function kmdToSig(kBytes, m, d) {
    const k = bytesToNumber(kBytes);
    if (!isWithinCurveOrder(k))
        return;
    const { n } = CURVE;
    const q = Point.BASE.multiply(k);
    const r = mod(q.x, n);
    if (r === esm_0n)
        return;
    const s = mod(invert(k, n) * mod(m + d * r, n), n);
    if (s === esm_0n)
        return;
    const sig = new Signature(r, s);
    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & esm_1n);
    return { sig, recovery };
}
function normalizePrivateKey(key) {
    let num;
    if (typeof key === 'bigint') {
        num = key;
    }
    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {
        num = BigInt(key);
    }
    else if (typeof key === 'string') {
        if (key.length !== 64)
            throw new Error('Expected 32 bytes of private key');
        num = hexToNumber(key);
    }
    else if (isUint8a(key)) {
        if (key.length !== 32)
            throw new Error('Expected 32 bytes of private key');
        num = bytesToNumber(key);
    }
    else {
        throw new TypeError('Expected valid private key');
    }
    if (!isWithinCurveOrder(num))
        throw new Error('Expected private key: 0 < key < n');
    return num;
}
function normalizePublicKey(publicKey) {
    if (publicKey instanceof Point) {
        publicKey.assertValidity();
        return publicKey;
    }
    else {
        return Point.fromHex(publicKey);
    }
}
function normalizeSignature(signature) {
    if (signature instanceof Signature) {
        signature.assertValidity();
        return signature;
    }
    try {
        return Signature.fromDER(signature);
    }
    catch (error) {
        return Signature.fromCompact(signature);
    }
}
function getPublicKey(privateKey, isCompressed = false) {
    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
}
function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
}
function isPub(item) {
    const arr = isUint8a(item);
    const str = typeof item === 'string';
    const len = (arr || str) && item.length;
    if (arr)
        return len === 33 || len === 65;
    if (str)
        return len === 66 || len === 130;
    if (item instanceof Point)
        return true;
    return false;
}
function getSharedSecret(privateA, publicB, isCompressed = false) {
    if (isPub(privateA))
        throw new TypeError('getSharedSecret: first arg must be private key');
    if (!isPub(publicB))
        throw new TypeError('getSharedSecret: second arg must be public key');
    const b = normalizePublicKey(publicB);
    b.assertValidity();
    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);
}
function bits2int(bytes) {
    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;
    return bytesToNumber(slice);
}
function bits2octets(bytes) {
    const z1 = bits2int(bytes);
    const z2 = mod(z1, CURVE.n);
    return int2octets(z2 < esm_0n ? z1 : z2);
}
function int2octets(num) {
    if (typeof num !== 'bigint')
        throw new Error('Expected bigint');
    const hex = numTo32bStr(num);
    return esm_hexToBytes(hex);
}
function initSigArgs(msgHash, privateKey, extraEntropy) {
    if (msgHash == null)
        throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
    const h1 = ensureBytes(msgHash);
    const d = normalizePrivateKey(privateKey);
    const seedArgs = [int2octets(d), bits2octets(h1)];
    if (extraEntropy != null) {
        if (extraEntropy === true)
            extraEntropy = utils.randomBytes(32);
        const e = ensureBytes(extraEntropy);
        if (e.length !== 32)
            throw new Error('sign: Expected 32 bytes of extra data');
        seedArgs.push(e);
    }
    const seed = esm_concatBytes(...seedArgs);
    const m = bits2int(h1);
    return { seed, m, d };
}
function finalizeSig(recSig, opts) {
    let { sig, recovery } = recSig;
    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);
    if (canonical && sig.hasHighS()) {
        sig = sig.normalizeS();
        recovery ^= 1;
    }
    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
    return recovered ? [hashed, recovery] : hashed;
}
async function esm_sign(msgHash, privKey, opts = {}) {
    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
    let sig;
    const drbg = new HmacDrbg();
    await drbg.reseed(seed);
    while (!(sig = kmdToSig(await drbg.generate(), m, d)))
        await drbg.reseed();
    return finalizeSig(sig, opts);
}
function signSync(msgHash, privKey, opts = {}) {
    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
    let sig;
    const drbg = new HmacDrbg();
    drbg.reseedSync(seed);
    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))
        drbg.reseedSync();
    return finalizeSig(sig, opts);
}

const vopts = { strict: true };
function verify(signature, msgHash, publicKey, opts = vopts) {
    let sig;
    try {
        sig = normalizeSignature(signature);
        msgHash = ensureBytes(msgHash);
    }
    catch (error) {
        return false;
    }
    const { r, s } = sig;
    if (opts.strict && sig.hasHighS())
        return false;
    const h = truncateHash(msgHash);
    if (h === esm_0n)
        return false;
    let P;
    try {
        P = normalizePublicKey(publicKey);
    }
    catch (error) {
        return false;
    }
    const { n } = CURVE;
    const sinv = invert(s, n);
    const u1 = mod(h * sinv, n);
    const u2 = mod(r * sinv, n);
    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);
    if (!R)
        return false;
    const v = mod(R.x, n);
    return v === r;
}
async function taggedHash(tag, ...messages) {
    const tagB = new Uint8Array(tag.split('').map((c) => c.charCodeAt(0)));
    const tagH = await utils.sha256(tagB);
    const h = await utils.sha256(esm_concatBytes(tagH, tagH, ...messages));
    return bytesToNumber(h);
}
async function createChallenge(x, P, message) {
    const rx = numTo32b(x);
    const t = await taggedHash('BIP0340/challenge', rx, P.toRawX(), message);
    return mod(t, CURVE.n);
}
function hasEvenY(point) {
    return (point.y & esm_1n) === esm_0n;
}
class SchnorrSignature {
    constructor(r, s) {
        this.r = r;
        this.s = s;
        this.assertValidity();
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        if (bytes.length !== 64)
            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
        const r = bytesToNumber(bytes.subarray(0, 32));
        const s = bytesToNumber(bytes.subarray(32, 64));
        return new SchnorrSignature(r, s);
    }
    assertValidity() {
        const { r, s } = this;
        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))
            throw new Error('Invalid signature');
    }
    toHex() {
        return numTo32bStr(this.r) + numTo32bStr(this.s);
    }
    toRawBytes() {
        return esm_hexToBytes(this.toHex());
    }
}
function schnorrGetPublicKey(privateKey) {
    return Point.fromPrivateKey(privateKey).toRawX();
}
async function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {
    if (message == null)
        throw new TypeError(`sign: Expected valid message, not "${message}"`);
    const { n } = CURVE;
    const m = ensureBytes(message);
    const d0 = normalizePrivateKey(privateKey);
    const rand = ensureBytes(auxRand);
    if (rand.length !== 32)
        throw new TypeError('sign: Expected 32 bytes of aux randomness');
    const P = Point.fromPrivateKey(d0);
    const d = hasEvenY(P) ? d0 : n - d0;
    const t0h = await taggedHash('BIP0340/aux', rand);
    const t = d ^ t0h;
    const k0h = await taggedHash('BIP0340/nonce', numTo32b(t), P.toRawX(), m);
    const k0 = mod(k0h, n);
    if (k0 === esm_0n)
        throw new Error('sign: Creation of signature failed. k is zero');
    const R = Point.fromPrivateKey(k0);
    const k = hasEvenY(R) ? k0 : n - k0;
    const e = await createChallenge(R.x, P, m);
    const sig = new SchnorrSignature(R.x, mod(k + e * d, n)).toRawBytes();
    const isValid = await schnorrVerify(sig, m, P.toRawX());
    if (!isValid)
        throw new Error('sign: Invalid signature produced');
    return sig;
}
async function schnorrVerify(signature, message, publicKey) {
    const raw = signature instanceof SchnorrSignature;
    let sig;
    try {
        sig = raw ? signature : SchnorrSignature.fromHex(signature);
        if (raw)
            sig.assertValidity();
    }
    catch (error) {
        return false;
    }
    const { r, s } = sig;
    const m = ensureBytes(message);
    let P;
    try {
        P = normalizePublicKey(publicKey);
    }
    catch (error) {
        return false;
    }
    const e = await createChallenge(r, P, m);
    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));
    if (!R || !hasEvenY(R) || R.x !== r)
        return false;
    return true;
}
const schnorr = {
    Signature: SchnorrSignature,
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify,
};
Point.BASE._setWindowSize(8);
const esm_crypto = {
    node: crypto_ignored_,
    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
};
const utils = {
    isValidPrivateKey(privateKey) {
        try {
            normalizePrivateKey(privateKey);
            return true;
        }
        catch (error) {
            return false;
        }
    },
    hashToPrivateKey: (hash) => {
        hash = ensureBytes(hash);
        if (hash.length < 40 || hash.length > 1024)
            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');
        const num = mod(bytesToNumber(hash), CURVE.n);
        if (num === esm_0n || num === esm_1n)
            throw new Error('Invalid private key');
        return numTo32b(num);
    },
    randomBytes: (bytesLength = 32) => {
        if (esm_crypto.web) {
            return esm_crypto.web.getRandomValues(new Uint8Array(bytesLength));
        }
        else if (esm_crypto.node) {
            const { randomBytes } = esm_crypto.node;
            return Uint8Array.from(randomBytes(bytesLength));
        }
        else {
            throw new Error("The environment doesn't have randomBytes function");
        }
    },
    randomPrivateKey: () => {
        return utils.hashToPrivateKey(utils.randomBytes(40));
    },
    bytesToHex: esm_bytesToHex,
    mod,
    sha256: async (message) => {
        if (esm_crypto.web) {
            const buffer = await esm_crypto.web.subtle.digest('SHA-256', message.buffer);
            return new Uint8Array(buffer);
        }
        else if (esm_crypto.node) {
            const { createHash } = esm_crypto.node;
            return Uint8Array.from(createHash('sha256').update(message).digest());
        }
        else {
            throw new Error("The environment doesn't have sha256 function");
        }
    },
    hmacSha256: async (key, ...messages) => {
        if (esm_crypto.web) {
            const ckey = await esm_crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);
            const message = esm_concatBytes(...messages);
            const buffer = await esm_crypto.web.subtle.sign('HMAC', ckey, message);
            return new Uint8Array(buffer);
        }
        else if (esm_crypto.node) {
            const { createHmac } = esm_crypto.node;
            const hash = createHmac('sha256', key);
            messages.forEach((m) => hash.update(m));
            return Uint8Array.from(hash.digest());
        }
        else {
            throw new Error("The environment doesn't have hmac-sha256 function");
        }
    },
    sha256Sync: undefined,
    hmacSha256Sync: undefined,
    precompute(windowSize = 8, point = Point.BASE) {
        const cached = point === Point.BASE ? point : new Point(point.x, point.y);
        cached._setWindowSize(windowSize);
        cached.multiply(_3n);
        return cached;
    },
};

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/bn.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BN_BE_OPTS = {
  isLe: false
};
const BN_LE_OPTS = {
  isLe: true
};
const BN_LE_16_OPTS = {
  bitLength: 16,
  isLe: true
};
const BN_BE_32_OPTS = {
  bitLength: 32,
  isLe: false
};
const BN_LE_32_OPTS = {
  bitLength: 32,
  isLe: true
};
const BN_BE_256_OPTS = {
  bitLength: 256,
  isLe: false
};
const BN_LE_256_OPTS = {
  bitLength: 256,
  isLe: true
};
const BN_LE_512_OPTS = {
  bitLength: 512,
  isLe: true
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/expand.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0




function expand_secp256k1Expand(publicKey, onlyJs) {
  if (publicKey.length === 65) {
    return publicKey.subarray(1);
  }

  assert(publicKey.length === 33, 'Invalid publicKey provided');

  if (!hasBigInt || !onlyJs && bundle_isReady()) {
    return secp256k1Expand(publicKey).subarray(1);
  }

  const {
    x,
    y
  } = Point.fromHex(publicKey);
  return u8aConcat(bnToU8a(x, BN_BE_256_OPTS), bnToU8a(y, BN_BE_256_OPTS));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ethereum/encode.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0




function getH160(u8a) {
  if ([33, 65].includes(u8a.length)) {
    u8a = keccakAsU8a(expand_secp256k1Expand(u8a));
  }

  return u8a.slice(-20);
}

function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return '0x';
  }

  const u8aAddress = u8aToU8a(addressOrPublic);
  assert([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
  const address = u8aToHex(getH160(u8aAddress), -1, false);
  const hash = u8aToHex(keccakAsU8a(address), -1, false);
  let result = '';

  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }

  return `0x${result}`;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/ethereum/AccountId.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



/** @internal */

function decodeAccountId(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (isHex(value) || isEthereumAddress(value)) {
    return hexToU8a(value);
  } else if (isString(value)) {
    return u8aToU8a(value);
  }

  return value;
}
/**
 * @name GenericEthereumAccountId
 * @description
 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */


class GenericEthereumAccountId extends U8aFixed {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAccountId(value), 160);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return ethereumEncode(this);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountId';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U32.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u32
 * @description
 * A 32-bit unsigned integer
 */

class U32_u32 extends UInt["with"](32) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u32';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/address/encode.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34





function encodeAddress(key, ss58Format = defaults.prefix) {
  // decode it, this means we can re-encode an address
  const u8a = decodeAddress(key);
  assert(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
  assert(defaults.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(', ')}`);
  const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);
  return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/AccountIndex.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const PREFIX_1BYTE = 0xef;
const PREFIX_2BYTE = 0xfc;
const PREFIX_4BYTE = 0xfd;
const PREFIX_8BYTE = 0xfe;
const MAX_1BYTE = new lib_bn(PREFIX_1BYTE);
const MAX_2BYTE = new lib_bn(1).shln(16);
const MAX_4BYTE = new lib_bn(1).shln(32);
/** @internal */

function decodeAccountIndex(value) {
  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  if (value instanceof GenericAccountIndex) {
    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
    // AccountIndex), which has the initial `toString()` implementation.
    return value.toBn();
  } else if (isBn(value) || isNumber(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
    return value;
  }

  return decodeAccountIndex(decodeAddress(value));
}
/**
 * @name GenericAccountIndex
 * @description
 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
 * for an Account. We extends from [[U32]] to provide the number-like properties.
 */


class GenericAccountIndex extends U32_u32 {
  constructor(registry, value = new lib_bn(0)) {
    super(registry, decodeAccountIndex(value));
  }

  static calcLength(_value) {
    const value = bnToBn(_value);

    if (value.lte(MAX_1BYTE)) {
      return 1;
    } else if (value.lt(MAX_2BYTE)) {
      return 2;
    } else if (value.lt(MAX_4BYTE)) {
      return 4;
    }

    return 8;
  }

  static readLength(input) {
    const first = input[0];

    if (first === PREFIX_2BYTE) {
      return [1, 2];
    } else if (first === PREFIX_4BYTE) {
      return [1, 4];
    } else if (first === PREFIX_8BYTE) {
      return [1, 8];
    }

    return [0, 1];
  }

  static writeLength(input) {
    switch (input.length) {
      case 2:
        return new Uint8Array([PREFIX_2BYTE]);

      case 4:
        return new Uint8Array([PREFIX_4BYTE]);

      case 8:
        return new Uint8Array([PREFIX_8BYTE]);

      default:
        return new Uint8Array([]);
    }
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    // shortcut for BN or Number, don't create an object
    if (isBn(other) || isNumber(other)) {
      return super.eq(other);
    } // convert and compare


    return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    const length = GenericAccountIndex.calcLength(this);
    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountIndex';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/ethereum/LookupSource.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0




 // eslint-disable-next-line no-use-before-define

const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */

function decodeString(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 20 ? registry.createTypeUnsafe('EthereumAccountId', [decoded]) : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded, true)]);
}
/** @internal */


function LookupSource_decodeU8a(registry, value) {
  // This allows us to instantiate an address with a raw publicKey. Do this first before
  // we checking the first byte, otherwise we may split an already-existent valid address
  if (value.length === 20) {
    return registry.createTypeUnsafe('EthereumAccountId', [value]);
  } else if (value[0] === 0xff) {
    return registry.createTypeUnsafe('EthereumAccountId', [value.subarray(1)]);
  }

  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length), true)]);
}

function decodeAddressOrIndex(registry, value) {
  return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? LookupSource_decodeU8a(registry, u8aToU8a(value)) : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe('AccountIndex', [value]) : decodeString(registry, value);
}
/**
 * @name GenericEthereumLookupSource
 * @description
 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */


class GenericEthereumLookupSource extends Base {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
    rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */


  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Address';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/ethereum/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/AccountId.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



/** @internal */

function AccountId_decodeAccountId(value) {
  if (isU8a(value) || Array.isArray(value)) {
    return u8aToU8a(value);
  } else if (!value) {
    return new Uint8Array();
  } else if (isHex(value)) {
    return hexToU8a(value);
  } else if (isString(value)) {
    return decodeAddress(value);
  }

  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
/**
 * @name GenericAccountId
 * @description
 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */


class GenericAccountId extends U8aFixed {
  constructor(registry, value) {
    const decoded = AccountId_decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)

    assert(decoded.length >= 32 || !decoded.some(b => b), () => `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
    super(registry, decoded, 256);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return super.eq(AccountId_decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return encodeAddress(this, this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountId';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/Block.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name GenericBlock
 * @description
 * A block encoded with header and extrinsics
 */
class GenericBlock extends Struct {
  constructor(registry, value) {
    super(registry, {
      header: 'Header',
      // eslint-disable-next-line sort-keys
      extrinsics: 'Vec<Extrinsic>'
    }, value);
  }
  /**
   * @description Encodes a content [[Hash]] for the block
   */


  get contentHash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The [[Extrinsic]] contained in the block
   */


  get extrinsics() {
    return this.getT('extrinsics');
  }
  /**
   * @description Block/header [[Hash]]
   */


  get hash() {
    return this.header.hash;
  }
  /**
   * @description The [[Header]] of the block
   */


  get header() {
    return this.getT('header');
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/Call.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, {
    name,
    type
  }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
/** @internal */


function decodeCallViaObject(registry, value, _meta) {
  // we only pass args/methodsIndex out
  const {
    args,
    callIndex
  } = value; // Get the correct lookupIndex
  // eslint-disable-next-line @typescript-eslint/no-use-before-define

  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex

  const meta = _meta || registry.findMetaCall(lookupIndex).meta;

  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
/** @internal */


function decodeCallViaU8a(registry, value, _meta) {
  // We need 2 bytes for the callIndex
  const callIndex = new Uint8Array(2);
  callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex

  const meta = _meta || registry.findMetaCall(callIndex).meta;

  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */


function decodeCall(registry, value = new Uint8Array(), _meta) {
  if (isU8a(value) || isHex(value)) {
    return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
  } else if (isObject(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }

  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
/**
 * @name GenericCallIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */


class GenericCallIndex extends U8aFixed {
  constructor(registry, value) {
    super(registry, value, 16);
  }

}
/**
 * @name GenericCall
 * @description
 * Extrinsic function descriptor
 */

class GenericCall extends Struct {
  constructor(registry, value, meta) {
    const decoded = decodeCall(registry, value, meta);

    try {
      super(registry, {
        callIndex: GenericCallIndex,
        // eslint-disable-next-line sort-keys
        args: Struct["with"](decoded.argsDef)
      }, decoded);
    } catch (error) {
      let method = 'unknown.unknown';

      try {
        const c = registry.findMetaCall(decoded.callIndex);
        method = `${c.section}.${c.method}`;
      } catch (error) {// ignore
      }

      throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
    }

    this._meta = decoded.meta;
  }
  /**
   * @description The arguments for the function call
   */


  get args() {
    return [...this.getT('args').values()];
  }
  /**
   * @description The argument definitions
   */


  get argsDef() {
    return getArgsDef(this.registry, this.meta);
  }
  /**
   * @description The argument entries
   */


  get argsEntries() {
    return [...this.getT('args').entries()];
  }
  /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */


  get callIndex() {
    return this.getT('callIndex').toU8a();
  }
  /**
   * @description The encoded data
   */


  get data() {
    return this.getT('args').toU8a();
  }
  /**
   * @description The [[FunctionMetadata]]
   */


  get meta() {
    return this._meta;
  }
  /**
   * @description Returns the name of the method
   */


  get method() {
    return this.registry.findMetaCall(this.callIndex).method;
  }

  get registry() {
    return super.registry;
  }
  /**
   * @description Returns the module containing the method
   */


  get section() {
    return this.registry.findMetaCall(this.callIndex).section;
  }
  /**
   * @description Checks if the source matches this in type
   */


  is(other) {
    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    var _call, _call2;

    let call;

    try {
      call = this.registry.findMetaCall(this.callIndex);
    } catch (error) {// swallow
    }

    return objectSpread({
      args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, {
        [n]: a.toHuman(isExpanded)
      }), {}),
      method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
      section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
    }, isExpanded && call ? {
      docs: call.meta.docs.map(d => d.toString())
    } : null);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Call';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/ChainProperties.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



function createValue(registry, type, value, asArray = true) {
  // We detect codec here as well - when found, generally this is constructed from itself
  if (value && isFunction(value.unwrapOrDefault)) {
    return value;
  }

  return registry.createTypeUnsafe(type, [asArray ? isNull(value) || isUndefined(value) ? null : Array.isArray(value) ? value : [value] : value]);
}

function decodeValue(registry, key, value) {
  return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
}

function decode(registry, value) {
  return ( // allow decoding from a map as well (ourselves)
  value && isFunction(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
    all[key] = decodeValue(registry, key, value);
    return all;
  }, {
    ss58Format: registry.createTypeUnsafe('Option<u32>', []),
    tokenDecimals: registry.createTypeUnsafe('Option<Vec<u32>>', []),
    tokenSymbol: registry.createTypeUnsafe('Option<Vec<Text>>', [])
  });
}

class GenericChainProperties extends Json {
  constructor(registry, value) {
    super(registry, decode(registry, value));
  }
  /**
   * @description The chain ss58Format
   */


  get ss58Format() {
    return this.getT('ss58Format');
  }
  /**
   * @description The decimals for each of the tokens
   */


  get tokenDecimals() {
    return this.getT('tokenDecimals');
  }
  /**
   * @description The symbols for the tokens
   */


  get tokenSymbol() {
    return this.getT('tokenSymbol');
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/ConsensusEngineId.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


const CID_AURA = stringToU8a('aura');
const CID_BABE = stringToU8a('BABE');
const CID_GRPA = stringToU8a('FRNK');
const CID_POW = stringToU8a('pow_');

function getAuraAuthor(registry, bytes, sessionValidators) {
  return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)]).slotNumber.mod(new lib_bn(sessionValidators.length)).toNumber()];
}

function getBabeAuthor(registry, bytes, sessionValidators) {
  const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);
  return sessionValidators[digest.value.toNumber()];
}

function getBytesAsAuthor(registry, bytes) {
  return registry.createTypeUnsafe('AccountId', [bytes]);
}
/**
 * @name GenericConsensusEngineId
 * @description
 * A 4-byte identifier identifying the engine
 */


class GenericConsensusEngineId extends U8aFixed {
  constructor(registry, value) {
    super(registry, isNumber(value) ? bnToU8a(value, {
      isLe: false
    }) : value, 32);
  }
  /**
   * @description `true` if the engine matches aura
   */


  get isAura() {
    return this.eq(CID_AURA);
  }
  /**
   * @description `true` is the engine matches babe
   */


  get isBabe() {
    return this.eq(CID_BABE);
  }
  /**
   * @description `true` is the engine matches grandpa
   */


  get isGrandpa() {
    return this.eq(CID_GRPA);
  }
  /**
   * @description `true` is the engine matches pow
   */


  get isPow() {
    return this.eq(CID_POW);
  }
  /**
   * @description From the input bytes, decode into an author
   */


  extractAuthor(bytes, sessionValidators) {
    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
      if (this.isAura) {
        return getAuraAuthor(this.registry, bytes, sessionValidators);
      } else if (this.isBabe) {
        return getBabeAuthor(this.registry, bytes, sessionValidators);
      }
    } // For pow & Moonbeam, the bytes are the actual author


    if (this.isPow || bytes.length === 20) {
      return getBytesAsAuthor(this.registry, bytes);
    }

    return undefined;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'ConsensusEngineId';
  }
  /**
   * @description Override the default toString to return a 4-byte string
   */


  toString() {
    return this.isAscii ? u8aToString(this) : u8aToHex(this);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/LookupSource.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0




 // eslint-disable-next-line no-use-before-define

const LookupSource_ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */

function LookupSource_decodeString(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 32 ? registry.createTypeUnsafe('AccountId', [decoded]) : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded, true)]);
}
/** @internal */


function generic_LookupSource_decodeU8a(registry, value) {
  // This allows us to instantiate an address with a raw publicKey. Do this first before
  // we checking the first byte, otherwise we may split an already-existent valid address
  if (value.length === 32) {
    return registry.createTypeUnsafe('AccountId', [value]);
  } else if (value[0] === 0xff) {
    return registry.createTypeUnsafe('AccountId', [value.subarray(1)]);
  }

  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length), true)]);
}
/** @internal */


function LookupSource_decodeAddressOrIndex(registry, value) {
  return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber(value) || isBigInt(value) ? registry.createTypeUnsafe('AccountIndex', [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? generic_LookupSource_decodeU8a(registry, u8aToU8a(value)) : LookupSource_decodeString(registry, value);
}
/**
 * @name LookupSource
 * @description
 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */


class GenericLookupSource extends Base {
  constructor(registry, value = new Uint8Array()) {
    super(registry, LookupSource_decodeAddressOrIndex(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
    rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */


  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const value = this.inner.toU8a().subarray(0, this._rawLength);
    return {
      outer: [new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : LookupSource_ACCOUNT_ID_PREFIX), value]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Address';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : LookupSource_ACCOUNT_ID_PREFIX, encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/MultiAddress.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0






function MultiAddress_decodeU8a(registry, u8a) {
  if ([0, 32].includes(u8a.length)) {
    return {
      Id: u8a
    };
  } else if (u8a.length === 20) {
    return {
      Address20: u8a
    };
  } else if (u8a.length <= 8) {
    return {
      Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber()
    };
  }

  return u8a;
}

function decodeMultiAny(registry, value) {
  if (value instanceof GenericAccountId) {
    return {
      Id: value
    };
  } else if (isU8a(value)) {
    // NOTE This is after the AccountId check (which is U8a)
    return MultiAddress_decodeU8a(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber(value)) {
    return {
      Index: isNumber(value) ? value : value.toNumber()
    };
  } else if (isString(value)) {
    return MultiAddress_decodeU8a(registry, decodeAddress(value.toString()));
  }

  return value;
}

class GenericMultiAddress extends Enum {
  constructor(registry, value) {
    super(registry, {
      Id: 'AccountId',
      Index: 'Compact<AccountIndex>',
      Raw: 'Bytes',
      // eslint-disable-next-line sort-keys
      Address32: 'H256',
      // eslint-disable-next-line sort-keys
      Address20: 'H160'
    }, decodeMultiAny(registry, value));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const {
      inner,
      outer = []
    } = this.inner.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.value.toString();
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Bool.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bool
 * @description
 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
 * @noInheritDoc
 */

class bool extends Boolean {
  // eslint-disable-next-line @typescript-eslint/ban-types
  constructor(registry, value = false) {
    super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 1;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */


  get isEmpty() {
    return this.isFalse;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */


  get isFalse() {
    return !this.isTrue;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */


  get isTrue() {
    return this.valueOf();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return u8aToHex(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.valueOf();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'bool';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toJSON().toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return new Uint8Array([this.valueOf() ? 1 : 0]);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/Vote.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


// For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
const AYE_BITS = 0b10000000;
const NAY_BITS = 0b00000000;
const CON_MASK = 0b01111111;
const DEF_CONV = 0b00000000; // the default conviction, None

/** @internal */

function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
/** @internal */


function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
/** @internal */


function decodeVoteType(registry, value) {
  return new Uint8Array([(new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index]);
}
/** @internal */


function decodeVote(registry, value) {
  if (isU8a(value)) {
    return decodeVoteU8a(value);
  } else if (isUndefined(value) || value instanceof Boolean || isBoolean(value)) {
    return decodeVoteBool(new bool(registry, value).isTrue);
  } else if (isNumber(value)) {
    return decodeVoteBool(value < 0);
  }

  return decodeVoteType(registry, value);
}
/**
 * @name GenericVote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */


class GenericVote extends U8aFixed {
  #aye;
  #conviction;

  constructor(registry, value) {
    // decoded is just 1 byte
    // Aye: Most Significant Bit
    // Conviction: 0000 - 0101
    const decoded = decodeVote(registry, value);
    super(registry, decoded, 8);
    this.#aye = (decoded[0] & AYE_BITS) === AYE_BITS;
    this.#conviction = this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]);
  }
  /**
   * @description returns a V2 conviction
   */


  get conviction() {
    return this.#conviction;
  }
  /**
   * @description true if the wrapped value is a positive vote
   */


  get isAye() {
    return this.#aye;
  }
  /**
   * @description true if the wrapped value is a negative vote
   */


  get isNay() {
    return !this.isAye;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return {
      conviction: this.conviction.toHuman(isExpanded),
      vote: this.isAye ? 'Aye' : 'Nay'
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Vote';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/generic/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0











;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/BitVec.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */

function decodeBitVecU8a(value) {
  if (!value || !value.length) {
    return [0, new Uint8Array()];
  } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded


  const [offset, length] = compactFromU8a(value);
  const total = offset + Math.ceil(length.toNumber() / 8);
  assert(total <= value.length, () => `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  return [length.toNumber(), value.subarray(offset, total)];
}
/** @internal */


function decodeBitVec(value) {
  if (Array.isArray(value) || isString(value)) {
    const u8a = u8aToU8a(value);
    return [u8a.length / 8, u8a];
  }

  return decodeBitVecU8a(value);
}
/**
 * @name BitVec
 * @description
 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
 */


class BitVec extends Raw {
  #decodedLength;
  #isMsb; // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
  // we are dealing with Lsb, which is the default (as of writing) BitVec format used
  // in the Polkadot code (this only affects the toHuman displays)

  constructor(registry, value, isMsb = false) {
    const [decodedLength, u8a] = decodeBitVec(value);
    super(registry, u8a);
    this.#decodedLength = decodedLength;
    this.#isMsb = isMsb;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length + compactToU8a(this.#decodedLength).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    return {
      outer: [compactToU8a(this.#decodedLength), super.toU8a()]
    };
  }

  toHuman() {
    return `0b${[...this.toU8a(true)].map(d => `00000000${d.toString(2)}`.slice(-8)).map(s => this.#isMsb ? s : s.split('').reverse().join('')).join('_')}`;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'BitVec';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const bitVec = super.toU8a();
    return isBare ? bitVec : u8aConcat(compactToU8a(this.#decodedLength), bitVec);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I8.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i8
 * @description
 * An 8-bit signed integer
 */

class i8 extends Int["with"](8) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i8';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I16.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i16
 * @description
 * A 16-bit signed integer
 */

class i16 extends Int["with"](16) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i16';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I32.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i32
 * @description
 * A 32-bit signed integer
 */

class i32 extends Int["with"](32) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i32';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I64.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i64
 * @description
 * A 64-bit signed integer
 */

class i64 extends Int["with"](64) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i64';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I128.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i128
 * @description
 * A 128-bit signed integer
 */

class i128 extends Int["with"](128) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i128';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/I256.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i256
 * @description
 * A 256-bit signed integer
 */

class i256 extends Int["with"](256) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = 'i256';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/native/Text.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


const Text_MAX_LENGTH = 128 * 1024;
/** @internal */

function decodeText(value) {
  if (isU8a(value)) {
    if (!value.length) {
      return ['', 0];
    } // for Raw, the internal buffer does not have an internal length
    // (the same applies in e.g. Bytes, where length is added at encoding-time)


    if (value instanceof Raw) {
      return [u8aToString(value), 0];
    }

    const [offset, length] = compactFromU8a(value);
    const total = offset + length.toNumber();
    assert(length.lten(Text_MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${Text_MAX_LENGTH}`);
    assert(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [u8aToString(value.subarray(offset, total)), total];
  } else if (isHex(value)) {
    return [u8aToString(hexToU8a(value)), 0];
  }

  return [value ? value.toString() : '', 0];
}
/**
 * @name Text
 * @description
 * This is a string wrapper, along with the length. It is used both for strings as well
 * as items such as documentation. It simply extends the standard JS `String` built-in
 * object, inheriting all methods exposed from `String`.
 * @noInheritDoc
 */


class Text extends String {
  #initialU8aLength;
  #override = null;

  constructor(registry, value) {
    const [str, decodedLength] = decodeText(value);
    super(str);
    this.registry = registry;
    this.#initialU8aLength = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The length of the initial encoded value (Only available when constructed from a Uint8Array)
   */


  get initialU8aLength() {
    return this.#initialU8aLength;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return isString(other) ? this.toString() === other.toString() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */


  inspect() {
    const value = stringToU8a(super.toString());
    return {
      outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
    };
  }
  /**
   * @description Set an override value for this
   */


  setOverride(override) {
    this.#override = override;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    // like with Vec<u8>, when we are encoding to hex, we don't actually add
    // the length prefix (it is already implied by the actual string length)
    return u8aToHex(this.toU8a(true));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Text';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.#override || super.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    // NOTE Here we use the super toString (we are not taking overrides into account,
    // rather encoding the original value the string was constructed with)
    const encoded = stringToU8a(super.toString());
    return isBare ? encoded : compactAddLength(encoded);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/extended/Type.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name Type
 * @description
 * This is a extended version of Text, specifically to handle types. Here we rely fully
 * on what Text provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
 */

class Type extends Text {
  constructor(registry, value = '') {
    super(registry, value);
    this.setOverride(sanitize(this.toString()));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Type';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U8.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8
 * @description
 * An 8-bit unsigned integer
 */

class U8_u8 extends UInt["with"](8) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u8';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U16.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u16
 * @description
 * A 16-bit unsigned integer
 */

class U16_u16 extends UInt["with"](16) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u16';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U128.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u128
 * @description
 * A 128-bit unsigned integer
 */

class u128 extends UInt["with"](128) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u128';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/U256.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u256
 * @description
 * A 256-bit unsigned integer
 */

class u256 extends UInt["with"](256) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = 'u256';
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-codec/primitive/USize.js
// Copyright 2017-2022 @polkadot/types-codec authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name USize
 * @description
 * A System default unsigned number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it created consensus mismatches.
 */

class usize extends U32_u32 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/primitive/Data.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */

function decodeDataU8a(registry, value) {
  const indicator = value[0];

  if (!indicator) {
    return [undefined, undefined];
  } else if (indicator >= 1 && indicator <= 33) {
    const length = indicator - 1;
    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)

    return [registry.createTypeUnsafe('Raw', [data]), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
  }

  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
/** @internal */


function decodeData(registry, value) {
  if (isU8a(value) || isString(value)) {
    return decodeDataU8a(registry, u8aToU8a(value));
  } else if (!value) {
    return [undefined, undefined];
  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding


  return [value, undefined];
}
/**
 * @name Data
 * @description
 * A [[Data]] container with node, raw or hashed data
 */


class Data extends Enum {
  constructor(registry, value) {
    super(registry, {
      None: 'Null',
      // 0
      Raw: 'Bytes',
      // 1
      // eslint-disable-next-line sort-keys
      BlakeTwo256: 'H256',
      // 2
      Sha256: 'H256',
      // 3
      // eslint-disable-next-line sort-keys
      Keccak256: 'H256',
      // 4
      ShaThree256: 'H256' // 5

    }, ...decodeData(registry, value));
    assert(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');
  }

  get asBlakeTwo256() {
    return this.value;
  }

  get asKeccak256() {
    return this.value;
  }

  get asRaw() {
    return this.value;
  }

  get asSha256() {
    return this.value;
  }

  get asShaThree256() {
    return this.value;
  }

  get isBlakeTwo256() {
    return this.index === 2;
  }

  get isKeccak256() {
    return this.index === 4;
  }

  get isNone() {
    return this.index === 0;
  }

  get isRaw() {
    return this.index === 1;
  }

  get isSha256() {
    return this.index === 3;
  }

  get isShaThree256() {
    return this.index === 5;
  }
  /**
   * @description The encoded length
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */


  toU8a() {
    if (this.index === 0) {
      return new Uint8Array(1);
    } else if (this.index === 1) {
      // don't add the length, just the data
      const data = this.value.toU8a(true);
      const length = Math.min(data.length, 32);
      const u8a = new Uint8Array(length + 1);
      u8a.set([length + 1], 0);
      u8a.set(data.subarray(0, length), 1);
      return u8a;
    } // otherwise we simply have a hash


    const u8a = new Uint8Array(33);
    u8a.set([this.index + 32], 0);
    u8a.set(this.value.toU8a(), 1);
    return u8a;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/getSiName.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getSiName(lookup, type) {
  const typeDef = lookup.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/primitive/StorageKey.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



// hasher type -> [initialHashLength, canDecodeKey]
const HASHER_MAP = {
  // opaque
  Blake2_128: [16, false],
  // eslint-disable-line camelcase
  Blake2_128Concat: [16, true],
  // eslint-disable-line camelcase
  Blake2_256: [32, false],
  // eslint-disable-line camelcase
  Identity: [0, true],
  Twox128: [16, false],
  Twox256: [32, false],
  Twox64Concat: [8, true]
};
function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
/** @internal */

function unwrapStorageType(registry, type, isOptional) {
  const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}
/** @internal */

function decodeStorageKey(value) {
  if (isU8a(value) || !value || isString(value)) {
    // let Bytes handle these inputs
    return {
      key: value
    };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if (isFunction(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    assert(isFunction(fn), 'Expected function input for key construction');

    if (fn.meta && fn.meta.type.isMap) {
      const map = fn.meta.type.asMap;
      assert(Array.isArray(args) && args.length === map.hashers.length, () => `Expected an array of ${map.hashers.length} values as params to a Map query`);
    }

    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }

  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
/** @internal */


function decodeHashers(registry, value, hashers) {
  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
  let offset = 32;
  const result = new Array(hashers.length);

  for (let i = 0; i < hashers.length; i++) {
    const [hasher, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher.type];
    const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe('Raw', [value.subarray(offset, offset + hashLen)]);
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }

  return result;
}
/** @internal */


function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }

  const {
    hashers,
    key
  } = meta.type.asMap;
  const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
}
/** @internal */


function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if (isFunction(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }

  return undefined;
}
/** @internal */


function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if (isFunction(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;

    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  } // If we have no type set, default to Raw


  return 'Raw';
}
/**
 * @name StorageKey
 * @description
 * A representation of a storage key (typically hashed) in the system. It can be
 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
 */


class StorageKey extends Bytes {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore This is assigned via this.decodeArgsFromMeta()
  #args;
  #meta;
  #outputType;
  #method;
  #section;

  constructor(registry, value, override = {}) {
    const {
      key,
      method,
      section
    } = decodeStorageKey(value);
    super(registry, key);
    this.#outputType = getType(registry, value); // decode the args (as applicable based on the key and the hashers, after all init)

    this.setMeta(getMeta(value), override.section || section, override.method || method);
  }
  /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */


  get args() {
    return this.#args;
  }
  /**
   * @description The metadata or `undefined` when not available
   */


  get meta() {
    return this.#meta;
  }
  /**
   * @description The key method or `undefined` when not specified
   */


  get method() {
    return this.#method;
  }
  /**
   * @description The output type
   */


  get outputType() {
    return this.#outputType;
  }
  /**
   * @description The key section or `undefined` when not specified
   */


  get section() {
    return this.#section;
  }

  is(key) {
    return key.section === this.section && key.method === this.method;
  }
  /**
   * @description Sets the meta for this key
   */


  setMeta(meta, section, method) {
    this.#meta = meta;
    this.#method = method || this.#method;
    this.#section = section || this.#section;

    if (meta) {
      this.#outputType = unwrapStorageType(this.registry, meta.type);
    }

    try {
      this.#args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
    } catch (error) {// ignore...
    }

    return this;
  }
  /**
   * @description Returns the Human representation for this type
   */


  toHuman() {
    return this.#args.length ? this.#args.map(a => a.toHuman()) : super.toHuman();
  }
  /**
   * @description Returns the raw type for this
   */


  toRawType() {
    return 'StorageKey';
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/primitive/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @summary Type definitions that are used in the system
 */



;// CONCATENATED MODULE: ./node_modules/@polkadot/types/index.types.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v9.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v9 = {
  // v9
  ErrorMetadataV9: {
    name: 'Text',
    docs: 'Vec<Text>'
  },
  EventMetadataV9: {
    name: 'Text',
    args: 'Vec<Type>',
    docs: 'Vec<Text>'
  },
  FunctionArgumentMetadataV9: {
    name: 'Text',
    type: 'Type'
  },
  FunctionMetadataV9: {
    name: 'Text',
    args: 'Vec<FunctionArgumentMetadataV9>',
    docs: 'Vec<Text>'
  },
  MetadataV9: {
    modules: 'Vec<ModuleMetadataV9>'
  },
  ModuleConstantMetadataV9: {
    name: 'Text',
    type: 'Type',
    value: 'Bytes',
    docs: 'Vec<Text>'
  },
  ModuleMetadataV9: {
    name: 'Text',
    storage: 'Option<StorageMetadataV9>',
    calls: 'Option<Vec<FunctionMetadataV9>>',
    events: 'Option<Vec<EventMetadataV9>>',
    constants: 'Vec<ModuleConstantMetadataV9>',
    errors: 'Vec<ErrorMetadataV9>'
  },
  StorageEntryMetadataV9: {
    name: 'Text',
    modifier: 'StorageEntryModifierV9',
    type: 'StorageEntryTypeV9',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryModifierV9: {
    _enum: ['Optional', 'Default', 'Required']
  },
  StorageEntryTypeV9: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV9',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV9',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV9'
      }
    }
  },
  StorageHasherV9: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  },
  StorageMetadataV9: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV9>'
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v10.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v10 = {
  // v10
  ErrorMetadataV10: 'ErrorMetadataV9',
  EventMetadataV10: 'EventMetadataV9',
  FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
  FunctionMetadataV10: 'FunctionMetadataV9',
  MetadataV10: {
    modules: 'Vec<ModuleMetadataV10>'
  },
  ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
  ModuleMetadataV10: {
    name: 'Text',
    storage: 'Option<StorageMetadataV10>',
    calls: 'Option<Vec<FunctionMetadataV10>>',
    events: 'Option<Vec<EventMetadataV10>>',
    constants: 'Vec<ModuleConstantMetadataV10>',
    errors: 'Vec<ErrorMetadataV10>'
  },
  StorageEntryModifierV10: 'StorageEntryModifierV9',
  StorageEntryMetadataV10: {
    name: 'Text',
    modifier: 'StorageEntryModifierV10',
    type: 'StorageEntryTypeV10',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV10: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV10',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV10',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV10'
      }
    }
  },
  StorageMetadataV10: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV10>'
  },
  StorageHasherV10: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Blake2_128Concat: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/hashers.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const AllHashers = {
  Blake2_128: null,
  // eslint-disable-line camelcase
  Blake2_256: null,
  // eslint-disable-line camelcase
  Blake2_128Concat: null,
  // eslint-disable-line camelcase
  Twox128: null,
  Twox256: null,
  Twox64Concat: null,
  // new in v11
  Identity: null
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v11.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */

const v11 = {
  // v11
  ErrorMetadataV11: 'ErrorMetadataV10',
  EventMetadataV11: 'EventMetadataV10',
  ExtrinsicMetadataV11: {
    version: 'u8',
    signedExtensions: 'Vec<Text>'
  },
  FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
  FunctionMetadataV11: 'FunctionMetadataV10',
  MetadataV11: {
    modules: 'Vec<ModuleMetadataV11>',
    extrinsic: 'ExtrinsicMetadataV11'
  },
  ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
  ModuleMetadataV11: {
    name: 'Text',
    storage: 'Option<StorageMetadataV11>',
    calls: 'Option<Vec<FunctionMetadataV11>>',
    events: 'Option<Vec<EventMetadataV11>>',
    constants: 'Vec<ModuleConstantMetadataV11>',
    errors: 'Vec<ErrorMetadataV11>'
  },
  StorageEntryModifierV11: 'StorageEntryModifierV10',
  StorageEntryMetadataV11: {
    name: 'Text',
    modifier: 'StorageEntryModifierV11',
    type: 'StorageEntryTypeV11',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV11: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV11',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV11',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV11'
      }
    }
  },
  StorageMetadataV11: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV11>'
  },
  StorageHasherV11: {
    _enum: AllHashers
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v12.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v12 = {
  // v12
  ErrorMetadataV12: 'ErrorMetadataV11',
  EventMetadataV12: 'EventMetadataV11',
  ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
  FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
  FunctionMetadataV12: 'FunctionMetadataV11',
  MetadataV12: {
    modules: 'Vec<ModuleMetadataV12>',
    extrinsic: 'ExtrinsicMetadataV12'
  },
  ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
  ModuleMetadataV12: {
    name: 'Text',
    storage: 'Option<StorageMetadataV12>',
    calls: 'Option<Vec<FunctionMetadataV12>>',
    events: 'Option<Vec<EventMetadataV12>>',
    constants: 'Vec<ModuleConstantMetadataV12>',
    errors: 'Vec<ErrorMetadataV12>',
    index: 'u8'
  },
  StorageEntryModifierV12: 'StorageEntryModifierV11',
  StorageEntryMetadataV12: 'StorageEntryMetadataV11',
  StorageEntryTypeV12: 'StorageEntryTypeV11',
  StorageMetadataV12: 'StorageMetadataV11',
  StorageHasherV12: 'StorageHasherV11'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v13.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v13 = {
  // v13
  ErrorMetadataV13: 'ErrorMetadataV12',
  EventMetadataV13: 'EventMetadataV12',
  ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
  FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
  FunctionMetadataV13: 'FunctionMetadataV12',
  MetadataV13: {
    modules: 'Vec<ModuleMetadataV13>',
    extrinsic: 'ExtrinsicMetadataV13'
  },
  ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
  ModuleMetadataV13: {
    name: 'Text',
    storage: 'Option<StorageMetadataV13>',
    calls: 'Option<Vec<FunctionMetadataV13>>',
    events: 'Option<Vec<EventMetadataV13>>',
    constants: 'Vec<ModuleConstantMetadataV13>',
    errors: 'Vec<ErrorMetadataV13>',
    index: 'u8'
  },
  StorageEntryModifierV13: 'StorageEntryModifierV12',
  StorageEntryMetadataV13: {
    name: 'Text',
    modifier: 'StorageEntryModifierV13',
    type: 'StorageEntryTypeV13',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV13: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV13',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV13',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV13'
      },
      NMap: {
        keyVec: 'Vec<Type>',
        hashers: 'Vec<StorageHasherV13>',
        value: 'Type'
      }
    }
  },
  StorageMetadataV13: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV13>'
  },
  StorageHasherV13: 'StorageHasherV12'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const Si1Variant = {
  name: 'Text',
  fields: 'Vec<Si1Field>',
  index: 'u8',
  docs: 'Vec<Text>'
};
const v1 = {
  Si1Field: {
    name: 'Option<Text>',
    type: 'Si1LookupTypeId',
    typeName: 'Option<Text>',
    docs: 'Vec<Text>'
  },
  Si1LookupTypeId: 'Compact<u32>',
  Si1Path: 'Si0Path',
  Si1Type: {
    path: 'Si1Path',
    params: 'Vec<Si1TypeParameter>',
    def: 'Si1TypeDef',
    docs: 'Vec<Text>'
  },
  Si1TypeDef: {
    _enum: {
      Composite: 'Si1TypeDefComposite',
      Variant: 'Si1TypeDefVariant',
      Sequence: 'Si1TypeDefSequence',
      Array: 'Si1TypeDefArray',
      Tuple: 'Si1TypeDefTuple',
      Primitive: 'Si1TypeDefPrimitive',
      Compact: 'Si1TypeDefCompact',
      BitSequence: 'Si1TypeDefBitSequence',
      // NOTE: This is specific to the implementation for pre-v14 metadata
      // compatibility (always keep this as the last entry in the enum)
      HistoricMetaCompat: 'Type'
    }
  },
  Si1TypeDefArray: {
    len: 'u32',
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefBitSequence: {
    bitStoreType: 'Si1LookupTypeId',
    bitOrderType: 'Si1LookupTypeId'
  },
  Si1TypeDefCompact: {
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefComposite: {
    fields: 'Vec<Si1Field>'
  },
  Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
  Si1TypeDefSequence: {
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
  Si1TypeParameter: {
    name: 'Text',
    type: 'Option<Si1LookupTypeId>'
  },
  Si1TypeDefVariant: {
    variants: 'Vec<Si1Variant>'
  },
  Si1Variant
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/v14.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */


const v14 = {
  // registry
  PortableTypeV14: {
    id: 'Si1LookupTypeId',
    type: 'Si1Type'
  },
  // compatibility with earlier layouts, i.e. don't break previous users
  ErrorMetadataV14: objectSpread({}, Si1Variant, {
    args: 'Vec<Type>'
  }),
  EventMetadataV14: objectSpread({}, Si1Variant, {
    args: 'Vec<Type>'
  }),
  FunctionArgumentMetadataV14: {
    name: 'Text',
    type: 'Type',
    typeName: 'Option<Type>'
  },
  FunctionMetadataV14: objectSpread({}, Si1Variant, {
    args: 'Vec<FunctionArgumentMetadataV14>'
  }),
  // V14
  ExtrinsicMetadataV14: {
    type: 'SiLookupTypeId',
    version: 'u8',
    signedExtensions: 'Vec<SignedExtensionMetadataV14>'
  },
  MetadataV14: {
    lookup: 'PortableRegistry',
    pallets: 'Vec<PalletMetadataV14>',
    extrinsic: 'ExtrinsicMetadataV14',
    type: 'SiLookupTypeId'
  },
  PalletCallMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletConstantMetadataV14: {
    name: 'Text',
    type: 'SiLookupTypeId',
    value: 'Bytes',
    docs: 'Vec<Text>'
  },
  PalletErrorMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletEventMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletMetadataV14: {
    name: 'Text',
    storage: 'Option<PalletStorageMetadataV14>',
    calls: 'Option<PalletCallMetadataV14>',
    events: 'Option<PalletEventMetadataV14>',
    constants: 'Vec<PalletConstantMetadataV14>',
    errors: 'Option<PalletErrorMetadataV14>',
    index: 'u8'
  },
  PalletStorageMetadataV14: {
    prefix: 'Text',
    // NOTE: Renamed from entries
    items: 'Vec<StorageEntryMetadataV14>'
  },
  SignedExtensionMetadataV14: {
    identifier: 'Text',
    type: 'SiLookupTypeId',
    additionalSigned: 'SiLookupTypeId'
  },
  StorageEntryMetadataV14: {
    name: 'Text',
    modifier: 'StorageEntryModifierV14',
    type: 'StorageEntryTypeV14',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryModifierV14: 'StorageEntryModifierV13',
  StorageEntryTypeV14: {
    _enum: {
      Plain: 'SiLookupTypeId',
      Map: {
        hashers: 'Vec<StorageHasherV14>',
        key: 'SiLookupTypeId',
        // NOTE: Renamed from "keys"
        value: 'SiLookupTypeId'
      }
    }
  },
  StorageHasherV14: 'StorageHasherV13'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/metadata/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */









/* harmony default export */ const definitions = ({
  rpc: {},
  types: objectSpread({}, v9, v10, v11, v12, v13, v14, {
    // latest mappings
    ErrorMetadataLatest: 'ErrorMetadataV14',
    EventMetadataLatest: 'EventMetadataV14',
    ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
    FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
    FunctionMetadataLatest: 'FunctionMetadataV14',
    MetadataLatest: 'MetadataV14',
    PalletCallMetadataLatest: 'PalletCallMetadataV14',
    PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
    PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
    PalletEventMetadataLatest: 'PalletEventMetadataV14',
    PalletMetadataLatest: 'PalletMetadataV14',
    PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
    PortableType: 'PortableTypeV14',
    SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
    StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
    StorageEntryModifierLatest: 'StorageEntryModifierV14',
    StorageEntryTypeLatest: 'StorageEntryTypeV14',
    StorageHasher: 'StorageHasherV14',
    // the enum containing all the mappings
    MetadataAll: {
      _enum: {
        V0: 'DoNotConstruct<MetadataV0>',
        V1: 'DoNotConstruct<MetadataV1>',
        V2: 'DoNotConstruct<MetadataV2>',
        V3: 'DoNotConstruct<MetadataV3>',
        V4: 'DoNotConstruct<MetadataV4>',
        V5: 'DoNotConstruct<MetadataV5>',
        V6: 'DoNotConstruct<MetadataV6>',
        V7: 'DoNotConstruct<MetadataV7>',
        V8: 'DoNotConstruct<MetadataV8>',
        // First version on Kusama in V9, dropping will be problematic
        V9: 'MetadataV9',
        V10: 'MetadataV10',
        V11: 'MetadataV11',
        V12: 'MetadataV12',
        V13: 'MetadataV13',
        V14: 'MetadataV14'
      }
    }
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/runtime/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */

const numberTypes = {
  Fixed64: 'Int<64, Fixed64>',
  FixedI64: 'Int<64, FixedI64>',
  FixedU64: 'UInt<64, FixedU64>',
  Fixed128: 'Int<128, Fixed128>',
  FixedI128: 'Int<128, FixedI128>',
  FixedU128: 'UInt<128, FixedU128>',
  I32F32: 'Int<64, I32F32>',
  U32F32: 'UInt<64, U32F32>',
  PerU16: 'UInt<16, PerU16>',
  Perbill: 'UInt<32, Perbill>',
  Percent: 'UInt<8, Percent>',
  Permill: 'UInt<32, Permill>',
  Perquintill: 'UInt<64, Perquintill>'
}; // Since we don't have insight into the origin specification, we can only define what we know about
// in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all

const knownOrigins = {
  //
  // (1) Defaults from Substrate
  //
  Council: 'CollectiveOrigin',
  System: 'SystemOrigin',
  TechnicalCommittee: 'CollectiveOrigin',
  //
  // (2) Defaults from Polkadot
  //
  Xcm: 'XcmOrigin',
  XcmPallet: 'XcmOrigin',
  //
  // (3) Defaults from Acala
  //
  Authority: 'AuthorityOrigin',
  GeneralCouncil: 'CollectiveOrigin'
};
/* harmony default export */ const runtime_definitions = ({
  rpc: {},
  types: objectSpread({}, numberTypes, {
    AccountId: 'AccountId32',
    AccountId20: 'GenericEthereumAccountId',
    AccountId32: 'GenericAccountId',
    AccountIdOf: 'AccountId',
    AccountIndex: 'GenericAccountIndex',
    Address: 'MultiAddress',
    AssetId: 'u32',
    Balance: 'UInt<128, Balance>',
    BalanceOf: 'Balance',
    Block: 'GenericBlock',
    BlockNumber: 'u32',
    BlockNumberFor: 'BlockNumber',
    BlockNumberOf: 'BlockNumber',
    Call: 'GenericCall',
    CallHash: 'Hash',
    CallHashOf: 'CallHash',
    ChangesTrieConfiguration: {
      digestInterval: 'u32',
      digestLevels: 'u32'
    },
    ChangesTrieSignal: {
      _enum: {
        NewConfiguration: 'Option<ChangesTrieConfiguration>'
      }
    },
    ConsensusEngineId: 'GenericConsensusEngineId',
    CodecHash: 'Hash',
    CrateVersion: {
      major: 'u16',
      minor: 'u8',
      patch: 'u8'
    },
    Digest: {
      logs: 'Vec<DigestItem>'
    },
    DigestItem: {
      _enum: {
        Other: 'Bytes',
        // 0
        AuthoritiesChange: 'Vec<AuthorityId>',
        // 1
        ChangesTrieRoot: 'Hash',
        // 2
        SealV0: 'SealV0',
        // 3
        Consensus: 'Consensus',
        // 4
        Seal: 'Seal',
        // 5
        PreRuntime: 'PreRuntime',
        // 6
        ChangesTrieSignal: 'ChangesTrieSignal',
        // 7
        RuntimeEnvironmentUpdated: 'Null' // 8

      }
    },
    ExtrinsicsWeight: {
      normal: 'Weight',
      operational: 'Weight'
    },
    H32: '[u8; 4; H32]',
    H64: '[u8; 8; H64]',
    H128: '[u8; 16; H128]',
    H160: '[u8; 20; H160]',
    H256: '[u8; 32; H256]',
    H512: '[u8; 64; H512]',
    H1024: '[u8; 128; H1024]',
    H2048: '[u8; 256; H2048]',
    Hash: 'H256',
    Header: {
      parentHash: 'Hash',
      number: 'Compact<BlockNumber>',
      stateRoot: 'Hash',
      extrinsicsRoot: 'Hash',
      digest: 'Digest'
    },
    HeaderPartial: {
      parentHash: 'Hash',
      // since we only parse JSON with this, having non-compact works
      number: 'BlockNumber'
    },
    IndicesLookupSource: 'GenericLookupSource',
    Index: 'u32',
    Justification: '(ConsensusEngineId, EncodedJustification)',
    EncodedJustification: 'Bytes',
    Justifications: 'Vec<Justification>',
    KeyValue: '(StorageKey, StorageData)',
    KeyTypeId: 'u32',
    LockIdentifier: '[u8; 8]',
    LookupSource: 'MultiAddress',
    LookupTarget: 'AccountId',
    ModuleId: 'LockIdentifier',
    MultiAddress: 'GenericMultiAddress',
    MultiSigner: {
      _enum: {
        Ed25519: '[u8; 32]',
        Sr25519: '[u8; 32]',
        Ecdsa: '[u8; 33]'
      }
    },
    Moment: 'UInt<64, Moment>',
    OpaqueCall: 'Bytes',
    Origin: 'DoNotConstruct<Origin>',
    OriginCaller: {
      _enum: {
        // this should be dynamically built from the actual modules, based on index
        System: 'SystemOrigin'
      }
    },
    PalletId: 'LockIdentifier',
    PalletsOrigin: 'OriginCaller',
    PalletVersion: {
      major: 'u16',
      minor: 'u8',
      patch: 'u8'
    },
    Pays: {
      _enum: ['Yes', 'No']
    },
    Phantom: 'Null',
    PhantomData: 'Null',
    Releases: {
      _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    },
    RuntimeDbWeight: {
      read: 'Weight',
      write: 'Weight'
    },
    SignedBlock: 'SignedBlockWithJustifications',
    SignedBlockWithJustification: {
      block: 'Block',
      justification: 'Option<EncodedJustification>'
    },
    SignedBlockWithJustifications: {
      block: 'Block',
      justifications: 'Option<Justifications>'
    },
    Slot: 'u64',
    StorageData: 'Bytes',
    StorageProof: {
      trieNodes: 'Vec<Bytes>'
    },
    TransactionPriority: 'u64',
    TransactionInfo: {
      _alias: {
        dataSize: 'size'
      },
      chunkRoot: 'H256',
      contentHash: 'H256',
      dataSize: 'u32',
      blockChunks: 'u32'
    },
    TransactionStorageProof: {
      chunk: 'Vec<u8>',
      proof: 'Vec<Vec<u8>>'
    },
    ValidatorId: 'AccountId',
    ValidatorIdOf: 'ValidatorId',
    Weight: 'u64',
    WeightMultiplier: 'Fixed64',
    // digest
    PreRuntime: '(ConsensusEngineId, Bytes)',
    SealV0: '(u64, Signature)',
    Seal: '(ConsensusEngineId, Bytes)',
    Consensus: '(ConsensusEngineId, Bytes)'
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v0 = {
  Si0Field: {
    name: 'Option<Text>',
    type: 'Si0LookupTypeId',
    typeName: 'Option<Text>',
    docs: 'Vec<Text>'
  },
  Si0LookupTypeId: 'u32',
  Si0Path: 'Vec<Text>',
  Si0Type: {
    path: 'Si0Path',
    params: 'Vec<Si0LookupTypeId>',
    def: 'Si0TypeDef'
  },
  Si0TypeDef: {
    _enum: {
      Composite: 'Si0TypeDefComposite',
      Variant: 'Si0TypeDefVariant',
      Sequence: 'Si0TypeDefSequence',
      Array: 'Si0TypeDefArray',
      Tuple: 'Si0TypeDefTuple',
      Primitive: 'Si0TypeDefPrimitive',
      Compact: 'Si0TypeDefCompact',
      Phantom: 'Si0TypeDefPhantom',
      BitSequence: 'Si0TypeDefBitSequence'
    }
  },
  Si0TypeDefArray: {
    len: 'u32',
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefBitSequence: {
    bitStoreType: 'Si0LookupTypeId',
    bitOrderType: 'Si0LookupTypeId'
  },
  Si0TypeDefCompact: {
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefComposite: {
    fields: 'Vec<Si0Field>'
  },
  Si0TypeDefPhantom: 'Null',
  Si0TypeDefVariant: {
    variants: 'Vec<Si0Variant>'
  },
  Si0TypeDefPrimitive: {
    _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
  },
  Si0TypeDefSequence: {
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
  Si0TypeParameter: {
    name: 'Text',
    type: 'Option<Si0LookupTypeId>'
  },
  Si0Variant: {
    name: 'Text',
    fields: 'Vec<Si0Field>',
    index: 'Option<u8>',
    discriminant: 'Option<u64>',
    docs: 'Vec<Text>'
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


 // order important in structs... :)

/* eslint-disable sort-keys */

/* harmony default export */ const scaleInfo_definitions = ({
  rpc: {},
  types: objectSpread({}, v0, v1, {
    // latest mappings
    SiField: 'Si1Field',
    SiLookupTypeId: 'Si1LookupTypeId',
    SiPath: 'Si1Path',
    SiType: 'Si1Type',
    SiTypeDef: 'Si1TypeDef',
    SiTypeDefArray: 'Si1TypeDefArray',
    SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
    SiTypeDefCompact: 'Si1TypeDefCompact',
    SiTypeDefComposite: 'Si1TypeDefComposite',
    SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
    SiTypeDefSequence: 'Si1TypeDefSequence',
    SiTypeDefTuple: 'Si1TypeDefTuple',
    SiTypeParameter: 'Si1TypeParameter',
    SiTypeDefVariant: 'Si1TypeDefVariant',
    SiVariant: 'Si1Variant'
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/essentials.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/assets/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const assets_definitions = ({
  rpc: {},
  types: {
    AssetApprovalKey: {
      owner: 'AccountId',
      delegate: 'AccountId'
    },
    AssetApproval: {
      amount: 'TAssetBalance',
      deposit: 'TAssetDepositBalance'
    },
    AssetBalance: {
      balance: 'TAssetBalance',
      isFrozen: 'bool',
      isSufficient: 'bool'
    },
    AssetDestroyWitness: {
      accounts: 'Compact<u32>',
      sufficients: 'Compact<u32>',
      approvals: 'Compact<u32>'
    },
    AssetDetails: {
      owner: 'AccountId',
      issuer: 'AccountId',
      admin: 'AccountId',
      freezer: 'AccountId',
      supply: 'TAssetBalance',
      deposit: 'TAssetDepositBalance',
      minBalance: 'TAssetBalance',
      isSufficient: 'bool',
      accounts: 'u32',
      sufficients: 'u32',
      approvals: 'u32',
      isFrozen: 'bool'
    },
    AssetMetadata: {
      deposit: 'TAssetDepositBalance',
      name: 'Vec<u8>',
      symbol: 'Vec<u8>',
      decimals: 'u8',
      isFrozen: 'bool'
    },
    TAssetBalance: 'u64',
    TAssetDepositBalance: 'BalanceOf'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/authorship/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const authorship_definitions = ({
  rpc: {},
  types: {
    UncleEntryItem: {
      _enum: {
        InclusionHeight: 'BlockNumber',
        Uncle: '(Hash, Option<AccountId>)'
      }
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/aura/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const aura_definitions = ({
  rpc: {},
  types: {
    RawAuraPreDigest: {
      slotNumber: 'u64'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/babe/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const babe_definitions = ({
  rpc: {
    epochAuthorship: {
      description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
      params: [],
      type: 'HashMap<AuthorityId, EpochAuthorship>'
    }
  },
  types: {
    AllowedSlots: {
      _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
    },
    BabeAuthorityWeight: 'u64',
    BabeEpochConfiguration: {
      c: '(u64, u64)',
      allowedSlots: 'AllowedSlots'
    },
    BabeBlockWeight: 'u32',
    BabeEquivocationProof: {
      offender: 'AuthorityId',
      slotNumber: 'SlotNumber',
      firstHeader: 'Header',
      secondHeader: 'Header'
    },
    BabeWeight: 'u64',
    MaybeRandomness: 'Option<Randomness>',
    MaybeVrf: 'Option<VrfData>',
    EpochAuthorship: {
      primary: 'Vec<u64>',
      secondary: 'Vec<u64>',
      secondary_vrf: 'Vec<u64>'
    },
    NextConfigDescriptor: {
      _enum: {
        V0: 'Null',
        V1: 'NextConfigDescriptorV1'
      }
    },
    NextConfigDescriptorV1: {
      c: '(u64, u64)',
      allowedSlots: 'AllowedSlots'
    },
    Randomness: 'Hash',
    RawBabePreDigest: {
      _enum: {
        Phantom: 'Null',
        // index starts at 1... empty slot at 0
        Primary: 'RawBabePreDigestPrimary',
        SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
        SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
      }
    },
    RawBabePreDigestPrimary: {
      authorityIndex: 'u32',
      // AuthorityIndex (also in aura)
      slotNumber: 'SlotNumber',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestSecondaryPlain: {
      authorityIndex: 'u32',
      // AuthorityIndex (also in aura)
      slotNumber: 'SlotNumber'
    },
    RawBabePreDigestSecondaryVRF: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestTo159: {
      _enum: {
        Primary: 'RawBabePreDigestPrimaryTo159',
        Secondary: 'RawBabePreDigestSecondaryTo159'
      }
    },
    RawBabePreDigestPrimaryTo159: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      weight: 'BabeBlockWeight',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestSecondaryTo159: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      weight: 'BabeBlockWeight'
    },
    // a cross old/new compatible version of the digest, that is _only_ useful
    // for partial parsing and extraction of the author. This assumes that all
    // entries has the authorityIndex in the first position - and that it is all
    // we are interested in
    RawBabePreDigestCompat: {
      _enum: {
        Zero: 'u32',
        One: 'u32',
        Two: 'u32',
        Three: 'u32'
      }
    },
    SlotNumber: 'u64',
    VrfData: '[u8; 32]',
    VrfOutput: '[u8; 32]',
    VrfProof: '[u8; 64]'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/balances/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const balances_definitions = ({
  rpc: {},
  types: {
    AccountData: {
      free: 'Balance',
      reserved: 'Balance',
      miscFrozen: 'Balance',
      feeFrozen: 'Balance'
    },
    BalanceLockTo212: {
      id: 'LockIdentifier',
      amount: 'Balance',
      until: 'BlockNumber',
      reasons: 'WithdrawReasons'
    },
    BalanceLock: {
      id: 'LockIdentifier',
      amount: 'Balance',
      reasons: 'Reasons'
    },
    BalanceStatus: {
      _enum: ['Free', 'Reserved']
    },
    Reasons: {
      _enum: ['Fee', 'Misc', 'All']
    },
    ReserveData: {
      id: 'ReserveIdentifier',
      amount: 'Balance'
    },
    ReserveIdentifier: '[u8; 8]',
    VestingSchedule: {
      offset: 'Balance',
      perBlock: 'Balance',
      startingBlock: 'BlockNumber'
    },
    WithdrawReasons: {
      _set: {
        TransactionPayment: 0b00000001,
        Transfer: 0b00000010,
        Reserve: 0b00000100,
        Fee: 0b00001000,
        Tip: 0b00010000
      }
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/beefy/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const beefy_definitions = ({
  rpc: {
    subscribeJustifications: {
      description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
      params: [],
      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
      type: 'BeefySignedCommitment'
    },
    getFinalizedHead: {
      description: 'Returns hash of the latest BEEFY finalized block as seen by this client.',
      params: [],
      type: 'H256'
    }
  },
  types: {
    BeefyCommitment: {
      payload: 'BeefyPayload',
      blockNumber: 'BlockNumber',
      validatorSetId: 'ValidatorSetId'
    },
    BeefyId: '[u8; 33]',
    BeefySignedCommitment: {
      commitment: 'BeefyCommitment',
      signatures: 'Vec<Option<EcdsaSignature>>'
    },
    BeefyNextAuthoritySet: {
      id: 'u64',
      len: 'u32',
      root: 'H256'
    },
    BeefyPayload: 'MmrRootHash',
    MmrRootHash: 'H256',
    ValidatorSetId: 'u64'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/collective/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const collective_definitions = ({
  rpc: {},
  types: {
    CollectiveOrigin: {
      _enum: {
        Members: '(MemberCount, MemberCount)',
        Member: 'AccountId'
      }
    },
    MemberCount: 'u32',
    ProposalIndex: 'u32',
    VotesTo230: {
      index: 'ProposalIndex',
      threshold: 'MemberCount',
      ayes: 'Vec<AccountId>',
      nays: 'Vec<AccountId>'
    },
    Votes: {
      index: 'ProposalIndex',
      threshold: 'MemberCount',
      ayes: 'Vec<AccountId>',
      nays: 'Vec<AccountId>',
      end: 'BlockNumber'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/consensus/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const consensus_definitions = ({
  rpc: {},
  types: {
    AuthorityId: 'AccountId',
    RawVRFOutput: '[u8; 32]'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/contracts/rpc.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const rpc = ({
  call: {
    description: 'Executes a call to a contract',
    params: [{
      name: 'callRequest',
      type: 'ContractCallRequest'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'ContractExecResult'
  },
  instantiate: {
    description: 'Instantiate a new contract',
    params: [{
      name: 'request',
      type: 'InstantiateRequest'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHstoric: true,
      isOptional: true
    }],
    type: 'ContractInstantiateResult'
  },
  uploadCode: {
    // The RPC here is terribly misnamed - somebody forgot how the RPCs
    // are actually done, ie. <module>_<camelCasedMethod>
    endpoint: 'contracts_upload_code',
    description: 'Upload new code without instantiating a contract from it',
    params: [{
      name: 'uploadRequest',
      type: 'CodeUploadRequest'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHstoric: true,
      isOptional: true
    }],
    type: 'CodeUploadResult'
  },
  getStorage: {
    description: 'Returns the value under a specified storage key in a contract',
    params: [{
      name: 'address',
      type: 'AccountId'
    }, {
      name: 'key',
      type: 'H256'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'Option<Bytes>'
  },
  rentProjection: {
    description: 'Returns the projected time a given contract will be able to sustain paying its rent',
    params: [{
      name: 'address',
      type: 'AccountId'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'Option<BlockNumber>'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/contracts/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */

/* harmony default export */ const contracts_definitions = ({
  rpc: rpc,
  types: {
    AliveContractInfo: {
      trieId: 'TrieId',
      storageSize: 'u32',
      pairCount: 'u32',
      codeHash: 'CodeHash',
      rentAllowance: 'Balance',
      rentPaid: 'Balance',
      deductBlock: 'BlockNumber',
      lastWrite: 'Option<BlockNumber>',
      _reserved: 'Option<Null>'
    },
    CodeHash: 'Hash',
    CodeSource: {
      _enum: {
        Upload: 'Bytes',
        Existing: 'Hash'
      }
    },
    CodeUploadRequest: {
      origin: 'AccountId',
      code: 'Bytes',
      storageDepositLimit: 'Option<Balance>'
    },
    CodeUploadResult: {
      _enum: {
        Ok: 'CodeUploadResultValue',
        Err: 'Null'
      }
    },
    CodeUploadResultValue: {
      codeHash: 'CodeHash',
      deposit: 'Balance'
    },
    ContractCallRequest: {
      origin: 'AccountId',
      dest: 'AccountId',
      value: 'Balance',
      gasLimit: 'u64',
      storageDepositLimit: 'Option<Balance>',
      inputData: 'Bytes'
    },
    ContractExecResultSuccessTo255: {
      status: 'u8',
      data: 'Raw'
    },
    ContractExecResultTo255: {
      _enum: {
        Success: 'ContractExecResultSuccessTo255',
        Error: 'Null'
      }
    },
    ContractExecResultSuccessTo260: {
      flags: 'ContractReturnFlags',
      data: 'Bytes',
      gasConsumed: 'u64'
    },
    ContractExecResultTo260: {
      _enum: {
        Success: 'ContractExecResultSuccessTo260',
        Error: 'Null'
      }
    },
    ContractExecResultErrModule: {
      index: 'u8',
      error: 'u8',
      message: 'Option<Text>'
    },
    ContractExecResultErr: {
      _enum: {
        Other: 'Text',
        CannotLookup: 'Null',
        BadOrigin: 'Null',
        Module: 'ContractExecResultErrModule'
      }
    },
    ContractExecResultOk: {
      flags: 'ContractReturnFlags',
      data: 'Bytes'
    },
    ContractExecResultResult: {
      _enum: {
        Ok: 'ContractExecResultOk',
        Err: 'ContractExecResultErr'
      }
    },
    ContractExecResultTo267: {
      gasConsumed: 'u64',
      debugMessage: 'Text',
      result: 'ContractExecResultResult'
    },
    ContractExecResult: {
      gasConsumed: 'u64',
      gasRequired: 'u64',
      storageDeposit: 'StorageDeposit',
      debugMessage: 'Text',
      result: 'ContractExecResultResult'
    },
    ContractInfo: {
      _enum: {
        Alive: 'AliveContractInfo',
        Tombstone: 'TombstoneContractInfo'
      }
    },
    ContractCallFlags: {
      _set: {
        _bitLength: 32,
        ForwardInput: 0b00000001,
        CloneInput: 0b00000010,
        TailCall: 0b00000100,
        AllowReentry: 0b00001000
      }
    },
    ContractReturnFlags: {
      _set: {
        _bitLength: 32,
        Revert: 0x00000001
      }
    },
    ContractStorageKey: '[u8; 32]',
    DeletedContract: {
      pairCount: 'u32',
      trieId: 'TrieId'
    },
    ExecReturnValue: {
      flags: 'ContractReturnFlags',
      data: 'Bytes'
    },
    Gas: 'u64',
    HostFnWeightsTo264: {
      caller: 'Weight',
      address: 'Weight',
      gasLeft: 'Weight',
      balance: 'Weight',
      valueTransferred: 'Weight',
      minimumBalance: 'Weight',
      tombstoneDeposit: 'Weight',
      rentAllowance: 'Weight',
      blockNumber: 'Weight',
      now: 'Weight',
      weightToFee: 'Weight',
      gas: 'Weight',
      input: 'Weight',
      inputPerByte: 'Weight',
      return: 'Weight',
      returnPerByte: 'Weight',
      terminate: 'Weight',
      restoreTo: 'Weight',
      restoreToPerDelta: 'Weight',
      random: 'Weight',
      depositEvent: 'Weight',
      depositEventPerTopic: 'Weight',
      depositEventPerByte: 'Weight',
      setRentAllowance: 'Weight',
      setStorage: 'Weight',
      setStoragePerByte: 'Weight',
      clearStorage: 'Weight',
      getStorage: 'Weight',
      getStoragePerByte: 'Weight',
      transfer: 'Weight',
      call: 'Weight',
      callTransferSurcharge: 'Weight',
      callPerInputByte: 'Weight',
      callPerOutputByte: 'Weight',
      instantiate: 'Weight',
      instantiatePerInputByte: 'Weight',
      instantiatePerOutputByte: 'Weight',
      hashSha2256: 'Weight',
      hashSha2256PerByte: 'Weight',
      hashKeccak256: 'Weight',
      hashKeccak256PerByte: 'Weight',
      hashBlake2256: 'Weight',
      hashBlake2256PerByte: 'Weight',
      hashBlake2128: 'Weight',
      hashBlake2128PerByte: 'Weight'
    },
    HostFnWeights: {
      caller: 'Weight',
      address: 'Weight',
      gasLeft: 'Weight',
      balance: 'Weight',
      valueTransferred: 'Weight',
      minimumBalance: 'Weight',
      tombstoneDeposit: 'Weight',
      rentAllowance: 'Weight',
      blockNumber: 'Weight',
      now: 'Weight',
      weightToFee: 'Weight',
      gas: 'Weight',
      input: 'Weight',
      inputPerByte: 'Weight',
      return: 'Weight',
      returnPerByte: 'Weight',
      terminate: 'Weight',
      terminatePerCodeByte: 'Weight',
      restoreTo: 'Weight',
      restoreToPerCallerCodeByte: 'Weight',
      restoreToPerTombstoneCodeByte: 'Weight',
      restoreToPerDelta: 'Weight',
      random: 'Weight',
      depositEvent: 'Weight',
      depositEventPerTopic: 'Weight',
      depositEventPerByte: 'Weight',
      setRentAllowance: 'Weight',
      setStorage: 'Weight',
      setStoragePerByte: 'Weight',
      clearStorage: 'Weight',
      getStorage: 'Weight',
      getStoragePerByte: 'Weight',
      transfer: 'Weight',
      call: 'Weight',
      callPerCodeByte: 'Weight',
      callTransferSurcharge: 'Weight',
      callPerInputByte: 'Weight',
      callPerOutputByte: 'Weight',
      instantiate: 'Weight',
      instantiatePerCodeByte: 'Weight',
      instantiatePerInputByte: 'Weight',
      instantiatePerOutputByte: 'Weight',
      instantiatePerSaltByte: 'Weight',
      hashSha2256: 'Weight',
      hashSha2256PerByte: 'Weight',
      hashKeccak256: 'Weight',
      hashKeccak256PerByte: 'Weight',
      hashBlake2256: 'Weight',
      hashBlake2256PerByte: 'Weight',
      hashBlake2128: 'Weight',
      hashBlake2128PerByte: 'Weight',
      rentParams: 'Weight'
    },
    InstantiateRequestV1: {
      origin: 'AccountId',
      value: 'Balance',
      gasLimit: 'Gas',
      code: 'Bytes',
      data: 'Bytes',
      salt: 'Bytes'
    },
    InstantiateRequestV2: {
      _fallback: 'InstantiateRequestV1',
      origin: 'AccountId',
      value: 'Balance',
      gasLimit: 'Gas',
      storageDepositLimit: 'Option<Balance>',
      code: 'Bytes',
      data: 'Bytes',
      salt: 'Bytes'
    },
    InstantiateRequest: {
      _fallback: 'InstantiateRequestV2',
      origin: 'AccountId',
      value: 'Balance',
      gasLimit: 'Gas',
      storageDepositLimit: 'Option<Balance>',
      code: 'CodeSource',
      data: 'Bytes',
      salt: 'Bytes'
    },
    ContractInstantiateResultTo267: {
      _enum: {
        Ok: 'InstantiateReturnValueTo267',
        Err: 'Null'
      }
    },
    ContractInstantiateResultTo299: {
      _enum: {
        Ok: 'InstantiateReturnValue',
        Err: 'Null'
      },
      _fallback: 'ContractInstantiateResultTo267'
    },
    ContractInstantiateResult: {
      _fallback: 'ContractInstantiateResultTo299',
      gasConsumed: 'u64',
      gasRequired: 'u64',
      storageDeposit: 'StorageDeposit',
      debugMessage: 'Text',
      result: 'InstantiateReturnValue'
    },
    InstantiateReturnValueTo267: {
      result: 'ExecReturnValue',
      accountId: 'AccountId',
      rentProjection: 'Option<RentProjection>'
    },
    InstantiateReturnValueOk: {
      result: 'ExecReturnValue',
      accountId: 'AccountId'
    },
    InstantiateReturnValue: {
      _enum: {
        Ok: 'InstantiateReturnValueOk',
        Err: 'DispatchError'
      }
    },
    InstructionWeights: {
      i64const: 'u32',
      i64load: 'u32',
      i64store: 'u32',
      select: 'u32',
      rIf: 'u32',
      br: 'u32',
      brIf: 'u32',
      brIable: 'u32',
      brIablePerEntry: 'u32',
      call: 'u32',
      callIndirect: 'u32',
      callIndirectPerParam: 'u32',
      localGet: 'u32',
      localSet: 'u32',
      local_tee: 'u32',
      globalGet: 'u32',
      globalSet: 'u32',
      memoryCurrent: 'u32',
      memoryGrow: 'u32',
      i64clz: 'u32',
      i64ctz: 'u32',
      i64popcnt: 'u32',
      i64eqz: 'u32',
      i64extendsi32: 'u32',
      i64extendui32: 'u32',
      i32wrapi64: 'u32',
      i64eq: 'u32',
      i64ne: 'u32',
      i64lts: 'u32',
      i64ltu: 'u32',
      i64gts: 'u32',
      i64gtu: 'u32',
      i64les: 'u32',
      i64leu: 'u32',
      i64ges: 'u32',
      i64geu: 'u32',
      i64add: 'u32',
      i64sub: 'u32',
      i64mul: 'u32',
      i64divs: 'u32',
      i64divu: 'u32',
      i64rems: 'u32',
      i64remu: 'u32',
      i64and: 'u32',
      i64or: 'u32',
      i64xor: 'u32',
      i64shl: 'u32',
      i64shrs: 'u32',
      i64shru: 'u32',
      i64rotl: 'u32',
      i64rotr: 'u32'
    },
    LimitsTo264: {
      eventTopics: 'u32',
      stackHeight: 'u32',
      globals: 'u32',
      parameters: 'u32',
      memoryPages: 'u32',
      tableSize: 'u32',
      brTableSize: 'u32',
      subjectLen: 'u32',
      codeSize: 'u32'
    },
    Limits: {
      eventTopics: 'u32',
      stackHeight: 'u32',
      globals: 'u32',
      parameters: 'u32',
      memoryPages: 'u32',
      tableSize: 'u32',
      brTableSize: 'u32',
      subjectLen: 'u32'
    },
    PrefabWasmModule: {
      scheduleVersion: 'Compact<u32>',
      initial: 'Compact<u32>',
      maximum: 'Compact<u32>',
      refcount: 'Compact<u64>',
      _reserved: 'Option<Null>',
      code: 'Bytes',
      originalCodeLen: 'u32'
    },
    RentProjection: {
      _enum: {
        EvictionAt: 'BlockNumber',
        NoEviction: 'Null'
      }
    },
    ScheduleTo212: {
      version: 'u32',
      putCodePerByteCost: 'Gas',
      growMemCost: 'Gas',
      regularOpCost: 'Gas',
      returnDataPerByteCost: 'Gas',
      eventDataPerByteCost: 'Gas',
      eventPerTopicCost: 'Gas',
      eventBaseCost: 'Gas',
      sandboxDataReadCost: 'Gas',
      sandboxDataWriteCost: 'Gas',
      maxEventTopics: 'u32',
      maxStackHeight: 'u32',
      maxMemoryPages: 'u32',
      enablePrintln: 'bool',
      maxSubjectLen: 'u32'
    },
    ScheduleTo258: {
      version: 'u32',
      putCodePerByteCost: 'Gas',
      growMemCost: 'Gas',
      regularOpCost: 'Gas',
      returnDataPerByteCost: 'Gas',
      eventDataPerByteCost: 'Gas',
      eventPerTopicCost: 'Gas',
      eventBaseCost: 'Gas',
      sandboxDataReadCost: 'Gas',
      sandboxDataWriteCost: 'Gas',
      transferCost: 'Gas',
      maxEventTopics: 'u32',
      maxStackHeight: 'u32',
      maxMemoryPages: 'u32',
      enablePrintln: 'bool',
      maxSubjectLen: 'u32'
    },
    ScheduleTo264: {
      version: 'u32',
      enablePrintln: 'bool',
      limits: 'LimitsTo264',
      instructionWeights: 'InstructionWeights',
      hostFnWeights: 'HostFnWeightsTo264'
    },
    Schedule: {
      version: 'u32',
      enablePrintln: 'bool',
      limits: 'Limits',
      instructionWeights: 'InstructionWeights',
      hostFnWeights: 'HostFnWeights'
    },
    SeedOf: 'Hash',
    StorageDeposit: {
      _enum: {
        Refund: 'Balance',
        Charge: 'Balance'
      }
    },
    TombstoneContractInfo: 'Hash',
    TrieId: 'Bytes'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/democracy/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const AllConvictions = [// 0.1x votes, unlocked.
'None', // 1x votes, locked for an enactment period following a successful vote.
'Locked1x', // 2x votes, locked for 2x enactment periods following a successful vote.
'Locked2x', // 3x votes, locked for 4x...
'Locked3x', // 4x votes, locked for 8x...
'Locked4x', // 5x votes, locked for 16x...
'Locked5x', /// 6x votes, locked for 32x...
'Locked6x'];
/* harmony default export */ const democracy_definitions = ({
  rpc: {},
  types: {
    AccountVote: {
      _enum: {
        Standard: 'AccountVoteStandard',
        Split: 'AccountVoteSplit'
      }
    },
    AccountVoteSplit: {
      aye: 'Balance',
      nay: 'Balance'
    },
    AccountVoteStandard: {
      vote: 'Vote',
      balance: 'Balance'
    },
    Conviction: {
      _enum: AllConvictions
    },
    Delegations: {
      votes: 'Balance',
      capital: 'Balance'
    },
    PreimageStatus: {
      _enum: {
        Missing: 'BlockNumber',
        Available: 'PreimageStatusAvailable'
      }
    },
    PreimageStatusAvailable: {
      data: 'Bytes',
      provider: 'AccountId',
      deposit: 'Balance',
      since: 'BlockNumber',
      expiry: 'Option<BlockNumber>'
    },
    PriorLock: '(BlockNumber, Balance)',
    PropIndex: 'u32',
    Proposal: 'Call',
    ProxyState: {
      _enum: {
        Open: 'AccountId',
        Active: 'AccountId'
      }
    },
    ReferendumIndex: 'u32',
    ReferendumInfoTo239: {
      end: 'BlockNumber',
      proposalHash: 'Hash',
      threshold: 'VoteThreshold',
      delay: 'BlockNumber'
    },
    ReferendumInfo: {
      _enum: {
        Ongoing: 'ReferendumStatus',
        Finished: 'ReferendumInfoFinished'
      }
    },
    ReferendumInfoFinished: {
      approved: 'bool',
      end: 'BlockNumber'
    },
    ReferendumStatus: {
      end: 'BlockNumber',
      proposalHash: 'Hash',
      threshold: 'VoteThreshold',
      delay: 'BlockNumber',
      tally: 'Tally'
    },
    Tally: {
      ayes: 'Balance',
      nays: 'Balance',
      turnout: 'Balance'
    },
    Voting: {
      _enum: {
        Direct: 'VotingDirect',
        Delegating: 'VotingDelegating'
      }
    },
    VotingDirect: {
      votes: 'Vec<VotingDirectVote>',
      delegations: 'Delegations',
      prior: 'PriorLock'
    },
    VotingDirectVote: '(ReferendumIndex, AccountVote)',
    VotingDelegating: {
      balance: 'Balance',
      target: 'AccountId',
      conviction: 'Conviction',
      delegations: 'Delegations',
      prior: 'PriorLock'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/dev/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const dev_definitions = ({
  rpc: {
    getBlockStats: {
      description: 'Reexecute the specified `block_hash` and gather statistics while doing so',
      params: [{
        name: 'at',
        type: 'Hash',
        isHistoric: true
      }],
      type: 'Option<BlockStats>'
    }
  },
  types: {
    BlockStats: {
      witnessLen: 'u64',
      witnessCompactLen: 'u64',
      blockLen: 'u64',
      blockNumExtrinsics: 'u64'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/elections/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const elections_definitions = ({
  rpc: {},
  types: {
    ApprovalFlag: 'u32',
    DefunctVoter: {
      who: 'AccountId',
      voteCount: 'Compact<u32>',
      candidateCount: 'Compact<u32>'
    },
    Renouncing: {
      _enum: {
        Member: 'Null',
        RunnerUp: 'Null',
        Candidate: 'Compact<u32>'
      }
    },
    SetIndex: 'u32',
    Vote: 'GenericVote',
    VoteIndex: 'u32',
    VoterInfo: {
      lastActive: 'VoteIndex',
      lastWin: 'VoteIndex',
      pot: 'Balance',
      stake: 'Balance'
    },
    VoteThreshold: {
      _enum: ['Super Majority Approve', 'Super Majority Against', 'Simple Majority']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/engine/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const engine_definitions = ({
  rpc: {
    createBlock: {
      description: 'Instructs the manual-seal authorship task to create a new block',
      params: [{
        name: 'createEmpty',
        type: 'bool'
      }, {
        name: 'finalize',
        type: 'bool'
      }, {
        name: 'parentHash',
        type: 'BlockHash',
        isOptional: true
      }],
      type: 'CreatedBlock'
    },
    finalizeBlock: {
      description: 'Instructs the manual-seal authorship task to finalize a block',
      params: [{
        name: 'hash',
        type: 'BlockHash'
      }, {
        name: 'justification',
        type: 'Justification',
        isOptional: true
      }],
      type: 'bool'
    }
  },
  types: {
    CreatedBlock: {
      hash: 'BlockHash',
      aux: 'ImportedAux'
    },
    ImportedAux: {
      headerOnly: 'bool',
      clearJustificationRequests: 'bool',
      needsJustification: 'bool',
      badJustification: 'bool',
      needsFinalityProof: 'bool',
      isNewBest: 'bool'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/evm/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const evm_definitions = ({
  rpc: {},
  types: {
    EvmAccount: {
      nonce: 'u256',
      balance: 'u256'
    },
    EvmLog: {
      address: 'H160',
      topics: 'Vec<H256>',
      data: 'Bytes'
    },
    EvmVicinity: {
      gasPrice: 'u256',
      origin: 'H160'
    },
    ExitError: {
      _enum: {
        StackUnderflow: 'Null',
        StackOverflow: 'Null',
        InvalidJump: 'Null',
        InvalidRange: 'Null',
        DesignatedInvalid: 'Null',
        CallTooDeep: 'Null',
        CreateCollision: 'Null',
        CreateContractLimit: 'Null',
        OutOfOffset: 'Null',
        OutOfGas: 'Null',
        OutOfFund: 'Null',
        PCUnderflow: 'Null',
        CreateEmpty: 'Null',
        Other: 'Text'
      }
    },
    ExitFatal: {
      _enum: {
        NotSupported: 'Null',
        UnhandledInterrupt: 'Null',
        CallErrorAsFatal: 'ExitError',
        Other: 'Text'
      }
    },
    ExitReason: {
      _enum: {
        Succeed: 'ExitSucceed',
        Error: 'ExitError',
        Revert: 'ExitRevert',
        Fatal: 'ExitFatal'
      }
    },
    ExitRevert: {
      _enum: ['Reverted']
    },
    ExitSucceed: {
      _enum: ['Stopped', 'Returned', 'Suicided']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const extrinsics_definitions = ({
  rpc: {},
  types: {
    Extrinsic: 'GenericExtrinsic',
    ExtrinsicEra: 'GenericExtrinsicEra',
    ExtrinsicPayload: 'GenericExtrinsicPayload',
    ExtrinsicSignature: 'MultiSignature',
    ExtrinsicV4: 'GenericExtrinsicV4',
    ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
    ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
    ExtrinsicUnknown: 'GenericExtrinsicUnknown',
    ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
    // eras
    Era: 'ExtrinsicEra',
    ImmortalEra: 'GenericImmortalEra',
    MortalEra: 'GenericMortalEra',
    // signatures & signer
    AnySignature: 'H512',
    MultiSignature: {
      _enum: {
        Ed25519: 'Ed25519Signature',
        Sr25519: 'Sr25519Signature',
        Ecdsa: 'EcdsaSignature'
      }
    },
    Signature: 'H512',
    SignerPayload: 'GenericSignerPayload',
    EcdsaSignature: '[u8; 65]',
    Ed25519Signature: 'H512',
    Sr25519Signature: 'H512'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const genericAsset_definitions = ({
  rpc: {},
  types: {
    AssetOptions: {
      initalIssuance: 'Compact<Balance>',
      permissions: 'PermissionLatest'
    },
    Owner: {
      _enum: {
        None: 'Null',
        Address: 'AccountId'
      }
    },
    PermissionsV1: {
      update: 'Owner',
      mint: 'Owner',
      burn: 'Owner'
    },
    PermissionVersions: {
      _enum: {
        V1: 'PermissionsV1'
      }
    },
    PermissionLatest: 'PermissionsV1'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/gilt/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const gilt_definitions = ({
  rpc: {},
  types: {
    ActiveGilt: {
      proportion: 'Perquintill',
      amount: 'Balance',
      who: 'AccountId',
      expiry: 'BlockNumber'
    },
    ActiveGiltsTotal: {
      frozen: 'Balance',
      proportion: 'Perquintill',
      index: 'ActiveIndex',
      target: 'Perquintill'
    },
    ActiveIndex: 'u32',
    GiltBid: {
      amount: 'Balance',
      who: 'AccountId'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/grandpa/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const grandpa_definitions = ({
  rpc: {
    proveFinality: {
      description: 'Prove finality for the given block number, returning the Justification for the last block in the set.',
      params: [{
        name: 'blockNumber',
        type: 'BlockNumber'
      }],
      type: 'Option<EncodedFinalityProofs>'
    },
    roundState: {
      description: 'Returns the state of the current best round state as well as the ongoing background rounds',
      params: [],
      type: 'ReportedRoundStates'
    },
    subscribeJustifications: {
      description: 'Subscribes to grandpa justifications',
      params: [],
      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
      type: 'JustificationNotification'
    }
  },
  types: {
    AuthorityIndex: 'u64',
    AuthorityList: 'Vec<NextAuthority>',
    AuthoritySet: {
      currentAuthorities: 'AuthorityList',
      setId: 'u64',
      pendingStandardChanges: 'ForkTreePendingChange',
      pendingForcedChanges: 'Vec<PendingChange>',
      authoritySetChanges: 'AuthoritySetChanges'
    },
    ForkTreePendingChange: {
      roots: 'Vec<ForkTreePendingChangeNode>',
      bestFinalizedNumber: 'Option<BlockNumber>'
    },
    ForkTreePendingChangeNode: {
      hash: 'BlockHash',
      number: 'BlockNumber',
      data: 'PendingChange',
      // actual data, here PendingChange
      children: 'Vec<ForkTreePendingChangeNode>'
    },
    AuthoritySetChange: '(U64, BlockNumber)',
    AuthoritySetChanges: 'Vec<AuthoritySetChange>',
    AuthorityWeight: 'u64',
    DelayKind: {
      _enum: {
        Finalized: 'Null',
        Best: 'DelayKindBest'
      }
    },
    DelayKindBest: {
      medianLastFinalized: 'BlockNumber'
    },
    EncodedFinalityProofs: 'Bytes',
    GrandpaEquivocation: {
      _enum: {
        Prevote: 'GrandpaEquivocationValue',
        Precommit: 'GrandpaEquivocationValue'
      }
    },
    GrandpaEquivocationProof: {
      setId: 'SetId',
      equivocation: 'GrandpaEquivocation'
    },
    GrandpaEquivocationValue: {
      roundNumber: 'u64',
      identity: 'AuthorityId',
      first: '(GrandpaPrevote, AuthoritySignature)',
      second: '(GrandpaPrevote, AuthoritySignature)'
    },
    GrandpaPrevote: {
      targetHash: 'Hash',
      targetNumber: 'BlockNumber'
    },
    GrandpaCommit: {
      targetHash: 'BlockHash',
      targetNumber: 'BlockNumber',
      precommits: 'Vec<GrandpaSignedPrecommit>'
    },
    GrandpaPrecommit: {
      targetHash: 'BlockHash',
      targetNumber: 'BlockNumber'
    },
    GrandpaSignedPrecommit: {
      precommit: 'GrandpaPrecommit',
      signature: 'AuthoritySignature',
      id: 'AuthorityId'
    },
    GrandpaJustification: {
      round: 'u64',
      commit: 'GrandpaCommit',
      votesAncestries: 'Vec<Header>'
    },
    JustificationNotification: 'Bytes',
    KeyOwnerProof: 'MembershipProof',
    NextAuthority: '(AuthorityId, AuthorityWeight)',
    PendingChange: {
      nextAuthorities: 'AuthorityList',
      delay: 'BlockNumber',
      canonHeight: 'BlockNumber',
      canonHash: 'BlockHash',
      delayKind: 'DelayKind'
    },
    PendingPause: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber'
    },
    PendingResume: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber'
    },
    Precommits: {
      currentWeight: 'u32',
      missing: 'BTreeSet<AuthorityId>'
    },
    Prevotes: {
      currentWeight: 'u32',
      missing: 'BTreeSet<AuthorityId>'
    },
    ReportedRoundStates: {
      setId: 'u32',
      best: 'RoundState',
      background: 'Vec<RoundState>'
    },
    RoundState: {
      round: 'u32',
      totalWeight: 'u32',
      thresholdWeight: 'u32',
      prevotes: 'Prevotes',
      precommits: 'Precommits'
    },
    SetId: 'u64',
    StoredPendingChange: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber',
      nextAuthorities: 'AuthorityList'
    },
    StoredState: {
      _enum: {
        Live: 'Null',
        PendingPause: 'PendingPause',
        Paused: 'Null',
        PendingResume: 'PendingResume'
      }
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/identity/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const identity_definitions = ({
  rpc: {},
  types: {
    IdentityFields: {
      _set: {
        _bitLength: 64,
        // Mapped here to 32 bits, in Rust these are 64-bit values
        Display: 0b00000000000000000000000000000001,
        Legal: 0b00000000000000000000000000000010,
        Web: 0b00000000000000000000000000000100,
        Riot: 0b00000000000000000000000000001000,
        Email: 0b00000000000000000000000000010000,
        PgpFingerprint: 0b00000000000000000000000000100000,
        Image: 0b00000000000000000000000001000000,
        Twitter: 0b00000000000000000000000010000000
      }
    },
    IdentityInfoAdditional: '(Data, Data)',
    IdentityInfoTo198: {
      additional: 'Vec<IdentityInfoAdditional>',
      display: 'Data',
      legal: 'Data',
      web: 'Data',
      riot: 'Data',
      email: 'Data',
      pgpFingerprint: 'Option<H160>',
      image: 'Data'
    },
    IdentityInfo: {
      _fallback: 'IdentityInfoTo198',
      additional: 'Vec<IdentityInfoAdditional>',
      display: 'Data',
      legal: 'Data',
      web: 'Data',
      riot: 'Data',
      email: 'Data',
      pgpFingerprint: 'Option<H160>',
      image: 'Data',
      twitter: 'Data'
    },
    IdentityJudgement: {
      _enum: {
        Unknown: 'Null',
        FeePaid: 'Balance',
        Reasonable: 'Null',
        KnownGood: 'Null',
        OutOfDate: 'Null',
        LowQuality: 'Null',
        Erroneous: 'Null'
      }
    },
    RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
    RegistrationTo198: {
      judgements: 'Vec<RegistrationJudgement>',
      deposit: 'Balance',
      info: 'IdentityInfoTo198'
    },
    Registration: {
      _fallback: 'RegistrationTo198',
      judgements: 'Vec<RegistrationJudgement>',
      deposit: 'Balance',
      info: 'IdentityInfo'
    },
    RegistrarIndex: 'u32',
    RegistrarInfo: {
      account: 'AccountId',
      fee: 'Balance',
      fields: 'IdentityFields'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/imOnline/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const imOnline_definitions = ({
  rpc: {},
  types: {
    AuthIndex: 'u32',
    AuthoritySignature: 'Signature',
    Heartbeat: {
      blockNumber: 'BlockNumber',
      networkState: 'OpaqueNetworkState',
      sessionIndex: 'SessionIndex',
      authorityIndex: 'AuthIndex',
      validatorsLen: 'u32'
    },
    HeartbeatTo244: {
      blockNumber: 'BlockNumber',
      networkState: 'OpaqueNetworkState',
      sessionIndex: 'SessionIndex',
      authorityIndex: 'AuthIndex'
    },
    OpaqueMultiaddr: 'Bytes',
    OpaquePeerId: 'Bytes',
    OpaqueNetworkState: {
      peerId: 'OpaquePeerId',
      externalAddresses: 'Vec<OpaqueMultiaddr>'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/lottery/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const lottery_definitions = ({
  rpc: {},
  types: {
    CallIndex: '(u8, u8)',
    LotteryConfig: {
      price: 'Balance',
      start: 'BlockNumber',
      length: 'BlockNumber',
      delay: 'BlockNumber',
      repeat: 'bool'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/mmr/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const mmr_definitions = ({
  rpc: {
    generateProof: {
      description: 'Generate MMR proof for given leaf index.',
      params: [{
        name: 'leafIndex',
        type: 'u64'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'MmrLeafProof'
    }
  },
  types: {
    MmrLeafProof: {
      blockHash: 'BlockHash',
      leaf: 'Bytes',
      proof: 'Bytes'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/offences/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const offences_definitions = ({
  rpc: {},
  types: {
    DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
    Kind: '[u8; 16]',
    OffenceDetails: {
      offender: 'Offender',
      reporters: 'Vec<Reporter>'
    },
    Offender: 'IdentificationTuple',
    OpaqueTimeSlot: 'Bytes',
    ReportIdOf: 'Hash',
    Reporter: 'AccountId'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/proxy/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const proxy_definitions = ({
  rpc: {},
  types: {
    ProxyDefinition: {
      delegate: 'AccountId',
      proxyType: 'ProxyType',
      delay: 'BlockNumber'
    },
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
    },
    ProxyAnnouncement: {
      real: 'AccountId',
      callHash: 'Hash',
      height: 'BlockNumber'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/recovery/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const recovery_definitions = ({
  rpc: {},
  types: {
    ActiveRecovery: {
      created: 'BlockNumber',
      deposit: 'Balance',
      friends: 'Vec<AccountId>'
    },
    RecoveryConfig: {
      delayPeriod: 'BlockNumber',
      deposit: 'Balance',
      friends: 'Vec<AccountId>',
      threshold: 'u16'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/scheduler/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const scheduler_definitions = ({
  rpc: {},
  types: {
    Period: '(BlockNumber, u32)',
    Priority: 'u8',
    SchedulePeriod: 'Period',
    SchedulePriority: 'Priority',
    Scheduled: {
      maybeId: 'Option<Bytes>',
      priority: 'SchedulePriority',
      call: 'Call',
      maybePeriodic: 'Option<SchedulePeriod>',
      origin: 'PalletsOrigin'
    },
    ScheduledTo254: {
      maybeId: 'Option<Bytes>',
      priority: 'SchedulePriority',
      call: 'Call',
      maybePeriodic: 'Option<SchedulePeriod>'
    },
    TaskAddress: '(BlockNumber, u32)'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/session/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
 // The runtime definition of SessionKeys are passed as a Trait to session
// Defined in `node/runtime/src/lib.rs` as follow
//   impl_opaque_keys! {
//     pub struct SessionKeys {
// Here we revert to tuples to keep the interfaces "opaque", as per the use

const keyTypes = {
  // key for beefy
  BeefyKey: '[u8; 33]',
  // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
  Keys: 'SessionKeys4',
  SessionKeys1: '(AccountId)',
  SessionKeys2: '(AccountId, AccountId)',
  SessionKeys3: '(AccountId, AccountId, AccountId)',
  SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
  SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
};
/* harmony default export */ const session_definitions = ({
  rpc: {},
  types: objectSpread({}, keyTypes, {
    FullIdentification: 'Exposure',
    IdentificationTuple: '(ValidatorId, FullIdentification)',
    MembershipProof: {
      session: 'SessionIndex',
      trieNodes: 'Vec<Vec<u8>>',
      validatorCount: 'ValidatorCount'
    },
    SessionIndex: 'u32',
    ValidatorCount: 'u32'
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/society/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const society_definitions = ({
  rpc: {},
  types: {
    Bid: {
      who: 'AccountId',
      kind: 'BidKind',
      value: 'Balance'
    },
    BidKind: {
      _enum: {
        Deposit: 'Balance',
        Vouch: '(AccountId, Balance)'
      }
    },
    // a society-specific Judgement (not the same as identity Judgement)
    SocietyJudgement: {
      _enum: ['Rebid', 'Reject', 'Approve']
    },
    // a society-specific Vote
    SocietyVote: {
      _enum: ['Skeptic', 'Reject', 'Approve']
    },
    StrikeCount: 'u32',
    VouchingStatus: {
      _enum: ['Vouching', 'Banned']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/staking/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */

const deprecated = {
  Points: 'u32',
  EraPoints: {
    total: 'Points',
    individual: 'Vec<Points>'
  }
};
const phragmen = {
  CompactAssignments: 'CompactAssignmentsWith16',
  CompactAssignmentsWith16: {
    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
  },
  CompactAssignmentsWith24: {
    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
    votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
    votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
    votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
    votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
    votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
    votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
    votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
    votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
  },
  CompactAssignmentsTo265: 'CompactAssignmentsWith16',
  CompactAssignmentsTo257: {
    votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
    votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
    votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
    votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
    votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
    votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
    votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
    votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
    votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
    votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
    votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
    votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
    votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
    votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
    votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
    votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
  },
  CompactScore: '(ValidatorIndex, OffchainAccuracy)',
  CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
  ElectionCompute: {
    // in previous versions the last entry was "AuthorityId"
    // (since no data attached, and it is via SCALE can rename)
    _enum: ['OnChain', 'Signed', 'Unsigned']
  },
  ElectionPhase: {
    _enum: {
      Off: null,
      Signed: null,
      Unsigned: '(bool, BlockNumber)',
      Emergency: null
    }
  },
  ElectionResult: {
    compute: 'ElectionCompute',
    slotStake: 'Balance',
    electedStashes: 'Vec<AccountId>',
    exposures: 'Vec<(AccountId, Exposure)>'
  },
  ElectionScore: '[u128; 3]',
  ElectionSize: {
    validators: 'Compact<ValidatorIndex>',
    nominators: 'Compact<NominatorIndex>'
  },
  ElectionStatus: {
    _enum: {
      Close: 'Null',
      Open: 'BlockNumber'
    }
  },
  ExtendedBalance: 'u128',
  RawSolution: 'RawSolutionWith16',
  RawSolutionWith16: {
    compact: 'CompactAssignmentsWith16',
    score: 'ElectionScore',
    round: 'u32'
  },
  RawSolutionWith24: {
    compact: 'CompactAssignmentsWith24',
    score: 'ElectionScore',
    round: 'u32'
  },
  RawSolutionTo265: 'RawSolutionWith16',
  ReadySolution: {
    supports: 'SolutionSupports',
    score: 'ElectionScore',
    compute: 'ElectionCompute'
  },
  RoundSnapshot: {
    voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
    targets: 'Vec<AccountId>'
  },
  SeatHolder: {
    who: 'AccountId',
    stake: 'Balance',
    deposit: 'Balance'
  },
  SignedSubmission: {
    _fallback: 'SignedSubmissionTo276',
    who: 'AccountId',
    deposit: 'Balance',
    solution: 'RawSolution',
    reward: 'Balance'
  },
  SignedSubmissionTo276: {
    who: 'AccountId',
    deposit: 'Balance',
    solution: 'RawSolution'
  },
  SignedSubmissionOf: 'SignedSubmission',
  SolutionOrSnapshotSize: {
    voters: 'Compact<u32>',
    targets: 'Compact<u32>'
  },
  SolutionSupport: {
    total: 'ExtendedBalance',
    voters: 'Vec<(AccountId, ExtendedBalance)>'
  },
  SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
  Supports: 'SolutionSupports',
  SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
  Voter: {
    votes: 'Vec<AccountId>',
    stake: 'Balance',
    deposit: 'Balance'
  },
  VoteWeight: 'u64'
};
/* harmony default export */ const staking_definitions = ({
  rpc: {},
  types: objectSpread({}, deprecated, phragmen, {
    ActiveEraInfo: {
      index: 'EraIndex',
      start: 'Option<Moment>'
    },
    EraIndex: 'u32',
    EraRewardPoints: {
      total: 'RewardPoint',
      individual: 'BTreeMap<AccountId, RewardPoint>'
    },
    EraRewards: {
      total: 'u32',
      rewards: 'Vec<u32>'
    },
    Exposure: {
      total: 'Compact<Balance>',
      own: 'Compact<Balance>',
      others: 'Vec<IndividualExposure>'
    },
    Forcing: {
      _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
    },
    IndividualExposure: {
      who: 'AccountId',
      value: 'Compact<Balance>'
    },
    KeyType: 'AccountId',
    MomentOf: 'Moment',
    Nominations: {
      targets: 'Vec<AccountId>',
      submittedIn: 'EraIndex',
      suppressed: 'bool'
    },
    NominatorIndex: 'u32',
    NominatorIndexCompact: 'Compact<NominatorIndex>',
    OffchainAccuracy: 'PerU16',
    OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
    PhragmenScore: '[u128; 3]',
    Points: 'u32',
    RewardDestination: {
      _enum: {
        Staked: 'Null',
        Stash: 'Null',
        Controller: 'Null',
        Account: 'AccountId',
        None: 'Null'
      }
    },
    RewardPoint: 'u32',
    SlashJournalEntry: {
      who: 'AccountId',
      amount: 'Balance',
      ownSlash: 'Balance'
    },
    SlashingSpansTo204: {
      spanIndex: 'SpanIndex',
      lastStart: 'EraIndex',
      prior: 'Vec<EraIndex>'
    },
    SlashingSpans: {
      spanIndex: 'SpanIndex',
      lastStart: 'EraIndex',
      lastNonzeroSlash: 'EraIndex',
      prior: 'Vec<EraIndex>'
    },
    SpanIndex: 'u32',
    SpanRecord: {
      slashed: 'Balance',
      paidOut: 'Balance'
    },
    StakingLedgerTo223: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>'
    },
    StakingLedgerTo240: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>',
      lastReward: 'Option<EraIndex>'
    },
    StakingLedger: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>',
      claimedRewards: 'Vec<EraIndex>'
    },
    UnappliedSlashOther: '(AccountId, Balance)',
    UnappliedSlash: {
      validator: 'AccountId',
      own: 'Balance',
      others: 'Vec<UnappliedSlashOther>',
      reporters: 'Vec<AccountId>',
      payout: 'Balance'
    },
    UnlockChunk: {
      value: 'Compact<Balance>',
      era: 'Compact<BlockNumber>'
    },
    ValidatorIndex: 'u16',
    ValidatorIndexCompact: 'Compact<ValidatorIndex>',
    ValidatorPrefs: 'ValidatorPrefsWithBlocked',
    ValidatorPrefsWithCommission: {
      commission: 'Compact<Perbill>'
    },
    ValidatorPrefsWithBlocked: {
      commission: 'Compact<Perbill>',
      blocked: 'bool'
    },
    ValidatorPrefsTo196: {
      validatorPayment: 'Compact<Balance>'
    },
    ValidatorPrefsTo145: {
      unstakeThreshold: 'Compact<u32>',
      validatorPayment: 'Compact<Balance>'
    }
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/support/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const support_definitions = ({
  rpc: {},
  types: {
    WeightToFeeCoefficient: {
      coeffInteger: 'Balance',
      coeffFrac: 'Perbill',
      negative: 'bool',
      degree: 'u8'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/syncstate/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const syncstate_definitions = ({
  rpc: {
    genSyncSpec: {
      endpoint: 'sync_state_genSyncSpec',
      description: 'Returns the json-serialized chainspec running the node, with a sync state.',
      params: [{
        name: 'raw',
        type: 'bool'
      }],
      type: 'Json'
    }
  },
  types: {}
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/system/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const system_definitions = ({
  rpc: {
    accountNextIndex: {
      alias: ['account_nextIndex'],
      description: 'Retrieves the next accountIndex as available on the node',
      params: [{
        name: 'accountId',
        type: 'AccountId'
      }],
      type: 'Index'
    },
    dryRun: {
      alias: ['system_dryRunAt'],
      description: 'Dry run an extrinsic at a given block',
      params: [{
        name: 'extrinsic',
        type: 'Bytes'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ApplyExtrinsicResult'
    },
    name: {
      description: 'Retrieves the node name',
      params: [],
      type: 'Text'
    },
    version: {
      description: 'Retrieves the version of the node',
      params: [],
      type: 'Text'
    },
    chain: {
      description: 'Retrieves the chain',
      params: [],
      type: 'Text'
    },
    chainType: {
      description: 'Retrieves the chain type',
      params: [],
      type: 'ChainType'
    },
    properties: {
      description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
      params: [],
      type: 'ChainProperties'
    },
    health: {
      description: 'Return health status of the node',
      params: [],
      type: 'Health'
    },
    localPeerId: {
      description: 'Returns the base58-encoded PeerId of the node',
      params: [],
      type: 'Text'
    },
    localListenAddresses: {
      description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
      params: [],
      type: 'Vec<Text>'
    },
    peers: {
      description: 'Returns the currently connected peers',
      params: [],
      type: 'Vec<PeerInfo>'
    },
    networkState: {
      alias: ['system_unstable_networkState'],
      description: 'Returns current state of the network',
      params: [],
      type: 'NetworkState'
    },
    addReservedPeer: {
      description: 'Adds a reserved peer',
      params: [{
        name: 'peer',
        type: 'Text'
      }],
      type: 'Text'
    },
    removeReservedPeer: {
      description: 'Remove a reserved peer',
      params: [{
        name: 'peerId',
        type: 'Text'
      }],
      type: 'Text'
    },
    reservedPeers: {
      description: 'Returns the list of reserved peers',
      params: [],
      type: 'Vec<Text>'
    },
    nodeRoles: {
      description: 'Returns the roles the node is running as',
      params: [],
      type: 'Vec<NodeRole>'
    },
    syncState: {
      description: 'Returns the state of the syncing of the node',
      params: [],
      type: 'SyncState'
    },
    addLogFilter: {
      description: 'Adds the supplied directives to the current log filter',
      params: [{
        name: 'directives',
        type: 'Text'
      }],
      type: 'Null'
    },
    resetLogFilter: {
      description: 'Resets the log filter to Substrate defaults',
      params: [],
      type: 'Null'
    }
  },
  types: {
    AccountInfo: 'AccountInfoWithTripleRefCount',
    AccountInfoWithRefCountU8: {
      nonce: 'Index',
      refcount: 'u8',
      data: 'AccountData'
    },
    AccountInfoWithRefCount: {
      _fallback: 'AccountInfoWithRefCountU8',
      nonce: 'Index',
      refcount: 'RefCount',
      data: 'AccountData'
    },
    AccountInfoWithDualRefCount: {
      _fallback: 'AccountInfoWithRefCount',
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      data: 'AccountData'
    },
    // original naming
    AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
    AccountInfoWithTripleRefCount: {
      _fallback: 'AccountInfoWithDualRefCount',
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      sufficients: 'RefCount',
      data: 'AccountData'
    },
    ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
    ArithmeticError: {
      _enum: ['Underflow', 'Overflow', 'DivisionByZero']
    },
    BlockLength: {
      max: 'PerDispatchClassU32'
    },
    BlockWeights: {
      baseBlock: 'Weight',
      maxBlock: 'Weight',
      perClass: 'PerDispatchClassWeightsPerClass'
    },
    ChainProperties: 'GenericChainProperties',
    ChainType: {
      _enum: {
        Development: 'Null',
        Local: 'Null',
        Live: 'Null',
        Custom: 'Text'
      }
    },
    ConsumedWeight: 'PerDispatchClassWeight',
    DigestOf: 'Digest',
    DispatchClass: {
      _enum: ['Normal', 'Operational', 'Mandatory']
    },
    DispatchError: {
      _enum: {
        Other: 'Null',
        CannotLookup: 'Null',
        BadOrigin: 'Null',
        Module: 'DispatchErrorModule',
        ConsumerRemaining: 'Null',
        NoProviders: 'Null',
        Token: 'TokenError',
        Arithmetic: 'ArithmeticError'
      }
    },
    DispatchErrorModule: {
      index: 'u8',
      error: 'u8'
    },
    DispatchErrorModuleU8a: {
      index: 'u8',
      error: '[u8; 4]'
    },
    DispatchErrorTo198: {
      module: 'Option<u8>',
      error: 'u8'
    },
    DispatchInfo: {
      weight: 'Weight',
      class: 'DispatchClass',
      paysFee: 'Pays'
    },
    DispatchInfoTo190: {
      weight: 'Weight',
      class: 'DispatchClass'
    },
    DispatchInfoTo244: {
      weight: 'Weight',
      class: 'DispatchClass',
      paysFee: 'bool'
    },
    DispatchOutcome: 'Result<(), DispatchError>',
    DispatchResult: 'Result<(), DispatchError>',
    DispatchResultOf: 'DispatchResult',
    DispatchResultTo198: 'Result<(), Text>',
    Event: 'GenericEvent',
    EventId: '[u8; 2]',
    EventIndex: 'u32',
    EventRecord: {
      phase: 'Phase',
      event: 'Event',
      topics: 'Vec<Hash>'
    },
    Health: {
      peers: 'u64',
      isSyncing: 'bool',
      shouldHavePeers: 'bool'
    },
    InvalidTransaction: {
      _enum: {
        Call: 'Null',
        Payment: 'Null',
        Future: 'Null',
        Stale: 'Null',
        BadProof: 'Null',
        AncientBirthBlock: 'Null',
        ExhaustsResources: 'Null',
        Custom: 'u8',
        BadMandatory: 'Null',
        MandatoryDispatch: 'Null'
      }
    },
    Key: 'Bytes',
    LastRuntimeUpgradeInfo: {
      specVersion: 'Compact<u32>',
      specName: 'Text'
    },
    NetworkState: {
      peerId: 'Text',
      listenedAddresses: 'Vec<Text>',
      externalAddresses: 'Vec<Text>',
      connectedPeers: 'HashMap<Text, Peer>',
      notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
      averageDownloadPerSec: 'u64',
      averageUploadPerSec: 'u64',
      peerset: 'NetworkStatePeerset'
    },
    NetworkStatePeerset: {
      messageQueue: 'u64',
      nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
    },
    NetworkStatePeersetInfo: {
      connected: 'bool',
      reputation: 'i32'
    },
    NodeRole: {
      _enum: {
        Full: 'Null',
        LightClient: 'Null',
        Authority: 'Null',
        UnknownRole: 'u8'
      }
    },
    NotConnectedPeer: {
      knownAddresses: 'Vec<Text>',
      latestPingTime: 'Option<PeerPing>',
      versionString: 'Option<Text>'
    },
    Peer: {
      enabled: 'bool',
      endpoint: 'PeerEndpoint',
      knownAddresses: 'Vec<Text>',
      latestPingTime: 'PeerPing',
      open: 'bool',
      versionString: 'Text'
    },
    PeerEndpoint: {
      listening: 'PeerEndpointAddr'
    },
    PeerEndpointAddr: {
      _alias: {
        localAddr: 'local_addr',
        sendBackAddr: 'send_back_addr'
      },
      localAddr: 'Text',
      sendBackAddr: 'Text'
    },
    PeerPing: {
      nanos: 'u64',
      secs: 'u64'
    },
    PeerInfo: {
      peerId: 'Text',
      roles: 'Text',
      protocolVersion: 'u32',
      bestHash: 'Hash',
      bestNumber: 'BlockNumber'
    },
    PerDispatchClassU32: {
      normal: 'u32',
      operational: 'u32',
      mandatory: 'u32'
    },
    PerDispatchClassWeight: {
      normal: 'Weight',
      operational: 'Weight',
      mandatory: 'Weight'
    },
    PerDispatchClassWeightsPerClass: {
      normal: 'WeightPerClass',
      operational: 'WeightPerClass',
      mandatory: 'WeightPerClass'
    },
    Phase: {
      _enum: {
        ApplyExtrinsic: 'u32',
        Finalization: 'Null',
        Initialization: 'Null'
      }
    },
    RawOrigin: {
      _enum: {
        Root: 'Null',
        Signed: 'AccountId',
        None: 'Null'
      }
    },
    RefCount: 'u32',
    RefCountTo259: 'u8',
    SyncState: {
      startingBlock: 'BlockNumber',
      currentBlock: 'BlockNumber',
      highestBlock: 'Option<BlockNumber>'
    },
    SystemOrigin: 'RawOrigin',
    TokenError: {
      _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', // these are dropped, but still in older versions
      // (if this adjusts, will need to take a re-look)
      'Underflow', 'Overflow']
    },
    TransactionValidityError: {
      _enum: {
        Invalid: 'InvalidTransaction',
        Unknown: 'UnknownTransaction'
      }
    },
    UnknownTransaction: {
      _enum: {
        CannotLookup: 'Null',
        NoUnsignedValidator: 'Null',
        Custom: 'u8'
      }
    },
    WeightPerClass: {
      baseExtrinsic: 'Weight',
      maxExtrinsic: 'Option<Weight>',
      maxTotal: 'Option<Weight>',
      reserved: 'Option<Weight>'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/treasury/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const treasury_definitions = ({
  rpc: {},
  types: {
    Bounty: {
      proposer: 'AccountId',
      value: 'Balance',
      fee: 'Balance',
      curatorDeposit: 'Balance',
      bond: 'Balance',
      status: 'BountyStatus'
    },
    BountyIndex: 'u32',
    BountyStatus: {
      _enum: {
        Proposed: 'Null',
        Approved: 'Null',
        Funded: 'Null',
        CuratorProposed: 'BountyStatusCuratorProposed',
        Active: 'BountyStatusActive',
        PendingPayout: 'BountyStatusPendingPayout'
      }
    },
    BountyStatusActive: {
      curator: 'AccountId',
      updateDue: 'BlockNumber'
    },
    BountyStatusCuratorProposed: {
      curator: 'AccountId'
    },
    BountyStatusPendingPayout: {
      curator: 'AccountId',
      beneficiary: 'AccountId',
      unlockAt: 'BlockNumber'
    },
    OpenTip: {
      reason: 'Hash',
      who: 'AccountId',
      finder: 'AccountId',
      deposit: 'Balance',
      closes: 'Option<BlockNumber>',
      tips: 'Vec<OpenTipTip>',
      findersFee: 'bool'
    },
    OpenTipTo225: {
      reason: 'Hash',
      who: 'AccountId',
      finder: 'Option<OpenTipFinderTo225>',
      closes: 'Option<BlockNumber>',
      tips: 'Vec<OpenTipTip>'
    },
    OpenTipFinderTo225: '(AccountId, Balance)',
    OpenTipTip: '(AccountId, Balance)',
    TreasuryProposal: {
      proposer: 'AccountId',
      value: 'Balance',
      beneficiary: 'AccountId',
      bond: 'Balance'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/txpayment/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
/* harmony default export */ const txpayment_definitions = ({
  rpc: {},
  types: {
    Multiplier: 'Fixed128'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/uniques/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const uniques_definitions = ({
  rpc: {},
  types: {
    ClassId: 'u32',
    InstanceId: 'u32',
    DepositBalance: 'Balance',
    DepositBalanceOf: 'Balance',
    ClassDetails: {
      owner: 'AccountId',
      issuer: 'AccountId',
      admin: 'AccountId',
      freezer: 'AccountId',
      totalDeposit: 'DepositBalance',
      freeHolding: 'bool',
      instances: 'u32',
      instanceMetadatas: 'u32',
      attributes: 'u32',
      isFrozen: 'bool'
    },
    DestroyWitness: {
      instances: 'Compact<u32>',
      instanceMetadatas: 'Compact<u32>',
      attributes: 'Compact<u32>'
    },
    InstanceDetails: {
      owner: 'AccountId',
      approved: 'Option<AccountId>',
      isFrozen: 'bool',
      deposit: 'DepositBalance'
    },
    ClassMetadata: {
      deposit: 'DepositBalance',
      data: 'Vec<u8>',
      isFrozen: 'bool'
    },
    InstanceMetadata: {
      deposit: 'DepositBalance',
      data: 'Vec<u8>',
      isFrozen: 'bool'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/utility/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const utility_definitions = ({
  rpc: {},
  types: {
    Multisig: {
      when: 'Timepoint',
      deposit: 'Balance',
      depositor: 'AccountId',
      approvals: 'Vec<AccountId>'
    },
    Timepoint: {
      height: 'BlockNumber',
      index: 'u32'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/vesting/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const vesting_definitions = ({
  rpc: {},
  types: {
    VestingInfo: {
      locked: 'Balance',
      perBlock: 'Balance',
      startingBlock: 'BlockNumber'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/attestations/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const attestations_definitions = ({
  rpc: {},
  types: {
    BlockAttestations: {
      receipt: 'CandidateReceipt',
      valid: 'Vec<AccountId>',
      invalid: 'Vec<AccountId>'
    },
    IncludedBlocks: {
      actualNumber: 'BlockNumber',
      session: 'SessionIndex',
      randomSeed: 'H256',
      activeParachains: 'Vec<ParaId>',
      paraBlocks: 'Vec<Hash>'
    },
    MoreAttestations: {}
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/bridges/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const bridges_definitions = ({
  rpc: {},
  types: {
    BridgedBlockHash: 'H256',
    BridgedBlockNumber: 'BlockNumber',
    BridgedHeader: 'Header',
    BridgeMessageId: '(LaneId, MessageNonce)',
    CallOrigin: {
      _enum: {
        SourceRoot: 'Null',
        TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
        SourceAccount: 'AccountId'
      }
    },
    ChainId: '[u8; 4]',
    DeliveredMessages: {
      begin: 'MessageNonce',
      end: 'MessageNonce',
      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
      dispatchResults: 'BitVec'
    },
    DispatchFeePayment: {
      _enum: ['AtSourceChain', 'AtTargetChain']
    },
    InboundLaneData: {
      relayers: 'Vec<UnrewardedRelayer>',
      lastConfirmedNonce: 'MessageNonce'
    },
    InboundRelayer: 'AccountId',
    InitializationData: {
      header: 'Header',
      authorityList: 'AuthorityList',
      setId: 'SetId',
      isHalted: 'bool'
    },
    LaneId: '[u8; 4]',
    MessageData: {
      payload: 'Bytes',
      fee: 'Balance'
    },
    MessagesDeliveryProofOf: {
      bridgedHeaderHash: 'BlockHash',
      storageProof: 'Vec<Bytes>',
      lane: 'LaneId'
    },
    MessageKey: {
      laneId: 'LaneId',
      nonce: 'MessageNonce'
    },
    MessageNonce: 'u64',
    MessagesProofOf: {
      bridgedHeaderHash: 'BridgedBlockHash',
      storageProof: 'Vec<Bytes>',
      lane: 'LaneId',
      noncesStart: 'MessageNonce',
      noncesEnd: 'MessageNonce'
    },
    OperatingMode: {
      _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
    },
    OutboundLaneData: {
      oldestUnprunedNonce: 'MessageNonce',
      latestReceivedNonce: 'MessageNonce',
      latestGeneratedNonce: 'MessageNonce'
    },
    OutboundMessageFee: 'Balance',
    OutboundPayload: {
      specVersion: 'u32',
      weight: 'Weight',
      origin: 'CallOrigin',
      dispatchFeePayment: 'DispatchFeePayment',
      call: 'Bytes'
    },
    Parameter: 'Null',
    RelayerId: 'AccountId',
    UnrewardedRelayer: {
      relayer: 'RelayerId',
      messages: 'DeliveredMessages'
    },
    UnrewardedRelayersState: {
      unrewardedRelayer_Entries: 'MessageNonce',
      messagesInOldestEntry: 'MessageNonce',
      totalMessages: 'MessageNonce'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/claims/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const claims_definitions = ({
  rpc: {},
  types: {
    StatementKind: {
      _enum: ['Regular', 'Saft']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const crowdloan_definitions = ({
  rpc: {},
  types: {
    FundIndex: 'u32',
    LastContribution: {
      _enum: {
        Never: 'Null',
        PreEnding: 'u32',
        Ending: 'BlockNumber'
      }
    },
    FundInfo: {
      depositor: 'AccountId',
      verifier: 'Option<MultiSigner>',
      deposit: 'Balance',
      raised: 'Balance',
      end: 'BlockNumber',
      cap: 'Balance',
      lastContribution: 'LastContribution',
      firstPeriod: 'LeasePeriod',
      lastPeriod: 'LeasePeriod',
      trieIndex: 'TrieIndex'
    },
    TrieIndex: 'u32'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/cumulus/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const dmpQueue = {
  ConfigData: {
    maxIndividual: 'Weight'
  },
  MessageId: '[u8; 32]',
  OverweightIndex: 'u64',
  PageCounter: 'u32',
  PageIndexData: {
    beginUsed: 'PageCounter',
    endUsed: 'PageCounter',
    overweightCount: 'OverweightIndex'
  }
};
/* harmony default export */ const cumulus_definitions = ({
  rpc: {},
  types: dmpQueue
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/parachains/hrmp.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const hrmp = ({
  HrmpChannel: {
    maxCapacity: 'u32',
    maxTotalSize: 'u32',
    maxMessageSize: 'u32',
    msgCount: 'u32',
    totalSize: 'u32',
    mqcHead: 'Option<Hash>',
    senderDeposit: 'Balance',
    recipientDeposit: 'Balance'
  },
  HrmpChannelId: {
    sender: 'u32',
    receiver: 'u32'
  },
  HrmpOpenChannelRequest: {
    confirmed: 'bool',
    age: 'SessionIndex',
    senderDeposit: 'Balance',
    maxMessageSize: 'u32',
    maxCapacity: 'u32',
    maxTotalSize: 'u32'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/parachains/slots.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // order important in structs... :)

/* eslint-disable sort-keys */

const SlotRange10 = {
  _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
};
const SlotRange = {
  _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'ZeroFour', 'ZeroFive', 'ZeroSix', 'ZeroSeven', 'OneOne', 'OneTwo', 'OneThree', 'OneFour', 'OneFive', 'OneSix', 'OneSeven', 'TwoTwo', 'TwoThree', 'TwoFour', 'TwoFive', 'TwoSix', 'TwoSeven', 'ThreeThree', 'ThreeFour', 'ThreeFive', 'ThreeSix', 'ThreeSeven', 'FourFour', 'FourFive', 'FourSix', 'FourSeven', 'FiveFive', 'FiveSix', 'FiveSeven', 'SixSix', 'SixSeven', 'SevenSeven']
};
const oldTypes = {
  Bidder: {
    _enum: {
      New: 'NewBidder',
      Existing: 'ParaId'
    }
  },
  IncomingParachain: {
    _enum: {
      Unset: 'NewBidder',
      Fixed: 'IncomingParachainFixed',
      Deploy: 'IncomingParachainDeploy'
    }
  },
  IncomingParachainDeploy: {
    code: 'ValidationCode',
    initialHeadData: 'HeadData'
  },
  IncomingParachainFixed: {
    codeHash: 'Hash',
    codeSize: 'u32',
    initialHeadData: 'HeadData'
  },
  NewBidder: {
    who: 'AccountId',
    sub: 'SubId'
  },
  SubId: 'u32'
};
/* harmony default export */ const slots = (objectSpread({}, oldTypes, {
  AuctionIndex: 'u32',
  LeasePeriod: 'BlockNumber',
  LeasePeriodOf: 'BlockNumber',
  SlotRange10,
  SlotRange,
  WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
  WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
  WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
  WinnersData10: 'Vec<WinnersDataTuple10>',
  WinnersData: 'Vec<WinnersDataTuple>',
  WinnersDataTuple10: '(AccountId, ParaId, BalanceOf, SlotRange10)',
  WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
}));
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/parachains/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */


 // proposeParachain

const proposeTypes = {
  ParachainProposal: {
    proposer: 'AccountId',
    genesisHead: 'HeadData',
    validators: 'Vec<ValidatorId>',
    name: 'Bytes',
    balance: 'Balance'
  },
  RegisteredParachainInfo: {
    validators: 'Vec<ValidatorId>',
    proposer: 'AccountId'
  }
};
const cumulusTypes = {
  ServiceQuality: {
    _enum: ['Ordered', 'Fast']
  }
};
const disputeTypes = {
  DisputeLocation: {
    _enum: ['Local', 'Remote']
  },
  DisputeResult: {
    _enum: ['Valid', 'Invalid']
  },
  DisputeState: {
    validatorsFor: 'BitVec',
    validatorsAgainst: 'BitVec',
    start: 'BlockNumber',
    concludedAt: 'Option<BlockNumber>'
  },
  DisputeStatement: {
    _enum: {
      Valid: 'ValidDisputeStatementKind',
      Invalid: 'InvalidDisputeStatementKind'
    }
  },
  DisputeStatementSet: {
    candidateHash: 'CandidateHash',
    session: 'SessionIndex',
    statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
  },
  ExplicitDisputeStatement: {
    valid: 'bool',
    candidateHash: 'CandidateHash',
    session: 'SessionIndex'
  },
  InvalidDisputeStatementKind: {
    _enum: ['Explicit']
  },
  MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
  ValidDisputeStatementKind: {
    _enum: {
      Explicit: 'Null',
      BackingSeconded: 'Hash',
      BackingValid: 'Hash',
      ApprovalChecking: 'Null'
    }
  }
};
/* harmony default export */ const parachains_definitions = ({
  rpc: {},
  types: objectSpread({}, cumulusTypes, disputeTypes, hrmp, proposeTypes, slots, {
    AbridgedCandidateReceipt: {
      parachainIndex: 'ParaId',
      relayParent: 'Hash',
      headData: 'HeadData',
      collator: 'CollatorId',
      signature: 'CollatorSignature',
      povBlockHash: 'Hash',
      commitments: 'CandidateCommitments'
    },
    AbridgedHostConfiguration: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      maxUpwardQueueCount: 'u32',
      maxUpwardQueueSize: 'u32',
      maxUpwardMessageSize: 'u32',
      maxUpwardMessageNumPerCandidate: 'u32',
      hrmpMaxMessageNumPerCandidate: 'u32',
      validationUpgradeFrequency: 'BlockNumber',
      validationUpgradeDelay: 'BlockNumber'
    },
    AbridgedHrmpChannel: {
      maxCapacity: 'u32',
      maxTotalSize: 'u32',
      maxMessageSize: 'u32',
      msgCount: 'u32',
      totalSize: 'u32',
      mqcHead: 'Option<Hash>'
    },
    AssignmentId: 'AccountId',
    AssignmentKind: {
      _enum: {
        Parachain: 'Null',
        Parathread: '(CollatorId, u32)'
      }
    },
    AttestedCandidate: {
      candidate: 'AbridgedCandidateReceipt',
      validityVotes: 'Vec<ValidityAttestation>',
      validatorIndices: 'BitVec'
    },
    AuthorityDiscoveryId: 'AccountId',
    AvailabilityBitfield: 'BitVec',
    AvailabilityBitfieldRecord: {
      bitfield: 'AvailabilityBitfield',
      submittedTt: 'BlockNumber'
    },
    BackedCandidate: {
      candidate: 'CommittedCandidateReceipt',
      validityVotes: 'Vec<ValidityAttestation>',
      validatorIndices: 'BitVec'
    },
    BufferedSessionChange: {
      applyAt: 'BlockNumber',
      validators: 'Vec<ValidatorId>',
      queued: 'Vec<ValidatorId>',
      sessionIndex: 'SessionIndex'
    },
    CandidateCommitments: {
      upwardMessages: 'Vec<UpwardMessage>',
      horizontalMessages: 'Vec<OutboundHrmpMessage>',
      newValidationCode: 'Option<ValidationCode>',
      headData: 'HeadData',
      processedDownwardMessages: 'u32',
      hrmpWatermark: 'BlockNumber'
    },
    CandidateDescriptor: {
      paraId: 'ParaId',
      relayParent: 'RelayChainHash',
      collatorId: 'CollatorId',
      persistedValidationDataHash: 'Hash',
      povHash: 'Hash',
      erasureRoot: 'Hash',
      signature: 'CollatorSignature',
      paraHead: 'Hash',
      validationCodeHash: 'ValidationCodeHash'
    },
    CandidateHash: 'Hash',
    CandidateInfo: {
      who: 'AccountId',
      deposit: 'Balance'
    },
    CandidatePendingAvailability: {
      core: 'CoreIndex',
      hash: 'CandidateHash',
      descriptor: 'CandidateDescriptor',
      availabilityVotes: 'BitVec',
      backers: 'BitVec',
      relayParentNumber: 'BlockNumber',
      backedInNumber: 'BlockNumber',
      backingGroup: 'GroupIndex'
    },
    CandidateReceipt: {
      descriptor: 'CandidateDescriptor',
      commitmentsHash: 'Hash'
    },
    GlobalValidationData: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      blockNumber: 'BlockNumber'
    },
    CollatorId: 'H256',
    CollatorSignature: 'Signature',
    CommittedCandidateReceipt: {
      descriptor: 'CandidateDescriptor',
      commitments: 'CandidateCommitments'
    },
    CoreAssignment: {
      core: 'CoreIndex',
      paraId: 'ParaId',
      kind: 'AssignmentKind',
      groupIdx: 'GroupIndex'
    },
    CoreIndex: 'u32',
    CoreOccupied: {
      _enum: {
        Parathread: 'ParathreadEntry',
        Parachain: 'Null'
      }
    },
    DoubleVoteReport: {
      identity: 'ValidatorId',
      first: '(Statement, ValidatorSignature)',
      second: '(Statement, ValidatorSignature)',
      proof: 'MembershipProof',
      signingContext: 'SigningContext'
    },
    DownwardMessage: 'Bytes',
    GroupIndex: 'u32',
    GlobalValidationSchedule: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      blockNumber: 'BlockNumber'
    },
    HeadData: 'Bytes',
    HostConfiguration: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      maxUpwardQueueCount: 'u32',
      maxUpwardQueueSize: 'u32',
      maxUpwardMessageSize: 'u32',
      maxUpwardMessageNumPerCandidate: 'u32',
      hrmpMaxMessageNumPerCandidate: 'u32',
      validationUpgradeFrequency: 'BlockNumber',
      validationUpgradeDelay: 'BlockNumber',
      maxPovSize: 'u32',
      maxDownwardMessageSize: 'u32',
      preferredDispatchableUpwardMessagesStepWeight: 'Weight',
      hrmpMaxParachainOutboundChannels: 'u32',
      hrmpMaxParathreadOutboundChannels: 'u32',
      hrmpOpenRequestTtl: 'u32',
      hrmpSenderDeposit: 'Balance',
      hrmpRecipientDeposit: 'Balance',
      hrmpChannelMaxCapacity: 'u32',
      hrmpChannelMaxTotalSize: 'u32',
      hrmpMaxParachainInboundChannels: 'u32',
      hrmpMaxParathreadInboundChannels: 'u32',
      hrmpChannelMaxMessageSize: 'u32',
      codeRetentionPeriod: 'BlockNumber',
      parathreadCores: 'u32',
      parathreadRetries: 'u32',
      groupRotationFrequency: 'BlockNumber',
      chainAvailabilityPeriod: 'BlockNumber',
      threadAvailabilityPeriod: 'BlockNumber',
      schedulingLookahead: 'u32',
      maxValidatorsPerCore: 'Option<u32>',
      maxValidators: 'Option<u32>',
      disputePeriod: 'SessionIndex',
      disputePostConclusionAcceptancePeriod: 'BlockNumber',
      disputeMaxSpamSlots: 'u32',
      disputeConclusionByTimeOutPeriod: 'BlockNumber',
      noShowSlots: 'u32',
      nDelayTranches: 'u32',
      zerothDelayTrancheWidth: 'u32',
      neededApprovals: 'u32',
      relayVrfModuloSamples: 'u32'
    },
    InboundDownwardMessage: {
      pubSentAt: 'BlockNumber',
      pubMsg: 'DownwardMessage'
    },
    InboundHrmpMessage: {
      sentAt: 'BlockNumber',
      data: 'Bytes'
    },
    InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
    LocalValidationData: {
      parentHead: 'HeadData',
      balance: 'Balance',
      codeUpgradeAllowed: 'Option<BlockNumber>'
    },
    MessageIngestionType: {
      downwardMessages: 'Vec<InboundDownwardMessage>',
      horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
    },
    MessageQueueChain: 'RelayChainHash',
    OutboundHrmpMessage: {
      recipient: 'u32',
      data: 'Bytes'
    },
    ParachainDispatchOrigin: {
      _enum: ['Signed', 'Parachain', 'Root']
    },
    ParachainInherentData: {
      validationData: 'PersistedValidationData',
      relayChainState: 'StorageProof',
      downwardMessages: 'Vec<InboundDownwardMessage>',
      horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
    },
    ParachainsInherentData: {
      bitfields: 'SignedAvailabilityBitfields',
      backedCandidates: 'Vec<BackedCandidate>',
      disputes: 'MultiDisputeStatementSet',
      parentHeader: 'Header'
    },
    ParaGenesisArgs: {
      genesisHead: 'Bytes',
      validationCode: 'Bytes',
      parachain: 'bool'
    },
    ParaId: 'u32',
    ParaInfo: {
      manager: 'AccountId',
      deposit: 'Balance',
      locked: 'bool'
    },
    ParaLifecycle: {
      _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
    },
    ParaPastCodeMeta: {
      upgradeTimes: 'Vec<ReplacementTimes>',
      lastPruned: 'Option<BlockNumber>'
    },
    ParaScheduling: {
      _enum: ['Always', 'Dynamic']
    },
    ParathreadClaim: '(ParaId, CollatorId)',
    ParathreadClaimQueue: {
      queue: 'Vec<QueuedParathread>',
      nextCoreOffset: 'u32'
    },
    ParathreadEntry: {
      claim: 'ParathreadClaim',
      retries: 'u32'
    },
    ParaValidatorIndex: 'u32',
    PersistedValidationData: {
      parentHead: 'HeadData',
      relayParentNumber: 'RelayChainBlockNumber',
      relayParentStorageRoot: 'Hash',
      maxPovSize: 'u32'
    },
    QueuedParathread: {
      claim: 'ParathreadEntry',
      coreOffset: 'u32'
    },
    RelayBlockNumber: 'u32',
    RelayChainBlockNumber: 'RelayBlockNumber',
    RelayHash: 'Hash',
    RelayChainHash: 'RelayHash',
    Remark: '[u8; 32]',
    ReplacementTimes: {
      expectedAt: 'BlockNumber',
      activatedAt: 'BlockNumber'
    },
    Retriable: {
      _enum: {
        Never: 'Null',
        WithRetries: 'u32'
      }
    },
    Scheduling: {
      _enum: ['Always', 'Dynamic']
    },
    SessionInfo: {
      validators: 'Vec<ValidatorId>',
      discoveryKeys: 'Vec<AuthorityDiscoveryId>',
      assignmentKeys: 'Vec<AssignmentId>',
      validatorGroups: 'Vec<SessionInfoValidatorGroup>',
      nCores: 'u32',
      zerothDelayTrancheWidth: 'u32',
      relayVrfModuloSamples: 'u32',
      nDelayTranches: 'u32',
      noShowSlots: 'u32',
      neededApprovals: 'u32'
    },
    SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
    SignedAvailabilityBitfield: {
      payload: 'BitVec',
      validatorIndex: 'ParaValidatorIndex',
      signature: 'ValidatorSignature'
    },
    SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
    SigningContext: {
      sessionIndex: 'SessionIndex',
      parentHash: 'Hash'
    },
    Statement: {
      _enum: {
        Never: 'Null',
        // starts at 1
        Candidate: 'Hash',
        Valid: 'Hash',
        Invalid: 'Hash'
      }
    },
    TransientValidationData: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      balance: 'Balance',
      codeUpgradeAllowed: 'Option<BlockNumber>',
      dmqLength: 'u32'
    },
    UpgradeGoAhead: {
      _enum: ['Abort', 'GoAhead']
    },
    UpgradeRestriction: {
      _enum: ['Present']
    },
    UpwardMessage: 'Bytes',
    ValidationFunctionParams: {
      maxCodeSize: 'u32',
      relayChainHeight: 'RelayChainBlockNumber',
      codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
    },
    ValidationCode: 'Bytes',
    ValidationCodeHash: 'Hash',
    ValidationData: {
      persisted: 'PersistedValidationData',
      transient: 'TransientValidationData'
    },
    ValidationDataType: {
      validationData: 'ValidationData',
      relayChainState: 'Vec<Bytes>'
    },
    ValidatorSignature: 'Signature',
    ValidityAttestation: {
      _enum: {
        Never: 'Null',
        // starts at 1
        Implicit: 'ValidatorSignature',
        Explicit: 'ValidatorSignature'
      }
    },
    MessagingStateSnapshot: {
      relayDispatchQueueSize: '(u32, u32)',
      egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
    },
    MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
    SystemInherentData: 'ParachainInherentData',
    VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/poll/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const poll_definitions = ({
  rpc: {},
  types: {
    Approvals: '[bool; 4]'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/purchase/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const purchase_definitions = ({
  rpc: {},
  types: {
    AccountStatus: {
      validity: 'AccountValidity',
      freeBalance: 'Balance',
      lockedBalance: 'Balance',
      signature: 'Vec<u8>',
      vat: 'Permill'
    },
    AccountValidity: {
      _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/util/xcm.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0

const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
function mapXcmTypes(version) {
  return XCM_MAPPINGS.reduce((all, key) => objectSpread(all, {
    [key]: `${key}${version}`
  }), {});
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/xcm/v0.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v0_v0 = {
  FungibilityV0: 'FungibilityV1',
  WildFungibilityV0: 'WildFungibilityV1',
  AssetInstanceV0: {
    _enum: {
      Undefined: 'Null',
      Index8: 'u8',
      Index16: 'Compact<u16>',
      Index32: 'Compact<u32>',
      Index64: 'Compact<u64>',
      Index128: 'Compact<u128>',
      Array4: '[u8; 4]',
      Array8: '[u8; 8]',
      Array16: '[u8; 16]',
      Array32: '[u8; 32]',
      Blob: 'Vec<u8>'
    }
  },
  JunctionV0: {
    _enum: {
      Parent: 'Null',
      Parachain: 'Compact<u32>',
      AccountId32: {
        network: 'NetworkId',
        id: 'AccountId'
      },
      AccountIndex64: {
        network: 'NetworkId',
        index: 'Compact<u64>'
      },
      AccountKey20: {
        network: 'NetworkId',
        key: '[u8; 20]'
      },
      PalletInstance: 'u8',
      GeneralIndex: 'Compact<u128>',
      GeneralKey: 'Vec<u8>',
      OnlyChild: 'Null',
      Plurality: {
        id: 'BodyId',
        part: 'BodyPart'
      }
    }
  },
  MultiAssetV0: {
    _enum: {
      None: 'Null',
      All: 'Null',
      AllFungible: 'Null',
      AllNonFungible: 'Null',
      AllAbstractFungible: 'Vec<u8>',
      AllAbstractNonFungible: 'Vec<u8>',
      AllConcreteFungible: 'MultiLocationV0',
      AllConcreteNonFungible: 'MultiLocationV0',
      AbstractFungible: {
        id: 'Vec<u8>',
        instance: 'Compact<u128>'
      },
      AbstractNonFungible: {
        class: 'Vec<u8>',
        instance: 'AssetInstanceV0'
      },
      ConcreteFungible: {
        id: 'MultiLocationV0',
        amount: 'Compact<u128>'
      },
      ConcreteNonFungible: {
        class: 'MultiLocationV0',
        instance: 'AssetInstanceV0'
      }
    }
  },
  MultiLocationV0: {
    _enum: {
      Here: 'Null',
      X1: 'JunctionV0',
      X2: '(JunctionV0, JunctionV0)',
      X3: '(JunctionV0, JunctionV0, JunctionV0)',
      X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
    }
  },
  OriginKindV0: {
    _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
  },
  ResponseV0: {
    _enum: {
      Assets: 'Vec<MultiAssetV0>'
    }
  },
  XcmV0: {
    _enum: {
      WithdrawAsset: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      ReserveAssetDeposit: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      ReceiveTeleportedAsset: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV0'
      },
      TransferAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0'
      },
      TransferReserveAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      Transact: {
        originType: 'XcmOriginKind',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      RelayedFrom: {
        who: 'MultiLocationV0',
        message: 'XcmV0'
      }
    }
  },
  XcmErrorV0: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      SendFailed: 'Null',
      CannotReachDestination: '(MultiLocation, Xcm)',
      MultiLocationFull: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      RecursionLimitReached: 'Null'
    }
  },
  XcmOrderV0: {
    _enum: {
      Null: 'Null',
      DepositAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0'
      },
      DepositReserveAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      ExchangeAsset: {
        give: 'Vec<MultiAssetV0>',
        receive: 'Vec<MultiAssetV0>'
      },
      InitiateReserveWithdraw: {
        assets: 'Vec<MultiAssetV0>',
        reserve: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      InitiateTeleport: {
        assets: 'Vec<MultiAsset>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      QueryHolding: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV0',
        assets: 'Vec<MultiAssetV0>'
      },
      BuyExecution: {
        fees: 'MultiAsset',
        weight: 'u64',
        debt: 'u64',
        haltOnError: 'bool',
        xcm: 'Vec<XcmV0>'
      }
    }
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/xcm/v1.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v1_v1 = {
  AssetInstanceV1: {
    _enum: {
      Undefined: 'Null',
      Index: 'Compact<u128>',
      Array4: '[u8; 4]',
      Array8: '[u8; 8]',
      Array16: '[u8; 16]',
      Array32: '[u8; 32]',
      Blob: 'Bytes'
    }
  },
  FungibilityV1: {
    _enum: {
      Fungible: 'Compact<u128>',
      NonFungible: 'AssetInstanceV1'
    }
  },
  JunctionV1: {
    _enum: {
      Parachain: 'Compact<u32>',
      AccountId32: {
        network: 'NetworkId',
        id: 'AccountId'
      },
      AccountIndex64: {
        network: 'NetworkId',
        index: 'Compact<u64>'
      },
      AccountKey20: {
        network: 'NetworkId',
        key: '[u8; 20]'
      },
      PalletInstance: 'u8',
      GeneralIndex: 'Compact<u128>',
      GeneralKey: 'Vec<u8>',
      OnlyChild: 'Null',
      Plurality: {
        id: 'BodyId',
        part: 'BodyPart'
      }
    }
  },
  JunctionsV1: {
    _enum: {
      Here: 'Null',
      X1: 'JunctionV1',
      X2: '(JunctionV1, JunctionV1)',
      X3: '(JunctionV1, JunctionV1, JunctionV1)',
      X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
    }
  },
  MultiAssetsV1: 'Vec<MultiAssetV1>',
  MultiAssetV1: {
    id: 'XcmAssetId',
    fungibility: 'FungibilityV1'
  },
  MultiAssetFilterV1: {
    _enum: {
      Definite: 'MultiAssetsV1',
      Wild: 'WildMultiAssetV1'
    }
  },
  MultiLocationV1: {
    parents: 'u8',
    interior: 'JunctionsV1'
  },
  OriginKindV1: 'OriginKindV0',
  ResponseV1: {
    _enum: {
      Assets: 'MultiAssetsV1'
    }
  },
  WildFungibilityV1: {
    _enum: ['Fungible', 'NonFungible']
  },
  WildMultiAssetV1: {
    _enum: {
      All: 'Null',
      AllOf: {
        id: 'XcmAssetId',
        fungibility: 'WildFungibilityV1'
      }
    }
  },
  XcmV1: {
    _enum: {
      WithdrawAsset: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ReserveAssetDeposit: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ReceiveTeleportedAsset: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV1'
      },
      TransferAsset: {
        assets: 'MultiAssetsV1',
        dest: 'MultiLocationV1'
      },
      TransferReserveAsset: {
        assets: 'MultiAssetsV1',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      Transact: {
        originType: 'XcmOriginKind',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      RelayedFrom: {
        who: 'MultiLocationV1',
        message: 'XcmV1'
      }
    }
  },
  XcmErrorV1: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      SendFailed: 'Null',
      CannotReachDestination: '(MultiLocationV1, XcmV1)',
      MultiLocationFull: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      DestinationUnsupported: 'Null',
      RecursionLimitReached: 'Null'
    }
  },
  XcmOrderV1: {
    _enum: {
      Noop: 'Null',
      DepositAsset: {
        assets: 'MultiAssetFilterV1',
        maxAssets: 'u32',
        beneficiary: 'MultiLocationV1'
      },
      DepositReserveAsset: {
        assets: 'MultiAssetFilterV1',
        maxAssets: 'u32',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ExchangeAsset: {
        give: 'MultiAssetFilterV1',
        receive: 'MultiAssetsV1'
      },
      InitiateReserveWithdraw: {
        assets: 'MultiAssetFilterV1',
        reserve: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      InitiateTeleport: {
        assets: 'MultiAssetFilterV1',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      QueryHolding: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV1',
        assets: 'MultiAssetFilterV1'
      },
      BuyExecution: {
        fees: 'MultiAssetV1',
        weight: 'u64',
        debt: 'u64',
        haltOnError: 'bool',
        instructions: 'Vec<XcmV1>'
      }
    }
  }
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/xcm/v2.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v2 = {
  AssetInstanceV2: 'AssetInstanceV1',
  FungibilityV2: 'FungibilityV1',
  JunctionV2: 'JunctionV1',
  JunctionsV2: 'JunctionsV1',
  MultiAssetsV2: 'MultiAssetsV1',
  MultiAssetV2: 'MultiAssetV1',
  MultiAssetFilterV2: 'MultiAssetFilterV1',
  MultiLocationV2: 'MultiLocationV1',
  OriginKindV2: 'OriginKindV1',
  WildFungibilityV2: 'WildFungibilityV1',
  ResponseV2: {
    _enum: {
      Null: 'Null',
      Assets: 'MultiAssetsV2',
      ExecutionResult: 'ResponseV2Result'
    }
  },
  ResponseV2Error: '(u32, XcmErrorV2)',
  ResponseV2Result: 'Result<Null, ResponseV2Error>',
  WeightLimitV2: {
    _enum: {
      Unlimited: 'Null',
      Limited: 'Compact<u64>'
    }
  },
  InstructionV2: {
    _enum: {
      WithdrawAsset: 'MultiAssetsV2',
      ReserveAssetDeposited: 'MultiAssetsV2',
      ReceiveTeleportedAsset: 'MultiAssetsV2',
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV2',
        maxWeight: 'Compact<u64>'
      },
      TransferAsset: {
        assets: 'MultiAssetsV2',
        beneficiary: 'MultiLocationV2'
      },
      TransferReserveAsset: {
        assets: 'MultiAssetsV2',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      Transact: {
        originType: 'OriginKindV2',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      ClearOrigin: 'Null',
      DescendOrigin: 'InteriorMultiLocation',
      ReportError: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV2',
        maxResponseWeight: 'Compact<u64>'
      },
      DepositAsset: {
        assets: 'MultiAssetFilterV2',
        maxAssets: 'u32',
        beneficiary: 'MultiLocationV2'
      },
      DepositReserveAsset: {
        assets: 'MultiAssetFilterV2',
        maxAssets: 'u32',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      ExchangeAsset: {
        give: 'MultiAssetFilterV2',
        receive: 'MultiAssetsV2'
      },
      InitiateReserveWithdraw: {
        assets: 'MultiAssetFilterV2',
        reserve: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      InitiateTeleport: {
        assets: 'MultiAssetFilterV2',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      QueryHolding: {
        query_id: 'Compact<u64>',
        dest: 'MultiLocationV2',
        assets: 'MultiAssetFilterV2',
        maxResponse_Weight: 'Compact<u64>'
      },
      BuyExecution: {
        fees: 'MultiAssetV2',
        weightLimit: 'WeightLimitV2'
      },
      RefundSurplus: 'Null',
      SetErrorHandler: 'XcmV2',
      SetAppendix: 'XcmV2',
      ClearError: 'Null',
      ClaimAsset: {
        assets: 'MultiAssetsV2',
        ticket: 'MultiLocationV2'
      },
      Trap: 'u64'
    }
  },
  WildMultiAssetV2: 'WildMultiAssetV1',
  XcmV2: 'Vec<InstructionV2>',
  XcmErrorV2: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      MultiLocationFull: 'Null',
      MultiLocationNotInvertible: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      DestinationUnsupported: 'Null',
      RecursionLimitReached: 'Null',
      Transport: 'Null',
      Unroutable: 'Null',
      UnknownWeightRequired: 'Null',
      Trap: 'u64',
      UnknownClaim: 'Null',
      InvalidLocation: 'Null'
    }
  },
  XcmOrderV2: 'XcmOrderV1'
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/xcm/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */





const XCM_LATEST = 'V2';
const xcm = {
  XcmOrigin: {
    _enum: {
      Xcm: 'MultiLocation'
    }
  },
  XcmpMessageFormat: {
    _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
  },
  XcmAssetId: {
    _enum: {
      Concrete: 'MultiLocation',
      Abstract: 'Bytes'
    }
  },
  InboundStatus: {
    _enum: ['Ok', 'Suspended']
  },
  OutboundStatus: {
    _enum: ['Ok', 'Suspended']
  },
  MultiAssets: 'Vec<MultiAsset>'
};
const definitions_location = {
  BodyId: {
    _enum: {
      Unit: 'Null',
      Named: 'Vec<u8>',
      Index: 'Compact<u32>',
      Executive: 'Null',
      Technical: 'Null',
      Legislative: 'Null',
      Judicial: 'Null'
    }
  },
  BodyPart: {
    _enum: {
      Voice: 'Null',
      Members: 'Compact<u32>',
      Fraction: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      },
      AtLeastProportion: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      },
      MoreThanProportion: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      }
    }
  },
  InteriorMultiLocation: 'Junctions',
  NetworkId: {
    _enum: {
      Any: 'Null',
      Named: 'Vec<u8>',
      Polkadot: 'Null',
      Kusama: 'Null'
    }
  }
};
/* harmony default export */ const xcm_definitions = ({
  rpc: {},
  types: objectSpread({}, definitions_location, xcm, v0_v0, v1_v1, v2, mapXcmTypes(XCM_LATEST), {
    DoubleEncodedCall: {
      encoded: 'Vec<u8>'
    },
    XcmOriginKind: {
      _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    Outcome: {
      _enum: {
        Complete: 'Weight',
        Incomplete: '(Weight, XcmErrorV0)',
        Error: 'XcmErrorV0'
      }
    },
    QueryId: 'u64',
    QueryStatus: {
      _enum: {
        Pending: {
          responder: 'VersionedMultiLocation',
          maybeNotify: 'Option<(u8, u8)>',
          timeout: 'BlockNumber'
        },
        Ready: {
          response: 'VersionedResponse',
          at: 'BlockNumber'
        }
      }
    },
    QueueConfigData: {
      suspendThreshold: 'u32',
      dropThreshold: 'u32',
      resumeThreshold: 'u32',
      thresholdWeight: 'Weight',
      weightRestrictDecay: 'Weight'
    },
    VersionMigrationStage: {
      _enum: {
        MigrateSupportedVersion: 'Null',
        MigrateVersionNotifiers: 'Null',
        NotifyCurrentTargets: 'Option<Bytes>',
        MigrateAndNotifyOldTargets: 'Null'
      }
    },
    VersionedMultiAsset: {
      _enum: {
        V0: 'MultiAssetV0',
        V1: 'MultiAssetV1',
        V2: 'MultiAssetV2'
      }
    },
    VersionedMultiAssets: {
      _enum: {
        V0: 'Vec<MultiAssetV0>',
        V1: 'MultiAssetsV1',
        V2: 'MultiAssetsV2'
      }
    },
    VersionedMultiLocation: {
      _enum: {
        V0: 'MultiLocationV0',
        V1: 'MultiLocationV1',
        V2: 'MultiLocationV2'
      }
    },
    VersionedResponse: {
      V0: 'ResponseV0',
      V1: 'ResponseV1',
      V2: 'ResponseV2'
    },
    VersionedXcm: {
      _enum: {
        V0: 'XcmV0',
        V1: 'XcmV1',
        V2: 'XcmV2'
      }
    },
    XcmVersion: 'u32'
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // order important in structs... :)

/* eslint-disable sort-keys */

const layout = {
  ContractCryptoHasher: {
    _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
  },
  ContractDiscriminant: 'u32',
  ContractLayoutArray: {
    offset: 'ContractLayoutKey',
    len: 'u32',
    cellsPerElem: 'u64',
    layout: 'ContractStorageLayout'
  },
  ContractLayoutCell: {
    key: 'ContractLayoutKey',
    ty: 'SiLookupTypeId'
  },
  ContractLayoutEnum: {
    dispatchKey: 'ContractLayoutKey',
    variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
  },
  ContractLayoutHash: {
    offset: 'ContractLayoutKey',
    strategy: 'ContractLayoutHashingStrategy',
    layout: 'ContractStorageLayout'
  },
  ContractLayoutHashingStrategy: {
    hasher: 'ContractCryptoHasher',
    postfix: 'Vec<u8>',
    prefix: 'Vec<u8>'
  },
  ContractLayoutKey: '[u8; 32]',
  ContractLayoutStruct: {
    fields: 'Vec<ContractLayoutStructField>'
  },
  ContractLayoutStructField: {
    layout: 'ContractStorageLayout',
    name: 'Text'
  },
  ContractStorageLayout: {
    _enum: {
      Cell: 'ContractLayoutCell',
      Hash: 'ContractLayoutHash',
      Array: 'ContractLayoutArray',
      Struct: 'ContractLayoutStruct',
      Enum: 'ContractLayoutEnum'
    }
  }
};
const spec = {
  ContractConstructorSpecV0: {
    name: 'Text',
    selector: 'ContractSelector',
    args: 'Vec<ContractMessageParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractConstructorSpecV1: {
    name: 'Vec<Text>',
    selector: 'ContractSelector',
    args: 'Vec<ContractMessageParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractConstructorSpecV2: {
    label: 'Text',
    selector: 'ContractSelector',
    args: 'Vec<ContractMessageParamSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractConstructorSpecV3: {
    label: 'Text',
    selector: 'ContractSelector',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV0: {
    constructors: 'Vec<ContractConstructorSpecV0>',
    messages: 'Vec<ContractMessageSpecV0>',
    events: 'Vec<ContractEventSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV1: {
    constructors: 'Vec<ContractConstructorSpecV1>',
    messages: 'Vec<ContractMessageSpecV1>',
    events: 'Vec<ContractEventSpecV1>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV2: {
    constructors: 'Vec<ContractConstructorSpecV2>',
    messages: 'Vec<ContractMessageSpecV2>',
    events: 'Vec<ContractEventSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV3: {
    constructors: 'Vec<ContractConstructorSpecV3>',
    messages: 'Vec<ContractMessageSpecV2>',
    events: 'Vec<ContractEventSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractDisplayName: 'SiPath',
  ContractEventParamSpecV0: {
    name: 'Text',
    indexed: 'bool',
    type: 'ContractTypeSpec',
    docs: 'Vec<Text>'
  },
  ContractEventParamSpecV2: {
    label: 'Text',
    indexed: 'bool',
    type: 'ContractTypeSpec',
    docs: 'Vec<Text>'
  },
  ContractEventSpecV0: {
    name: 'Text',
    args: 'Vec<ContractEventParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractEventSpecV1: {
    name: 'Text',
    args: 'Vec<ContractEventParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractEventSpecV2: {
    label: 'Text',
    args: 'Vec<ContractEventParamSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractMessageParamSpecV0: {
    name: 'Text',
    type: 'ContractTypeSpec'
  },
  ContractMessageParamSpecV2: {
    label: 'Text',
    type: 'ContractTypeSpec'
  },
  ContractMessageSpecV0: {
    name: 'Text',
    selector: 'ContractSelector',
    mutates: 'bool',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV0>',
    returnType: 'Option<ContractTypeSpec>',
    docs: 'Vec<Text>'
  },
  ContractMessageSpecV1: {
    name: 'Vec<Text>',
    selector: 'ContractSelector',
    mutates: 'bool',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV0>',
    returnType: 'Option<ContractTypeSpec>',
    docs: 'Vec<Text>'
  },
  ContractMessageSpecV2: {
    label: 'Text',
    selector: 'ContractSelector',
    mutates: 'bool',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV2>',
    returnType: 'Option<ContractTypeSpec>',
    docs: 'Vec<Text>'
  },
  ContractSelector: '[u8; 4]',
  ContractTypeSpec: {
    type: 'SiLookupTypeId',
    displayName: 'ContractDisplayName'
  }
};
const ContractMetadataV0 = {
  types: 'Vec<Si0Type>',
  spec: 'ContractContractSpecV0'
};
const ContractMetadataV1 = {
  types: 'Vec<PortableType>',
  spec: 'ContractContractSpecV1'
};
const ContractMetadataV2 = {
  types: 'Vec<PortableType>',
  spec: 'ContractContractSpecV2'
};
const ContractMetadataV3 = {
  types: 'Vec<PortableType>',
  spec: 'ContractContractSpecV3'
};
const ContractProjectInfo = {
  source: 'ContractProjectSource',
  contract: 'ContractProjectContract'
};
const latest = {
  ContractConstructorSpecLatest: 'ContractConstructorSpecV3',
  ContractEventSpecLatest: 'ContractEventSpecV2',
  ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
  ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
  ContractMessageSpecLatest: 'ContractMessageSpecV2',
  ContractMetadataLatest: 'ContractMetadataV3'
};
/* harmony default export */ const contractsAbi_definitions = ({
  rpc: {},
  types: objectSpread({}, layout, spec, latest, {
    ContractProjectInfo,
    ContractMetadataV0,
    ContractMetadataV1,
    ContractMetadataV2,
    ContractMetadataV3,
    ContractMetadata: {
      _enum: {
        V0: 'ContractMetadataV0',
        V1: 'ContractMetadataV1',
        V2: 'ContractMetadataV2',
        V3: 'ContractMetadataV3'
      }
    },
    ContractProjectV0: objectSpread({
      metadataVersion: 'Text'
    }, ContractProjectInfo, ContractMetadataV0),
    ContractProject: '(ContractProjectInfo, ContractMetadata)',
    ContractProjectContract: {
      _alias: {
        docs: 'documentation'
      },
      name: 'Text',
      version: 'Text',
      authors: 'Vec<Text>',
      description: 'Option<Text>',
      docs: 'Option<Text>',
      repository: 'Option<Text>',
      homepage: 'Option<Text>',
      license: 'Option<Text>'
    },
    ContractProjectSource: {
      _alias: {
        wasmHash: 'hash'
      },
      wasmHash: '[u8; 32]',
      language: 'Text',
      compiler: 'Text',
      wasm: 'Raw'
    }
  })
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/eth/rpc.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// As per frontier
 // We use aliasSection here to override since these are in another namespace

const netRpc = {
  listening: {
    aliasSection: 'net',
    description: 'Returns true if client is actively listening for network connections. Otherwise false.',
    params: [],
    type: 'bool'
  },
  peerCount: {
    aliasSection: 'net',
    description: 'Returns number of peers connected to node.',
    params: [],
    type: 'String'
  },
  version: {
    aliasSection: 'net',
    description: 'Returns protocol version.',
    params: [],
    type: 'String'
  }
};
const web3Rpc = {
  clientVersion: {
    aliasSection: 'web3',
    description: 'Returns current client version.',
    params: [],
    type: 'String'
  },
  sha3: {
    aliasSection: 'web3',
    description: 'Returns sha3 of the given data',
    params: [{
      name: 'data',
      type: 'Bytes'
    }],
    type: 'H256'
  }
};
const rpc_rpc = objectSpread({}, netRpc, web3Rpc, {
  accounts: {
    description: 'Returns accounts list.',
    params: [],
    type: 'Vec<H160>'
  },
  blockNumber: {
    description: 'Returns the blockNumber',
    params: [],
    type: 'U256'
  },
  call: {
    description: 'Call contract, returning the output data.',
    params: [{
      name: 'request',
      type: 'EthCallRequest'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'Bytes'
  },
  chainId: {
    description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
    params: [],
    type: 'U64'
  },
  coinbase: {
    description: 'Returns block author.',
    params: [],
    type: 'H160'
  },
  estimateGas: {
    description: 'Estimate gas needed for execution of given contract.',
    params: [{
      name: 'request',
      type: 'EthCallRequest'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  gasPrice: {
    description: 'Returns current gas price.',
    params: [],
    type: 'U256'
  },
  getBalance: {
    description: 'Returns balance of the given account.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getBlockByHash: {
    description: 'Returns block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'full',
      type: 'bool'
    }],
    type: 'Option<EthRichBlock>'
  },
  getBlockByNumber: {
    description: 'Returns block with given number.',
    params: [{
      name: 'block',
      type: 'BlockNumber'
    }, {
      name: 'full',
      type: 'bool'
    }],
    type: 'Option<EthRichBlock>'
  },
  getBlockTransactionCountByHash: {
    description: 'Returns the number of transactions in a block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'U256'
  },
  getBlockTransactionCountByNumber: {
    description: 'Returns the number of transactions in a block with given block number.',
    params: [{
      name: 'block',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getCode: {
    description: 'Returns the code at given address at given time (block number).',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'Bytes'
  },
  getFilterChanges: {
    description: 'Returns filter changes since last poll.',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'EthFilterChanges'
  },
  getFilterLogs: {
    description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'Vec<EthLog>'
  },
  getLogs: {
    description: 'Returns logs matching given filter object.',
    params: [{
      name: 'filter',
      type: 'EthFilter'
    }],
    type: 'Vec<EthLog>'
  },
  getProof: {
    description: 'Returns proof for account and storage.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      name: 'storageKeys',
      type: 'Vec<H256>'
    }, {
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'EthAccount'
  },
  getStorageAt: {
    description: 'Returns content of the storage at given address.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      name: 'index',
      type: 'U256'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'H256'
  },
  getTransactionByBlockHashAndIndex: {
    description: 'Returns transaction at given block hash and index.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthTransaction'
  },
  getTransactionByBlockNumberAndIndex: {
    description: 'Returns transaction by given block number and index.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthTransaction'
  },
  getTransactionByHash: {
    description: 'Get transaction by its hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'EthTransaction'
  },
  getTransactionCount: {
    description: 'Returns the number of transactions sent from given address at given time (block number).',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      isHistoric: true,
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getTransactionReceipt: {
    description: 'Returns transaction receipt by transaction hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'EthReceipt'
  },
  getUncleByBlockHashAndIndex: {
    description: 'Returns an uncles at given block and index.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthRichBlock'
  },
  getUncleByBlockNumberAndIndex: {
    description: 'Returns an uncles at given block and index.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthRichBlock'
  },
  getUncleCountByBlockHash: {
    description: 'Returns the number of uncles in a block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'U256'
  },
  getUncleCountByBlockNumber: {
    description: 'Returns the number of uncles in a block with given block number.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getWork: {
    description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
    params: [],
    type: 'EthWork'
  },
  hashrate: {
    description: 'Returns the number of hashes per second that the node is mining with.',
    params: [],
    type: 'U256'
  },
  mining: {
    description: 'Returns true if client is actively mining new blocks.',
    params: [],
    type: 'bool'
  },
  newBlockFilter: {
    description: 'Returns id of new block filter.',
    params: [],
    type: 'U256'
  },
  newFilter: {
    description: 'Returns id of new filter.',
    params: [{
      name: 'filter',
      type: 'EthFilter'
    }],
    type: 'U256'
  },
  newPendingTransactionFilter: {
    description: 'Returns id of new block filter.',
    params: [],
    type: 'U256'
  },
  protocolVersion: {
    description: 'Returns protocol version encoded as a string (quotes are necessary).',
    params: [],
    type: 'u64'
  },
  sendRawTransaction: {
    description: 'Sends signed transaction, returning its hash.',
    params: [{
      name: 'bytes',
      type: 'Bytes'
    }],
    type: 'H256'
  },
  sendTransaction: {
    description: 'Sends transaction; will block waiting for signer to return the transaction hash',
    params: [{
      name: 'tx',
      type: 'EthTransactionRequest'
    }],
    type: 'H256'
  },
  submitHashrate: {
    description: 'Used for submitting mining hashrate.',
    params: [{
      name: 'index',
      type: 'U256'
    }, {
      name: 'hash',
      type: 'H256'
    }],
    type: 'bool'
  },
  submitWork: {
    description: 'Used for submitting a proof-of-work solution.',
    params: [{
      name: 'nonce',
      type: 'H64'
    }, {
      name: 'headerHash',
      type: 'H256'
    }, {
      name: 'mixDigest',
      type: 'H256'
    }],
    type: 'bool'
  },
  subscribe: {
    description: 'Subscribe to Eth subscription.',
    params: [{
      name: 'kind',
      type: 'EthSubKind'
    }, {
      isOptional: true,
      name: 'params',
      type: 'EthSubParams'
    }],
    pubsub: ['subscription', 'subscribe', 'unsubscribe'],
    type: 'Null'
  },
  syncing: {
    description: 'Returns an object with data about the sync status or false.',
    params: [],
    type: 'EthSyncStatus'
  },
  uninstallFilter: {
    description: 'Uninstalls filter.',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'bool'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/eth/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
// As per frontier


const V0 = {
  BlockV0: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV0>',
    ommers: 'Vec<EthHeader>'
  },
  LegacyTransaction: {
    nonce: 'U256',
    gasPrice: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    signature: 'EthTransactionSignature'
  },
  TransactionV0: 'LegacyTransaction'
};
const V1 = {
  BlockV1: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV1>',
    ommers: 'Vec<EthHeader>'
  },
  EIP2930Transaction: {
    chainId: 'u64',
    nonce: 'U256',
    gasPrice: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    accessList: 'EthAccessList',
    oddYParity: 'bool',
    r: 'H256',
    s: 'H256'
  },
  TransactionV1: {
    _enum: {
      Legacy: 'LegacyTransaction',
      EIP2930: 'EIP2930Transaction'
    }
  }
};
const V2 = {
  BlockV2: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV2>',
    ommers: 'Vec<EthHeader>'
  },
  EIP1559Transaction: {
    chainId: 'u64',
    nonce: 'U256',
    maxPriorityFeePerGas: 'U256',
    maxFeePerGas: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    accessList: 'EthAccessList',
    oddYParity: 'bool',
    r: 'H256',
    s: 'H256'
  },
  TransactionV2: {
    _enum: {
      Legacy: 'LegacyTransaction',
      EIP2930: 'EIP2930Transaction',
      EIP1559: 'EIP1559Transaction'
    }
  }
};
const types = objectSpread({}, V0, V1, V2, {
  EthereumAccountId: 'GenericEthereumAccountId',
  EthereumAddress: 'GenericEthereumAccountId',
  EthereumLookupSource: 'GenericEthereumLookupSource',
  EthereumSignature: '[u8; 65]',
  EthAccessListItem: {
    address: 'EthAddress',
    slots: 'Vec<H256>'
  },
  EthAccessList: 'Vec<EthAccessListItem>',
  EthAccount: {
    address: 'EthAddress',
    balance: 'U256',
    nonce: 'U256',
    codeHash: 'H256',
    storageHash: 'H256',
    accountProof: 'Vec<Bytes>',
    storageProof: 'Vec<EthStorageProof>'
  },
  EthAddress: 'H160',
  EthBlock: {
    header: 'EthHeader',
    transactions: 'Vec<EthTransaction>',
    ommers: 'Vec<EthHeader>'
  },
  EthHeader: {
    parentHash: 'H256',
    ommersHash: 'H256',
    beneficiary: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    logsBloom: 'EthBloom',
    difficulty: 'U256',
    number: 'U256',
    gasLimit: 'U256',
    gasUsed: 'U256',
    timestamp: 'u64',
    extraData: 'Bytes',
    mixMash: 'H256',
    nonce: 'H64'
  },
  EthRichBlock: {
    _alias: {
      blockHash: 'hash',
      blockSize: 'size'
    },
    blockHash: 'Option<H256>',
    parentHash: 'H256',
    sha3Uncles: 'H256',
    author: 'EthAddress',
    miner: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    number: 'Option<U256>',
    gasUsed: 'U256',
    gasLimit: 'U256',
    extraData: 'Bytes',
    logsBloom: 'EthBloom',
    timestamp: 'U256',
    difficulty: 'U256',
    totalDifficulty: 'Option<U256>',
    sealFields: 'Vec<Bytes>',
    uncles: 'Vec<H256>',
    transactions: 'Vec<EthTransaction>',
    blockSize: 'Option<U256>'
  },
  EthBloom: 'H2048',
  EthCallRequest: {
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    gasPrice: 'Option<U256>',
    gas: 'Option<U256>',
    value: 'Option<U256>',
    data: 'Option<Bytes>',
    nonce: 'Option<U256>'
  },
  EthFilter: {
    fromBlock: 'Option<BlockNumber>',
    toBlock: 'Option<BlockNumber>',
    blockHash: 'Option<H256>',
    address: 'Option<EthFilterAddress>',
    topics: 'Option<EthFilterTopic>'
  },
  EthFilterAddress: {
    _enum: {
      Single: 'EthAddress',
      Multiple: 'Vec<EthAddress>',
      Null: 'Null'
    }
  },
  EthFilterChanges: {
    _enum: {
      Logs: 'Vec<EthLog>',
      Hashes: 'Vec<H256>',
      Empty: 'Null'
    }
  },
  EthFilterTopic: {
    _enum: {
      Single: 'EthFilterTopicInner',
      Multiple: 'Vec<EthFilterTopicInner>',
      Null: 'Null'
    }
  },
  EthFilterTopicEntry: 'Option<H256>',
  EthFilterTopicInner: {
    _enum: {
      Single: 'EthFilterTopicEntry',
      Multiple: 'Vec<EthFilterTopicEntry>',
      Null: 'Null'
    }
  },
  EthRichHeader: {
    _alias: {
      blockHash: 'hash',
      blockSize: 'size'
    },
    blockHash: 'Option<H256>',
    parentHash: 'H256',
    sha3Uncles: 'H256',
    author: 'EthAddress',
    miner: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    number: 'Option<U256>',
    gasUsed: 'U256',
    gasLimit: 'U256',
    extraData: 'Bytes',
    logsBloom: 'EthBloom',
    timestamp: 'U256',
    difficulty: 'U256',
    sealFields: 'Vec<Bytes>',
    blockSize: 'Option<U256>'
  },
  EthLog: {
    address: 'EthAddress',
    topics: 'Vec<H256>',
    data: 'Bytes',
    blockHash: 'Option<H256>',
    blockNumber: 'Option<U256>',
    transactionHash: 'Option<H256>',
    transactionIndex: 'Option<U256>',
    logIndex: 'Option<U256>',
    transactionLogIndex: 'Option<U256>',
    removed: 'bool'
  },
  EthReceipt: {
    transactionHash: 'Option<H256>',
    transactionIndex: 'Option<U256>',
    blockHash: 'Option<H256>',
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    blockNumber: 'Option<U256>',
    cumulativeGasUsed: 'U256',
    gasUsed: 'Option<U256>',
    contractAddress: 'Option<EthAddress>',
    logs: 'Vec<EthLog>',
    root: 'Option<H256>',
    logsBloom: 'EthBloom',
    statusCode: 'Option<U64>'
  },
  EthStorageProof: {
    key: 'U256',
    value: 'U256',
    proof: 'Vec<Bytes>'
  },
  EthSubKind: {
    _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
  },
  EthSubParams: {
    _enum: {
      None: 'Null',
      Logs: 'EthFilter'
    }
  },
  EthSubResult: {
    _enum: {
      Header: 'EthRichHeader',
      Log: 'EthLog',
      TransactionHash: 'H256',
      SyncState: 'EthSyncStatus'
    }
  },
  EthSyncInfo: {
    startingBlock: 'U256',
    currentBlock: 'U256',
    highestBlock: 'U256',
    warpChunksAmount: 'Option<U256>',
    warpChunksProcessed: 'Option<U256>'
  },
  EthSyncStatus: {
    _enum: {
      Info: 'EthSyncInfo',
      None: 'Null'
    }
  },
  EthTransaction: 'LegacyTransaction',
  EthTransactionSignature: {
    v: 'u64',
    r: 'H256',
    s: 'H256'
  },
  EthTransactionAction: {
    _enum: {
      Call: 'H160',
      Create: 'Null'
    }
  },
  EthTransactionCondition: {
    _enum: {
      block: 'u64',
      time: 'u64'
    }
  },
  EthTransactionRequest: {
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    gasPrice: 'Option<U256>',
    gas: 'Option<U256>',
    value: 'Option<U256>',
    data: 'Option<Bytes>',
    nonce: 'Option<U256>'
  },
  EthTransactionStatus: {
    transactionHash: 'H256',
    transactionIndex: 'u32',
    from: 'EthAddress',
    to: 'Option<EthAddress>',
    contractAddress: 'Option<EthAddress>',
    logs: 'Vec<EthLog>',
    logsBloom: 'EthBloom'
  },
  EthWork: {
    powHash: 'H256',
    seedHash: 'H256',
    target: 'H256',
    number: 'Option<u64>'
  }
});
/* harmony default export */ const eth_definitions = ({
  rpc: rpc_rpc,
  types
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/rpc/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const rpc_definitions = ({
  rpc: {
    methods: {
      description: 'Retrieves the list of RPC methods that are exposed by the node',
      params: [],
      type: 'RpcMethods'
    }
  },
  types: {
    RpcMethods: {
      version: 'u32',
      methods: 'Vec<Text>'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/author/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const author_definitions = ({
  rpc: {
    hasKey: {
      description: 'Returns true if the keystore has private keys for the given public key and key type.',
      params: [{
        name: 'publicKey',
        type: 'Bytes'
      }, {
        name: 'keyType',
        type: 'Text'
      }],
      type: 'bool'
    },
    hasSessionKeys: {
      description: 'Returns true if the keystore has private keys for the given session public keys.',
      params: [{
        name: 'sessionKeys',
        type: 'Bytes'
      }],
      type: 'bool'
    },
    removeExtrinsic: {
      description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
      params: [{
        name: 'bytesOrHash',
        type: 'Vec<ExtrinsicOrHash>'
      }],
      type: 'Vec<Hash>'
    },
    insertKey: {
      description: 'Insert a key into the keystore.',
      params: [{
        name: 'keyType',
        type: 'Text'
      }, {
        name: 'suri',
        type: 'Text'
      }, {
        name: 'publicKey',
        type: 'Bytes'
      }],
      type: 'Bytes'
    },
    rotateKeys: {
      description: 'Generate new session keys and returns the corresponding public keys',
      params: [],
      type: 'Bytes'
    },
    pendingExtrinsics: {
      description: 'Returns all pending extrinsics, potentially grouped by sender',
      params: [],
      type: 'Vec<Extrinsic>'
    },
    submitExtrinsic: {
      isSigned: true,
      description: 'Submit a fully formatted extrinsic for block inclusion',
      params: [{
        name: 'extrinsic',
        type: 'Extrinsic'
      }],
      type: 'Hash'
    },
    submitAndWatchExtrinsic: {
      description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
      isSigned: true,
      params: [{
        name: 'extrinsic',
        type: 'Extrinsic'
      }],
      pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
      type: 'ExtrinsicStatus'
    }
  },
  types: {
    ExtrinsicOrHash: {
      _enum: {
        Hash: 'Hash',
        Extrinsic: 'Bytes'
      }
    },
    ExtrinsicStatus: {
      _enum: {
        Future: 'Null',
        Ready: 'Null',
        Broadcast: 'Vec<Text>',
        InBlock: 'Hash',
        Retracted: 'Hash',
        FinalityTimeout: 'Hash',
        Finalized: 'Hash',
        Usurped: 'Hash',
        Dropped: 'Null',
        Invalid: 'Null'
      }
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/chain/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const chain_definitions = ({
  rpc: {
    getHeader: {
      alias: ['chain_getHead'],
      description: 'Retrieves the header for a specific block',
      params: [{
        name: 'hash',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Header'
    },
    getBlock: {
      description: 'Get header and body of a relay chain block',
      params: [{
        name: 'hash',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'SignedBlock'
    },
    getBlockHash: {
      description: 'Get the block hash for a specific block',
      params: [{
        name: 'blockNumber',
        type: 'BlockNumber',
        isOptional: true
      }],
      type: 'BlockHash'
    },
    getFinalizedHead: {
      alias: ['chain_getFinalisedHead'],
      description: 'Get hash of the last finalized block in the canon chain',
      params: [],
      type: 'BlockHash'
    },
    subscribeNewHeads: {
      alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
      description: 'Retrieves the best header via subscription',
      params: [],
      // NOTE These still has the aliassed version, compatible with 1.x
      pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
      type: 'Header'
    },
    subscribeFinalizedHeads: {
      alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
      description: 'Retrieves the best finalized header via subscription',
      params: [],
      pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
      type: 'Header'
    },
    subscribeAllHeads: {
      description: 'Retrieves the newest header via subscription',
      params: [],
      pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
      type: 'Header'
    }
  },
  types: {
    BlockHash: 'Hash'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/childstate/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const childstate_definitions = ({
  rpc: {
    getKeys: {
      description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
      alias: ['childstate_getKeysPagedAt'],
      description: 'Returns the keys with prefix from a child storage with pagination support',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'count',
        type: 'u32'
      }, {
        name: 'startKey',
        type: 'StorageKey',
        isOptional: true
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getStorage: {
      description: 'Returns a child storage entry at a specific block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<StorageData>'
    },
    getStorageEntries: {
      description: 'Returns child storage entries for multiple keys at a specific block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<Option<StorageData>>'
    },
    getStorageHash: {
      description: 'Returns the hash of a child storage entry at a block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<Hash>'
    },
    getStorageSize: {
      description: 'Returns the size of a child storage entry at a block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<u64>'
    }
  },
  types: {
    // StorageKey extends Bytes
    PrefixedStorageKey: 'StorageKey'
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/offchain/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const offchain_definitions = ({
  rpc: {
    localStorageSet: {
      description: 'Set offchain local storage under given key and prefix',
      params: [{
        name: 'kind',
        type: 'StorageKind'
      }, {
        name: 'key',
        type: 'Bytes'
      }, {
        name: 'value',
        type: 'Bytes'
      }],
      type: 'Null'
    },
    localStorageGet: {
      description: 'Get offchain local storage under given key and prefix',
      params: [{
        name: 'kind',
        type: 'StorageKind'
      }, {
        name: 'key',
        type: 'Bytes'
      }],
      type: 'Option<Bytes>'
    }
  },
  types: {
    StorageKind: {
      _enum: {
        PERSISTENT: 1,
        LOCAL: 2
      }
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/payment/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const QUERY_PARAMS = [{
  name: 'extrinsic',
  type: 'Bytes'
}, {
  name: 'at',
  type: 'BlockHash',
  isHistoric: true,
  isOptional: true
}];
/* harmony default export */ const payment_definitions = ({
  rpc: {
    queryInfo: {
      description: 'Retrieves the fee information for an encoded extrinsic',
      params: QUERY_PARAMS,
      type: 'RuntimeDispatchInfo'
    },
    queryFeeDetails: {
      description: 'Query the detailed fee of a given encoded extrinsic',
      params: QUERY_PARAMS,
      type: 'FeeDetails'
    }
  },
  types: {
    FeeDetails: {
      inclusionFee: 'Option<InclusionFee>' // skipped in serde
      // tip: 'Balance'

    },
    InclusionFee: {
      baseFee: 'Balance',
      lenFee: 'Balance',
      adjustedWeightFee: 'Balance'
    },
    RuntimeDispatchInfo: {
      weight: 'Weight',
      class: 'DispatchClass',
      partialFee: 'Balance'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/state/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
/* harmony default export */ const state_definitions = ({
  rpc: {
    call: {
      alias: ['state_callAt'],
      description: 'Perform a call to a builtin on the chain',
      params: [{
        name: 'method',
        type: 'Text'
      }, {
        name: 'data',
        type: 'Bytes'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Bytes'
    },
    getKeys: {
      description: 'Retrieves the keys with a certain prefix',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getPairs: {
      description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
      params: [{
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<KeyValue>'
    },
    getKeysPaged: {
      alias: ['state_getKeysPagedAt'],
      description: 'Returns the keys with prefix with pagination support.',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'count',
        type: 'u32'
      }, {
        name: 'startKey',
        type: 'StorageKey',
        isOptional: true
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getStorage: {
      alias: ['state_getStorageAt'],
      description: 'Retrieves the storage for a key',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'StorageData'
    },
    getStorageHash: {
      alias: ['state_getStorageHashAt'],
      description: 'Retrieves the storage hash',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Hash'
    },
    getStorageSize: {
      alias: ['state_getStorageSizeAt'],
      description: 'Retrieves the storage size',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'u64'
    },
    getChildKeys: {
      description: 'Retrieves the keys with prefix of a specific child storage',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getChildStorage: {
      description: 'Retrieves the child storage for a key',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'StorageData'
    },
    getChildStorageHash: {
      description: 'Retrieves the child storage hash',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Hash'
    },
    getChildStorageSize: {
      description: 'Retrieves the child storage size',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'u64'
    },
    getMetadata: {
      description: 'Returns the runtime metadata',
      params: [{
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Metadata'
    },
    getRuntimeVersion: {
      alias: ['chain_getRuntimeVersion'],
      description: 'Get the runtime version',
      params: [{
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'RuntimeVersion'
    },
    queryStorage: {
      description: 'Query historical storage entries (by key) starting from a start block',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'fromBlock',
        type: 'Hash'
      }, {
        name: 'toBlock',
        type: 'BlockHash',
        isOptional: true
      }],
      type: 'Vec<StorageChangeSet>'
    },
    queryStorageAt: {
      description: 'Query storage entries (by key) starting at block hash given as the second parameter',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageChangeSet>'
    },
    getChildReadProof: {
      description: 'Returns proof of storage for child key entries at a specific block state.',
      params: [{
        name: 'childStorageKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ReadProof'
    },
    getReadProof: {
      description: 'Returns proof of storage entries at a specific block state',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ReadProof'
    },
    subscribeRuntimeVersion: {
      alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
      description: 'Retrieves the runtime version via subscription',
      params: [],
      pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
      type: 'RuntimeVersion'
    },
    subscribeStorage: {
      description: 'Subscribes to storage changes for the provided keys',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>',
        isOptional: true
      }],
      pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
      type: 'StorageChangeSet'
    },
    traceBlock: {
      description: 'Provides a way to trace the re-execution of a single block',
      params: [{
        name: 'block',
        type: 'Hash'
      }, {
        name: 'targets',
        type: 'Option<Text>'
      }, {
        name: 'storageKeys',
        type: 'Option<Text>'
      }, {
        name: 'methods',
        type: 'Option<Text>'
      }],
      type: 'TraceBlockResponse'
    },
    trieMigrationStatus: {
      description: 'Check current migration state',
      params: [{
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'MigrationStatusResult'
    }
  },
  types: {
    ApiId: '[u8; 8]',
    BlockTrace: {
      blockHash: 'Text',
      parentHash: 'Text',
      tracingTargets: 'Text',
      storageKeys: 'Text',
      spans: 'Vec<BlockTraceSpan>',
      events: 'Vec<BlockTraceEvent>'
    },
    BlockTraceEvent: {
      target: 'Text',
      data: 'BlockTraceEventData',
      parentId: 'Option<u64>'
    },
    BlockTraceEventData: {
      stringValues: 'HashMap<Text, Text>'
    },
    BlockTraceSpan: {
      id: 'u64',
      parentId: 'Option<u64>',
      name: 'Text',
      target: 'Text',
      wasm: 'bool'
    },
    KeyValueOption: '(StorageKey, Option<StorageData>)',
    MigrationStatusResult: {
      topRemainingToMigrate: 'u64',
      childRemainingToMigrate: 'u64'
    },
    ReadProof: {
      at: 'Hash',
      proof: 'Vec<Bytes>'
    },
    RuntimeVersionApi: '(ApiId, u32)',
    RuntimeVersion: {
      specName: 'Text',
      implName: 'Text',
      authoringVersion: 'u32',
      specVersion: 'u32',
      implVersion: 'u32',
      apis: 'Vec<RuntimeVersionApi>',
      transactionVersion: 'u32'
    },
    RuntimeVersionPartial: {
      specName: 'Text',
      specVersion: 'u32'
    },
    SpecVersion: 'u32',
    StorageChangeSet: {
      block: 'Hash',
      changes: 'Vec<KeyValueOption>'
    },
    TraceBlockResponse: {
      _enum: {
        TraceError: 'TraceError',
        BlockTrace: 'BlockTrace'
      }
    },
    TraceError: {
      error: 'Text'
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/definitions.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // substrate types





































 // polkadot-specific types









 // other useful types


 // pull in rpc last, assuming that is uses info from above

 // rpc-only definitions







;// CONCATENATED MODULE: ./node_modules/@polkadot/types/create/lazy.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

function lazyVariants(lookup, {
  type
}, getName, creator) {
  const result = {};
  const variants = lookup.getSiType(type).def.asVariant.variants;

  for (let i = 0; i < variants.length; i++) {
    lazyMethod(result, variants[i], creator, getName);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/util.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


function convert(fn) {
  return ({
    name
  }) => fn(name);
}

const objectNameToCamel = convert(stringCamelCase);
const objectNameToString = convert(n => n.toString());
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/errors/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



function variantToMeta(lookup, variant) {
  return objectSpread({
    args: variant.fields.map(({
      type
    }) => lookup.getTypeDef(type).type)
  }, variant);
}
/** @internal */

function decorateErrors(registry, {
  lookup,
  pallets
}, version) {
  const result = {};

  for (let i = 0; i < pallets.length; i++) {
    const {
      errors,
      index,
      name
    } = pallets[i];

    if (errors.isSome) {
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, variant => ({
        is: ({
          error,
          index
        }) => index.eq(sectionIndex) && (isU8a(error) ? error[0] === variant.index.toNumber() : error.eq(variant.index)),
        meta: registry.createTypeUnsafe('ErrorMetadataLatest', [variantToMeta(lookup, variant)])
      })));
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/events/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0




function filterEventsSome({
  events
}) {
  return events.isSome;
}
/** @internal */

function decorateEvents(registry, {
  lookup,
  pallets
}, version) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);

  for (let i = 0; i < filtered.length; i++) {
    const {
      events,
      index,
      name
    } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, variant => ({
      is: eventRecord => sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])
    })));
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


function isTx(tx, callIndex) {
  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
/** @internal */


function createUnchecked(registry, section, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = stringCamelCase(callMetadata.name);

  const extrinsicFn = (...args) => {
    assert(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    return registry.createTypeUnsafe('Call', [{
      args,
      callIndex
    }, callMetadata]);
  };

  extrinsicFn.is = tx => isTx(tx, callIndex);

  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section;

  extrinsicFn.toJSON = () => callMetadata.toJSON();

  return extrinsicFn;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0





function filterCallsSome({
  calls
}) {
  return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
  const {
    fields,
    index
  } = variant;
  const args = new Array(fields.length);

  for (let a = 0; a < fields.length; a++) {
    const {
      name,
      type,
      typeName
    } = fields[a];
    args[a] = objectSpread({
      name: stringCamelCase(name.unwrapOr(`param${a}`)),
      type: getSiName(lookup, type)
    }, typeName.isSome ? {
      typeName: typeName.unwrap()
    } : null);
  }

  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({
    args
  }, variant)]));
}
/** @internal */

function decorateExtrinsics(registry, {
  lookup,
  pallets
}, version) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);

  for (let i = 0; i < filtered.length; i++) {
    const {
      calls,
      index,
      name
    } = filtered[i];
    const sectionName = stringCamelCase(name);
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, variant => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/constants/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars

function decorateConstants(registry, {
  pallets
}, _version) {
  const result = {};

  for (let i = 0; i < pallets.length; i++) {
    const {
      constants,
      name
    } = pallets[i];

    if (!constants.isEmpty) {
      lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, constant => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, objectNameToCamel));
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v9/toV10.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// migrate a storage hasher type
// see https://github.com/paritytech/substrate/pull/4462

/** @internal */
function createStorageHasher(registry, hasher) {
  // Blake2_128_Concat has been added at index 2, so we increment all the
  // indexes greater than 2
  if (hasher.toNumber() >= 2) {
    return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);
  }

  return registry.createTypeUnsafe('StorageHasherV10', [hasher]);
}
/** @internal */


function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [{ ...entryType.asMap,
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }, 1];
  }

  if (entryType.isDoubleMap) {
    return [{ ...entryType.asDoubleMap,
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }, 2];
  }

  return [entryType.asPlain, 0];
}
/** @internal */


function convertModule(registry, mod) {
  const storage = mod.storage.unwrapOr(null);
  return registry.createTypeUnsafe('ModuleMetadataV10', [{ ...mod,
    storage: storage ? { ...storage,
      items: storage.items.map(item => ({ ...item,
        type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))
      }))
    } : null
  }]);
}
/** @internal */


function toV10(registry, {
  modules
}) {
  return registry.createTypeUnsafe('MetadataV10', [{
    modules: modules.map(mod => convertModule(registry, mod))
  }]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v10/toV11.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function toV11(registry, {
  modules
}) {
  return registry.createTypeUnsafe('MetadataV11', [{
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  }]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v11/toV12.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @internal
 **/
function toV12(registry, {
  extrinsic,
  modules
}) {
  return registry.createTypeUnsafe('MetadataV12', [{
    extrinsic,
    modules: modules.map(mod => registry.createTypeUnsafe('ModuleMetadataV12', [{ ...mod,
      index: 255
    }]))
  }]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v12/toV13.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @internal
 **/
function toV13(registry, metadata) {
  return registry.createTypeUnsafe('MetadataV13', [metadata]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/alias.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // type overrides for modules (where duplication between modules exist)

const typesAlias = {
  assets: {
    Approval: 'AssetApproval',
    ApprovalKey: 'AssetApprovalKey',
    Balance: 'TAssetBalance',
    DestroyWitness: 'AssetDestroyWitness'
  },
  babe: {
    EquivocationProof: 'BabeEquivocationProof'
  },
  balances: {
    Status: 'BalanceStatus'
  },
  beefy: {
    AuthorityId: 'BeefyId'
  },
  contracts: {
    StorageKey: 'ContractStorageKey'
  },
  electionProviderMultiPhase: {
    Phase: 'ElectionPhase'
  },
  ethereum: {
    Block: 'EthBlock',
    Header: 'EthHeader',
    Receipt: 'EthReceipt',
    Transaction: 'EthTransaction',
    TransactionStatus: 'EthTransactionStatus'
  },
  evm: {
    Account: 'EvmAccount',
    Log: 'EvmLog',
    Vicinity: 'EvmVicinity'
  },
  grandpa: {
    Equivocation: 'GrandpaEquivocation',
    EquivocationProof: 'GrandpaEquivocationProof'
  },
  identity: {
    Judgement: 'IdentityJudgement'
  },
  inclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraDisputes: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraInclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraScheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraShared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parachains: {
    Id: 'ParaId'
  },
  parasDisputes: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasInclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasScheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasShared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  proposeParachain: {
    Proposal: 'ParachainProposal'
  },
  proxy: {
    Announcement: 'ProxyAnnouncement'
  },
  scheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  shared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  society: {
    Judgement: 'SocietyJudgement',
    Vote: 'SocietyVote'
  },
  staking: {
    Compact: 'CompactAssignments'
  },
  treasury: {
    Proposal: 'TreasuryProposal'
  },
  xcm: {
    AssetId: 'XcmAssetId'
  },
  xcmPallet: {
    AssetId: 'XcmAssetId'
  }
};
/**
 * @description Get types for specific modules (metadata override)
 */

function getAliasTypes({
  knownTypes
}, section) {
  var _knownTypes$typesAlia;

  return objectSpread({}, typesAlias[section], (_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v13/toV14.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
/**
 * Creates a compatible type mapping
 * @internal
 **/

function compatType(specs, _type) {
  const type = _type.toString();

  const index = specs.findIndex(({
    def
  }) => def.HistoricMetaCompat === type);

  if (index !== -1) {
    return index;
  }

  return specs.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}

function compatTypes(specs, ...types) {
  for (let i = 0; i < types.length; i++) {
    compatType(specs, types[i]);
  }
}

function makeTupleType(specs, entries) {
  return specs.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}

function makeVariantType(modName, variantType, specs, variants) {
  return specs.push({
    def: {
      Variant: {
        variants
      }
    },
    path: [`pallet_${modName.toString()}`, 'pallet', variantType]
  }) - 1;
}
/**
 * @internal
 * generate & register the OriginCaller type
 **/


function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = 'Null';
        }

        result[name] = knownOrigins[name] || 'Null';
        return result;
      }, {})
    }
  });
}
/**
 * Find and apply the correct type override
 * @internal
 **/


function setTypeOverride(sectionTypes, types) {
  types.forEach(type => {
    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));

    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
      const orig = type.toString();
      const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);

      if (orig !== alias) {
        type.setOverride(alias);
      }
    }
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/


function convertCalls(specs, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({
    args,
    docs,
    name
  }, index) => {
    setTypeOverride(sectionTypes, args.map(({
      type
    }) => type));
    return registry.createTypeUnsafe('SiVariant', [{
      docs,
      fields: args.map(({
        name,
        type
      }) => registry.createTypeUnsafe('SiField', [{
        name,
        type: compatType(specs, type)
      }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe('PalletCallMetadataV14', [{
    type: makeVariantType(modName, 'Call', specs, variants)
  }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */


function convertConstants(specs, registry, constants, sectionTypes) {
  return constants.map(({
    docs,
    name,
    type,
    value
  }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createTypeUnsafe('PalletConstantMetadataV14', [{
      docs,
      name,
      type: compatType(specs, type),
      value
    }]);
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function convertErrors(specs, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({
    docs,
    name
  }, index) => registry.createTypeUnsafe('SiVariant', [{
    docs,
    fields: [],
    index,
    name
  }]));
  return registry.createTypeUnsafe('PalletErrorMetadataV14', [{
    type: makeVariantType(modName, 'Error', specs, variants)
  }]);
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/


function convertEvents(specs, registry, modName, events, sectionTypes) {
  const variants = events.map(({
    args,
    docs,
    name
  }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createTypeUnsafe('SiVariant', [{
      docs,
      fields: args.map(t => registry.createTypeUnsafe('SiField', [{
        type: compatType(specs, t)
      }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe('PalletEventMetadataV14', [{
    type: makeVariantType(modName, 'Event', specs, variants)
  }]);
}

function createMapEntry(specs, registry, sectionTypes, {
  hashers,
  isLinked,
  isOptional,
  keys,
  value
}) {
  setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
  return registry.createTypeUnsafe('StorageEntryTypeV14', [{
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(specs, keys[0]) : makeTupleType(specs, keys.map(t => compatType(specs, t))),
      value: isLinked // For previous-generation linked-map support, the actual storage result
      // is a Tuple with the value and the Linkage (Option appears in teh value-part only)
      ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`) : compatType(specs, value)
    }
  }]);
}
/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/


function convertStorage(specs, registry, {
  items,
  prefix
}, sectionTypes) {
  return registry.createTypeUnsafe('PalletStorageMetadataV14', [{
    items: items.map(({
      docs,
      fallback,
      modifier,
      name,
      type
    }) => {
      let entryType;

      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createTypeUnsafe('StorageEntryTypeV14', [{
          Plain: compatType(specs, plain)
        }]);
      } else if (type.isMap) {
        const map = type.asMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [map.hasher],
          isLinked: map.linked.isTrue,
          isOptional: modifier.isOptional,
          keys: [map.key],
          value: map.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: nm.hashers,
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: nm.keyVec,
          value: nm.value
        });
      }

      return registry.createTypeUnsafe('StorageEntryMetadataV14', [{
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      }]);
    }),
    prefix
  }]);
}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function convertExtrinsic(registry, {
  signedExtensions,
  version
}) {
  return registry.createTypeUnsafe('ExtrinsicMetadataV14', [{
    signedExtensions: signedExtensions.map(identifier => ({
      identifier,
      type: 0 // we don't map the fields at all

    })),
    type: 0,
    // Map to extrinsic like in v14?
    version
  }]);
}
/** @internal */


function createPallet(specs, registry, mod, {
  calls,
  constants,
  errors,
  events,
  storage
}) {
  const sectionTypes = getAliasTypes(registry, stringCamelCase(mod.name));
  return registry.createTypeUnsafe('PalletMetadataV14', [{
    calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
    constants: convertConstants(specs, registry, constants, sectionTypes),
    errors: errors && convertErrors(specs, registry, mod.name, errors, sectionTypes),
    events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
    index: mod.index,
    name: mod.name,
    storage: storage && convertStorage(specs, registry, storage, sectionTypes)
  }]);
}
/**
 * Convert the Metadata to v14
 * @internal
 **/


function toV14(registry, v13, metaVersion) {
  const specs = []; // position 0 always has Null, additionally add internal defaults

  compatTypes(specs, 'Null', 'u8', 'u16', 'u32', 'u64');
  registerOriginCaller(registry, v13.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v13.extrinsic);
  const pallets = v13.modules.map(mod => createPallet(specs, registry, mod, {
    calls: mod.calls.unwrapOr(null),
    constants: mod.constants,
    errors: mod.errors.length ? mod.errors : null,
    events: mod.events.unwrapOr(null),
    storage: mod.storage.unwrapOr(null)
  }));
  return registry.createTypeUnsafe('MetadataV14', [{
    extrinsic,
    lookup: {
      types: specs.map((type, id) => registry.createTypeUnsafe('PortableType', [{
        id,
        type
      }]))
    },
    pallets
  }]);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/v14/toLatest.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function toLatest(registry, v14, _metaVersion) {
  return v14;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/MagicNumber.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding

class MagicNumber extends U32_u32 {
  constructor(registry, value) {
    super(registry, value);

    if (!this.isEmpty) {
      assert(this.eq(MAGIC_NUMBER), () => `MagicNumber mismatch: expected ${registry.createTypeUnsafe('u32', [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
    }
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/toCallsOnly.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function trimDocs(docs) {
  const strings = docs.map(d => d.toString().trim());
  const firstEmpty = strings.findIndex(d => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
/** @internal */


function toCallsOnly(registry, {
  extrinsic,
  lookup,
  pallets
}) {
  return registry.createTypeUnsafe('MetadataLatest', [{
    extrinsic,
    lookup: {
      types: lookup.types.map(({
        id,
        type
      }) => registry.createTypeUnsafe('PortableType', [{
        id,
        type: { ...type,
          docs: trimDocs(type.docs)
        }
      }]))
    },
    pallets: pallets.map(({
      calls,
      index,
      name
    }) => ({
      calls: registry.createTypeUnsafe('Option<PalletCallMetadataLatest>', [calls.unwrapOr(null)]),
      index,
      name
    }))
  }]).toJSON();
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/flattenUniq.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function flattenUniq(list, result = []) {
  for (let i = 0; i < list.length; i++) {
    const entry = list[i];

    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }

  return [...new Set(result)];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/extractTypes.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


function extractSubSingle(_, {
  sub
}) {
  const {
    lookupName,
    type
  } = sub;
  return extractTypes([lookupName || type]);
}

function extractSubArray(_, {
  sub
}) {
  return extractTypes(sub.map(({
    lookupName,
    type
  }) => lookupName || type));
}

function unhandled(type, {
  info
}) {
  throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info]})`);
} // we only handle the types with params here


const mapping = {
  [TypeDefInfo.BTreeMap]: extractSubArray,
  [TypeDefInfo.BTreeSet]: extractSubSingle,
  [TypeDefInfo.Compact]: extractSubSingle,
  [TypeDefInfo.DoNotConstruct]: unhandled,
  [TypeDefInfo.Enum]: extractSubArray,
  [TypeDefInfo.HashMap]: extractSubArray,
  [TypeDefInfo.Int]: unhandled,
  [TypeDefInfo.Linkage]: extractSubSingle,
  [TypeDefInfo.Null]: unhandled,
  [TypeDefInfo.Option]: extractSubSingle,
  [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
  [TypeDefInfo.Range]: extractSubSingle,
  [TypeDefInfo.RangeInclusive]: extractSubSingle,
  [TypeDefInfo.Result]: extractSubArray,
  [TypeDefInfo.Set]: extractSubArray,
  [TypeDefInfo.Si]: unhandled,
  [TypeDefInfo.Struct]: extractSubArray,
  [TypeDefInfo.Tuple]: extractSubArray,
  [TypeDefInfo.UInt]: unhandled,
  [TypeDefInfo.Vec]: extractSubSingle,
  [TypeDefInfo.VecFixed]: extractSubSingle,
  [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
  [TypeDefInfo.WrapperOpaque]: extractSubSingle
};
/** @internal */

function extractTypes(types) {
  return types.map(type => {
    const typeDef = getTypeDef(type);
    return mapping[typeDef.info](type, typeDef);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/validateTypes.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const validateTypes_l = logger('metadata');
/** @internal */

function validateTypes(registry, throwError, types) {
  const missing = flattenUniq(extractTypes(types)).filter(type => !registry.hasType(type) && !registry.isLookupType(type)).sort();

  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(', ')}`;

    if (throwError) {
      throw new Error(message);
    } else {
      validateTypes_l.warn(message);
    }
  }

  return types;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/util/getUniqTypes.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


/** @internal */

function getUniqTypes_extractTypes(lookup, types) {
  return types.map(({
    type
  }) => lookup.getTypeDef(type).type);
}
/** @internal */


function extractFieldTypes(lookup, type) {
  return lookup.getSiType(type).def.asVariant.variants.map(({
    fields
  }) => getUniqTypes_extractTypes(lookup, fields));
}
/** @internal */


function getPalletNames({
  lookup,
  pallets
}) {
  return pallets.reduce((all, {
    calls,
    constants,
    events,
    storage
  }) => {
    all.push([getUniqTypes_extractTypes(lookup, constants)]);

    if (calls.isSome) {
      all.push(extractFieldTypes(lookup, calls.unwrap().type));
    }

    if (events.isSome) {
      all.push(extractFieldTypes(lookup, events.unwrap().type));
    }

    if (storage.isSome) {
      all.push(storage.unwrap().items.map(({
        type
      }) => {
        if (type.isPlain) {
          return [lookup.getTypeDef(type.asPlain).type];
        }

        const {
          hashers,
          key,
          value
        } = type.asMap;
        return hashers.length === 1 ? [lookup.getTypeDef(value).type, lookup.getTypeDef(key).type] : [lookup.getTypeDef(value).type, ...lookup.getSiType(key).def.asTuple.map(t => lookup.getTypeDef(t).type)];
      }));
    }

    return all;
  }, []);
}
/** @internal */


function getUniqTypes(registry, meta, throwError) {
  return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/MetadataVersioned.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0










const LATEST_VERSION = 14;
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */

class MetadataVersioned extends Struct {
  #converted = new Map();

  constructor(registry, value) {
    // console.time('MetadataVersioned')
    super(registry, {
      magicNumber: MagicNumber,
      metadata: 'MetadataAll'
    }, value); // console.timeEnd('MetadataVersioned')
  }

  #assertVersion = version => {
    assert(this.version <= version, () => `Cannot convert metadata from version ${this.version} to ${version}`);
    return this.version === version;
  };
  #getVersion = (version, fromPrev) => {
    const asCurr = `asV${version}`;
    const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;

    if (version !== 'latest' && this.#assertVersion(version)) {
      return this.#metadata()[asCurr];
    }

    if (!this.#converted.has(version)) {
      this.#converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
    }

    return this.#converted.get(version);
  };
  /**
   * @description the metadata wrapped
   */

  #metadata = () => {
    return this.getT('metadata');
  };

  get registry() {
    return super.registry;
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */


  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), LATEST_VERSION])
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */


  get asV9() {
    this.#assertVersion(9);
    return this.#metadata().asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */


  get asV10() {
    return this.#getVersion(10, toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */


  get asV11() {
    return this.#getVersion(11, toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */


  get asV12() {
    return this.#getVersion(12, toV12);
  }
  /**
   * @description Returns the wrapped values as a V13 object
   */


  get asV13() {
    return this.#getVersion(13, toV13);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */


  get asV14() {
    return this.#getVersion(14, toV14);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */


  get asLatest() {
    return this.#getVersion('latest', toLatest);
  }
  /**
   * @description The magicNumber for the Metadata (known constant)
   */


  get magicNumber() {
    return this.getT('magicNumber');
  }
  /**
   * @description the metadata version this structure represents
   */


  get version() {
    return this.#metadata().index;
  }

  getUniqTypes(throwError) {
    return getUniqTypes(this.registry, this.asLatest, throwError);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    // HACK(y): ensure that we apply the aliases if we have not done so already, this is
    // needed to ensure we have the correct overrides (which is only applied in toLatest)
    // eslint-disable-next-line no-unused-expressions
    this.asLatest;
    return super.toJSON();
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/Metadata.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // magic u32 preceding the version id

const VERSION_IDX = 4; // magic + lowest supported version

const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);

function Metadata_decodeU8a(registry, value) {
  const u8a = value.length === 0 ? EMPTY_METADATA : value; // This is an f-ing hack as a follow-up to another ugly hack
  // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
  // when we fail on V9, try to re-parse it as v10...

  if (u8a[VERSION_IDX] === 9) {
    try {
      return new MetadataVersioned(registry, u8a);
    } catch (error) {
      u8a[VERSION_IDX] = 10;
      return u8a;
    }
  }

  return u8a;
}
/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */


class Metadata extends MetadataVersioned {
  constructor(registry, value) {
    // console.time('Metadata')
    super(registry, isU8a(value) || isString(value) ? Metadata_decodeU8a(registry, u8aToU8a(value)) : value); // console.timeEnd('Metadata')
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-create/util/encodeTypes.js
// Copyright 2017-2022 @polkadot/types-create authors & contributors
// SPDX-License-Identifier: Apache-2.0



const stringIdentity = value => value.toString();

const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;
}

function encodeWithParams(registry, typeDef, outer) {
  const {
    info,
    sub
  } = typeDef;

  switch (info) {
    case TypeDefInfo.BTreeMap:
    case TypeDefInfo.BTreeSet:
    case TypeDefInfo.Compact:
    case TypeDefInfo.HashMap:
    case TypeDefInfo.Linkage:
    case TypeDefInfo.Option:
    case TypeDefInfo.Range:
    case TypeDefInfo.RangeInclusive:
    case TypeDefInfo.Result:
    case TypeDefInfo.Vec:
    case TypeDefInfo.WrapperKeepOpaque:
    case TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, p => encodeTypeDef(registry, p));
  }

  throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
}

function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({
    name
  }) => name);
  assert(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);
  const inner = objectSpread({}, extra);

  for (let i = 0; i < sub.length; i++) {
    const def = sub[i];
    inner[def.name] = encodeTypeDef(registry, def);
  }

  return stringify(asEnum ? {
    _enum: inner
  } : inner);
} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
// in a compile-time error with the missing index)


const encoders = {
  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
  [TypeDefInfo.DoNotConstruct]: (registry, {
    displayName,
    lookupIndex,
    lookupName
  }) => `DoNotConstruct<${lookupName || displayName || (isUndefined(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
  [TypeDefInfo.Enum]: (registry, {
    sub
  }) => {
    assert(sub && Array.isArray(sub), 'Unable to encode Enum type'); // c-like enums have all Null entries
    // TODO We need to take the disciminant into account and auto-add empty entries

    return sub.every(({
      type
    }) => type === 'Null') ? stringify({
      _enum: sub.map(({
        name
      }, index) => `${name || `Empty${index}`}`)
    }) : encodeSubTypes(registry, sub, true);
  },
  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
  [TypeDefInfo.Int]: (registry, {
    length = 32
  }) => `Int<${length}>`,
  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [TypeDefInfo.Null]: (registry, typeDef) => 'Null',
  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [TypeDefInfo.Plain]: (registry, {
    displayName,
    type
  }) => displayName || type,
  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Range'),
  [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'RangeInclusive'),
  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [TypeDefInfo.Set]: (registry, {
    length = 8,
    sub
  }) => {
    assert(sub && Array.isArray(sub), 'Unable to encode Set type');
    return stringify({
      _set: sub.reduce((all, {
        index,
        name
      }, count) => objectSpread(all, {
        [`${name || `Unknown${index || count}`}`]: index || count
      }), {
        _bitLength: length || 8
      })
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [TypeDefInfo.Si]: (registry, {
    lookupName,
    type
  }) => lookupName || type,
  [TypeDefInfo.Struct]: (registry, {
    alias,
    sub
  }) => {
    assert(sub && Array.isArray(sub), 'Unable to encode Struct type');
    return encodeSubTypes(registry, sub, false, alias ? {
      _alias: [...alias.entries()].reduce((all, [k, v]) => objectSpread(all, {
        [k]: v
      }), {})
    } : {});
  },
  [TypeDefInfo.Tuple]: (registry, {
    sub
  }) => {
    assert(sub && Array.isArray(sub), 'Unable to encode Tuple type');
    return `(${sub.map(type => encodeTypeDef(registry, type)).join(',')})`;
  },
  [TypeDefInfo.UInt]: (registry, {
    length = 32
  }) => `UInt<${length}>`,
  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
  [TypeDefInfo.VecFixed]: (registry, {
    length,
    sub
  }) => {
    assert(isNumber(length) && !isUndefined(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');
    return `[${sub.type};${length}]`;
  },
  [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperKeepOpaque'),
  [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
};

function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}

function encodeTypeDef(registry, typeDef) {
  // In the case of contracts we do have the unfortunate situation where the displayName would
  // refer to "Option" when it is an option. For these, string it out, only using when actually
  // not a top-level element to be used
  return typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
  return objectSpread({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js


// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const PortableRegistry_l = logger('PortableRegistry'); // Just a placeholder for a type.unrwapOr()

const TYPE_UNWRAP = {
  toNumber: () => -1
}; // Alias the primitive enum with out known values

const PRIMITIVE_ALIAS = {
  Char: 'u32',
  // Rust char is 4-bytes
  Str: 'Text'
}; // These are types where we have a specific decoding/encoding override + helpers

const PATHS_ALIAS = splitNamespace([// full matching on exact names...
// these are well-known types with additional encoding
'sp_core::crypto::AccountId32', 'sp_runtime::generic::era::Era', 'sp_runtime::multiaddress::MultiAddress', // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
'account::AccountId20', 'polkadot_runtime_common::claims::EthereumAddress', // wildcard matching in place...
// these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
'*_democracy::vote::Vote', '*_conviction_voting::vote::Vote', '*_identity::types::Data', // shorten some well-known types
'primitive_types::*', 'sp_arithmetic::per_things::*', // ink!
'ink_env::types::*']); // Mappings for types that should be converted to set via BitVec

const PATHS_SET = splitNamespace(['pallet_identity::types::BitFlags']); // These are the set namespaces for BitVec definitions (the last 2 appear in types as well)

const BITVEC_NS_LSB = ['bitvec::order::Lsb0', 'BitOrderLsb0'];
const BITVEC_NS_MSB = ['bitvec::order::Msb0', 'BitOrderMsb0'];
const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB]; // These we never use these as top-level names, they are wrappers

const WRAPPERS = ['BoundedBTreeMap', 'BoundedBTreeSet', 'BoundedVec', 'Box', 'BTreeMap', 'BTreeSet', 'Cow', 'Option', 'Range', 'RangeInclusive', 'Result', 'WeakBoundedVec', 'WrapperKeepOpaque', 'WrapperOpaque']; // These are reserved and/or conflicts with built-in Codec or JS definitions

const RESERVED = ['entries', 'hash', 'keys', 'new', 'size']; // Remove these from all paths at index 1

const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];

function splitNamespace(values) {
  return values.map(v => v.split('::'));
}

function createNamespace({
  path
}) {
  return sanitizeDocs(path).join('::');
}

function sanitizeDocs(docs) {
  return docs.map(d => d.toString());
}

function matchParts(first, second) {
  return first.length === second.length && first.every((a, index) => {
    const b = second[index].toString();

    if (a === '*' || a === b) {
      return true;
    }

    if (a.includes('*') && a.includes('_') && b.includes('_')) {
      let suba = a.split('_');
      let subb = b.split('_'); // match initial *'s to multiples if we have a match for the other

      if (suba[0] === '*') {
        const indexOf = subb.indexOf(suba[1]);

        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      } // check for * matches at the end, adjust accordingly


      if (suba.length === 2 && suba[1] === '*' && suba[0] === subb[0]) {
        return true;
      }

      return matchParts(suba, subb);
    }

    return false;
  });
} // check if the path matches the PATHS_ALIAS (with wildcards)


function getAliasPath(path) {
  // TODO We need to handle ink! Balance in some way
  return path.length && PATHS_ALIAS.some(a => matchParts(a, path)) ? path[path.length - 1].toString() : null;
}

function hasNoDupes(input) {
  for (let i = 0; i < input.length; i++) {
    const [ai, an] = input[i];

    for (let j = 0; j < input.length; j++) {
      const [bi, bn] = input[j]; // if the indexes are not the same and the names match, we have a dupe

      if (ai !== bi && an === bn) {
        return false;
      }
    }
  }

  return true;
}

function removeDuplicateNames(lookup, names) {
  const rewrite = {};
  return names.map(([lookupIndex, name, params]) => {
    if (!name) {
      return null;
    } // those where the name is matching (since name is filtered, these all do have names)


    const allSame = names.filter(([, oName]) => name === oName); // are there among matching names

    const anyDiff = allSame.some(([oIndex,, oParams]) => lookupIndex !== oIndex && (params.length !== oParams.length || params.some((p, index) => !p.name.eq(oParams[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== oParams[index].type.unwrapOr(TYPE_UNWRAP).toNumber()))); // everything matches, we can combine these

    if (!anyDiff || !allSame[0][2].length) {
      return [lookupIndex, name, params];
    } // find the first parameter that yields differences


    const paramIdx = allSame[0][2].findIndex(({
      type
    }, index) => allSame.every(([,, params]) => params[index].type.isSome) && allSame.every(([,, params], aIndex) => aIndex === 0 || !params[index].type.eq(type))); // No param found that is different

    if (paramIdx === -1) {
      return [lookupIndex, name, params];
    } // see if using the param type helps


    const adjusted = new Array(allSame.length);

    for (let i = 0; i < allSame.length; i++) {
      const [oIndex, oName, oParams] = allSame[i];
      const {
        def,
        path
      } = lookup.getSiType(oParams[paramIdx].type.unwrap());

      if (!def.isPrimitive && !path.length) {
        return null;
      }

      adjusted[i] = [oIndex, def.isPrimitive ? `${oName}${def.asPrimitive.toString()}` : `${oName}${path[path.length - 1].toString()}`, params];
    }

    if (hasNoDupes(adjusted)) {
      for (let i = 0; i < adjusted.length; i++) {
        const [index, name] = adjusted[i];
        rewrite[index] = name;
      }

      return [lookupIndex, name, params];
    }

    return null;
  }).filter(n => !!n).map(([lookupIndex, name, params]) => [lookupIndex, rewrite[lookupIndex] || name, params]);
}

function extractName(types, {
  id,
  type: {
    params,
    path
  }
}) {
  // if we have no path or determined as a wrapper, we just skip it
  if (!path.length || WRAPPERS.includes(path[path.length - 1].toString())) {
    return null;
  }

  const parts = path.map(p => stringPascalCase(p)).filter((p, index) => {
    const lower = p.toLowerCase();
    return ( // Remove ::{generic, misc, pallet, traits, types}::
    index !== 1 || !PATH_RM_INDEX_1.includes(lower)) && ( // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
    // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
    index === path.length - 1 || lower !== path[index + 1].toLowerCase());
  });
  let typeName = parts.join(''); // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin

  if (parts.length === 2 && parts[1] === 'RawOrigin' && params.length === 2 && params[1].type.isSome) {
    const instanceType = types[params[1].type.unwrap().toNumber()];

    if (instanceType.type.path.length === 2) {
      typeName = `${typeName}${instanceType.type.path[1].toString()}`;
    }
  }

  return [id.toNumber(), typeName, params];
}

function registerTypes(lookup, lookups, names, params) {
  // Register the types we extracted
  lookup.registry.register(lookups); // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic

  if (params.SpRuntimeUncheckedExtrinsic) {
    // Address, Call, Signature, Extra
    const [addrParam,, sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup.getSiType(addrParam.type.unwrap());
    const siSignature = lookup.getSiType(sigParam.type.unwrap());
    const nsSignature = createNamespace(siSignature);
    let nsAccountId = createNamespace(siAddress);
    const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress'; // With multiaddress, we check the first type param again

    if (isMultiAddress) {
      // AccountId, AccountIndex
      const [idParam] = siAddress.params;
      nsAccountId = createNamespace(lookup.getSiType(idParam.type.unwrap()));
    }

    lookup.registry.register({
      AccountId: ['sp_core::crypto::AccountId32'].includes(nsAccountId) ? 'AccountId32' : ['account::AccountId20', 'primitive_types::H160'].includes(nsAccountId) ? 'AccountId20' : 'AccountId32',
      // other, default to AccountId32
      Address: isMultiAddress ? 'MultiAddress' : 'AccountId',
      ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature) ? 'MultiSignature' : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
    });
  }
} // this extracts aliases based on what we know the runtime config looks like in a
// Substrate chain. Specifically we want to have access to the Call and Event params


function extractAliases(params, isContract) {
  const hasParams = Object.keys(params).some(k => !k.startsWith('Pallet'));
  const alias = {};

  if (params.SpRuntimeUncheckedExtrinsic) {
    // Address, Call, Signature, Extra
    const [, {
      type
    }] = params.SpRuntimeUncheckedExtrinsic;
    alias[type.unwrap().toNumber()] = 'Call';
  } else if (hasParams && !isContract) {
    PortableRegistry_l.warn('Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic');
  }

  if (params.FrameSystemEventRecord) {
    // Event, Topic
    const [{
      type
    }] = params.FrameSystemEventRecord;
    alias[type.unwrap().toNumber()] = 'Event';
  } else if (hasParams && !isContract) {
    PortableRegistry_l.warn('Unable to determine runtime Event type, cannot inspect frame_system::EventRecord');
  }

  return alias;
}

function extractTypeInfo(lookup, portable) {
  const nameInfo = [];
  const types = {};

  for (let i = 0; i < portable.length; i++) {
    const type = portable[i];
    const extracted = extractName(portable, portable[i]);

    if (extracted) {
      nameInfo.push(extracted);
    }

    types[type.id.toNumber()] = type;
  }

  const dedup = removeDuplicateNames(lookup, nameInfo);
  const lookups = {};
  const names = {};
  const params = {};

  for (let i = 0; i < dedup.length; i++) {
    const [lookupIndex, name, p] = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup.registry.createLookupType(lookupIndex);
    params[name] = p;
  }

  return [types, lookups, names, params];
}

var _alias = /*#__PURE__*/_classPrivateFieldKey("alias");

var _lookups = /*#__PURE__*/_classPrivateFieldKey("lookups");

var _names = /*#__PURE__*/_classPrivateFieldKey("names");

var _params = /*#__PURE__*/_classPrivateFieldKey("params");

var _typeDefs = /*#__PURE__*/_classPrivateFieldKey("typeDefs");

var _types = /*#__PURE__*/_classPrivateFieldKey("types");

var _createSiDef = /*#__PURE__*/_classPrivateFieldKey("createSiDef");

var _getLookupId = /*#__PURE__*/_classPrivateFieldKey("getLookupId");

var _extract = /*#__PURE__*/_classPrivateFieldKey("extract");

var _extractArray = /*#__PURE__*/_classPrivateFieldKey("extractArray");

var _extractBitSequence = /*#__PURE__*/_classPrivateFieldKey("extractBitSequence");

var _extractCompact = /*#__PURE__*/_classPrivateFieldKey("extractCompact");

var _extractComposite = /*#__PURE__*/_classPrivateFieldKey("extractComposite");

var _extractCompositeSet = /*#__PURE__*/_classPrivateFieldKey("extractCompositeSet");

var _extractFields = /*#__PURE__*/_classPrivateFieldKey("extractFields");

var _extractFieldsAlias = /*#__PURE__*/_classPrivateFieldKey("extractFieldsAlias");

var _extractHistoric = /*#__PURE__*/_classPrivateFieldKey("extractHistoric");

var _extractPrimitive = /*#__PURE__*/_classPrivateFieldKey("extractPrimitive");

var _extractAliasPath = /*#__PURE__*/_classPrivateFieldKey("extractAliasPath");

var _extractSequence = /*#__PURE__*/_classPrivateFieldKey("extractSequence");

var _extractTuple = /*#__PURE__*/_classPrivateFieldKey("extractTuple");

var _extractVariant = /*#__PURE__*/_classPrivateFieldKey("extractVariant");

var _extractVariantEnum = /*#__PURE__*/_classPrivateFieldKey("extractVariantEnum");

class PortableRegistry extends Struct {
  constructor(registry, value, isContract) {
    // console.time('PortableRegistry')
    super(registry, {
      types: 'Vec<PortableType>'
    }, value);
    Object.defineProperty(this, _extractVariantEnum, {
      value: _extractVariantEnum2
    });
    Object.defineProperty(this, _extractVariant, {
      value: _extractVariant2
    });
    Object.defineProperty(this, _extractTuple, {
      value: _extractTuple2
    });
    Object.defineProperty(this, _extractSequence, {
      value: _extractSequence2
    });
    Object.defineProperty(this, _extractAliasPath, {
      value: _extractAliasPath2
    });
    Object.defineProperty(this, _extractPrimitive, {
      value: _extractPrimitive2
    });
    Object.defineProperty(this, _extractHistoric, {
      value: _extractHistoric2
    });
    Object.defineProperty(this, _extractFieldsAlias, {
      value: _extractFieldsAlias2
    });
    Object.defineProperty(this, _extractFields, {
      value: _extractFields2
    });
    Object.defineProperty(this, _extractCompositeSet, {
      value: _extractCompositeSet2
    });
    Object.defineProperty(this, _extractComposite, {
      value: _extractComposite2
    });
    Object.defineProperty(this, _extractCompact, {
      value: _extractCompact2
    });
    Object.defineProperty(this, _extractBitSequence, {
      value: _extractBitSequence2
    });
    Object.defineProperty(this, _extractArray, {
      value: _extractArray2
    });
    Object.defineProperty(this, _extract, {
      value: _extract2
    });
    Object.defineProperty(this, _getLookupId, {
      value: _getLookupId2
    });
    Object.defineProperty(this, _createSiDef, {
      value: _createSiDef2
    });
    Object.defineProperty(this, _alias, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _lookups, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _names, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _params, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _typeDefs, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _types, {
      writable: true,
      value: void 0
    });
    const [types, lookups, names, _params2] = extractTypeInfo(this, this.types);
    _classPrivateFieldBase(this, _alias)[_alias] = extractAliases(_params2, isContract);
    _classPrivateFieldBase(this, _lookups)[_lookups] = lookups;
    _classPrivateFieldBase(this, _names)[_names] = names;
    _classPrivateFieldBase(this, _params)[_params] = _params2;
    _classPrivateFieldBase(this, _types)[_types] = types; // console.timeEnd('PortableRegistry')
  }

  get names() {
    return Object.values(_classPrivateFieldBase(this, _names)[_names]).sort();
  }
  /**
   * @description The types of the registry
   */


  get types() {
    return this.getT('types');
  }

  register() {
    registerTypes(this, _classPrivateFieldBase(this, _lookups)[_lookups], _classPrivateFieldBase(this, _names)[_names], _classPrivateFieldBase(this, _params)[_params]);
  }
  /**
   * @description Returns the name for a specific lookup
   */


  getName(lookupId) {
    return _classPrivateFieldBase(this, _names)[_names][_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
  }
  /**
   * @description Finds a specific type in the registry
   */


  getSiType(lookupId) {
    // NOTE catch-22 - this may already be used as part of the constructor, so
    // ensure that we have actually initialized it correctly
    const found = (_classPrivateFieldBase(this, _types)[_types] || this.types)[_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];

    assert(found, () => `PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
    return found.type;
  }
  /**
   * @description Lookup the type definition for the index
   */


  getTypeDef(lookupId) {
    const lookupIndex = _classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId);

    if (!_classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex]) {
      const lookupName = _classPrivateFieldBase(this, _names)[_names][lookupIndex];

      const empty = {
        info: TypeDefInfo.DoNotConstruct,
        lookupIndex,
        lookupName,
        type: this.registry.createLookupType(lookupIndex)
      }; // Set named items since we will get into circular lookups along the way

      if (lookupName) {
        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
      }

      const extracted = _classPrivateFieldBase(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex); // For non-named items, we only set this right at the end


      if (!lookupName) {
        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
      }

      Object.keys(extracted).forEach(k => {
        if (k !== 'lookupName' || extracted[k]) {
          // these are safe since we are looking through the keys as set
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
        }
      }); // don't set lookupName on lower-level, we want to always direct to the type

      if (extracted.info === TypeDefInfo.Plain) {
        _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
        delete _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
      }
    }

    return _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex];
  }

}

function _createSiDef2(lookupId) {
  const typeDef = this.getTypeDef(lookupId);
  const lookupIndex = lookupId.toNumber(); // Setup for a lookup on complex types

  return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
    docs: typeDef.docs,
    info: TypeDefInfo.Si,
    lookupIndex,
    lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
    type: this.registry.createLookupType(lookupId)
  } : typeDef;
}

function _getLookupId2(lookupId) {
  if (isString(lookupId)) {
    assert(this.registry.isLookupType(lookupId), () => `PortableRegistry: Expected a lookup string type, found ${lookupId}`);
    return parseInt(lookupId.replace('Lookup', ''), 10);
  } else if (isNumber(lookupId)) {
    return lookupId;
  }

  return lookupId.toNumber();
}

function _extract2(type, lookupIndex) {
  const namespace = [...type.path].join('::');
  let typeDef;
  const aliasType = _classPrivateFieldBase(this, _alias)[_alias][lookupIndex] || getAliasPath(type.path);

  try {
    if (aliasType) {
      typeDef = _classPrivateFieldBase(this, _extractAliasPath)[_extractAliasPath](lookupIndex, aliasType);
    } else {
      switch (type.def.type) {
        case 'Array':
          typeDef = _classPrivateFieldBase(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
          break;

        case 'BitSequence':
          typeDef = _classPrivateFieldBase(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
          break;

        case 'Compact':
          typeDef = _classPrivateFieldBase(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
          break;

        case 'Composite':
          typeDef = _classPrivateFieldBase(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
          break;

        case 'HistoricMetaCompat':
          typeDef = _classPrivateFieldBase(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
          break;

        case 'Primitive':
          typeDef = _classPrivateFieldBase(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
          break;

        case 'Sequence':
          typeDef = _classPrivateFieldBase(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
          break;

        case 'Tuple':
          typeDef = _classPrivateFieldBase(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
          break;

        case 'Variant':
          typeDef = _classPrivateFieldBase(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
          break;

        default:
          assertUnreachable(type.def.type);
      }
    }
  } catch (error) {
    throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${stringify(type)}: ${error.message}`);
  }

  return objectSpread({
    docs: sanitizeDocs(type.docs),
    namespace
  }, typeDef);
}

function _extractArray2(_, {
  len: length,
  type
}) {
  assert(!length || length.toNumber() <= 256, 'Only support for [Type; <length>], where length <= 256');
  return withTypeString(this.registry, {
    info: TypeDefInfo.VecFixed,
    length: length.toNumber(),
    sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
  });
}

function _extractBitSequence2(_, {
  bitOrderType,
  bitStoreType
}) {
  // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
  // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
  const a = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitOrderType);

  const b = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitStoreType);

  const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || '') ? [a, b] : [b, a]; // NOTE: Currently the BitVec type is one-way only, i.e. we only use it to decode, not
  // re-encode stuff. As such we ignore the msb/lsb identifier given by bitOrderType, or rather
  // we don't pass it though at all (all displays in LSB)

  assert(BITVEC_NS.includes(bitOrder.namespace || ''), () => `Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
  assert(bitStore.info === TypeDefInfo.Plain && bitStore.type === 'u8', () => `Only u8 bitStore is currently supported, found ${bitStore.type}`);
  return {
    info: TypeDefInfo.Plain,
    type: 'BitVec'
  };
}

function _extractCompact2(_, {
  type
}) {
  return withTypeString(this.registry, {
    info: TypeDefInfo.Compact,
    sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
  });
}

function _extractComposite2(lookupIndex, {
  params,
  path
}, {
  fields
}) {
  const pathFirst = path[0].toString();
  const pathLast = path[path.length - 1].toString();

  if (path.length === 1 && pathFirst === 'BTreeMap') {
    return withTypeString(this.registry, {
      info: TypeDefInfo.BTreeMap,
      sub: params.map(({
        type
      }) => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap()))
    });
  } else if (path.length === 1 && pathFirst === 'BTreeSet') {
    return withTypeString(this.registry, {
      info: TypeDefInfo.BTreeSet,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
    });
  } else if (['Range', 'RangeInclusive'].includes(pathFirst)) {
    return withTypeString(this.registry, {
      info: pathFirst === 'Range' ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
      type: pathFirst
    });
  } else if (['WrapperKeepOpaque', 'WrapperOpaque'].includes(pathLast)) {
    return withTypeString(this.registry, {
      info: pathLast === 'WrapperKeepOpaque' ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
      type: pathLast
    });
  }

  return PATHS_SET.some(p => matchParts(p, path)) ? _classPrivateFieldBase(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : _classPrivateFieldBase(this, _extractFields)[_extractFields](lookupIndex, fields);
}

function _extractCompositeSet2(_, params, fields) {
  assert(params.length === 1 && fields.length === 1, 'Set handling expects param/field as single entries');
  return withTypeString(this.registry, {
    info: TypeDefInfo.Set,
    length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
    sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({
      index,
      name
    }) => ({
      // This will be an issue > 2^53 - 1 ... don't have those (yet)
      index: index.toNumber(),
      info: TypeDefInfo.Plain,
      name: name.toString(),
      type: 'Null'
    }))
  });
}

function _extractFields2(lookupIndex, fields) {
  let isStruct = true;
  let isTuple = true;

  for (let f = 0; f < fields.length; f++) {
    const {
      name
    } = fields[f];
    isStruct = isStruct && name.isSome;
    isTuple = isTuple && name.isNone;
  }

  assert(isTuple || isStruct, 'Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');

  if (fields.length === 0) {
    return {
      info: TypeDefInfo.Null,
      type: 'Null'
    };
  } else if (isTuple && fields.length === 1) {
    const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](fields[0].type);

    return objectSpread({}, typeDef, lookupIndex === -1 ? {} : {
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      lookupNameRoot: typeDef.lookupName
    }, fields[0].typeName.isSome ? {
      typeName: sanitize(fields[0].typeName.unwrap())
    } : null);
  }

  const [sub, alias] = _classPrivateFieldBase(this, _extractFieldsAlias)[_extractFieldsAlias](fields);

  return withTypeString(this.registry, objectSpread({
    info: isTuple // Tuple check first
    ? TypeDefInfo.Tuple : TypeDefInfo.Struct
  }, alias.size ? {
    alias
  } : null, lookupIndex === -1 ? {} : {
    lookupIndex,
    lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex]
  }, {
    sub
  }));
}

function _extractFieldsAlias2(fields) {
  const alias = new Map();
  const sub = new Array(fields.length);

  for (let i = 0; i < fields.length; i++) {
    const {
      docs,
      name,
      type,
      typeName
    } = fields[i];

    const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);

    if (name.isNone) {
      sub[i] = typeDef;
    } else {
      let nameField = stringCamelCase(name.unwrap());
      let nameOrig = null;

      if (nameField.includes('#')) {
        nameOrig = nameField;
        nameField = nameOrig.replace(/#/g, '_');
      } else if (RESERVED.includes(nameField)) {
        nameOrig = nameField;
        nameField = `${nameField}_`;
      }

      if (nameOrig) {
        alias.set(nameField, nameOrig);
      }

      sub[i] = objectSpread({}, typeDef, {
        docs: sanitizeDocs(docs),
        name: nameField
      }, typeName.isSome ? {
        typeName: sanitize(typeName.unwrap())
      } : null);
    }
  }

  return [sub, alias];
}

function _extractHistoric2(_, type) {
  return objectSpread({}, getTypeDef(type), {
    displayName: type.toString(),
    isFromSi: true
  });
}

function _extractPrimitive2(_, type) {
  const typeStr = type.def.asPrimitive.type.toString();
  return {
    info: TypeDefInfo.Plain,
    type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
  };
}

function _extractAliasPath2(_, type) {
  return {
    info: TypeDefInfo.Plain,
    type
  };
}

function _extractSequence2(lookupIndex, {
  type
}) {
  const sub = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);

  if (sub.type === 'u8') {
    return {
      info: TypeDefInfo.Plain,
      type: 'Bytes'
    };
  }

  return withTypeString(this.registry, {
    info: TypeDefInfo.Vec,
    lookupIndex,
    lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
    sub
  });
}

function _extractTuple2(lookupIndex, ids) {
  if (ids.length === 0) {
    return {
      info: TypeDefInfo.Null,
      type: 'Null'
    };
  } else if (ids.length === 1) {
    return this.getTypeDef(ids[0]);
  }

  const sub = ids.map(t => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](t));
  return withTypeString(this.registry, {
    info: TypeDefInfo.Tuple,
    lookupIndex,
    lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
    sub
  });
}

function _extractVariant2(lookupIndex, {
  params,
  path
}, {
  variants
}) {
  const specialVariant = path[0].toString();

  if (specialVariant === 'Option') {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Option,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
    });
  } else if (specialVariant === 'Result') {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Result,
      sub: params.map(({
        type
      }, index) => objectSpread({
        name: ['Ok', 'Error'][index]
      }, _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap())))
    });
  } else if (variants.length === 0) {
    return {
      info: TypeDefInfo.Null,
      type: 'Null'
    };
  }

  return _classPrivateFieldBase(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
}

function _extractVariantEnum2(lookupIndex, variants) {
  const sub = []; // we may get entries out of order, arrange them first before creating with gaps filled
  // NOTE: Since we mutate, use a copy of the array as an input

  [...variants].sort((a, b) => a.index.cmp(b.index)).forEach(({
    fields,
    index,
    name
  }) => {
    const desired = index.toNumber();

    while (sub.length !== desired) {
      sub.push({
        index: sub.length,
        info: TypeDefInfo.Null,
        name: `__Unused${sub.length}`,
        type: 'Null'
      });
    }

    sub.push(objectSpread(_classPrivateFieldBase(this, _extractFields)[_extractFields](-1, fields), {
      index: index.toNumber(),
      name: name.toString()
    }));
  });
  return withTypeString(this.registry, {
    info: TypeDefInfo.Enum,
    lookupIndex,
    lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
    sub
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/create/registry.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0













const registry_l = logger('registry');

function valueToString(v) {
  return v.toString();
}

function getFieldArgs(lookup, fields) {
  const args = new Array(fields.length);

  for (let i = 0; i < fields.length; i++) {
    args[i] = lookup.getTypeDef(fields[i].type).type;
  }

  return args;
}

function clearRecord(record) {
  const keys = Object.keys(record);

  for (let i = 0; i < keys.length; i++) {
    delete record[keys[i]];
  }
}

function getVariantStringIdx({
  index
}) {
  return index.toString();
} // create error mapping from metadata


function injectErrors(_, {
  lookup,
  pallets
}, version, result) {
  clearRecord(result);

  for (let i = 0; i < pallets.length; i++) {
    const {
      errors,
      index,
      name
    } = pallets[i];

    if (errors.isSome) {
      const sectionName = stringCamelCase(name);
      lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({
        docs,
        fields,
        index,
        name
      }) => ({
        args: getFieldArgs(lookup, fields),
        docs: docs.map(valueToString),
        fields,
        index: index.toNumber(),
        method: name.toString(),
        name: name.toString(),
        section: sectionName
      })));
    }
  }
} // create event classes from metadata


function injectEvents(registry, {
  lookup,
  pallets
}, version, result) {
  const filtered = pallets.filter(filterEventsSome);
  clearRecord(result);

  for (let i = 0; i < filtered.length; i++) {
    const {
      events,
      index,
      name
    } = filtered[i];
    lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events.unwrap(), getVariantStringIdx, variant => {
      const meta = registry.createType('EventMetadataLatest', objectSpread({}, variant, {
        args: getFieldArgs(lookup, variant.fields)
      }));
      return class extends GenericEventData {
        constructor(registry, value) {
          super(registry, value, meta, stringCamelCase(name), variant.name.toString());
        }

      };
    }));
  }
} // create extrinsic mapping from metadata


function injectExtrinsics(registry, {
  lookup,
  pallets
}, version, result) {
  const filtered = pallets.filter(filterCallsSome);
  clearRecord(result);

  for (let i = 0; i < filtered.length; i++) {
    const {
      calls,
      index,
      name
    } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    lazyMethod(result, sectionIndex, () => lazyVariants(lookup, calls.unwrap(), getVariantStringIdx, variant => createCallFunction(registry, lookup, variant, stringCamelCase(name), sectionIndex)));
  }
} // extract additional properties from the metadata


function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
  const ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);

  if (!ss58Format) {
    return original;
  }

  const {
    tokenDecimals,
    tokenSymbol
  } = original || {};
  return registry.createTypeUnsafe('ChainProperties', [{
    ss58Format,
    tokenDecimals,
    tokenSymbol
  }]);
}

class TypeRegistry {
  #classes = new Map();
  #definitions = new Map();
  #lookup;
  #metadata;
  #metadataVersion = 0;
  #metadataCalls = {};
  #metadataErrors = {};
  #metadataEvents = {};
  #unknownTypes = new Map();
  #chainProperties;
  #hasher = blake2AsU8a;
  #knownDefaults;
  #knownDefinitions;
  #knownTypes = {};
  #signedExtensions = fallbackExtensions;
  #userExtensions;

  constructor(createdAtHash) {
    this.#knownDefaults = objectSpread({
      Json: Json,
      Metadata: Metadata,
      PortableRegistry: PortableRegistry,
      Raw: Raw
    }, index_types_namespaceObject);
    this.#knownDefinitions = interfaces_definitions_namespaceObject;
    const allKnown = Object.values(this.#knownDefinitions);

    for (let i = 0; i < allKnown.length; i++) {
      this.register(allKnown[i].types);
    }

    if (createdAtHash) {
      this.createdAtHash = this.createType('Hash', createdAtHash);
    }
  }

  get chainDecimals() {
    var _this$chainProperties;

    if ((_this$chainProperties = this.#chainProperties) !== null && _this$chainProperties !== void 0 && _this$chainProperties.tokenDecimals.isSome) {
      const allDecimals = this.#chainProperties.tokenDecimals.unwrap();

      if (allDecimals.length) {
        return allDecimals.map(b => b.toNumber());
      }
    }

    return [12];
  }

  get chainSS58() {
    var _this$chainProperties2;

    return (_this$chainProperties2 = this.#chainProperties) !== null && _this$chainProperties2 !== void 0 && _this$chainProperties2.ss58Format.isSome ? this.#chainProperties.ss58Format.unwrap().toNumber() : undefined;
  }

  get chainTokens() {
    var _this$chainProperties3;

    if ((_this$chainProperties3 = this.#chainProperties) !== null && _this$chainProperties3 !== void 0 && _this$chainProperties3.tokenSymbol.isSome) {
      const allTokens = this.#chainProperties.tokenSymbol.unwrap();

      if (allTokens.length) {
        return allTokens.map(valueToString);
      }
    }

    return [formatBalance.getDefaults().unit];
  }
  /**
   * @description Returns tru if the type is in a Compat format
   */


  isLookupType(value) {
    return /Lookup\d+$/.test(value);
  }
  /**
   * @description Creates a lookup string from the supplied id
   */


  createLookupType(lookupId) {
    return `Lookup${lookupId.toString()}`;
  }

  get knownTypes() {
    return this.#knownTypes;
  }

  get lookup() {
    return assertReturn(this.#lookup, 'Lookup has not been set on this registry');
  }

  get metadata() {
    return assertReturn(this.#metadata, 'Metadata has not been set on this registry');
  }

  get unknownTypes() {
    return [...this.#unknownTypes.keys()];
  }

  get signedExtensions() {
    return this.#signedExtensions;
  }

  clearCache() {
    this.#classes = new Map();
  }
  /**
   * @describe Creates an instance of the class
   */


  createClass(type) {
    return this.createClassUnsafe(type);
  }
  /**
   * @describe Creates an instance of the class
   */


  createClassUnsafe(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createType(type, ...params) {
    return this.createTypeUnsafe(type, params);
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createTypeUnsafe(type, params, options) {
    return createTypeUnsafe(this, type, params, options);
  } // find a specific call


  findMetaCall(callIndex) {
    const [section, method] = [callIndex[0], callIndex[1]];
    return assertReturn(this.#metadataCalls[`${section}`] && this.#metadataCalls[`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
  } // finds an error


  findMetaError(errorIndex) {
    const [section, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [errorIndex.index.toNumber(), isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()];
    return assertReturn(this.#metadataErrors[`${section}`] && this.#metadataErrors[`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
  }

  findMetaEvent(eventIndex) {
    const [section, method] = [eventIndex[0], eventIndex[1]];
    return assertReturn(this.#metadataEvents[`${section}`] && this.#metadataEvents[`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
  }

  get(name, withUnknown, knownTypeDef) {
    return this.getUnsafe(name, withUnknown, knownTypeDef);
  }

  getUnsafe(name, withUnknown, knownTypeDef) {
    let Type = this.#classes.get(name) || this.#knownDefaults[name]; // we have not already created the type, attempt it

    if (!Type) {
      const definition = this.#definitions.get(name);
      let BaseType; // we have a definition, so create the class now (lazily)

      if (definition) {
        BaseType = createClassUnsafe(this, definition);
      } else if (knownTypeDef) {
        BaseType = constructTypeClass(this, knownTypeDef);
      } else if (withUnknown) {
        registry_l.warn(`Unable to resolve type ${name}, it will fail on construction`);
        this.#unknownTypes.set(name, true);
        BaseType = DoNotConstruct["with"](name);
      }

      if (BaseType) {
        // NOTE If we didn't extend here, we would have strange artifacts. An example is
        // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
        // Additionally, we now pass through the registry, which is a link to ourselves
        Type = class extends BaseType {};
        this.#classes.set(name, Type);
      }
    }

    return Type;
  }

  getChainProperties() {
    return this.#chainProperties;
  }

  getClassName(Type) {
    // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
    // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
    // (previously this used to be a simple find & return)
    const names = [];

    for (const [name, Clazz] of Object.entries(this.#knownDefaults)) {
      if (Type === Clazz) {
        names.push(name);
      }
    }

    for (const [name, Clazz] of this.#classes.entries()) {
      if (Type === Clazz) {
        names.push(name);
      }
    } // both sort and reverse are done in-place


    names.sort().reverse();
    return names.length ? names[0] : undefined;
  }

  getDefinition(typeName) {
    return this.#definitions.get(typeName);
  }

  getModuleInstances(specName, moduleName) {
    var _this$knownTypes, _this$knownTypes$type, _this$knownTypes$type2, _this$knownTypes$type3, _this$knownTypes$type4;

    return (_this$knownTypes = this.#knownTypes) === null || _this$knownTypes === void 0 ? void 0 : (_this$knownTypes$type = _this$knownTypes.typesBundle) === null || _this$knownTypes$type === void 0 ? void 0 : (_this$knownTypes$type2 = _this$knownTypes$type.spec) === null || _this$knownTypes$type2 === void 0 ? void 0 : (_this$knownTypes$type3 = _this$knownTypes$type2[specName]) === null || _this$knownTypes$type3 === void 0 ? void 0 : (_this$knownTypes$type4 = _this$knownTypes$type3.instances) === null || _this$knownTypes$type4 === void 0 ? void 0 : _this$knownTypes$type4[moduleName];
  }

  getOrThrow(name, msg) {
    const Clazz = this.get(name);
    assert(Clazz, msg || `type ${name} not found`);
    return Clazz;
  }

  getOrUnknown(name) {
    return this.get(name, true);
  }

  getSignedExtensionExtra() {
    return expandExtensionTypes(this.#signedExtensions, 'payload', this.#userExtensions);
  }

  getSignedExtensionTypes() {
    return expandExtensionTypes(this.#signedExtensions, 'extrinsic', this.#userExtensions);
  }

  hasClass(name) {
    return this.#classes.has(name) || !!this.#knownDefaults[name];
  }

  hasDef(name) {
    return this.#definitions.has(name);
  }

  hasType(name) {
    return !this.#unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
  }

  hash(data) {
    return this.createType('CodecHash', this.#hasher(data));
  }

  // eslint-disable-next-line no-dupe-class-members
  register(arg1, arg2) {
    // NOTE Constructors appear as functions here
    if (isFunction(arg1)) {
      this.#classes.set(arg1.name, arg1);
    } else if (isString(arg1)) {
      assert(isFunction(arg2), () => `Expected class definition passed to '${arg1}' registration`);
      assert(arg1 !== arg2.toString(), () => `Unable to register circular ${arg1} === ${arg1}`);
      this.#classes.set(arg1, arg2);
    } else {
      this._registerObject(arg1);
    }
  }

  _registerObject(obj) {
    const entries = Object.entries(obj);

    for (let e = 0; e < entries.length; e++) {
      const [name, type] = entries[e];

      if (isFunction(type)) {
        // This _looks_ a bit funny, but `typeof Clazz === 'function'
        this.#classes.set(name, type);
      } else {
        const def = isString(type) ? type : stringify(type);
        assert(name !== def, () => `Unable to register circular ${name} === ${def}`); // we already have this type, remove the classes registered for it

        if (this.#classes.has(name)) {
          this.#classes.delete(name);
        }

        this.#definitions.set(name, def);
      }
    }
  } // sets the chain properties


  setChainProperties(properties) {
    if (properties) {
      this.#chainProperties = properties;
    }
  }

  setHasher(hasher) {
    this.#hasher = hasher || blake2AsU8a;
  }

  setKnownTypes(knownTypes) {
    this.#knownTypes = knownTypes;
  }

  setLookup(lookup) {
    this.#lookup = lookup; // register all applicable types found

    lookup.register();
  } // sets the metadata


  setMetadata(metadata, signedExtensions, userExtensions) {
    this.#metadata = metadata.asLatest;
    this.#metadataVersion = metadata.version; // attach the lookup at this point (before injecting)

    this.setLookup(this.#metadata.lookup);
    injectExtrinsics(this, this.#metadata, this.#metadataVersion, this.#metadataCalls);
    injectErrors(this, this.#metadata, this.#metadataVersion, this.#metadataErrors);
    injectEvents(this, this.#metadata, this.#metadataVersion, this.#metadataEvents); // setup the available extensions

    this.setSignedExtensions(signedExtensions || (this.#metadata.extrinsic.version.gt(BN_ZERO) // FIXME Use the extension and their injected types
    ? this.#metadata.extrinsic.signedExtensions.map(({
      identifier
    }) => identifier.toString()) : fallbackExtensions), userExtensions); // setup the chain properties with format overrides

    this.setChainProperties(extractProperties(this, metadata));
  } // sets the available signed extensions


  setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions) {
    this.#signedExtensions = signedExtensions;
    this.#userExtensions = userExtensions;
    const unknown = findUnknownExtensions(this.#signedExtensions, this.#userExtensions);

    if (unknown.length) {
      registry_l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
    }
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/chain/index.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Type overrides based on specific nodes
const typesChain = {};
/* harmony default export */ const chain = (typesChain);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/centrifuge-chain.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */

const sharedTypes = {
  // Anchor
  AnchorData: {
    anchoredBlock: 'u64',
    docRoot: 'H256',
    id: 'H256'
  },
  PreCommitData: {
    expirationBlock: 'u64',
    identity: 'H256',
    signingRoot: 'H256'
  },
  // Fees
  Fee: {
    key: 'Hash',
    price: 'Balance'
  },
  // MultiAccount
  MultiAccountData: {
    deposit: 'Balance',
    depositor: 'AccountId',
    signatories: 'Vec<AccountId>',
    threshold: 'u16'
  },
  // Bridge
  ChainId: 'u8',
  DepositNonce: 'u64',
  ResourceId: '[u8; 32]',
  'chainbridge::ChainId': 'u8',
  // NFT
  RegistryId: 'H160',
  TokenId: 'U256',
  AssetId: {
    registryId: 'RegistryId',
    tokenId: 'TokenId'
  },
  AssetInfo: {
    metadata: 'Bytes'
  },
  MintInfo: {
    anchorId: 'Hash',
    proofs: 'Vec<ProofMint>',
    staticHashes: '[Hash; 3]'
  },
  Proof: {
    leafHash: 'H256',
    sortedHashes: 'H256'
  },
  ProofMint: {
    hashes: 'Vec<Hash>',
    property: 'Bytes',
    salt: '[u8; 32]',
    value: 'Bytes'
  },
  RegistryInfo: {
    fields: 'Vec<Bytes>',
    ownerCanBurn: 'bool'
  },
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'NonProxy']
  }
};
const standaloneTypes = objectSpread({}, sharedTypes, {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'LookupSource',
  LookupSource: 'IndicesLookupSource',
  Multiplier: 'Fixed64',
  RefCount: 'RefCountTo259'
});
const versioned = [{
  minmax: [240, 243],
  types: objectSpread({}, standaloneTypes, {
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'Vesting']
    }
  })
}, {
  minmax: [244, 999],
  types: objectSpread({}, standaloneTypes)
}, {
  minmax: [1000, undefined],
  types: objectSpread({}, sharedTypes)
}];
/* harmony default export */ const centrifuge_chain = (versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/kusama.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */


const kusama_sharedTypes = {
  CompactAssignments: 'CompactAssignmentsWith24',
  RawSolution: 'RawSolutionWith24',
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
  }
};
const addrIndicesTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'LookupSource',
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys5',
  LookupSource: 'IndicesLookupSource',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys5',
  LookupSource: 'AccountId',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const kusama_versioned = [{
  // 1020 is first CC3
  minmax: [1019, 1031],
  types: objectSpread({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchError: 'DispatchErrorTo198',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    IdentityInfo: 'IdentityInfoTo198',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  minmax: [1032, 1042],
  types: objectSpread({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  // actual at 1045 (1043-1044 is dev)
  minmax: [1043, 1045],
  types: objectSpread({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  minmax: [1046, 1054],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    StakingLedger: 'StakingLedgerTo240',
    Weight: 'u32'
  })
}, {
  minmax: [1055, 1056],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    StakingLedger: 'StakingLedgerTo240',
    Weight: 'u32'
  })
}, {
  minmax: [1057, 1061],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [1062, 2012],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2013, 2022],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2023, 2024],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes, {
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2025, 2027],
  types: objectSpread({}, kusama_sharedTypes, addrAccountIdTypes)
}, {
  minmax: [2028, 2029],
  types: objectSpread({}, kusama_sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount',
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16'
  })
}, {
  minmax: [2030, 9000],
  types: objectSpread({}, kusama_sharedTypes, {
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16'
  })
}, {
  minmax: [9010, 9099],
  types: objectSpread({}, kusama_sharedTypes, mapXcmTypes('V0'))
}, {
  // jump from 9100 to 9110, however align with Rococo
  minmax: [9100, 9105],
  types: objectSpread({}, kusama_sharedTypes, mapXcmTypes('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
/* harmony default export */ const kusama = (kusama_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/node.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const node_versioned = [{
  minmax: [0, undefined],
  types: {// nothing, API tracks master
  }
}];
/* harmony default export */ const node = (node_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/node-template.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const node_template_versioned = [{
  minmax: [0, undefined],
  types: {// nothing, API tracks master
  }
}];
/* harmony default export */ const node_template = (node_template_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/polkadot.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */

const polkadot_sharedTypes = {
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: {
      Any: 0,
      NonTransfer: 1,
      Governance: 2,
      Staking: 3,
      UnusedSudoBalances: 4,
      IdentityJudgement: 5,
      CancelProxy: 6,
      Auction: 7
    }
  }
};
const polkadot_addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  Keys: 'SessionKeys5',
  LookupSource: 'AccountId',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
}; // these are override types for Polkadot

const polkadot_versioned = [{
  minmax: [0, 12],
  types: objectSpread({}, polkadot_sharedTypes, polkadot_addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [13, 22],
  types: objectSpread({}, polkadot_sharedTypes, polkadot_addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [23, 24],
  types: objectSpread({}, polkadot_sharedTypes, polkadot_addrAccountIdTypes, {
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [25, 27],
  types: objectSpread({}, polkadot_sharedTypes, polkadot_addrAccountIdTypes)
}, {
  minmax: [28, 29],
  types: objectSpread({}, polkadot_sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [30, 9109],
  types: objectSpread({}, polkadot_sharedTypes)
}, {
  // metadata v14
  minmax: [9110, undefined],
  types: {}
}];
/* harmony default export */ const spec_polkadot = (polkadot_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/rococo.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */

 // structs need to be in order

/* eslint-disable sort-keys */

const rococo_sharedTypes = {
  FullIdentification: '()',
  // No staking, only session (as per config)
  Keys: 'SessionKeys7B'
};
const rococo_versioned = [{
  minmax: [0, 200],
  types: objectSpread({}, rococo_sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount',
    Address: 'AccountId',
    LookupSource: 'AccountId'
  })
}, {
  minmax: [201, 214],
  types: objectSpread({}, rococo_sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [215, 228],
  types: objectSpread({}, rococo_sharedTypes, {
    Keys: 'SessionKeys6'
  })
}, {
  minmax: [229, 9099],
  types: objectSpread({}, rococo_sharedTypes, mapXcmTypes('V0'))
}, {
  minmax: [9100, 9105],
  types: objectSpread({}, rococo_sharedTypes, mapXcmTypes('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
/* harmony default export */ const rococo = (rococo_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/shell.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const shell_versioned = [{
  minmax: [0, undefined],
  types: {// nothing, limited runtime
  }
}];
/* harmony default export */ const spec_shell = (shell_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/statemint.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */


const statemint_sharedTypes = {
  TAssetBalance: 'u128',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'CancelProxy', 'Assets', 'AssetOwner', 'AssetManager', 'Staking']
  }
}; // these are override types for Statemine, Statemint, Westmint

const statemint_versioned = [{
  minmax: [0, 3],
  types: objectSpread({}, statemint_sharedTypes, mapXcmTypes('V0'))
}, {
  minmax: [4, 5],
  types: objectSpread({}, statemint_sharedTypes, mapXcmTypes('V1'))
}, {
  // metadata V14
  minmax: [500, undefined],
  types: {}
}];
/* harmony default export */ const spec_statemint = (statemint_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/westend.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */


const westend_sharedTypes = {
  // 16 validators
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  // general
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
  }
};
const westend_addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  CompactAssignments: 'CompactAssignmentsWith16',
  LookupSource: 'AccountId',
  Keys: 'SessionKeys5',
  RawSolution: 'RawSolutionWith16',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const westend_versioned = [{
  minmax: [1, 2],
  types: objectSpread({}, westend_sharedTypes, westend_addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    Weight: 'u32'
  })
}, {
  minmax: [3, 22],
  types: objectSpread({}, westend_sharedTypes, westend_addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [23, 42],
  types: objectSpread({}, westend_sharedTypes, westend_addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [43, 44],
  types: objectSpread({}, westend_sharedTypes, westend_addrAccountIdTypes, {
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [45, 47],
  types: objectSpread({}, westend_sharedTypes, westend_addrAccountIdTypes)
}, {
  minmax: [48, 49],
  types: objectSpread({}, westend_sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [50, 9099],
  types: objectSpread({}, westend_sharedTypes, mapXcmTypes('V0'))
}, {
  minmax: [9100, 9105],
  types: objectSpread({}, westend_sharedTypes, mapXcmTypes('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
/* harmony default export */ const westend = (westend_versioned);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/spec/index.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0








 // Type overrides for specific spec types & versions as given in runtimeVersion

const typesSpec = {
  'centrifuge-chain': centrifuge_chain,
  kusama: kusama,
  node: node,
  'node-template': node_template,
  polkadot: spec_polkadot,
  rococo: rococo,
  shell: spec_shell,
  statemine: spec_statemint,
  statemint: spec_statemint,
  westend: westend,
  westmint: spec_statemint
};
/* harmony default export */ const types_known_spec = (typesSpec);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/upgrades/kusama.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const upgrades = [[0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024], [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030], [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039], [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051], [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058], [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011], [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022], [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026], [5961600, 2027], [6137912, 2028], [6561855, 2029], [7100891, 2030], [7468792, 9010], [7668600, 9030], [7812476, 9040], [8010981, 9050], [8073833, 9070], [8555825, 9080], [8945245, 9090], [9611377, 9100], [9625129, 9111], [9866422, 9122], [10403784, 9130], [10960765, 9150], [11006614, 9151], [11404482, 9160], [11601803, 9170], [12008022, 9180], [12405451, 9190], [12665416, 9200]];
/* harmony default export */ const upgrades_kusama = (upgrades);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/upgrades/polkadot.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const polkadot_upgrades = [[0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7], [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12], [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17], [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25], [2436698, 26], [3613564, 27], [3899547, 28], [4345767, 29], [4876134, 30], [5661442, 9050], [6321619, 9080], [6713249, 9090], [7217907, 9100], [7229126, 9110], [7560558, 9122], [8115869, 9140], [8638103, 9151], [9280179, 9170], [9738717, 9180], [10156856, 9190]];
/* harmony default export */ const upgrades_polkadot = (polkadot_upgrades);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/upgrades/westend.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const westend_upgrades = [[214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24], [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29], [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35], [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44], [2549864, 45], [3925782, 46], [3925843, 47], [4207800, 48], [4627944, 49], [5124076, 50], [5478664, 900], [5482450, 9000], [5584305, 9010], [5784566, 9030], [5879822, 9031], [5896856, 9032], [5897316, 9033], [6117927, 9050], [6210274, 9070], [6379314, 9080], [6979141, 9090], [7568453, 9100], [7766394, 9111], [7911691, 9120], [7968866, 9121], [7982889, 9122], [8514322, 9130], [9091726, 9140], [9091774, 9150], [9406726, 9160], [9921066, 9170], [10007115, 9180], [10480973, 9190], [10578091, 9200], [10678509, 9210], [10811001, 9220]];
/* harmony default export */ const upgrades_westend = (westend_upgrades);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/upgrades/index.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0





const allKnown = {
  kusama: upgrades_kusama,
  polkadot: upgrades_polkadot,
  westend: upgrades_westend
}; // testnets are not available in the networks map

const NET_EXTRA = {
  westend: {
    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
  }
};
/** @internal */

function checkOrder(network, versions) {
  const ooo = versions.filter((curr, index) => {
    const prev = versions[index - 1];
    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
  });
  assert(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${stringify(ooo)}`);
  return versions;
}
/** @internal */


function mapRaw([network, versions]) {
  const chain = selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];
  assert(chain, () => `Unable to find info for chain ${network}`);
  return {
    genesisHash: hexToU8a(chain.genesisHash[0]),
    network,
    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
      blockNumber: new lib_bn(blockNumber),
      specVersion: new lib_bn(specVersion)
    }))
  };
} // Type overrides for specific spec types & versions as given in runtimeVersion


const upgrades_upgrades = Object.entries(allKnown).map(mapRaw);
/* harmony default export */ const types_known_upgrades = (upgrades_upgrades);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types-known/util.js
// Copyright 2017-2022 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0





function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
} // flatten a VersionedType[] into a Record<string, string>

/** @internal */


function filterVersions(versions = [], specVersion) {
  return versions.filter(({
    minmax: [min, max]
  }) => (isUndefined(min) || isNull(min) || specVersion >= min) && (isUndefined(max) || isNull(max) || specVersion <= max)).reduce((result, {
    types
  }) => objectSpread(result, types), {});
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
 */


function getSpecExtensions({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;

    return objectSpread({}, (_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[s]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions, (_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[c]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions);
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
 */

function getSpecTypes({
  knownTypes
}, chainName, specName, specVersion) {
  const _specVersion = bnToBn(specVersion).toNumber();

  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;

    return (// The order here is always, based on -
      //   - spec then chain
      //   - typesBundle takes higher precedence
      //   - types is the final catch-all override
      objectSpread({}, filterVersions(types_known_spec[s], _specVersion), filterVersions(chain[c], _specVersion), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[s]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[c]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion), (_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[s], (_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[c], knownTypes.types)
    );
  });
}
function getSpecHasher({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;

    return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[c]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[s]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
 */

function getSpecRpc({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;

    return objectSpread({}, (_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[s]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc, (_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[c]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc);
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
 */

function getSpecAlias({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;

    return (// as per versions, first spec, then chain then finally non-versioned
      objectSpread({}, (_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[s]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.alias, (_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[c]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.alias, knownTypes.typesAlias)
    );
  });
}
/**
 * @description Returns a version record for known chains where upgrades are being tracked
 */

function getUpgradeVersion(genesisHash, blockNumber) {
  const known = types_known_upgrades.find(u => genesisHash.eq(u.genesisHash));
  return known ? [known.versions.reduce((last, version) => {
    return blockNumber.gt(version.blockNumber) ? version : last;
  }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var ObjectUnsubscribedError = createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subject.js






var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function () {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_Observable));

var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js


var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(Subject));

//# sourceMappingURL=BehaviorSubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
function argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (isPOJO(first_1)) {
            var keys = getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
function isPOJO(obj) {
    return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}
//# sourceMappingURL=argsArgArrayOrObject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js


var mapOneOrManyArgs_isArray = Array.isArray;
function callOrApply(fn, args) {
    return mapOneOrManyArgs_isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
    return map(function (args) { return callOrApply(fn, args); });
}
//# sourceMappingURL=mapOneOrManyArgs.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}
//# sourceMappingURL=createObject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js









function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from([], scheduler);
    }
    var result = new Observable_Observable(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject(keys, values); }
        :
            identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = identity; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/tap.js




function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction_isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            identity;
}
//# sourceMappingURL=tap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
//# sourceMappingURL=scanInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/reduce.js


function reduce(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}
//# sourceMappingURL=reduce.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/toArray.js


var arrReducer = function (arr, value) { return (arr.push(value), arr); };
function toArray() {
    return operate(function (source, subscriber) {
        reduce(arrReducer, [])(source).subscribe(subscriber);
    });
}
//# sourceMappingURL=toArray.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/util/lazy.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

function lazyDeriveSection(result, section, getKeys, creator) {
  lazyMethod(result, section, () => lazyMethods({}, getKeys(section), method => creator(section, method)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/memoize.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



function defaultGetId() {
  return 'none';
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function memoize(fn, {
  getInstanceId = defaultGetId
} = {}) {
  const cache = {};

  const memoized = (...args) => {
    const stringParams = stringify(args);
    const instanceId = getInstanceId();

    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }

    if (isUndefined(cache[instanceId][stringParams])) {
      cache[instanceId][stringParams] = fn(...args);
    }

    return cache[instanceId][stringParams];
  };

  memoized.unmemoize = (...args) => {
    const stringParams = stringify(args);
    const instanceId = getInstanceId();

    if (cache[instanceId] && !isUndefined(cache[instanceId][stringParams])) {
      delete cache[instanceId][stringParams];
    }
  };

  return memoized;
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/catchError.js



function catchError(selector) {
    return operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = innerFrom(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
//# sourceMappingURL=catchError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js



function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) { keySelector = identity; }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function (source, subscriber) {
        var previousKey;
        var first = true;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var currentKey = keySelector(value);
            if (first || !comparator(previousKey, currentKey)) {
                first = false;
                previousKey = currentKey;
                subscriber.next(value);
            }
        }));
    });
}
function defaultCompare(a, b) {
    return a === b;
}
//# sourceMappingURL=distinctUntilChanged.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
    now: function () {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js



var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(Subject));

//# sourceMappingURL=ReplaySubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/refCount.js


function refCount() {
    return operate(function (source, subscriber) {
        var connection = null;
        source._refCount++;
        var refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
            if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                connection = null;
                return;
            }
            var sharedConnection = source._connection;
            var conn = connection;
            connection = null;
            if (sharedConnection && (!conn || sharedConnection === conn)) {
                sharedConnection.unsubscribe();
            }
            subscriber.unsubscribe();
        });
        source.subscribe(refCounter);
        if (!refCounter.closed) {
            connection = source.connect();
        }
    });
}
//# sourceMappingURL=refCount.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js






var ConnectableObservable = (function (_super) {
    __extends(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        var _this = _super.call(this) || this;
        _this.source = source;
        _this.subjectFactory = subjectFactory;
        _this._subject = null;
        _this._refCount = 0;
        _this._connection = null;
        if (hasLift(source)) {
            _this.lift = source.lift;
        }
        return _this;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype._teardown = function () {
        this._refCount = 0;
        var _connection = this._connection;
        this._subject = this._connection = null;
        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
    };
    ConnectableObservable.prototype.connect = function () {
        var _this = this;
        var connection = this._connection;
        if (!connection) {
            connection = this._connection = new Subscription();
            var subject_1 = this.getSubject();
            connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {
                _this._teardown();
                subject_1.complete();
            }, function (err) {
                _this._teardown();
                subject_1.error(err);
            }, function () { return _this._teardown(); })));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription.EMPTY;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return refCount()(this);
    };
    return ConnectableObservable;
}(Observable_Observable));

//# sourceMappingURL=ConnectableObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js

function fromSubscribable(subscribable) {
    return new Observable_Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
}
//# sourceMappingURL=fromSubscribable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/connect.js




var DEFAULT_CONFIG = {
    connector: function () { return new Subject(); },
};
function connect(selector, config) {
    if (config === void 0) { config = DEFAULT_CONFIG; }
    var connector = config.connector;
    return operate(function (source, subscriber) {
        var subject = connector();
        from(selector(fromSubscribable(subject))).subscribe(subscriber);
        subscriber.add(source.subscribe(subject));
    });
}
//# sourceMappingURL=connect.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/multicast.js



function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory = isFunction_isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
    if (isFunction_isFunction(selector)) {
        return connect(selector, {
            connector: subjectFactory,
        });
    }
    return function (source) { return new ConnectableObservable(source, subjectFactory); };
}
//# sourceMappingURL=multicast.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js



function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
    if (selectorOrScheduler && !isFunction_isFunction(selectorOrScheduler)) {
        timestampProvider = selectorOrScheduler;
    }
    var selector = isFunction_isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
    return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
}
//# sourceMappingURL=publishReplay.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/Action.js


var Action = (function (_super) {
    __extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(Subscription));

//# sourceMappingURL=Action.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js

var intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearInterval: function (handle) {
        var delegate = intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=intervalProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js




var AsyncAction = (function (_super) {
    __extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        intervalProvider.clearInterval(id);
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            arrRemove(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(Action));

//# sourceMappingURL=AsyncAction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
var Immediate = {
    setImmediate: function (cb) {
        var handle = nextHandle++;
        activeHandles[handle] = true;
        if (!resolved) {
            resolved = Promise.resolve();
        }
        resolved.then(function () { return findAndClearHandle(handle) && cb(); });
        return handle;
    },
    clearImmediate: function (handle) {
        findAndClearHandle(handle);
    },
};
var TestTools = {
    pending: function () {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js


var setImmediate = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
    setImmediate: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
    },
    clearImmediate: function (handle) {
        var delegate = immediateProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=immediateProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js



var AsapAction = (function (_super) {
    __extends(AsapAction, _super);
    function AsapAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        return _this;
    }
    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay !== null && delay > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
    };
    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
        }
        if (!scheduler.actions.some(function (action) { return action.id === id; })) {
            immediateProvider.clearImmediate(id);
            scheduler._scheduled = undefined;
        }
        return undefined;
    };
    return AsapAction;
}(AsyncAction));

//# sourceMappingURL=AsapAction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Scheduler.js

var Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = dateTimestampProvider.now;
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js


var AsyncScheduler = (function (_super) {
    __extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        _this._scheduled = undefined;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(Scheduler));

//# sourceMappingURL=AsyncScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js


var AsapScheduler = (function (_super) {
    __extends(AsapScheduler, _super);
    function AsapScheduler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AsapScheduler.prototype.flush = function (action) {
        this._active = true;
        var flushId = this._scheduled;
        this._scheduled = undefined;
        var actions = this.actions;
        var error;
        action = action || actions.shift();
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions[0]) && action.id === flushId && actions.shift());
        this._active = false;
        if (error) {
            while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsapScheduler;
}(AsyncScheduler));

//# sourceMappingURL=AsapScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/asap.js


var asapScheduler = new AsapScheduler(AsapAction);
var asap = (/* unused pure expression or super */ null && (asapScheduler));
//# sourceMappingURL=asap.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-core/util/refCountDelay.js
// Copyright 2017-2022 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */

function refCountDelay(delay = 1750) {
  return source => {
    // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
    let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
    return new Observable_Observable(ob => {
      source.subscribe(ob);

      if (refCount++ === 0) {
        if (state === 1) {
          scheduler.unsubscribe();
        } else {
          connection = source.connect();
        }

        state = 3;
      }

      return () => {
        if (--refCount === 0) {
          if (state === 2) {
            state = 0;
            scheduler.unsubscribe();
          } else {
            // state === 3
            state = 1;
            scheduler = asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay);
          }
        }
      };
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-core/util/drr.js
// Copyright 2017-2022 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0



const drr_l = logger('drr');

const CMP = (a, b) => stringify({
  t: a
}) === stringify({
  t: b
});

const ERR = error => {
  drr_l.error(error.message);
  throw error;
};

const NOOP = () => undefined;
/**
 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
 *
 * @ignore
 * @internal
 */


const drr = ({
  delay,
  skipChange = false,
  skipTimeout = false
} = {}) => source$ => source$.pipe(catchError(ERR), skipChange ? tap(NOOP) : distinctUntilChanged(CMP), publishReplay(1), skipTimeout ? refCount() : refCountDelay(delay));
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-core/util/memo.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



// Wraps a derive, doing 2 things to optimize calls -
//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
//   2. wraps the observable in a drr() (which includes an unsub delay)

/** @internal */
// eslint-disable-next-line @typescript-eslint/ban-types
function memo(instanceId, inner) {
  const options = {
    getInstanceId: () => instanceId
  };
  const cached = memoize((...params) => new Observable_Observable(observer => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe(drr()), options);
  return cached;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/accountId.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name accountId
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An [[AccountId]]
 */

function accountId(instanceId, api) {
  return memo(instanceId, address => {
    const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

    if (decoded.length > 8) {
      return of(api.registry.createType('AccountId', decoded));
    }

    const accountIndex = api.registry.createType('AccountIndex', decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(a => assertReturn(a, 'Unable to retrieve accountId')));
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/flags.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const addrStr = address && address.toString();

  const isIncluded = id => id.toString() === addrStr;

  return {
    isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === addrStr,
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
/**
 * @name info
 * @description Returns account membership flags
 */


function flags(instanceId, api) {
  return memo(instanceId, address => {
    var _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return combineLatest([address && elections !== null && elections !== void 0 && elections.members ? elections.members() : of(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : of([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : of([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : of([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : of(undefined)]).pipe(map(r => parseFlags(address, r)));
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/idAndIndex.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */

function idAndIndex(instanceId, api) {
  return memo(instanceId, address => {
    try {
      // yes, this can fail, don't care too much, catch will catch it
      const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

      if (decoded.length > 8) {
        const accountId = api.registry.createType('AccountId', decoded);
        return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));
      }

      const accountIndex = api.registry.createType('AccountIndex', decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));
    } catch (error) {
      return of([undefined, undefined]);
    }
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/idToIndex.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name idToIndex
 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
 * @returns Returns the corresponding AccountIndex.
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
 * });
 * ```
 */

function idToIndex(instanceId, api) {
  return memo(instanceId, accountId => api.derive.accounts.indexes().pipe(map(indexes => (indexes || {})[accountId.toString()])));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/util/first.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function firstObservable(obs) {
  return obs.pipe(map(([a]) => a));
}
function firstMemo(fn) {
  return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/identity.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const UNDEF_HEX = {
  toHex: () => undefined
};

function dataAsString(data) {
  return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
}

function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);

    if (key && value) {
      other[key] = value;
    }

    return other;
  }, {});
}

function extractIdentity(identityOfOpt, superOf) {
  if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
    return {
      judgements: []
    };
  }

  const {
    info,
    judgements
  } = identityOfOpt.unwrap();
  const topDisplay = dataAsString(info.display);
  return {
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info.email),
    image: dataAsString(info.image),
    judgements,
    legal: dataAsString(info.legal),
    other: extractOther(info.additional),
    parent: superOf && superOf[0],
    pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info.riot),
    twitter: dataAsString(info.twitter),
    web: dataAsString(info.web)
  };
}

function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
    // this identity has something set
    return of([identityOfOpt, undefined]);
  } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
    const superOf = superOfOpt.unwrap(); // we have a super

    return combineLatest([api.query.identity.identityOf(superOf[0]), of(superOf)]);
  } // nothing of value returned


  return of([undefined, undefined]);
}

function getBase(api, accountId) {
  var _api$query$identity;

  return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : of([undefined, undefined]);
}
/**
 * @name identity
 * @description Returns identity info for an account
 */


function identity_identity(instanceId, api) {
  return memo(instanceId, accountId => getBase(api, accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
const hasIdentity = firstMemo((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
function hasIdentityMulti(instanceId, api) {
  return memo(instanceId, accountIds => {
    var _api$query$identity2;

    return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? combineLatest([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
      const superOfOpt = supers[index];
      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
      let display;

      if (identityOfOpt && identityOfOpt.isSome) {
        const value = dataAsString(identityOfOpt.unwrap().info.display);

        if (value && !isHex(value)) {
          display = value;
        }
      }

      return {
        display,
        hasIdentity: !!(display || parentId),
        parentId
      };
    }))) : of(accountIds.map(() => ({
      hasIdentity: false
    })));
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/indexToId.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name indexToId
 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
 * @returns Returns the corresponding AccountId.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
 *   console.log(`The AccountId of F7Hs is ${accountId}`);
 * });
 * ```
 */

function indexToId(instanceId, api) {
  return memo(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map(optResult => optResult.unwrapOr([])[0])) : of(undefined));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
//# sourceMappingURL=mergeInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js





function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction_isFunction(resultSelector)) {
        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
}
//# sourceMappingURL=mergeMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js


function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return mergeMap(identity, concurrent);
}
//# sourceMappingURL=mergeAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js

function concatAll() {
    return mergeAll(1);
}
//# sourceMappingURL=concatAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/concat.js



function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return concatAll()(from(args, popScheduler(args)));
}
//# sourceMappingURL=concat.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/startWith.js



function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = popScheduler(values);
    return operate(function (source, subscriber) {
        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
}
//# sourceMappingURL=startWith.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/indexes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


let indicesCache = null;

function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe(map(entries => entries.reduce((indexes, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
    }

    return indexes;
  }, {})));
}
/**
 * @name indexes
 * @returns Returns all the indexes on the system.
 * @description This is an unwieldly query since it loops through
 * all of the enumsets and returns all of the values found. This could be up to 32k depending
 * on the number of active accounts in the system
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexes((indexes) => {
 *   console.log('All existing AccountIndexes', indexes);
 * });
 * ```
 */


function indexes(instanceId, api) {
  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map(indices => {
    indicesCache = indices;
    return indices;
  })));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/info.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function retrieveNick(api, accountId) {
  var _api$query$nicks;

  return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : of(undefined)).pipe(map(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : undefined));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */


function info(instanceId, api) {
  return memo(instanceId, address => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([of({
    accountId,
    accountIndex
  }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), map(([{
    accountId,
    accountIndex
  }, identity, nickname]) => ({
    accountId,
    accountIndex,
    identity,
    nickname
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/accounts/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0








;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bagsList/get.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function orderBags(ids, bags) {
  const sorted = ids.map((id, index) => ({
    bag: bags[index].unwrapOr(null),
    id,
    key: id.toString()
  })).sort((a, b) => b.id.cmp(a.id)).map((base, index) => ({ ...base,
    bagLower: BN_ZERO,
    bagUpper: base.id,
    index
  }));
  const max = sorted.length - 1;
  return sorted.map((entry, index) => index === max ? entry // We could probably use a .add(BN_ONE) here
  : { ...entry,
    bagLower: sorted[index + 1].bagUpper
  });
}

function _getIds(instanceId, api) {
  return memo(instanceId, _ids => {
    const ids = _ids.map(id => bnToBn(id));

    return ids.length ? api.query.listBags.multi(ids).pipe(map(bags => orderBags(ids, bags))) : of([]);
  });
}
function get_all(instanceId, api) {
  return memo(instanceId, () => api.query.bagsList.listBags.keys().pipe(switchMap(keys => api.derive.bagsList._getIds(keys.map(({
    args: [id]
  }) => id))), map(list => list.filter(({
    bag
  }) => bag))));
}
function get(instanceId, api) {
  return memo(instanceId, id => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map(bags => bags[0])));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bagsList/getExpanded.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function expand(instanceId, api) {
  return memo(instanceId, bag => api.derive.bagsList.listNodes(bag.bag).pipe(map(nodes => ({ ...bag,
    nodes
  }))));
}
function getExpanded(instanceId, api) {
  return memo(instanceId, id => api.derive.bagsList.get(id).pipe(switchMap(bag => api.derive.bagsList.expand(bag))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bagsList/listNodes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function traverseLinks(api, head) {
  const subject = new BehaviorSubject(head);
  return subject.pipe(switchMap(account => api.query.bagsList.listNodes(account)), tap(node => {
    setTimeout(() => {
      node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
    }, 0);
  }), toArray(), // toArray since we want to startSubject to be completed
  map(all => all.map(o => o.unwrap())));
}

function listNodes(instanceId, api) {
  return memo(instanceId, bag => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bagsList/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/min.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


function find(items, cmp) {
  assert(items.length >= 1, 'Must provide one or more BN arguments');
  let result = items[0];

  for (let i = 1; i < items.length; i++) {
    result = cmp(result, items[i]);
  }

  return result;
}
/**
 * @name bnMax
 * @summary Finds and returns the highest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMax } from '@polkadot/util';
 *
 * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
 * ```
 */

function bnMax(...items) {
  return find(items, lib_bn.max);
}
/**
 * @name bnMin
 * @summary Finds and returns the smallest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMin } from '@polkadot/util';
 *
 * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
 * ```
 */

function bnMin(...items) {
  return find(items, lib_bn.min);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/balances/all.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const VESTING_ID = '0x76657374696e6720';

function calcLocked(api, bestNumber, locks) {
  let lockedBalance = api.registry.createType('Balance');
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType('Balance');
  let allLocked = false;

  if (Array.isArray(locks)) {
    // only get the locks that are valid until passed the current block
    lockedBreakdown = locks.filter(({
      until
    }) => !until || bestNumber && until.gt(bestNumber));
    allLocked = lockedBreakdown.some(({
      amount
    }) => amount && amount.isMax());
    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
      id
    }) => id.eq(VESTING_ID)).reduce((result, {
      amount
    }) => result.iadd(amount), new lib_bn(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699

    const notAll = lockedBreakdown.filter(({
      amount
    }) => amount && !amount.isMax());

    if (notAll.length) {
      lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({
        amount
      }) => amount)));
    }
  }

  return {
    allLocked,
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  };
}

function calcShared(api, bestNumber, data, locks) {
  const {
    allLocked,
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  } = calcLocked(api, bestNumber, locks);
  return { ...data,
    availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new lib_bn(0), data.freeBalance.sub(lockedBalance))),
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  };
}

function calcVesting(bestNumber, shared, _vesting) {
  // Calculate the vesting balances,
  //  - offset = balance locked at startingBlock
  //  - perBlock is the unlock amount
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({
    locked,
    perBlock,
    startingBlock
  }) => bestNumber.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock))) : BN_ZERO);
  const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new lib_bn(0));
  const vestingTotal = vesting.reduce((all, {
    locked
  }) => all.iadd(locked), new lib_bn(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
    vesting: vesting.map(({
      locked,
      perBlock,
      startingBlock
    }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({
      locked
    }) => !locked.isZero()),
    vestingTotal
  };
}

function calcBalances(api, [data, bestNumber, [vesting, allLocks, namedReserves]]) {
  const shared = calcShared(api, bestNumber, data, allLocks[0]);
  return { ...shared,
    ...calcVesting(bestNumber, shared, vesting),
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
    namedReserves
  };
} // old


function queryOld(api, accountId) {
  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe(map(([locks, optVesting]) => {
    let vestingNew = null;

    if (optVesting.isSome) {
      const {
        offset: locked,
        perBlock,
        startingBlock
      } = optVesting.unwrap();
      vestingNew = api.registry.createType('VestingInfo', {
        locked,
        perBlock,
        startingBlock
      });
    }

    return [vestingNew ? [vestingNew] : null, [locks], []];
  }));
}

const isNonNullable = nullable => !!nullable;

function createCalls(accountId, calls) {
  return [calls.map(c => !c), calls.filter(isNonNullable).map(c => [c, accountId])];
} // current (balances, vesting)


function queryCurrent(api, accountId, balanceInstances = ['balances']) {
  var _api$query$vesting;

  const [lockEmpty, lockQueries] = createCalls(accountId, balanceInstances.map(m => {
    var _m, _api$query;

    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) === null || _api$query === void 0 ? void 0 : _api$query.locks);
  }));
  const [reserveEmpty, reserveQueries] = createCalls(accountId, balanceInstances.map(m => {
    var _api$query2;

    return (_api$query2 = api.query[m]) === null || _api$query2 === void 0 ? void 0 : _api$query2.reserves;
  }));
  return combineLatest([(_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.query.vesting.vesting(accountId) : of(api.registry.createType('Option<VestingInfo>')), lockQueries.length ? api.queryMulti(lockQueries) : of([]), reserveQueries.length ? api.queryMulti(reserveQueries) : of([])]).pipe(map(([opt, locks, reserves]) => {
    let offsetLock = -1;
    let offsetReserve = -1;
    const vesting = opt.unwrapOr(null);
    return [vesting ? Array.isArray(vesting) ? vesting : [vesting] : null, lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]), reserveEmpty.map(e => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])];
  }));
}
/**
 * @name all
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */


function all_all(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
  return memo(instanceId, address => api.derive.balances.account(address).pipe(switchMap(account => {
    var _api$query$system, _api$query$balances;

    return !account.accountId.isEmpty ? combineLatest([of(account), api.derive.chain.bestNumber(), isFunction((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) || isFunction((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryCurrent(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : of([account, api.registry.createType('BlockNumber'), [null, [], []]]);
  }), map(result => calcBalances(api, result))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/balances/account.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function zeroBalance(api) {
  return api.registry.createType('Balance');
}

function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
  const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
  return {
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance
  };
}

function account_calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
  return {
    accountId,
    accountNonce,
    additional: additional.map(b => getBalance(api, b)),
    ...getBalance(api, primary)
  };
} // old


function queryBalancesFree(api, accountId) {
  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));
}

function queryNonceOnly(api, accountId) {
  const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];

  return isFunction(api.query.system.account) ? api.query.system.account(accountId).pipe(map(({
    nonce
  }) => fill(nonce))) : isFunction(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe(map(nonce => fill(nonce))) : of(fill(api.registry.createType('Index')));
}

function queryBalancesAccount(api, accountId, modules = ['balances']) {
  const balances = modules.map(m => {
    var _m, _api$query$m;

    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) === null || _api$query$m === void 0 ? void 0 : _api$query$m.account);
  }).filter(q => isFunction(q)).map(q => [q, accountId]);

  const extract = (nonce, data) => [nonce, data.map(({
    feeFrozen,
    free,
    miscFrozen,
    reserved
  }) => [free, reserved, feeFrozen, miscFrozen])]; // NOTE this is for the first case where we do have instances specified


  return balances.length ? isFunction(api.query.system.account) ? api.queryMulti([[api.query.system.account, accountId], ...balances]).pipe(map(([{
    nonce
  }, ...balances]) => extract(nonce, balances))) : api.queryMulti([[api.query.system.accountNonce, accountId], ...balances]).pipe(map(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);
}

function querySystemAccount(api, accountId) {
  // AccountInfo is current, support old, eg. Edgeware
  return api.query.system.account(accountId).pipe(map(infoOrTuple => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];

    if (!data || data.isEmpty) {
      return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
    }

    const {
      feeFrozen,
      free,
      miscFrozen,
      reserved
    } = data;
    return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];
  }));
}
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */


function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
  return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => {
    var _api$query$system, _api$query$balances, _api$query$balances2;

    return accountId ? combineLatest([of(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId) : isFunction((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId) : isFunction((_api$query$balances2 = api.query.balances) === null || _api$query$balances2 === void 0 ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]]);
  }), map(result => account_calcBalances(api, result))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/balances/votingBalances.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function votingBalances(instanceId, api) {
  return memo(instanceId, addresses => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map(accountId => api.derive.balances.account(accountId))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/balances/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const votingBalance = all_all;

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterBountiesProposals(api, allProposals) {
  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
  return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => bountyCall.is(proposal.proposal)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bounties/bounties.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
  const bounties = [];
  maybeBounties.forEach((bounty, index) => {
    if (bounty.isSome) {
      bounties.push({
        bounty: bounty.unwrap(),
        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
        index: ids[index],
        proposals: bountyProposals.filter(bountyProposal => ids[index].eq(bountyProposal.proposal.args[0]))
      });
    }
  });
  return bounties;
}

function bounties(instanceId, api) {
  const bountyBase = api.query.bounties || api.query.treasury;
  return memo(instanceId, () => bountyBase.bounties ? combineLatest([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : of(0)]).pipe(switchMap(() => combineLatest([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : of([])])), switchMap(([keys, proposals]) => {
    const ids = keys.map(({
      args: [id]
    }) => id);
    return combineLatest([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), of(ids), of(filterBountiesProposals(api, proposals))]);
  }), map(parseResult)) : of(parseResult([[], [], [], []])));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bounties/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // re-export these - since these needs to be resolvable from api-derive, i.e. without this
// we would emit code with ../<somewhere>/src embedded in the *.d.ts files

function unwrapBlockNumber(fn) {
  return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(r => r.number.unwrap())));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/bestNumber.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bestNumber
 * @returns The latest block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumber((blockNumber) => {
 *   console.log(`the current best block is #${blockNumber}`);
 * });
 * ```
 */

const bestNumber = unwrapBlockNumber(api => api.derive.chain.subscribeNewHeads());
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bestNumberFinalized
 * @returns A BlockNumber
 * @description Get the latest finalized block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberFinalized((blockNumber) => {
 *   console.log(`the current finalized block is #${blockNumber}`);
 * });
 * ```
 */

const bestNumberFinalized = unwrapBlockNumber(api => api.rpc.chain.subscribeFinalizedHeads());
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/bestNumberLag.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name bestNumberLag
 * @returns A number of blocks
 * @description Calculates the lag between finalized head and best head
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberLag((lag) => {
 *   console.log(`finalized is ${lag} blocks behind head`);
 * });
 * ```
 */

function bestNumberLag(instanceId, api) {
  return memo(instanceId, () => combineLatest([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/type/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function extractAuthor(digest, sessionValidators = []) {
  const [citem] = digest.logs.filter(e => e.isConsensus);
  const [pitem] = digest.logs.filter(e => e.isPreRuntime);
  const [sitem] = digest.logs.filter(e => e.isSeal);
  let accountId;

  try {
    // This is critical to be first for BABE (before Consensus)
    // If not first, we end up dropping the author at session-end
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId = engine.extractAuthor(data, sessionValidators);
    }

    if (!accountId && citem) {
      const [engine, data] = citem.asConsensus;
      accountId = engine.extractAuthor(data, sessionValidators);
    } // SEAL, still used in e.g. Kulupu for pow


    if (!accountId && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId = engine.extractAuthor(data, sessionValidators);
    }
  } catch {// ignore
  }

  return accountId;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/type/HeaderExtended.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

function createHeaderExtended(registry, header, validators) {
  // an instance of the base extrinsic for us to extend
  const HeaderBase = registry.createClass('Header');

  class Implementation extends HeaderBase {
    #author;
    #validators;

    constructor(registry, header, validators) {
      super(registry, header);
      this.#author = extractAuthor(this.digest, validators);
      this.#validators = validators;
      this.createdAtHash = header === null || header === void 0 ? void 0 : header.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return this.#author;
    }
    /**
     * @description Convenience method, returns the validators for the block
     */


    get validators() {
      return this.#validators;
    }

  }

  return new Implementation(registry, header, validators);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/getHeader.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name getHeader
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @returns An array containing the block header and the block author
 * @description Get a specific block header and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
 *
 * console.log(`block #${number} was authored by ${author}`);
 * ```
 */

function getHeader(instanceId, api) {
  return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getHeader(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.session ? queryAt.session.validators() : of([])))]).pipe(map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
  // we supplied an invalid hash. (Due to defaults, storeage will have an
  // empty value, so only the RPC is affected). So return undefined
  of())));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events = records.filter(({
      phase
    }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
      event
    }) => {
      if (event.section === 'system') {
        if (event.method === 'ExtrinsicSuccess') {
          dispatchInfo = event.data[0];
        } else if (event.method === 'ExtrinsicFailed') {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }

      return event;
    });
    return {
      dispatchError,
      dispatchInfo,
      events,
      extrinsic
    };
  });
}

function createSignedBlockExtended(registry, block, events, validators) {
  // an instance of the base extrinsic for us to extend
  const SignedBlockBase = registry.createClass('SignedBlock');

  class Implementation extends SignedBlockBase {
    #author;
    #events;
    #extrinsics;

    constructor(registry, block, events, validators) {
      super(registry, block);
      this.#author = extractAuthor(this.block.header.digest, validators);
      this.#events = events || [];
      this.#extrinsics = mapExtrinsics(this.block.extrinsics, this.#events);
      this.createdAtHash = block === null || block === void 0 ? void 0 : block.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return this.#author;
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */


    get events() {
      return this.#events;
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */


    get extrinsics() {
      return this.#extrinsics;
    }

  }

  return new Implementation(registry, block, events, validators);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/getBlock.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name getBlock
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
 *
 * console.log(`block #${block.header.number} was authored by ${author}`);
 * ```
 */

function getBlock(instanceId, api) {
  return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => combineLatest([queryAt.system.events(), queryAt.session ? queryAt.session.validators() : of([])])))]).pipe(map(([signedBlock, [events, validators]]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
  // we supplied an invalid hash. (Due to defaults, storage will have an
  // empty value, so only the RPC is affected). So return undefined
  of())));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function getBlockByNumber(instanceId, api) {
  return memo(instanceId, blockNumber => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap(h => api.derive.chain.getBlock(h))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name subscribeNewBlocks
 * @returns The latest block & events for that block
 */

function subscribeNewBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap(header => {
    const blockHash = header.createdAtHash || header.hash; // we get the block first, setting up the registry

    return combineLatest([of(header), api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.system.events()))]);
  }), map(([header, block, events]) => createSignedBlockExtended(block.registry, block, events, header.validators))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name subscribeNewHeads
 * @returns A header with the current header (including extracted author)
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHeads((header) => {
 *   console.log(`block #${header.number} was authored by ${header.author}`);
 * });
 * ```
 */

function subscribeNewHeads(instanceId, api) {
  return memo(instanceId, () => combineLatest([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : of(undefined)]).pipe(map(([header, validators]) => {
    header.createdAtHash = header.hash;
    return createHeaderExtended(header.registry, header, validators);
  })));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/chain/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0








;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/contracts/fees.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



// query via constants (current applicable path)
function queryConstants(api) {
  return of([// deprecated
  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current
  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
}
/**
 * @name fees
 * @returns An object containing the combined results of the queries for
 * all relevant contract fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.contracts.fees(([creationFee, transferFee]) => {
 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
 * });
 * ```
 */


function fees(instanceId, api) {
  return memo(instanceId, () => {
    return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/contracts/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/collective/helpers.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function getInstance(api, section) {
  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), section);
  const name = instances && instances.length ? instances[0] : section;
  return api.query[name];
}
function withSection(section, fn) {
  return (instanceId, api) => memo(instanceId, fn(getInstance(api, section), api, instanceId));
}
function callMethod(method, empty) {
  return section => withSection(section, query => () => isFunction(query === null || query === void 0 ? void 0 : query[method]) ? query[method]() : of(empty));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/collective/members.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
 // We are re-exporting these from here to ensure that *.d.ts generation is correct

const members = callMethod('members', []);
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/collective/proposals.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



 // We are re-exporting these from here to ensure that *.d.ts generation is correct

function parse(api, [hashes, proposals, votes]) {
  return proposals.map((o, index) => o && o.isSome ? {
    hash: api.registry.createType('Hash', hashes[index]),
    proposal: o.unwrap(),
    votes: votes[index].unwrapOr(null)
  } : null).filter(proposal => !!proposal);
}

function _proposalsFrom(api, query, hashes) {
  return (isFunction(query === null || query === void 0 ? void 0 : query.proposals) && hashes.length ? combineLatest([of(hashes), // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
  // however we have had cases on Edgeware where the indices have moved around after an
  // upgrade, which results in invalid on-chain data
  combineLatest(hashes.map(h => query.proposalOf(h).pipe(catchError(() => of(null))))), query.voting.multi(hashes)]) : of([[], [], []])).pipe(map(r => parse(api, r)));
}

function hasProposals(section) {
  return withSection(section, query => () => of(isFunction(query === null || query === void 0 ? void 0 : query.proposals)));
}
function proposals(section) {
  return withSection(section, (query, api) => () => api.derive[section].proposalHashes().pipe(switchMap(all => _proposalsFrom(api, query, all))));
}
function proposal(section) {
  return withSection(section, (query, api) => hash => isFunction(query === null || query === void 0 ? void 0 : query.proposals) ? firstObservable(_proposalsFrom(api, query, [hash])) : of(null));
}
const proposalCount = callMethod('proposalCount', null);
const proposalHashes = callMethod('proposals', []);
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/collective/prime.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


 // We are re-exporting these from here to ensure that *.d.ts generation is correct

function prime(section) {
  return withSection(section, query => () => isFunction(query === null || query === void 0 ? void 0 : query.prime) ? query.prime().pipe(map(o => o.unwrapOr(null))) : of(null));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/council/votes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // Voter is current tuple is 2.x-era

function isVoter(value) {
  return !Array.isArray(value);
}

function retrieveStakeOf(elections) {
  return elections.stakeOf.entries().pipe(map(entries => entries.map(([{
    args: [accountId]
  }, stake]) => [accountId, stake])));
}

function retrieveVoteOf(elections) {
  return elections.votesOf.entries().pipe(map(entries => entries.map(([{
    args: [accountId]
  }, votes]) => [accountId, votes])));
}

function retrievePrev(api, elections) {
  return combineLatest([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe(map(([stakes, votes]) => {
    const result = [];
    votes.forEach(([voter, votes]) => {
      result.push([voter, {
        stake: api.registry.createType('Balance'),
        votes
      }]);
    });
    stakes.forEach(([staker, stake]) => {
      const entry = result.find(([voter]) => voter.eq(staker));

      if (entry) {
        entry[1].stake = stake;
      } else {
        result.push([staker, {
          stake,
          votes: []
        }]);
      }
    });
    return result;
  }));
}

function retrieveCurrent(elections) {
  return elections.voting.entries().pipe(map(entries => entries.map(([{
    args: [accountId]
  }, value]) => [accountId, isVoter(value) ? {
    stake: value.stake,
    votes: value.votes
  } : {
    stake: value[0],
    votes: value[1]
  }])));
}

function votes(instanceId, api) {
  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
  return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/council/votesOf.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function votesOf(instanceId, api) {
  return memo(instanceId, accountId => api.derive.council.votes().pipe(map(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
    stake: api.registry.createType('Balance'),
    votes: []
  }])[1])));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/council/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const council_members = members('council');
const council_hasProposals = hasProposals('council');
const council_proposal = proposal('council');
const council_proposalCount = proposalCount('council');
const council_proposalHashes = proposalHashes('council');
const council_proposals = proposals('council');
const council_prime = prime('council');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/crowdloan/childKey.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0





function createChildKey(info) {
  return u8aToHex(u8aConcat(':child_storage:default:', blake2AsU8a(u8aConcat('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
}

function childKey(instanceId, api) {
  return memo(instanceId, paraId => api.query.crowdloan.funds(paraId).pipe(map(optInfo => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/empty.js

var EMPTY = new Observable_Observable(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/array/flatten.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is supposed to be a faster concat...
// https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki

/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */
function arrayFlatten(arrays) {
  // pre-allocate based on the combined size
  let size = 0;

  for (let i = 0; i < arrays.length; i++) {
    size += arrays[i].length;
  }

  const output = new Array(size);
  let i = -1;

  for (let j = 0; j < arrays.length; j++) {
    const a = arrays[j]; // instead of pushing, we just set the entries

    for (let e = 0; e < a.length; e++) {
      output[++i] = a[e];
    }
  }

  return output;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/crowdloan/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function extractContributed(paraId, events) {
  var _events$createdAtHash;

  const added = [];
  const removed = [];
  return events.filter(({
    event: {
      data: [, eventParaId],
      method,
      section
    }
  }) => section === 'crowdloan' && ['Contributed', 'Withdrew'].includes(method) && eventParaId.eq(paraId)).reduce((result, {
    event: {
      data: [accountId],
      method
    }
  }) => {
    if (method === 'Contributed') {
      result.added.push(accountId.toHex());
    } else {
      result.removed.push(accountId.toHex());
    }

    return result;
  }, {
    added,
    blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
    removed
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/crowdloan/contributions.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

function _getUpdates(api, paraId) {
  let added = [];
  let removed = [];
  return api.query.system.events().pipe(switchMap(events => {
    const changes = extractContributed(paraId, events);

    if (changes.added.length || changes.removed.length) {
      var _events$createdAtHash;

      added = added.concat(...changes.added);
      removed = removed.concat(...changes.removed);
      return of({
        added,
        addedDelta: changes.added,
        blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
        removed,
        removedDelta: changes.removed
      });
    }

    return EMPTY;
  }), startWith({
    added,
    addedDelta: [],
    blockHash: '-',
    removed,
    removedDelta: []
  }));
}

function _eventTriggerAll(api, paraId) {
  return api.query.system.events().pipe(switchMap(events => {
    var _events$createdAtHash2;

    const items = events.filter(({
      event: {
        data: [eventParaId],
        method,
        section
      }
    }) => section === 'crowdloan' && ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) && eventParaId.eq(paraId));
    return items.length ? of(((_events$createdAtHash2 = events.createdAtHash) === null || _events$createdAtHash2 === void 0 ? void 0 : _events$createdAtHash2.toHex()) || '-') : EMPTY;
  }), startWith('-'));
}

function _getKeysPaged(api, childKey) {
  const subject = new BehaviorSubject(undefined);
  return subject.pipe(switchMap(startKey => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K, startKey)), tap(keys => {
    setTimeout(() => {
      keys.length === PAGE_SIZE_K ? subject.next(keys[PAGE_SIZE_K - 1].toHex()) : subject.complete();
    }, 0);
  }), toArray(), // toArray since we want to startSubject to be completed
  map(keyArr => arrayFlatten(keyArr)));
}

function _getAll(api, paraId, childKey) {
  return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, '0x')), map(keys => keys.map(k => k.toHex())));
}

function _contributions(api, paraId, childKey) {
  return combineLatest([_getAll(api, paraId, childKey), _getUpdates(api, paraId)]).pipe(map(([keys, {
    added,
    blockHash,
    removed
  }]) => {
    const contributorsMap = {};
    keys.forEach(k => {
      contributorsMap[k] = true;
    });
    added.forEach(k => {
      contributorsMap[k] = true;
    });
    removed.forEach(k => {
      delete contributorsMap[k];
    });
    return {
      blockHash,
      contributorsHex: Object.keys(contributorsMap)
    };
  }));
}

function contributions(instanceId, api) {
  return memo(instanceId, paraId => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey ? _contributions(api, paraId, childKey) : of({
    blockHash: '-',
    contributorsHex: []
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function _getValues(api, childKey, keys) {
  // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
  return combineLatest(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe(map(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => ({ ...all,
    [keys[index]]: b
  }), {})));
}

function _watchOwnChanges(api, paraId, childkey, keys) {
  return api.query.system.events().pipe(switchMap(events => {
    const changes = extractContributed(paraId, events);
    const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
    return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
  }), startWith({}));
}

function ownContributions_contributions(api, paraId, childKey, keys) {
  return combineLatest([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe(map(([all, latest]) => ({ ...all,
    ...latest
  })));
}

function ownContributions(instanceId, api) {
  return memo(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey && keys.length ? ownContributions_contributions(api, paraId, childKey, keys) : of({}))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/crowdloan/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/util/string/toHex.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name stringToHex
 * @summary Creates a hex string from a utf-8 string
 * @description
 * String input values return the actual encoded hex value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToHex } from '@polkadot/util';
 *
 * stringToU8a('hello'); // 0x68656c6c6f
 * ```
 */

function stringToHex(value) {
  return u8aToHex(stringToU8a(value));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const DEMOCRACY_ID = stringToHex('democrac');

function isMaybeHashed(call) {
  // check for enum
  return call.isBasic === false;
}

function queryQueue(api) {
  return api.query.democracy.dispatchQueue().pipe(switchMap(dispatches => combineLatest([of(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
    at,
    image: images[dispatchIndex],
    imageHash,
    index
  }))));
}

function schedulerEntries(api) {
  // We don't get entries, but rather we get the keys (triggered via finished referendums) and
  // the subscribe to those keys - this means we pickup when the schedulers actually executes
  // at a block, the entry for that block will become empty
  return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap(keys => {
    const blockNumbers = keys.map(({
      args: [blockNumber]
    }) => blockNumber);
    return blockNumbers.length ? combineLatest([of(blockNumbers), // this should simply be api.query.scheduler.agenda.multi,
    // however we have had cases on Darwinia where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    combineLatest(blockNumbers.map(blockNumber => // this does create an issue since it discards all at that block
    api.query.scheduler.agenda(blockNumber).pipe(catchError(() => of(null)))))]) : of([[], []]);
  }));
}

function queryScheduler(api) {
  return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
    const result = [];
    blockNumbers.forEach((at, index) => {
      (agendas[index] || []).filter(o => o.isSome).forEach(o => {
        const scheduled = o.unwrap();

        if (scheduled.maybeId.isSome) {
          const id = scheduled.maybeId.unwrap().toHex();

          if (id.startsWith(DEMOCRACY_ID)) {
            const imageHash = isMaybeHashed(scheduled.call) ? scheduled.call.isHash ? scheduled.call.asHash : scheduled.call.asValue.args[0] : scheduled.call.args[0];
            result.push({
              at,
              imageHash,
              index: api.registry.createType('(u64, ReferendumIndex)', id)[1]
            });
          }
        }
      });
    });
    return combineLatest([of(result), result.length ? api.derive.democracy.preimages(result.map(({
      imageHash
    }) => imageHash)) : of([])]);
  }), map(([infos, images]) => infos.map((info, index) => ({ ...info,
    image: images[index]
  }))));
}

function dispatchQueue(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$scheduler;

    return isFunction((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : of([]);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/locks.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];

function parseEnd(api, vote, {
  approved,
  end
}) {
  return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO];
}

function parseLock(api, [referendumId, accountVote], referendum) {
  const {
    balance,
    vote
  } = accountVote.asStandard;
  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
  return {
    balance,
    isDelegated: false,
    isFinished: referendum.isFinished,
    referendumEnd,
    referendumId,
    unlockAt,
    vote
  };
}

function delegateLocks(api, {
  balance,
  conviction,
  target
}) {
  return api.derive.democracy.locks(target).pipe(map(available => available.map(({
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt,
    vote
  }) => ({
    balance,
    isDelegated: true,
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
    vote: api.registry.createType('Vote', {
      aye: vote.isAye,
      conviction
    })
  }))));
}

function directLocks(api, {
  votes
}) {
  if (!votes.length) {
    return of([]);
  }

  return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && isUndefined(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}

function locks(instanceId, api) {
  return memo(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe(switchMap(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/nextExternal.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function withImage(api, nextOpt) {
  if (nextOpt.isNone) {
    return of(null);
  }

  const [imageHash, threshold] = nextOpt.unwrap();
  return api.derive.democracy.preimage(imageHash).pipe(map(image => ({
    image,
    imageHash,
    threshold
  })));
}

function nextExternal(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$democracy;

    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap(nextOpt => withImage(api, nextOpt))) : of(null);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/preimages.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function isDemocracyPreimage(api, imageOpt) {
  return !!imageOpt && !api.query.democracy.dispatchQueue;
}

function constructProposal(api, [bytes, proposer, balance, at]) {
  let proposal;

  try {
    proposal = api.registry.createType('Proposal', bytes.toU8a(true));
  } catch (error) {
    console.error(error);
  }

  return {
    at,
    balance,
    proposal,
    proposer
  };
}

function parseDemocracy(api, imageOpt) {
  if (imageOpt.isNone) {
    return;
  }

  if (isDemocracyPreimage(api, imageOpt)) {
    const status = imageOpt.unwrap();

    if (status.isMissing) {
      return;
    }

    const {
      data,
      deposit,
      provider,
      since
    } = status.asAvailable;
    return constructProposal(api, [data, provider, deposit, since]);
  }

  return constructProposal(api, imageOpt.unwrap());
}

function getDemocracyImages(api, hashes) {
  return api.query.democracy.preimages.multi(hashes).pipe(map(images => images.map(imageOpt => parseDemocracy(api, imageOpt))));
}

function preimages(instanceId, api) {
  return memo(instanceId, hashes => hashes.length ? isFunction(api.query.democracy.preimages) ? getDemocracyImages(api, hashes) : of([]) : of([]));
}
const preimage = firstMemo((api, hash) => api.derive.democracy.preimages([hash]));
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/proposals.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function isNewDepositors(depositors) {
  // Detect balance...
  // eslint-disable-next-line @typescript-eslint/unbound-method
  return isFunction(depositors[1].mul);
}

function proposals_parse([proposals, images, optDepositors]) {
  return proposals.filter(([,, proposer], index) => {
    var _optDepositors$index;

    return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
  }).map(([index, imageHash, proposer], proposalIndex) => {
    const depositors = optDepositors[proposalIndex].unwrap();
    return { ...(isNewDepositors(depositors) ? {
        balance: depositors[1],
        seconds: depositors[0]
      } : {
        balance: depositors[0],
        seconds: depositors[1]
      }),
      image: images[proposalIndex],
      imageHash,
      index,
      proposer
    };
  });
}

function proposals_proposals(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$democracy, _api$query$democracy2;

    return isFunction((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && isFunction((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe(switchMap(proposals => proposals.length ? combineLatest([of(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))]) : of([[], [], []])), map(proposals_parse)) : of([]);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/referendumIds.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function referendumIds(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$democracy;

    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe(map(([first, total]) => total.gt(first) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : of([]);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/referendums.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function referendums(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap(referendums => referendums.length ? combineLatest([of(referendums), api.derive.democracy._referendumsVotes(referendums)]) : of([[], []])), map(([referendums, votes]) => referendums.map((referendum, index) => ({ ...referendum,
    ...votes[index]
  })))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/referendumsActive.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function referendumsActive(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function referendumsFinished(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.map(o => o.unwrapOr(null)).filter(info => !!info && info.isFinished).map(info => info.asFinished))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bn/sqrt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




const SQRT_MAX_SAFE_INTEGER = new lib_bn(94906265);
/**
 * @name bnSqrt
 * @summary Calculates the integer square root of a BN
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnSqrt } from '@polkadot/util';
 *
 * bnSqrt(new BN(16)).toString(); // => '4'
 * ```
 */

function bnSqrt(value) {
  const n = bnToBn(value);
  assert(n.gte(BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
  // shortcut <= 2^53 - 1 to use the JS utils

  if (n.lte(BN_MAX_INTEGER)) {
    return new lib_bn(Math.floor(Math.sqrt(n.toNumber())));
  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
  // output will be larger than this, we expect this to be a safe start


  let x0 = SQRT_MAX_SAFE_INTEGER.clone();

  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);

    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
      return x0;
    }

    x0 = x1;
  }
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function isOldInfo(info) {
  return !!info.proposalHash;
}

function isCurrentStatus(status) {
  return !!status.tally;
}

function compareRationals(n1, d1, n2, d2) {
  while (true) {
    const q1 = n1.div(d1);
    const q2 = n2.div(d2);

    if (q1.lt(q2)) {
      return true;
    } else if (q2.lt(q1)) {
      return false;
    }

    const r1 = n1.mod(d1);
    const r2 = n2.mod(d2);

    if (r2.isZero()) {
      return false;
    } else if (r1.isZero()) {
      return true;
    }

    n1 = d2;
    n2 = d1;
    d1 = r2;
    d2 = r1;
  }
}

function calcPassingOther(threshold, sqrtElectorate, {
  votedAye,
  votedNay,
  votedTotal
}) {
  const sqrtVoters = bnSqrt(votedTotal);
  return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
}

function calcPassing(threshold, sqrtElectorate, state) {
  return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
}

function calcVotesPrev(votesFor) {
  return votesFor.reduce((state, derived) => {
    const {
      balance,
      vote
    } = derived;
    const isDefault = vote.conviction.index === 0;
    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);

    if (vote.isAye) {
      state.allAye.push(derived);
      state.voteCountAye++;
      state.votedAye.iadd(counted);
    } else {
      state.allNay.push(derived);
      state.voteCountNay++;
      state.votedNay.iadd(counted);
    }

    state.voteCount++;
    state.votedTotal.iadd(counted);
    return state;
  }, {
    allAye: [],
    allNay: [],
    voteCount: 0,
    voteCountAye: 0,
    voteCountNay: 0,
    votedAye: new lib_bn(0),
    votedNay: new lib_bn(0),
    votedTotal: new lib_bn(0)
  });
}

function calcVotesCurrent(tally, votes) {
  const allAye = [];
  const allNay = [];
  votes.forEach(derived => {
    if (derived.vote.isAye) {
      allAye.push(derived);
    } else {
      allNay.push(derived);
    }
  });
  return {
    allAye,
    allNay,
    voteCount: allAye.length + allNay.length,
    voteCountAye: allAye.length,
    voteCountNay: allNay.length,
    votedAye: tally.ayes,
    votedNay: tally.nays,
    votedTotal: tally.turnout
  };
}

function calcVotes(sqrtElectorate, referendum, votes) {
  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
  return { ...state,
    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
    votes
  };
}
function getStatus(info) {
  if (info.isNone) {
    return null;
  }

  const unwrapped = info.unwrap();
  return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing // done, we don't include it here... only currently active
  : null;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0





function votesPrev(api, referendumId) {
  return api.query.democracy.votersFor(referendumId).pipe(switchMap(votersFor => combineLatest([of(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : of([]), api.derive.balances.votingBalances(votersFor)])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
    accountId,
    balance: balances[index].votingBalance || api.registry.createType('Balance'),
    isDelegating: false,
    vote: votes[index] || api.registry.createType('Vote')
  }))));
}

function extractVotes(mapped, referendumId) {
  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes
  votes.reduce((result, [, vote]) => {
    if (vote.isStandard) {
      result.push({
        accountId,
        isDelegating: false,
        ...vote.asStandard
      });
    }

    return result;
  }, result), []);
}

function votesCurr(api, referendumId) {
  return api.query.democracy.votingOf.entries().pipe(map(allVoting => {
    const mapped = allVoting.map(([{
      args: [accountId]
    }, voting]) => [accountId, voting]);
    const votes = extractVotes(mapped, referendumId);
    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations

    delegations.forEach(([accountId, {
      balance,
      conviction,
      target
    }]) => {
      // Are we delegating to a delegator
      const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
      const to = votes.find(({
        accountId
      }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target

      if (to) {
        votes.push({
          accountId,
          balance,
          isDelegating: true,
          vote: api.registry.createType('Vote', {
            aye: to.vote.isAye,
            conviction
          })
        });
      }
    });
    return votes;
  }));
}

function _referendumVotes(instanceId, api) {
  return memo(instanceId, referendum => combineLatest([api.derive.democracy.sqrtElectorate(), isFunction(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
}
function _referendumsVotes(instanceId, api) {
  return memo(instanceId, referendums => referendums.length ? combineLatest(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : of([]));
}
function _referendumInfo(instanceId, api) {
  return memo(instanceId, (index, info) => {
    const status = getStatus(info);
    return status ? api.derive.democracy.preimage(status.proposalHash).pipe(map(image => ({
      image,
      imageHash: status.proposalHash,
      index: api.registry.createType('ReferendumIndex', index),
      status
    }))) : of(null);
  });
}
function referendumsInfo(instanceId, api) {
  return memo(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap(infos => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map(infos => infos.filter(referendum => !!referendum))) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function sqrtElectorate(instanceId, api) {
  return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/democracy/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0











;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/elections/info.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // SeatHolder is current tuple is 2.x-era Substrate

function isSeatHolder(value) {
  return !Array.isArray(value);
}

function isCandidateTuple(value) {
  return Array.isArray(value);
}

function getAccountTuple(value) {
  return isSeatHolder(value) ? [value.who, value.stake] : value;
}

function getCandidate(value) {
  return isCandidateTuple(value) ? value[0] : value;
}

function sortAccounts([, balanceA], [, balanceB]) {
  return balanceB.cmp(balanceA);
}

function getConstants(api, elections) {
  return elections ? {
    candidacyBond: api.consts[elections].candidacyBond,
    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
    desiredSeats: api.consts[elections].desiredMembers,
    termDuration: api.consts[elections].termDuration,
    votingBond: api.consts[elections].votingBond
  } : {};
}

function getModules(api) {
  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'council') || ['council'];
  const elections = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : api.query.elections ? 'elections' : null;
  return [council, elections];
}
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */


function info_info(instanceId, api) {
  return memo(instanceId, () => {
    const [council, elections] = getModules(api);
    return (elections ? api.queryMulti([api.query[council].members, api.query[elections].candidates, api.query[elections].members, api.query[elections].runnersUp]) : combineLatest([api.query[council].members(), of([]), of([]), of([])])).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({ ...getConstants(api, elections),
      candidateCount: api.registry.createType('u32', candidates.length),
      candidates: candidates.map(getCandidate),
      members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(a => [a, api.registry.createType('Balance')]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
    })));
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/elections/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function mapResult([result, validators, heartbeats, numBlocks]) {
  validators.forEach((validator, index) => {
    const validatorId = validator.toString();
    const blockCount = numBlocks[index];
    const hasMessage = !heartbeats[index].isEmpty;
    const prev = result[validatorId];

    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
      result[validatorId] = {
        blockCount,
        hasMessage,
        isOnline: hasMessage || blockCount.gt(BN_ZERO)
      };
    }
  });
  return result;
}
/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */


function receivedHeartbeats(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$imOnline;

    return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({
      currentIndex,
      validators
    }) => combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), map(mapResult)) : of({});
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/imOnline/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/membership/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

const membership_members = members('membership');
const membership_hasProposals = hasProposals('membership');
const membership_proposal = proposal('membership');
const membership_proposalCount = proposalCount('membership');
const membership_proposalHashes = proposalHashes('membership');
const membership_proposals = proposals('membership');
const membership_prime = prime('membership');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/parachains/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function didUpdateToBool(didUpdate, id) {
  return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/parachains/info.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function parseActive(id, active) {
  const found = active.find(([paraId]) => paraId === id);

  if (found && found[1].isSome) {
    const [collatorId, retriable] = found[1].unwrap();
    return {
      collatorId,
      ...(retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      })
    };
  }

  return null;
}

function parseCollators(id, collatorQueue) {
  return collatorQueue.map(queue => {
    const found = queue.find(([paraId]) => paraId === id);
    return found ? found[1] : null;
  });
}

function info_parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
  if (info.isNone) {
    return null;
  }

  return {
    active: parseActive(id, active),
    didUpdate: didUpdateToBool(didUpdate, id),
    heads,
    id,
    info: {
      id,
      ...info.unwrap()
    },
    pendingSwapId: pendingSwap.unwrapOr(null),
    relayDispatchQueue,
    retryCollators: parseCollators(id, retryQueue),
    selectedCollators: parseCollators(id, selectedThreads)
  };
}

function parachains_info_info(instanceId, api) {
  return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => info_parse(api.registry.createType('ParaId', id), result))) : of(null));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/parachains/overview.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function overview_parse([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
  return ids.map((id, index) => ({
    didUpdate: didUpdateToBool(didUpdate, id),
    id,
    info: {
      id,
      ...infos[index].unwrapOr(null)
    },
    pendingSwapId: pendingSwaps[index].unwrapOr(null),
    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
  }));
}

function overview(instanceId, api) {
  return memo(instanceId, () => {
    var _api$query$registrar;

    return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap(paraIds => combineLatest([of(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), map(overview_parse)) : of([]);
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/parachains/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/session/indexes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // parse into Indexes

function indexes_parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
} // query based on latest


function queryStaking(api) {
  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
    const {
      index,
      start
    } = activeOpt.unwrapOrDefault();
    return indexes_parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);
  }));
} // query based on latest


function querySession(api) {
  return api.query.session.currentIndex().pipe(map(currentIndex => indexes_parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));
} // empty set when none is available


function indexes_empty(api) {
  return of(indexes_parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));
}

function indexes_indexes(instanceId, api) {
  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : indexes_empty(api));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/session/info.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */

function session_info_info(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(map(indexes => {
    var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;

    const sessionLength = ((_api$consts = api.consts) === null || _api$consts === void 0 ? void 0 : (_api$consts$babe = _api$consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType('u64', 1);
    const sessionsPerEra = ((_api$consts2 = api.consts) === null || _api$consts2 === void 0 ? void 0 : (_api$consts2$staking = _api$consts2.staking) === null || _api$consts2$staking === void 0 ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1);
    return { ...indexes,
      eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
      isEpoch: !!api.query.babe,
      sessionLength,
      sessionsPerEra
    };
  })));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/session/progress.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function withProgressField(field) {
  return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map(info => info[field])));
}

function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
  const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
  const sessionProgress = currentSlot.sub(epochStartSlot);
  const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
  return { ...info,
    eraProgress: api.registry.createType('BlockNumber', eraProgress),
    sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
  };
}

function queryAura(api) {
  return api.derive.session.info().pipe(map(info => ({ ...info,
    eraProgress: api.registry.createType('BlockNumber'),
    sessionProgress: api.registry.createType('BlockNumber')
  })));
}

function queryBabe(api) {
  return api.derive.session.info().pipe(switchMap(info => {
    var _api$query$staking;

    return combineLatest([of(info), // we may have no staking, but have babe (permissioned)
    (_api$query$staking = api.query.staking) !== null && _api$query$staking !== void 0 && _api$query$staking.erasStartSessionIndex ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])]);
  }), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
}
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */


function progress(instanceId, api) {
  return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
}
const eraLength = withProgressField('eraLength');
const eraProgress = withProgressField('eraProgress');
const sessionProgress = withProgressField('sessionProgress');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/session/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/society/candidates.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @description Get the candidate info for a society
 */
function candidates(instanceId, api) {
  return memo(instanceId, () => api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
    who
  }) => who))])), map(([candidates, suspended]) => candidates.map(({
    kind,
    value,
    who
  }, index) => ({
    accountId: who,
    isSuspended: suspended[index].isSome,
    kind,
    value
  })))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/society/info.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @description Get the overall info for a society
 */
function society_info_info(instanceId, api) {
  return memo(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
    bids,
    defender: defender.unwrapOr(undefined),
    founder: founder.unwrapOr(undefined),
    hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
    head: head.unwrapOr(undefined),
    maxMembers,
    pot
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/society/member.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @description Get the member info for a society
 */

function member(instanceId, api) {
  return memo(instanceId, accountId => api.derive.society._members([accountId]).pipe(map(([result]) => result)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/society/members.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function _members(instanceId, api) {
  return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
    accountId,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspended[index].isTrue,
    payouts: payouts[index],
    strikes: strikes[index],
    vote: defenderVotes[index].unwrapOr(undefined),
    vouching: vouching[index].unwrapOr(undefined)
  })))));
}
/**
 * @description Get the member info for a society
 */

function members_members(instanceId, api) {
  return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/society/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/account.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const QUERY_OPTS = {
  withDestination: true,
  withLedger: true,
  withNominations: true,
  withPrefs: true
};

function groupByEra(list) {
  return list.reduce((map, {
    era,
    value
  }) => {
    const key = era.toString();
    map[key] = (map[key] || BN_ZERO).add(value.unwrap());
    return map;
  }, {});
}

function calculateUnlocking(api, stakingLedger, sessionInfo) {
  const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
    era
  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
    remainingEras: new lib_bn(eraString).isub(sessionInfo.activeEra),
    value: api.registry.createType('Balance', value)
  }));
  return results.length ? results : undefined;
}

function redeemableSum(api, stakingLedger, sessionInfo) {
  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
    era,
    value
  }) => {
    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
  }, new lib_bn(0)));
}

function account_parseResult(api, sessionInfo, keys, query) {
  return { ...keys,
    ...query,
    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
  };
}
/**
 * @description From a list of stashes, fill in all the relevant staking details
 */


function accounts(instanceId, api) {
  return memo(instanceId, accountIds => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(([keys, queries]) => queries.map((q, index) => account_parseResult(api, sessionInfo, keys[index], q)))))));
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */

const account_account = firstMemo((api, accountId) => api.derive.staking.accounts([accountId]));
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/currentPoints.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @description Retrieve the staking overview, including elected and points earned
 */

function currentPoints(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({
    activeEra
  }) => api.query.staking.erasRewardPoints(activeEra))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/util/cacheImpl.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const mapCache = new Map();
const deriveMapCache = {
  del: key => {
    mapCache.delete(key);
  },
  forEach: cb => {
    for (const [k, v] of mapCache.entries()) {
      cb(k, v);
    }
  },
  get: key => {
    return mapCache.get(key);
  },
  set: (key, value) => {
    mapCache.set(key, value);
  }
};
const deriveNoopCache = {
  del: () => undefined,
  forEach: () => undefined,
  get: () => undefined,
  set: (_, value) => value
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/util/cache.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
let deriveCache;

function wrapCache(keyStart, cache) {
  return {
    del: partial => cache.del(`${keyStart}${partial}`),
    forEach: cache.forEach,
    get: partial => {
      const key = `${keyStart}${partial}`;
      const cached = cache.get(key);

      if (cached) {
        cached.x = Date.now();
        cache.set(key, cached);
        return cached.v;
      }

      return undefined;
    },
    set: (partial, v) => {
      cache.set(`${keyStart}${partial}`, {
        v,
        x: Date.now()
      });
    }
  };
}

function clearCache(cache) {
  // clear all expired values
  const now = Date.now();
  const all = [];
  cache.forEach((key, {
    x
  }) => {
    now - x > CHACHE_EXPIRY && all.push(key);
  }); // don't do delete inside loop, just in-case

  all.forEach(key => cache.del(key));
}

function setDeriveCache(prefix = '', cache) {
  deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : deriveNoopCache;

  if (cache) {
    clearCache(cache);
  }
}
setDeriveCache();

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/cache.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

function getEraCache(CACHE_KEY, era, withActive) {
  const cacheKey = `${CACHE_KEY}-${era.toString()}`;
  return [cacheKey, withActive ? undefined : deriveCache.get(cacheKey)];
}
function getEraMultiCache(CACHE_KEY, eras, withActive) {
  const cached = withActive ? [] : eras.map(e => deriveCache.get(`${CACHE_KEY}-${e.toString()}`)).filter(v => !!v);
  return cached;
}
function setEraCache(cacheKey, withActive, value) {
  !withActive && deriveCache.set(cacheKey, value);
  return value;
}
function setEraMultiCache(CACHE_KEY, withActive, values) {
  !withActive && values.forEach(v => deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
  return values;
}
function filterCachedEras(eras, cached, query) {
  return eras.map(e => cached.find(({
    era
  }) => e.eq(era)) || query.find(({
    era
  }) => e.eq(era)));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/array/chunk.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */
function arrayChunk(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  const output = Array(outputSize);

  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output[i] = array.slice(offset, offset + chunkSize);
  }

  return output;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/util.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



// only retrieve a maximum of 14 eras (84 / 6) at a time
// (This is not empirically calculated. Rather smaller sizes take longer
// time due to the serial nature, large sizes may tie up the RPCs)
const ERA_CHUNK_SIZE = 14;

function chunkEras(eras, fn) {
  const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
  let index = 0;
  const subject = new BehaviorSubject(chunked[index]);
  return subject.pipe(switchMap(fn), tap(() => {
    setTimeout(() => {
      index++;
      index === chunked.length ? subject.complete() : subject.next(chunked[index]);
    }, 0);
  }), toArray(), map(arrayFlatten));
}

function filterEras(eras, list) {
  return eras.filter(e => !list.some(({
    era
  }) => e.eq(era)));
}
function erasHistoricApply(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](e, withActive))));
}
function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](accountId, e, withActive))));
}
function singleEra(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, era => api.derive.staking[fn](era, true));
}
function combineEras(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, eras => combineLatest(eras.map(e => api.derive.staking[fn](e, withActive)))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasExposure.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




const CACHE_KEY = 'eraExposure';

function mapStakers(era, stakers) {
  const nominators = {};
  const validators = {};
  stakers.forEach(([key, exposure]) => {
    const validatorId = key.args[1].toString();
    validators[validatorId] = exposure;
    exposure.others.forEach(({
      who
    }, validatorIndex) => {
      const nominatorId = who.toString();
      nominators[nominatorId] = nominators[nominatorId] || [];
      nominators[nominatorId].push({
        validatorId,
        validatorIndex
      });
    });
  });
  return {
    era,
    nominators,
    validators
  };
}

function _eraExposure(instanceId, api) {
  return memo(instanceId, (era, withActive = false) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
    return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapStakers(era, r))));
  });
}
const eraExposure = singleEra('_eraExposure');
const _erasExposure = combineEras('_eraExposure');
const erasExposure = erasHistoricApply('_erasExposure');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasHistoric.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function erasHistoric(instanceId, api) {
  return memo(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe(map(([activeEraOpt, historyDepth]) => {
    const result = [];
    const max = historyDepth.toNumber();
    const activeEra = activeEraOpt.unwrapOrDefault().index;
    let lastEra = activeEra;

    while (lastEra.gte(BN_ZERO) && result.length < max) {
      if (lastEra !== activeEra || withActive === true) {
        result.push(api.registry.createType('EraIndex', lastEra));
      }

      lastEra = lastEra.sub(BN_ONE);
    } // go from oldest to newest


    return result.reverse();
  })));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasPoints.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0





const erasPoints_CACHE_KEY = 'eraPoints';

function mapValidators({
  individual
}) {
  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
    result[validatorId.toString()] = points;
    return result;
  }, {});
}

function mapPoints(eras, points) {
  return eras.map((era, index) => ({
    era,
    eraPoints: points[index].total,
    validators: mapValidators(points[index])
  }));
}

function _erasPoints(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }

    const cached = getEraMultiCache(erasPoints_CACHE_KEY, eras, withActive);
    const remaining = filterEras(eras, cached);
    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(p => filterCachedEras(eras, cached, setEraMultiCache(erasPoints_CACHE_KEY, withActive, mapPoints(remaining, p)))));
  });
}
const erasPoints = erasHistoricApply('_erasPoints');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasPrefs.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




const erasPrefs_CACHE_KEY = 'eraPrefs';

function mapPrefs(era, all) {
  const validators = {};
  all.forEach(([key, prefs]) => {
    validators[key.args[1].toString()] = prefs;
  });
  return {
    era,
    validators
  };
}

function _eraPrefs(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(erasPrefs_CACHE_KEY, era, withActive);
    return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
  });
}
const eraPrefs = singleEra('_eraPrefs');
const _erasPrefs = combineEras('_eraPrefs');
const erasPrefs = erasHistoricApply('_erasPrefs');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasRewards.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




const erasRewards_CACHE_KEY = 'eraRewards';

function mapRewards(eras, optRewards) {
  return eras.map((era, index) => ({
    era,
    eraReward: optRewards[index].unwrapOrDefault()
  }));
}

function _erasRewards(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }

    const cached = getEraMultiCache(erasRewards_CACHE_KEY, eras, withActive);
    const remaining = filterEras(eras, cached);

    if (!remaining.length) {
      return of(cached);
    }

    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(r => filterCachedEras(eras, cached, setEraMultiCache(erasRewards_CACHE_KEY, withActive, mapRewards(remaining, r)))));
  });
}
const erasRewards = erasHistoricApply('_erasRewards');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/erasSlashes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




const erasSlashes_CACHE_KEY = 'eraSlashes';

function mapSlashes(era, noms, vals) {
  const nominators = {};
  const validators = {};
  noms.forEach(([key, optBalance]) => {
    nominators[key.args[1].toString()] = optBalance.unwrap();
  });
  vals.forEach(([key, optRes]) => {
    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
  });
  return {
    era,
    nominators,
    validators
  };
}

function _eraSlashes(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(erasSlashes_CACHE_KEY, era, withActive);
    return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
  });
}
const eraSlashes = singleEra('_eraSlashes');
const _erasSlashes = combineEras('_eraSlashes');
const erasSlashes = erasHistoricApply('_erasSlashes');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/electedInfo.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



const DEFAULT_FLAGS = {
  withController: true,
  withExposure: true,
  withPrefs: true
};

function combineAccounts(nextElected, validators) {
  return arrayFlatten([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
}

function electedInfo(instanceId, api) {
  return memo(instanceId, (flags = DEFAULT_FLAGS) => api.derive.staking.validators().pipe(switchMap(({
    nextElected,
    validators
  }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map(info => ({
    info,
    nextElected,
    validators
  }))))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/keys.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function extractsIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
    sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
  };
}

const keys = firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
function keysMulti(instanceId, api) {
  return memo(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap(queuedKeys => {
    var _api$consts$session;

    return combineLatest([of(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(stashId => [api.consts.session.dedupKeyPrefix, stashId])) : api.query.session.nextKeys.multi(stashIds)]);
  }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/overview.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @description Retrieve the staking overview, including elected and points earned
 */

function overview_overview(instanceId, api) {
  return memo(instanceId, () => combineLatest([api.derive.session.indexes(), api.derive.staking.validators()]).pipe(map(([indexes, {
    nextElected,
    validators
  }]) => ({ ...indexes,
    nextElected,
    validators
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/ownExposure.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function _ownExposures(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(e => [api.query.staking.erasStakersClipped, [e, accountId]]), ...eras.map(e => [api.query.staking.erasStakers, [e, accountId]])]).pipe(map(all => eras.map((era, index) => ({
    clipped: all[index],
    era,
    exposure: all[eras.length + index]
  })))) : of([]));
}
const ownExposure = firstMemo((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
const ownExposures = erasHistoricApplyAccount('_ownExposures');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/ownSlashes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function _ownSlashes(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return memo(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(e => [api.query.staking.validatorSlashInEra, [e, accountId]]), ...eras.map(e => [api.query.staking.nominatorSlashInEra, [e, accountId]])]).pipe(map(values => eras.map((era, index) => ({
    era,
    total: values[index].isSome ? values[index].unwrap()[1] : values[index + eras.length].unwrapOrDefault()
  })))) : of([]));
}
const ownSlash = firstMemo((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
const ownSlashes = erasHistoricApplyAccount('_ownSlashes');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/query.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
  return {
    accountId: stashId,
    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
    exposure,
    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
    rewardDestination,
    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
    stashId,
    validatorPrefs
  };
}

function getLedgers(api, optIds, {
  withLedger = false
}) {
  const ids = optIds.filter(o => withLedger && !!o && o.isSome).map(o => o.unwrap());
  const emptyLed = api.registry.createType('Option<StakingLedger>');
  return (ids.length ? api.query.staking.ledger.multi(ids) : of([])).pipe(map(optLedgers => {
    let offset = -1;
    return optIds.map(o => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
  }));
}

function getStashInfo(api, stashIds, activeEra, {
  withController,
  withDestination,
  withExposure,
  withLedger,
  withNominations,
  withPrefs
}) {
  const emptyNoms = api.registry.createType('Option<Nominations>');
  const emptyRewa = api.registry.createType('RewardDestination');
  const emptyExpo = api.registry.createType('Exposure');
  const emptyPrefs = api.registry.createType('ValidatorPrefs');
  return combineLatest([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : of(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : of(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : of(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : of(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : of(stashIds.map(() => emptyExpo))]);
}

function getBatch(api, activeEra, stashIds, flags) {
  return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
} //

/**
 * @description From a stash, retrieve the controllerId and all relevant details
 */


const query = firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
function queryMulti(instanceId, api) {
  return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({
    activeEra
  }) => {
    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
    return getBatch(api, activeEra, stashIds, flags);
  })) : of([]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stakerExposure.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function _stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => {
    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
    return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({
      era,
      nominators: allNominators,
      validators: allValidators
    }) => {
      const isValidator = !!allValidators[stakerId];
      const validators = {};
      const nominating = allNominators[stakerId] || [];

      if (isValidator) {
        validators[stakerId] = allValidators[stakerId];
      } else if (nominating) {
        nominating.forEach(({
          validatorId
        }) => {
          validators[validatorId] = allValidators[validatorId];
        });
      }

      return {
        era,
        isEmpty: !Object.keys(validators).length,
        isValidator,
        nominating,
        validators
      };
    }))));
  });
}
function stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
const stakerExposure = firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stakerPoints.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function _stakerPoints(instanceId, api) {
  return memo(instanceId, (accountId, eras, withActive) => {
    const stakerId = api.registry.createType('AccountId', accountId).toString();
    return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({
      era,
      eraPoints,
      validators
    }) => ({
      era,
      eraPoints,
      points: validators[stakerId] || api.registry.createType('RewardPoint')
    }))));
  });
}
const stakerPoints = erasHistoricApplyAccount('_stakerPoints');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stakerPrefs.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function _stakerPrefs(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(e => [e, accountId])).pipe(map(all => all.map((validatorPrefs, index) => ({
    era: eras[index],
    validatorPrefs
  })))));
}
const stakerPrefs = erasHistoricApplyAccount('_stakerPrefs');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stakerRewards.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
  return exposures.map(({
    era,
    isEmpty,
    isValidator,
    nominating,
    validators: eraValidators
  }) => {
    const {
      eraPoints,
      validators: allValPoints
    } = erasPoints.find(p => p.era.eq(era)) || {
      eraPoints: BN_ZERO,
      validators: {}
    };
    const {
      eraReward
    } = erasRewards.find(r => r.era.eq(era)) || {
      eraReward: api.registry.createType('Balance')
    };
    const {
      validators: allValPrefs
    } = erasPrefs.find(p => p.era.eq(era)) || {
      validators: {}
    };
    const validators = {};
    const stakerId = stashId.toString();
    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
      var _allValPrefs$validato, _exposure$total;

      const valPoints = allValPoints[validatorId] || BN_ZERO;
      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;
      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;
      let avail = BN_ZERO;
      let value;

      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
        avail = eraReward.mul(valPoints).div(eraPoints);
        const valCut = valComm.mul(avail).div(BN_BILLION);
        let staked;

        if (validatorId === stakerId) {
          staked = exposure.own.unwrap();
        } else {
          const stakerExp = exposure.others.find(({
            who
          }) => who.eq(stakerId));
          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
        }

        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
      }

      validators[validatorId] = {
        total: api.registry.createType('Balance', avail),
        value: api.registry.createType('Balance', value)
      };
    });
    return {
      era,
      eraReward,
      isEmpty,
      isValidator,
      nominating,
      validators
    };
  });
}

function allUniqValidators(rewards) {
  return rewards.reduce(([all, perStash], rewards) => {
    const uniq = [];
    perStash.push(uniq);
    rewards.forEach(({
      validators
    }) => Object.keys(validators).forEach(validatorId => {
      if (!uniq.includes(validatorId)) {
        uniq.push(validatorId);

        if (!all.includes(validatorId)) {
          all.push(validatorId);
        }
      }
    }));
    return [all, perStash];
  }, [[], []]);
}

function removeClaimed(validators, queryValidators, reward) {
  const rm = [];
  Object.keys(reward.validators).forEach(validatorId => {
    const index = validators.indexOf(validatorId);

    if (index !== -1) {
      const valLedger = queryValidators[index].stakingLedger;

      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(e => reward.era.eq(e))) {
        rm.push(validatorId);
      }
    }
  });
  rm.forEach(validatorId => {
    delete reward.validators[validatorId];
  });
}

function filterRewards(eras, valInfo, {
  rewards,
  stakingLedger
}) {
  const filter = eras.filter(e => !stakingLedger.claimedRewards.some(s => s.eq(e)));
  const validators = valInfo.map(([v]) => v);
  const queryValidators = valInfo.map(([, q]) => q);
  return rewards.filter(({
    isEmpty
  }) => !isEmpty).filter(reward => {
    if (!filter.some(e => reward.era.eq(e))) {
      return false;
    }

    removeClaimed(validators, queryValidators, reward);
    return true;
  }).filter(({
    validators
  }) => Object.keys(validators).length !== 0).map(reward => ({ ...reward,
    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
  }));
}

function _stakerRewardsEras(instanceId, api) {
  return memo(instanceId, (eras, withActive = false) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
}
function _stakerRewards(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([api.derive.staking.queryMulti(accountIds, {
    withLedger: true
  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {
    const allRewards = queries.map(({
      stakingLedger,
      stashId
    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));

    if (withActive) {
      return of(allRewards);
    }

    const [allValidators, stashValidators] = allUniqValidators(allRewards);
    return api.derive.staking.queryMulti(allValidators, {
      withLedger: true
    }).pipe(map(queriedVals => queries.map(({
      stakingLedger
    }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {
      rewards: allRewards[index],
      stakingLedger
    }))));
  })));
}
const stakerRewards = firstMemo((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
}
function stakerRewardsMulti(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stakerSlashes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function _stakerSlashes(instanceId, api) {
  return memo(instanceId, (accountId, eras, withActive) => {
    const stakerId = api.registry.createType('AccountId', accountId).toString();
    return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({
      era,
      nominators,
      validators
    }) => ({
      era,
      total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
    }))));
  });
}
const stakerSlashes = erasHistoricApplyAccount('_stakerSlashes');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/stashes.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function onBondedEvent(api) {
  let current = Date.now();
  return api.query.system.events().pipe(map(events => {
    current = events.filter(({
      event,
      phase
    }) => {
      try {
        return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';
      } catch {
        return false;
      }
    }) ? Date.now() : current;
    return current;
  }), startWith(current), drr({
    skipTimeout: true
  }));
}
/**
 * @description Retrieve the list of all validator stashes
 */


function stashes(instanceId, api) {
  return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map(keys => keys.map(({
    args: [v]
  }) => v).filter(a => a))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/validators.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function nextElected(instanceId, api) {
  return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not
  // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
  switchMap(({
    currentEra
  }) => api.query.staking.erasStakers.keys(currentEra)), map(keys => keys.map(({
    args: [, accountId]
  }) => accountId))) : api.query.staking.currentElected());
}
/**
 * @description Retrieve latest list of validators
 */

function validators(instanceId, api) {
  return memo(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
  // in all actual real-world deployed chains, it does create some confusion for limited template chains
  combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(([validators, nextElected]) => ({
    nextElected: nextElected.length ? nextElected : validators,
    validators
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/waitingInfo.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


const waitingInfo_DEFAULT_FLAGS = {
  withController: true,
  withPrefs: true
};
function waitingInfo(instanceId, api) {
  return memo(instanceId, (flags = waitingInfo_DEFAULT_FLAGS) => combineLatest([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe(switchMap(([{
    nextElected
  }, stashes]) => {
    const elected = nextElected.map(a => a.toString());
    const waiting = stashes.filter(v => !elected.includes(v.toString()));
    return api.derive.staking.queryMulti(waiting, flags).pipe(map(info => ({
      info,
      waiting
    })));
  })));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/staking/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0






















;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/technicalCommittee/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

const technicalCommittee_members = members('technicalCommittee');
const technicalCommittee_hasProposals = hasProposals('technicalCommittee');
const technicalCommittee_proposal = proposal('technicalCommittee');
const technicalCommittee_proposalCount = proposalCount('technicalCommittee');
const technicalCommittee_proposalHashes = proposalHashes('technicalCommittee');
const technicalCommittee_proposals = proposals('technicalCommittee');
const technicalCommittee_prime = prime('technicalCommittee');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/treasury/proposals.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



function proposals_parseResult(api, {
  allIds,
  allProposals,
  approvalIds,
  councilProposals,
  proposalCount
}) {
  const approvals = [];
  const proposals = [];
  const councilTreasury = councilProposals.filter(({
    proposal
  }) => api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal));
  allIds.forEach((id, index) => {
    if (allProposals[index].isSome) {
      const council = councilTreasury.filter(({
        proposal
      }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.method.localeCompare(b.proposal.method));
      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
      const derived = {
        council,
        id,
        proposal: allProposals[index].unwrap()
      };

      if (isApproval) {
        approvals.push(derived);
      } else {
        proposals.push(derived);
      }
    }
  });
  return {
    approvals,
    proposalCount,
    proposals
  };
}

function retrieveProposals(api, proposalCount, approvalIds) {
  const proposalIds = [];
  const count = proposalCount.toNumber();

  for (let index = 0; index < count; index++) {
    if (!approvalIds.some(id => id.eqn(index))) {
      proposalIds.push(api.registry.createType('ProposalIndex', index));
    }
  }

  const allIds = [...proposalIds, ...approvalIds];
  return combineLatest([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : of([])]).pipe(map(([allProposals, councilProposals]) => proposals_parseResult(api, {
    allIds,
    allProposals,
    approvalIds,
    councilProposals,
    proposalCount
  })));
}
/**
 * @description Retrieve all active and approved treasury proposals, along with their info
 */


function treasury_proposals_proposals(instanceId, api) {
  return memo(instanceId, () => api.query.treasury ? combineLatest([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : of({
    approvals: [],
    proposalCount: api.registry.createType('ProposalIndex'),
    proposals: []
  }));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/treasury/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/tx/events.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


function events(instanceId, api) {
  return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.system.events()))]).pipe(map(([block, events]) => ({
    block,
    events
  }))));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/tx/constants.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

const FALLBACK_MAX_HASH_COUNT = 250; // default here to 5 min eras, adjusted based on the actual blocktime

const FALLBACK_PERIOD = new lib_bn(6 * 1000);
const MAX_FINALITY_LAG = new lib_bn(5);
const MORTAL_PERIOD = new lib_bn(5 * 60 * 1000);
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/tx/signingInfo.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe(map(({
    accountNonce
  }) => accountNonce));
}

function nextNonce(api, address) {
  var _api$rpc$system;

  return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}

function signingHeader(api) {
  return combineLatest([api.rpc.chain.getHeader().pipe(switchMap(header => // check for chains at genesis (until block 1 is produced, e.g. 6s), since
  // we do need to allow transactions at chain start (also dev/seal chains)
  header.parentHash.isEmpty ? of(header) // in the case of the current block, we use the parent to minimize the
  // impact of forks on the system, but not completely remove it
  : api.rpc.chain.getHeader(header.parentHash))), api.rpc.chain.getFinalizedHead().pipe(switchMap(hash => api.rpc.chain.getHeader(hash)))]).pipe(map(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized
  current.number.unwrap().sub(finalized.number.unwrap()).gt(MAX_FINALITY_LAG) ? current : finalized));
}

function signingInfo(_instanceId, api) {
  // no memo, we want to do this fresh on each run
  return (address, nonce, era) => combineLatest([// retrieve nonce if none was specified
  isUndefined(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval
  isUndefined(era) || isNumber(era) && era > 0 ? signingHeader(api) : of(null)]).pipe(map(([nonce, header]) => {
    var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;

    return {
      header,
      mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
      nonce
    };
  }));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/tx/index.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0


;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/derive.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0



















const derive = {
  accounts: accounts_namespaceObject,
  bagsList: bagsList_namespaceObject,
  balances: balances_namespaceObject,
  bounties: api_derive_bounties_namespaceObject,
  chain: api_derive_chain_namespaceObject,
  contracts: contracts_namespaceObject,
  council: council_namespaceObject,
  crowdloan: crowdloan_namespaceObject,
  democracy: democracy_namespaceObject,
  elections: elections_namespaceObject,
  imOnline: imOnline_namespaceObject,
  membership: membership_namespaceObject,
  parachains: parachains_namespaceObject,
  session: session_namespaceObject,
  society: society_namespaceObject,
  staking: staking_namespaceObject,
  technicalCommittee: technicalCommittee_namespaceObject,
  treasury: treasury_namespaceObject,
  tx: tx_namespaceObject
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/api-derive/bundle.js
// Copyright 2017-2022 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0




 // Enable derive only if some of these modules are available

const checks = {
  bagsList: {
    instances: ['bagsList'],
    methods: []
  },
  contracts: {
    instances: ['contracts'],
    methods: []
  },
  council: {
    instances: ['council'],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ['crowdloan'],
    methods: []
  },
  democracy: {
    instances: ['democracy'],
    methods: []
  },
  elections: {
    instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ['imOnline'],
    methods: []
  },
  membership: {
    instances: ['membership'],
    methods: []
  },
  parachains: {
    instances: ['parachains', 'registrar'],
    methods: []
  },
  session: {
    instances: ['session'],
    methods: []
  },
  society: {
    instances: ['society'],
    methods: []
  },
  staking: {
    instances: ['staking'],
    methods: ['erasRewardPoints']
  },
  technicalCommittee: {
    instances: ['technicalCommittee'],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ['treasury'],
    methods: []
  }
};

function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */

/** @internal */


function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys = Object.keys(api.query);
  const specName = api.runtimeVersion.specName.toString();

  const filterKeys = q => keys.includes(q);

  const filterInstances = q => getModuleInstances(api, specName, q).some(filterKeys);

  const filterMethods = all => m => all.some(q => keys.includes(q) && api.query[q][m]);

  const getKeys = s => Object.keys(derives[s]);

  const creator = (s, m) => derives[s][m](instanceId, api);

  const isIncluded = c => !checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);

  for (let i = 0; i < names.length; i++) {
    const name = names[i];
    isIncluded(name) && lazyDeriveSection(result, name, getKeys, creator);
  }

  return result;
} // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
// For now we just drop the custom derive typings

/** @internal */


function getAvailableDerives(instanceId, api, custom = {}) {
  return { ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom)
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/interfaces/jsonrpc.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


const jsonrpc = {};
Object.keys(interfaces_definitions_namespaceObject).forEach(s => Object.entries(interfaces_definitions_namespaceObject[s].rpc || {}).forEach(([method, def]) => {
  // allow for section overrides
  const section = def.aliasSection || s;

  if (!jsonrpc[section]) {
    jsonrpc[section] = {};
  }

  jsonrpc[section][method] = objectSpread({}, def, {
    isSubscription: !!def.pubsub,
    jsonrpc: `${section}_${method}`,
    method,
    section
  });
}));
/* harmony default export */ const interfaces_jsonrpc = (jsonrpc);
;// CONCATENATED MODULE: ./node_modules/@polkadot/rpc-core/bundle.js
// Copyright 2017-2022 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0






const bundle_l = logger('rpc-core');
const EMPTY_META = {
  fallback: undefined,
  modifier: {
    isOptional: true
  },
  type: {
    asMap: {
      linked: {
        isTrue: false
      }
    },
    isMap: false
  }
}; // utility method to create a nicely-formatted error

/** @internal */

function logErrorMessage(method, {
  params,
  type
}, error) {
  const inputs = params.map(({
    isOptional,
    name,
    type
  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
  bundle_l.error(`${method}(${inputs}): ${type}:: ${error.message}`);
}

function isTreatAsHex(key) {
  // :code is problematic - it does not have the length attached, which is
  // unlike all other storage entries where it is indeed properly encoded
  return ['0x3a636f6465'].includes(key.toHex());
}
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */


class RpcCore {
  #instanceId;
  #registryDefault;
  #getBlockRegistry;
  #getBlockHash;
  #storageCache = new Map();
  mapping = new Map();
  sections = [];
  /**
   * @constructor
   * Default constructor for the Api Object
   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
   */

  constructor(instanceId, registry, provider, userRpc = {}) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    assert(provider && isFunction(provider.send), 'Expected Provider to API create');
    this.#instanceId = instanceId;
    this.#registryDefault = registry;
    this.provider = provider;
    const sectionNames = Object.keys(interfaces_jsonrpc); // these are the base keys (i.e. part of jsonrpc)

    this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance

    this.addUserInterfaces(userRpc);
  }
  /**
   * @description Returns the connected status of a provider
   */


  get isConnected() {
    return this.provider.isConnected;
  }
  /**
   * @description Manually connect from the attached provider
   */


  connect() {
    return this.provider.connect();
  }
  /**
   * @description Manually disconnect from the attached provider
   */


  disconnect() {
    return this.provider.disconnect();
  }
  /**
   * @description Sets a registry swap (typically from Api)
   */


  setRegistrySwap(registrySwap) {
    this.#getBlockRegistry = memoize(registrySwap, {
      getInstanceId: () => this.#instanceId
    });
  }
  /**
   * @description Sets a function to resolve block hash from block number
   */


  setResolveBlockHash(resolveBlockHash) {
    this.#getBlockHash = memoize(resolveBlockHash, {
      getInstanceId: () => this.#instanceId
    });
  }

  addUserInterfaces(userRpc) {
    // add any extra user-defined sections
    this.sections.push(...Object.keys(userRpc).filter(k => !this.sections.includes(k)));

    for (let s = 0; s < this.sections.length; s++) {
      const section = this.sections[s];
      const defs = objectSpread({}, interfaces_jsonrpc[section], userRpc[section]);
      const methods = Object.keys(defs);

      for (let m = 0; m < methods.length; m++) {
        const method = methods[m];
        const def = defs[method];
        const jsonrpc = def.endpoint || `${section}_${method}`;

        if (!this.mapping.has(jsonrpc)) {
          const isSubscription = !!def.pubsub;

          if (!this[section]) {
            this[section] = {};
          }

          this.mapping.set(jsonrpc, objectSpread({}, def, {
            isSubscription,
            jsonrpc,
            method,
            section
          }));
          lazyMethod(this[section], method, () => isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def));
        }
      }
    }
  }

  _memomize(creator, def) {
    const memoOpts = {
      getInstanceId: () => this.#instanceId
    };
    const memoized = memoize(creator(true), memoOpts);
    memoized.raw = memoize(creator(false), memoOpts);
    memoized.meta = def;
    return memoized;
  }

  _formatResult(isScale, registry, blockHash, method, def, params, result) {
    return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
  }

  _createMethodSend(section, method, def) {
    const rpcName = def.endpoint || `${section}_${method}`;
    const hashIndex = def.params.findIndex(({
      isHistoric
    }) => isHistoric);
    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable

    const callWithRegistry = async (isScale, values) => {
      var _this$getBlockHash;

      const blockId = hashIndex === -1 ? null : values[hashIndex];
      const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber' ? await ((_this$getBlockHash = this.#getBlockHash) === null || _this$getBlockHash === void 0 ? void 0 : _this$getBlockHash.call(this, blockId)) : blockId;
      const {
        registry
      } = isScale && blockHash && this.#getBlockRegistry ? await this.#getBlockRegistry(u8aToU8a(blockHash)) : {
        registry: this.#registryDefault
      };

      const params = this._formatInputs(registry, null, def, values); // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied


      const result = await this.provider.send(rpcName, params.map(p => p.toJSON()), !!blockHash);
      return this._formatResult(isScale, registry, blockHash, method, def, params, result);
    };

    const creator = isScale => (...values) => {
      const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
      return new Observable_Observable(observer => {
        callWithRegistry(isScale, values).then(value => {
          observer.next(value);
          observer.complete();
        }).catch(error => {
          logErrorMessage(method, def, error);
          observer.error(error);
          observer.complete();
        });
        return () => {
          // delete old results from cache
          if (isScale) {
            var _memoized;

            (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
          } else {
            var _memoized2;

            (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.raw.unmemoize(...values);
          }
        };
      }).pipe(publishReplay(1), // create a Replay(1)
      isDelayed ? refCountDelay() // Unsubscribe after delay
      : refCount());
    };

    memoized = this._memomize(creator, def);
    return memoized;
  } // create a subscriptor, it subscribes once and resolves with the id as subscribe


  _createSubscriber({
    paramsJson,
    subName,
    subType,
    update
  }, errorHandler) {
    return new Promise((resolve, reject) => {
      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
        errorHandler(error);
        reject(error);
      });
    });
  }

  _createMethodSubscribe(section, method, def) {
    const [updateType, subMethod, unsubMethod] = def.pubsub;
    const subName = `${section}_${subMethod}`;
    const unsubName = `${section}_${unsubMethod}`;
    const subType = `${section}_${updateType}`;
    let memoized = null;

    const creator = isScale => (...values) => {
      return new Observable_Observable(observer => {
        // Have at least an empty promise, as used in the unsubscribe
        let subscriptionPromise = Promise.resolve(null);
        const registry = this.#registryDefault;

        const errorHandler = error => {
          logErrorMessage(method, def, error);
          observer.error(error);
        };

        try {
          const params = this._formatInputs(registry, null, def, values);

          const paramsJson = params.map(p => p.toJSON());

          const update = (error, result) => {
            if (error) {
              logErrorMessage(method, def, error);
              return;
            }

            try {
              observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
            } catch (error) {
              observer.error(error);
            }
          };

          subscriptionPromise = this._createSubscriber({
            paramsJson,
            subName,
            subType,
            update
          }, errorHandler);
        } catch (error) {
          errorHandler(error);
        } // Teardown logic


        return () => {
          // Delete from cache, so old results don't hang around
          if (isScale) {
            var _memoized3;

            (_memoized3 = memoized) === null || _memoized3 === void 0 ? void 0 : _memoized3.unmemoize(...values);
          } else {
            var _memoized4;

            (_memoized4 = memoized) === null || _memoized4 === void 0 ? void 0 : _memoized4.raw.unmemoize(...values);
          } // Unsubscribe from provider


          subscriptionPromise.then(subscriptionId => isNull(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
        };
      }).pipe(drr());
    };

    memoized = this._memomize(creator, def);
    return memoized;
  }

  _formatInputs(registry, blockHash, def, inputs) {
    const reqArgCount = def.params.filter(({
      isOptional
    }) => !isOptional).length;
    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;
    assert(inputs.length >= reqArgCount && inputs.length <= def.params.length, () => `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
    return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {
      blockHash
    }));
  }

  _formatOutput(registry, blockHash, method, rpc, params, result) {
    if (rpc.type === 'StorageData') {
      const key = params[0];
      return this._formatStorageData(registry, blockHash, key, result);
    } else if (rpc.type === 'StorageChangeSet') {
      const keys = params[0];
      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);
    } else if (rpc.type === 'Vec<StorageChangeSet>') {
      const mapped = result.map(({
        block,
        changes
      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten

      return method === 'queryStorageAt' ? mapped[0][1] : mapped;
    }

    return registry.createTypeUnsafe(rpc.type, [result], {
      blockHash
    });
  }

  _formatStorageData(registry, blockHash, key, value) {
    const isEmpty = isNull(value); // we convert to Uint8Array since it maps to the raw encoding, all
    // data will be correctly encoded (incl. numbers, excl. :code)

    const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
    return this._newType(registry, blockHash, key, input, isEmpty);
  }

  _formatStorageSet(registry, blockHash, keys, changes) {
    // For StorageChangeSet, the changes has the [key, value] mappings
    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values
    // one at a time, all based on the query types. Three values can be returned -
    //   - Codec - There is a valid value, non-empty
    //   - null - The storage key is empty

    return keys.reduce((results, key, index) => {
      results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
      return results;
    }, []);
  }

  _formatStorageSetEntry(registry, blockHash, key, changes, witCache, entryIndex) {
    const hexKey = key.toHex();
    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback
    //   - in the case of an array of values, fill the hole from the cache
    //   - if a single result value, don't fill - it is not an update hole
    //   - fallback to an empty option in all cases

    const value = isUndefined(found) ? witCache && this.#storageCache.get(hexKey) || null : found[1];
    const isEmpty = isNull(value);
    const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value); // store the retrieved result - the only issue with this cache is that there is no
    // clearing of it, so very long running processes (not just a couple of hours, longer)
    // will increase memory beyond what is allowed.

    this.#storageCache.set(hexKey, value);
    return this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
  }

  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
    // single return value (via state.getStorage), decode the value based on the
    // outputType that we have specified. Fallback to Raw on nothing
    const type = key.outputType || 'Raw';
    const meta = key.meta || EMPTY_META;
    const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;

    try {
      return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback // For old-style Linkage, we add an empty linkage at the end
      ? type.includes('Linkage<') ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {
        blockHash,
        isPedantic: true
      }) : input], {
        blockHash,
        isOptional: meta.modifier.isOptional,
        isPedantic: !meta.modifier.isOptional
      });
    } catch (error) {
      throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
    }
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bi/consts.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name _0n
 * @summary BigInt constant for 0.
 */

const consts_0n = x_bigint_BigInt(0);
/**
 * @name _1n
 * @summary BigInt constant for 1.
 */

const consts_1n = x_bigint_BigInt(1);
/**
 * @name _1Mn
 * @summary BigInt constant for 1,000,000.
 */

const _1Mn = x_bigint_BigInt(1000000);
/**
* @name _1Bn
* @summary BigInt constant for 1,000,000,000.
*/

const _1Bn = x_bigint_BigInt(1000000000);
/**
* @name _1Qn
* @summary BigInt constant for 1,000,000,000,000,000,000.
*/

const _1Qn = _1Bn * _1Bn;
/**
* @name _2pow53n
* @summary BigInt constant for MAX_SAFE_INTEGER
*/

const _2pow53n = x_bigint_BigInt(Number.MAX_SAFE_INTEGER);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

 // Adapted from https://github.com/pierrec/js-xxhash/blob/0504e76f3d31a21ae8528a7f590c7289c9e431d2/lib/xxhash64.js
//
// xxHash64 implementation in pure Javascript
// Copyright (C) 2016, Pierre Curto
// MIT license
//
// Changes made:
//   - converted to TypeScript
//   - uses native JS BigInt (no external dependencies)
//   - support only for Uint8Array inputs
//   - no constructor function, straight fill & digest
//   - update code removed, only called once, no streams

const P64_1 = x_bigint_BigInt('11400714785074694791');
const P64_2 = x_bigint_BigInt('14029467366897019727');
const P64_3 = x_bigint_BigInt('1609587929392839161');
const P64_4 = x_bigint_BigInt('9650029242287828579');
const P64_5 = x_bigint_BigInt('2870177450012600261'); // mask for a u64, all bits set

const U64 = x_bigint_BigInt('0xffffffffffffffff'); // various constants

const xxhash64_7n = x_bigint_BigInt(7);

const _11n = x_bigint_BigInt(11);

const _12n = x_bigint_BigInt(12);

const _16n = x_bigint_BigInt(16);

const _18n = x_bigint_BigInt(18);

const _23n = x_bigint_BigInt(23);

const _27n = x_bigint_BigInt(27);

const _29n = x_bigint_BigInt(29);

const _31n = x_bigint_BigInt(31);

const xxhash64_32n = x_bigint_BigInt(32);

const _33n = x_bigint_BigInt(33);

const _64n = x_bigint_BigInt(64);

const xxhash64_256n = x_bigint_BigInt(256);

function rotl(a, b) {
  const c = a & U64;
  return (c << b | c >> _64n - b) & U64;
}

function fromU8a(u8a, p, count) {
  const bigints = new Array(count);
  let offset = 0;

  for (let i = 0; i < count; i++, offset += 2) {
    bigints[i] = x_bigint_BigInt(u8a[p + offset] | u8a[p + 1 + offset] << 8);
  }

  let result = consts_0n;

  for (let i = count - 1; i >= 0; i--) {
    result = (result << _16n) + bigints[i];
  }

  return result;
}

function toU8a(h64) {
  const result = new Uint8Array(8);

  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % xxhash64_256n);
    h64 = h64 / xxhash64_256n;
  }

  return result;
}

function state(initSeed) {
  const seed = x_bigint_BigInt(initSeed);
  return {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
}

function init(state, input) {
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }

  const limit = input.length - 32;
  let p = 0;

  if (limit >= 0) {
    const adjustV = v => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);

    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }

  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }

  return state;
}

function xxhash64(input, initSeed) {
  const {
    seed,
    u8a,
    u8asize,
    v1,
    v2,
    v3,
    v4
  } = init(state(initSeed), input);
  let p = 0;
  let h64 = U64 & x_bigint_BigInt(input.length) + (input.length >= 32 ? ((((rotl(v1, consts_1n) + rotl(v2, xxhash64_7n) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v1 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);

  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
    p += 8;
  }

  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
    p += 4;
  }

  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * x_bigint_BigInt(u8a[p++]), _11n);
  }

  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  return toU8a(U64 & (h64 ^ h64 >> xxhash64_32n));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/xxhash/asU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





/**
 * @name xxhashAsU8a
 * @summary Creates a xxhash64 u8a from the input.
 * @description
 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { xxhashAsU8a } from '@polkadot/util-crypto';
 *
 * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
 * ```
 */
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a = u8aToU8a(data);

  if (!hasBigInt || !onlyJs && bundle_isReady()) {
    return twox(u8a, rounds);
  }

  const result = new Uint8Array(rounds * 8);

  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash64(u8a, seed).reverse(), seed * 8);
  }

  return result;
}
/**
 * @name xxhashAsHex
 * @description Creates a xxhash64 hex from the input.
 */

const xxhashAsHex = createAsHex(xxhashAsU8a);
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0



const DEFAULT_FN = data => xxhashAsU8a(data, 128);

const HASHERS = {
  Blake2_128: data => // eslint-disable-line camelcase
  blake2AsU8a(data, 128),
  Blake2_128Concat: data => // eslint-disable-line camelcase
  u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
  Blake2_256: data => // eslint-disable-line camelcase
  blake2AsU8a(data, 256),
  Identity: data => u8aToU8a(data),
  Twox128: data => xxhashAsU8a(data, 128),
  Twox256: data => xxhashAsU8a(data, 256),
  Twox64Concat: data => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
};
/** @internal */

function getHasher(hasher) {
  return HASHERS[hasher.type] || DEFAULT_FN;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0





const NO_RAW_ARGS = {
  args: [],
  hashers: [],
  keys: []
};
/** @internal */

function assertArgs({
  method,
  section
}, {
  args,
  keys
}) {
  assert(Array.isArray(args), () => `Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments`);
  assert(args.filter(filterDefined).length === keys.length, () => `Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
}
/** @internal */


function createKeyRawParts(registry, itemFn, {
  args,
  hashers,
  keys
}) {
  const extra = new Array(keys.length);

  for (let i = 0; i < keys.length; i++) {
    extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
  }

  return [[xxhashAsU8a(itemFn.prefix, 128), xxhashAsU8a(itemFn.method, 128)], extra];
}
/** @internal */

function createKeyInspect(registry, itemFn, args) {
  assertArgs(itemFn, args);
  const {
    meta
  } = itemFn;
  const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
  let types = [];

  if (meta.type.isMap) {
    const {
      hashers,
      key
    } = meta.type.asMap;
    types = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
  }

  const names = ['module', 'method'].concat(...args.args.map((_, i) => types[i]));
  return {
    inner: prefix.concat(...extra).map((v, i) => ({
      name: names[i],
      outer: [v]
    }))
  };
}
/** @internal */

function createKeyRaw(registry, itemFn, args) {
  const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
  return u8aConcat(...prefix, ...extra);
}
/** @internal */

function filterDefined(a) {
  return !isUndefined(a);
}
/** @internal */


function createKey(registry, itemFn, args) {
  assertArgs(itemFn, args); // always add the length prefix (underlying it is Bytes)

  return compactAddLength(createKeyRaw(registry, itemFn, args));
}
/** @internal */


function createStorageInspect(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  return (...args) => {
    if (type.isPlain) {
      return options.skipHashing ? {
        inner: [],
        name: 'wellKnown',
        outer: [u8aToU8a(options.key)]
      } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
    }

    const {
      hashers,
      key
    } = type.asMap;
    return hashers.length === 1 ? createKeyInspect(registry, itemFn, {
      args,
      hashers,
      keys: [key]
    }) : createKeyInspect(registry, itemFn, {
      args,
      hashers,
      keys: registry.lookup.getSiType(key).def.asTuple
    });
  };
}
/** @internal */


function createStorageFn(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  let cacheKey = null; // Can only have zero or one argument:
  //   - storage.system.account(address)
  //   - storage.timestamp.blockPeriod()
  // For higher-map queries the params are passed in as an tuple, [key1, key2]

  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }

      return cacheKey;
    }

    const {
      hashers,
      key
    } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, {
      args,
      hashers,
      keys: [key]
    }) : createKey(registry, itemFn, {
      args,
      hashers,
      keys: registry.lookup.getSiType(key).def.asTuple
    });
  };
}
/** @internal */


function createWithMeta(registry, itemFn, options) {
  const {
    meta,
    method,
    prefix,
    section
  } = itemFn;
  const storageFn = createStorageFn(registry, itemFn, options);
  storageFn.inspect = createStorageInspect(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = stringCamelCase(method);
  storageFn.prefix = prefix;
  storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
  // instances (e.g. collective) will not work since it is only matched on param meta

  storageFn.toJSON = () => objectSpread({
    storage: {
      method,
      prefix,
      section
    }
  }, meta.toJSON());

  return storageFn;
}
/** @internal */


function extendHeadMeta(registry, {
  meta: {
    docs,
    name,
    type
  },
  section
}, {
  method
}, iterFn) {
  // metadata with a fallback value using the type of the key, the normal
  // meta fallback only applies to actual entry values, create one for head
  const meta = registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
    docs,
    fallback: registry.createTypeUnsafe('Bytes', []),
    modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', [1]),
    // required
    name,
    type: registry.createTypeUnsafe('StorageEntryTypeLatest', [type.asMap.key, 0])
  }]);
  iterFn.meta = meta;

  const fn = (...args) => registry.createTypeUnsafe('StorageKey', [iterFn(...args), {
    method,
    section
  }]);

  fn.meta = meta;
  return fn;
}
/** @internal */


function extendPrefixedMap(registry, itemFn, storageFn) {
  const {
    meta: {
      type
    },
    method,
    section
  } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    assert(args.length === 0 || type.isMap && args.length < type.asMap.hashers.length, () => `Iteration ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);

    if (args.length) {
      if (type.isMap) {
        const {
          hashers,
          key
        } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new Raw(registry, createKeyRaw(registry, itemFn, {
          args,
          hashers: hashers.slice(0, args.length),
          keys: keysVec.slice(0, args.length)
        }));
      }
    }

    return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
/** @internal */


function createFunction(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);

  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }

  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];

  return storageFn;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/util.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0


function findSiPrimitive(registry, _prim) {
  const prim = _prim.toLowerCase();

  return registry.lookup.types.find(t => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}

function findSiType(registry, orig) {
  let portable = findSiPrimitive(registry, orig);

  if (!portable && orig === 'Bytes') {
    const u8 = findSiPrimitive(registry, 'u8');

    if (u8) {
      portable = registry.lookup.types.find(t => t.type.def.isSequence && t.type.def.asSequence.type.eq(u8.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
    }
  }

  if (!portable) {
    console.warn(`Unable to map ${orig} to a lookup index`);
  }

  return portable;
} // Small helper function to factorize code on this page.

/** @internal */


function createRuntimeFunction({
  method,
  prefix,
  section
}, key, {
  docs,
  type
}) {
  return registry => {
    var _findSiType;

    return createFunction(registry, {
      meta: registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
        docs: registry.createTypeUnsafe('Vec<Text>', [[docs]]),
        modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', ['Required']),
        name: registry.createTypeUnsafe('Text', [method]),
        toJSON: () => key,
        type: registry.createTypeUnsafe('StorageEntryTypeLatest', [{
          Plain: ((_findSiType = findSiType(registry, type)) === null || _findSiType === void 0 ? void 0 : _findSiType.id) || 0
        }])
      }]),
      method,
      prefix,
      section
    }, {
      key,
      skipHashing: true
    });
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

const prefix = 'Substrate';
const section = 'substrate';

function createSubstrateFn(method, key, meta) {
  return createRuntimeFunction({
    method,
    prefix,
    section
  }, key, meta);
}

const substrate_substrate = {
  changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
    docs: 'Changes trie configuration is stored under this key.',
    type: 'u32'
  }),
  childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
    docs: 'Prefix of child storage keys.',
    type: 'u32'
  }),
  code: createSubstrateFn('code', ':code', {
    docs: 'Wasm code of the runtime.',
    type: 'Bytes'
  }),
  extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
    docs: 'Current extrinsic index (u32) is stored under this key.',
    type: 'u32'
  }),
  heapPages: createSubstrateFn('heapPages', ':heappages', {
    docs: 'Number of wasm linear memory pages required for execution of the runtime.',
    type: 'u64'
  })
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */

function getStorage(registry) {
  const storage = {};
  const entries = Object.entries(substrate_substrate);

  for (let e = 0; e < entries.length; e++) {
    storage[entries[e][0]] = entries[e][1](registry);
  }

  return {
    substrate: storage
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/storage/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0





const VERSION_NAME = 'palletVersion';
const VERSION_KEY = ':__STORAGE_VERSION__:';
const VERSION_DOCS = {
  docs: 'Returns the current pallet version from storage',
  type: 'u16'
};
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars

function decorateStorage(registry, {
  pallets
}, _metaVersion) {
  const result = getStorage(registry);

  for (let i = 0; i < pallets.length; i++) {
    const {
      name,
      storage
    } = pallets[i];

    if (storage.isSome) {
      const section = stringCamelCase(name);
      const {
        items,
        prefix: _prefix
      } = storage.unwrap();

      const prefix = _prefix.toString();

      lazyMethod(result, section, () => lazyMethods({
        palletVersion: createRuntimeFunction({
          method: VERSION_NAME,
          prefix,
          section
        }, createKeyRaw(registry, {
          method: VERSION_KEY,
          prefix: name.toString()
        }, NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, meta => createFunction(registry, {
        meta,
        method: meta.name.toString(),
        prefix,
        section
      }, {}), objectNameToCamel));
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/types/metadata/decorate/index.js
// Copyright 2017-2022 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0







/**
 * Expands the metadata by decoration into consts, query and tx sections
 */

function expandMetadata(registry, metadata) {
  assert(metadata instanceof Metadata, 'You need to pass a valid Metadata instance to Decorated');
  const latest = metadata.asLatest;
  const version = metadata.version;
  return {
    consts: decorateConstants(registry, latest, version),
    errors: decorateErrors(registry, latest, version),
    events: decorateEvents(registry, latest, version),
    query: decorateStorage(registry, latest, version),
    registry,
    tx: decorateExtrinsics(registry, latest, version)
  };
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/filter.js


function filter(predicate, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
//# sourceMappingURL=filter.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/take.js



function take(count) {
    return count <= 0
        ?
            function () { return EMPTY; }
        : operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
//# sourceMappingURL=take.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js


function defaultIfEmpty(defaultValue) {
    return operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () {
            if (!hasValue) {
                subscriber.next(defaultValue);
            }
            subscriber.complete();
        }));
    });
}
//# sourceMappingURL=defaultIfEmpty.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js



function throwIfEmpty(errorFactory) {
    if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
    return operate(function (source, subscriber) {
        var hasValue = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            hasValue = true;
            subscriber.next(value);
        }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
    });
}
function defaultErrorFactory() {
    return new EmptyError();
}
//# sourceMappingURL=throwIfEmpty.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/first.js






function first(predicate, defaultValue) {
    var hasDefaultValue = arguments.length >= 2;
    return function (source) {
        return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
    };
}
//# sourceMappingURL=first.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mapTo.js

function mapTo(value) {
    return map(function () { return value; });
}
//# sourceMappingURL=mapTo.js.map
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/isKeyringPair.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

function isKeyringPair(account) {
  return isFunction(account.sign);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/logging.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

const logging_l = logger('api/util');
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/filterEvents.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

function filterEvents(txHash, {
  block: {
    extrinsics,
    header
  }
}, allEvents, status) {
  // extrinsics to hashes
  for (const [txIndex, x] of extrinsics.entries()) {
    if (x.hash.eq(txHash)) {
      return {
        events: allEvents.filter(({
          phase
        }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
        txIndex
      };
    }
  } // if we do get the block after finalized, it _should_ be there
  // only warn on filtering with isInBlock (finalization finalizes after)


  if (status.isInBlock) {
    const allHashes = extrinsics.map(x => x.hash.toHex());
    logging_l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
  }

  return {};
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/submittable/Result.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
const recordIdentity = record => record;

function filterAndApply(events, section, methods, onFound) {
  return events.filter(({
    event
  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
}

function getDispatchError({
  event: {
    data: [dispatchError]
  }
}) {
  return dispatchError;
}

function getDispatchInfo({
  event: {
    data,
    method
  }
}) {
  return method === 'ExtrinsicSuccess' ? data[0] : data[1];
}

function extractError(events = []) {
  return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
}

function extractInfo(events = []) {
  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
}

class SubmittableResult {
  constructor({
    dispatchError,
    dispatchInfo,
    events,
    internalError,
    status,
    txHash,
    txIndex
  }) {
    this.dispatchError = dispatchError || extractError(events);
    this.dispatchInfo = dispatchInfo || extractInfo(events);
    this.events = events || [];
    this.internalError = internalError;
    this.status = status;
    this.txHash = txHash;
    this.txIndex = txIndex;
  }

  get isCompleted() {
    return this.isError || this.status.isInBlock || this.status.isFinalized;
  }

  get isError() {
    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
  }

  get isFinalized() {
    return this.status.isFinalized;
  }

  get isInBlock() {
    return this.status.isInBlock;
  }

  get isWarning() {
    return this.status.isRetracted;
  }
  /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */


  filterRecords(section, method) {
    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
  }
  /**
   * @description Finds an EventRecord for the specified method & section
   */


  findRecord(section, method) {
    return this.filterRecords(section, method)[0];
  }
  /**
   * @description Creates a human representation of the output
   */


  toHuman(isExtended) {
    var _this$dispatchError, _this$dispatchInfo, _this$internalError;

    return {
      dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
      dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
      events: this.events.map(e => e.toHuman(isExtended)),
      internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),
      status: this.status.toHuman(isExtended)
    };
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/submittable/createClass.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable no-dupe-class-members */





const createClass_identity = input => input;

function makeEraOptions(api, registry, partialOptions, {
  header,
  mortalLength,
  nonce
}) {
  if (!header) {
    if (isNumber(partialOptions.era)) {
      // since we have no header, it is immortal, remove any option overrides
      // so we only supply the genesisHash and no era to the construction
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }

    return makeSignOptions(api, partialOptions, {
      nonce
    });
  }

  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createTypeUnsafe('ExtrinsicEra', [{
      current: header.number,
      period: partialOptions.era || mortalLength
    }]),
    nonce
  });
}

function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};

  if (isFunction(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = objectSpread({}, partialOptions);
  }

  return [options, statusCb];
}

function makeSignOptions(api, partialOptions, extras) {
  return objectSpread({
    blockHash: api.genesisHash,
    genesisHash: api.genesisHash
  }, partialOptions, extras, {
    runtimeVersion: api.runtimeVersion,
    signedExtensions: api.registry.signedExtensions,
    version: api.extrinsicType
  });
}

function optionsOrNonce(partialOptions = {}) {
  return isBn(partialOptions) || isNumber(partialOptions) ? {
    nonce: partialOptions
  } : partialOptions;
}

function createClass({
  api,
  apiType,
  blockHash,
  decorateMethod
}) {
  // an instance of the base extrinsic for us to extend
  const ExtrinsicBase = api.registry.createClass('Extrinsic');

  class Submittable extends ExtrinsicBase {
    #ignoreStatusCb;
    #transformResult = createClass_identity;

    constructor(registry, extrinsic) {
      super(registry, extrinsic, {
        version: api.extrinsicType
      });
      this.#ignoreStatusCb = apiType === 'rxjs';
    } // dry run an extrinsic


    dryRun(account, optionsOrHash) {
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
      } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call


      return decorateMethod(() => this.#observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
    } // calculate the payment info for this transaction (if signed and submitted)


    paymentInfo(account, optionsOrHash) {
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), blockHash || optionsOrHash));
      }

      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = isKeyringPair(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {
        // setup our options (same way as in signAndSend)
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
        const signOptions = makeSignOptions(api, eraOptions, {});
        return api.rpc.payment.queryInfo(this.isSigned ? api.tx(this).signFake(address, signOptions).toHex() : this.signFake(address, signOptions).toHex());
      })))();
    } // send with an immediate Hash result


    // send implementation for both immediate Hash and statusCb variants
    send(statusCb) {
      const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(isSubscription ? this.#observeSubscribe : this.#observeSend)(statusCb);
    }
    /**
     * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
     * @deprecated
     */


    sign(account, partialOptions) {
      super.sign(account, makeSignOptions(api, optionsOrNonce(partialOptions), {}));
      return this;
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */


    signAsync(account, partialOptions) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return decorateMethod(() => this.#observeSign(account, partialOptions).pipe(mapTo(this)))();
    } // signAndSend with an immediate Hash result


    // signAndSend implementation for all 3 cases above
    signAndSend(account, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(() => this.#observeSign(account, options).pipe(switchMap(info => isSubscription ? this.#observeSubscribe(info) : this.#observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    } // adds a transform to the result, applied before result is returned


    withResultTransform(transform) {
      this.#transformResult = transform;
      return this;
    }

    #observeSign = (account, partialOptions) => {
      const address = isKeyringPair(account) ? account.address : account.toString();
      const options = optionsOrNonce(partialOptions);
      return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {
        const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
        let updateId = -1;

        if (isKeyringPair(account)) {
          this.sign(account, eraOptions);
        } else {
          updateId = await this.#signViaSigner(address, eraOptions, signingInfo.header);
        }

        return {
          options: eraOptions,
          updateId
        };
      }));
    };
    #observeStatus = (txHash, status) => {
      if (!status.isFinalized && !status.isInBlock) {
        return of(this.#transformResult(new SubmittableResult({
          status,
          txHash
        })));
      }

      const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
      return api.derive.tx.events(blockHash).pipe(map(({
        block,
        events
      }) => this.#transformResult(new SubmittableResult({ ...filterEvents(txHash, block, events, status),
        status,
        txHash
      }))), catchError(internalError => of(this.#transformResult(new SubmittableResult({
        internalError,
        status,
        txHash
      })))));
    };
    #observeSend = info => {
      return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {
        this.#updateSigner(hash, info);
      }));
    };
    #observeSubscribe = info => {
      const txHash = this.hash;
      return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => this.#observeStatus(txHash, status)), tap(status => {
        this.#updateSigner(status, info);
      }));
    };
    #signViaSigner = async (address, options, header) => {
      const signer = options.signer || api.signer;
      assert(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
      const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {
        address,
        blockNumber: header ? header.number : 0,
        method: this.method
      })]);
      let result;

      if (isFunction(signer.signPayload)) {
        result = await signer.signPayload(payload.toPayload());
      } else if (isFunction(signer.signRaw)) {
        result = await signer.signRaw(payload.toRaw());
      } else {
        throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
      } // Here we explicitly call `toPayload()` again instead of working with an object
      // (reference) as passed to the signer. This means that we are sure that the
      // payload data is not modified from our inputs, but the signer


      super.addSignature(address, result.signature, payload.toPayload());
      return result.id;
    };
    #updateSigner = (status, info) => {
      if (info && info.updateId !== -1) {
        const {
          options,
          updateId
        } = info;
        const signer = options.signer || api.signer;

        if (signer && isFunction(signer.update)) {
          signer.update(updateId, status);
        }
      }
    };
  }

  return Submittable;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/submittable/createSubmittable.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
  const Submittable = createClass({
    api,
    apiType,
    blockHash,
    decorateMethod
  });
  return extrinsic => new Submittable(registry || api.registry, extrinsic);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/object/clear.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectClear
 * @summary Removes all the keys from the input object
 */
function objectClear(value) {
  const keys = Object.keys(value);

  for (let i = 0; i < keys.length; i++) {
    delete value[keys[i]];
  }

  return value;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/augmentObject.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

const augmentObject_l = logger('api/augment');

function logLength(type, values, and = []) {
  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
}

function logValues(type, values) {
  return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
} // log details to console


function warn(prefix, type, [added, removed]) {
  if (added.length || removed.length) {
    augmentObject_l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
  }
}

function findSectionExcludes(a, b) {
  return a.filter(s => !b.includes(s));
}

function findSectionIncludes(a, b) {
  return a.filter(s => b.includes(s));
}

function extractSections(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = Object.keys(dst);
  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
}

function findMethodExcludes(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes = [];

  for (let s = 0; s < dstSections.length; s++) {
    const section = dstSections[s];
    const srcMethods = Object.keys(src[section]);
    const dstMethods = Object.keys(dst[section]);
    excludes.push(...dstMethods.filter(m => !srcMethods.includes(m)).map(m => `${section}.${m}`));
  }

  return excludes;
}

function extractMethods(src, dst) {
  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
}

function lazySection(src, dst) {
  const creator = m => src[m];

  const methods = Object.keys(src);

  for (let i = 0; i < methods.length; i++) {
    const method = methods[i]; // We use hasOwnproperty here to only check for the existence of the key,
    // instead of reading dst[section][method] which will evaluate when already
    // set as a lazy value previously

    if (!Object.prototype.hasOwnProperty.call(dst, method)) {
      lazyMethod(dst, method, creator);
    }
  }
}
/**
 * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
 * already available, but rather just adds new missing items into the result object.
 * @internal
 */


function augmentObject(prefix, src, dst, fromEmpty = false) {
  fromEmpty && objectClear(dst); // NOTE: This part is slightly problematic since it will get the
  // values for at least all the sections and the names of the methods
  // (Since methods won't be decorated before lazy, this _may_ be ok)

  if (prefix && Object.keys(dst).length) {
    warn(prefix, 'modules', extractSections(src, dst));
    warn(prefix, 'calls', extractMethods(src, dst));
  }

  const sections = Object.keys(src);

  for (let i = 0; i < sections.length; i++) {
    const section = sections[i]; // We don't set here with a lazy interface, we decorate based
    // on the top-level structure (this bypasses adding lazy onto lazy)

    if (!dst[section]) {
      dst[section] = {};
    }

    lazySection(src[section], dst[section]);
  }

  return dst;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/decorate.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * This is a section decorator which keeps all type information.
 */
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys = s => Object.keys(derives[s]);

  const creator = (s, m) => decorateMethod(derives[s][m]);

  const result = {};
  const names = Object.keys(derives);

  for (let i = 0; i < names.length; i++) {
    lazyDeriveSection(result, names[i], getKeys, creator);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/util/validate.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0


function sig({
  lookup
}, {
  method,
  section
}, args) {
  return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;
} // sets up the arguments in the form of [creator, args] ready to be used in a storage
// call. Additionally, it verifies that the correct number of arguments have been passed


function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter(a => !isUndefined(a));

  if (creator.meta.type.isPlain) {
    assert(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
  } else {
    const {
      hashers,
      key
    } = creator.meta.type.asMap;
    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);
    assert(args.length === keys.length, () => `${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
  } // pass as tuple


  return [creator, args];
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/Events.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

class Events {
  #eventemitter = new eventemitter3();

  emit(type, ...args) {
    return this.#eventemitter.emit(type, ...args);
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  on(type, handler) {
    this.#eventemitter.on(type, handler);
    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */


  off(type, handler) {
    this.#eventemitter.removeListener(type, handler);
    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  once(type, handler) {
    this.#eventemitter.once(type, handler);
    return this;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/Decorate.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0












// the max amount of keys/values that we will retrieve at once
const Decorate_PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

const PAGE_SIZE_V = 250; // limited since the data may be very large (e.g. misfiring elections)

const Decorate_l = logger('api/init');
let instanceCounter = 0;

function getAtQueryFn(api, {
  method,
  section
}) {
  return assertReturn(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
}

class Decorate extends Events {
  #instanceId;
  #registry; // HACK Use BN import so decorateDerive works... yes, wtf.

  __phantom = new lib_bn(0);
  _consts = {};
  _errors = {};
  _events = {};
  _extrinsicType = 4; // latest extrinsic version

  _isReady = false;
  _query = {};
  _rx = {
    consts: {},
    query: {},
    tx: {}
  };

  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options, type, decorateMethod) {
    var _options$source;

    super();
    this.#instanceId = `${++instanceCounter}`;
    this.#registry = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new TypeRegistry();

    this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map(a => a.rx.query));

    this._rx.registry = this.#registry;
    const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new WsProvider();
    this._decorateMethod = decorateMethod;
    this._options = options;
    this._type = type; // The RPC interface decorates the known interfaces on init

    this._rpcCore = new RpcCore(this.#instanceId, this.#registry, thisProvider, this._options.rpc);
    this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
  }

  /**
   * @description Return the current used registry
   */
  get registry() {
    return this.#registry;
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createType(type, ...params) {
    return this.#registry.createType(type, ...params);
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */


  registerTypes(types) {
    types && this.#registry.register(types);
  }
  /**
   * @returns `true` if the API operates with subscriptions
   */


  get hasSubscriptions() {
    return this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @returns `true` if the API decorate multi-key queries
   */


  get supportMulti() {
    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
  }

  _emptyDecorated(registry, blockHash) {
    return {
      consts: {},
      errors: {},
      events: {},
      query: {},
      registry,
      rx: {
        query: {}
      },
      tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
    };
  }

  _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
    if (!decoratedApi) {
      decoratedApi = this._emptyDecorated(registry.registry, blockHash);
    }

    if (fromEmpty || !registry.decoratedMeta) {
      registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
    }

    const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);

    const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);

    augmentObject('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
    augmentObject('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
    augmentObject('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
    augmentObject('query', storage, decoratedApi.query, fromEmpty);
    augmentObject('query', storageRx, decoratedApi.rx.query, fromEmpty);

    decoratedApi.findCall = callIndex => findCall(registry.registry, callIndex);

    decoratedApi.findError = errorIndex => findError(registry.registry, errorIndex);

    decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
    return {
      decoratedApi,
      decoratedMeta: registry.decoratedMeta
    };
  }

  _injectMetadata(registry, fromEmpty = false) {
    // clear the decoration, we are redoing it here
    if (fromEmpty || !registry.decoratedApi) {
      registry.decoratedApi = this._emptyDecorated(registry.registry);
    }

    const {
      decoratedApi,
      decoratedMeta
    } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);

    this._consts = decoratedApi.consts;
    this._errors = decoratedApi.errors;
    this._events = decoratedApi.events;
    this._query = decoratedApi.query;
    this._rx.query = decoratedApi.rx.query;

    const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);

    const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);

    if (fromEmpty || !this._extrinsics) {
      this._extrinsics = tx;
      this._rx.tx = rxtx;
    } else {
      augmentObject('tx', tx, this._extrinsics, false);
      augmentObject(null, rxtx, this._rx.tx, false);
    }

    augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
    this.emit('decorated');
  }
  /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */


  injectMetadata(metadata, fromEmpty, registry) {
    this._injectMetadata({
      metadata,
      registry: registry || this.#registry,
      specName: this.#registry.createType('Text'),
      specVersion: BN_ZERO
    }, fromEmpty);
  }

  _decorateFunctionMeta(input, output) {
    output.meta = input.meta;
    output.method = input.method;
    output.section = input.section;
    output.toJSON = input.toJSON;

    if (input.callIndex) {
      output.callIndex = input.callIndex;
    }

    return output;
  } // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
  // manner to cater for both old and new:
  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
  //   - when non-zero, remove anything that is not in the array (we don't do this)


  _filterRpc(methods, additional) {
    // add any specific user-base RPCs
    if (Object.keys(additional).length !== 0) {
      this._rpcCore.addUserInterfaces(additional); // re-decorate, only adding any new additional interfaces


      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);

      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
    }

    this._filterRpcMethods(methods);
  }

  _filterRpcMethods(exposed) {
    const hasResults = exposed.length !== 0;
    const allKnown = [...this._rpcCore.mapping.entries()];
    const allKeys = [];

    for (let i = 0; i < allKnown.length; i++) {
      const [, {
        alias,
        endpoint,
        method,
        pubsub,
        section
      }] = allKnown[i];
      allKeys.push(`${section}_${method}`);

      if (pubsub) {
        allKeys.push(`${section}_${pubsub[1]}`);
        allKeys.push(`${section}_${pubsub[2]}`);
      }

      if (alias) {
        allKeys.push(...alias);
      }

      if (endpoint) {
        allKeys.push(endpoint);
      }
    }

    const filterKey = k => !allKeys.includes(k);

    const unknown = exposed.filter(filterKey);

    if (unknown.length) {
      Decorate_l.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
    } // loop through all entries we have (populated in decorate) and filter as required
    // only remove when we have results and method missing, or with no results if optional


    for (let i = 0; i < allKnown.length; i++) {
      const [k, {
        method,
        section
      }] = allKnown[i];

      if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
        if (this._rpc[section]) {
          delete this._rpc[section][method];
          delete this._rx.rpc[section][method];
        }
      }
    }
  }

  _decorateRpc(rpc, decorateMethod, input = {}) {
    const out = input;

    const decorateFn = (section, method) => {
      const source = rpc[section][method];
      const fn = decorateMethod(source, {
        methodName: method
      });
      fn.meta = source.meta;
      fn.raw = decorateMethod(source.raw, {
        methodName: method
      });
      return fn;
    };

    for (let s = 0; s < rpc.sections.length; s++) {
      const section = rpc.sections[s];

      if (!Object.prototype.hasOwnProperty.call(out, section)) {
        const methods = Object.keys(rpc[section]);

        const decorateInternal = method => decorateFn(section, method);

        for (let m = 0; m < methods.length; m++) {
          const method = methods[m]; //  skip subscriptions where we have a non-subscribe interface

          if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
            if (!Object.prototype.hasOwnProperty.call(out, section)) {
              out[section] = {};
            }

            lazyMethod(out[section], method, decorateInternal);
          }
        }
      }
    }

    return out;
  } // only be called if supportMulti is true


  _decorateMulti(decorateMethod) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return decorateMethod(calls => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(calls.map(args => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])));
  }

  _decorateMultiAt(atApi, decorateMethod, blockHash) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return decorateMethod(calls => this._rpcCore.state.queryStorageAt(calls.map(args => {
      if (Array.isArray(args)) {
        const {
          creator
        } = getAtQueryFn(atApi, args[0].creator);
        return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
      }

      return [getAtQueryFn(atApi, args.creator).creator];
    }), blockHash));
  }

  _decorateExtrinsics({
    tx
  }, decorateMethod) {
    const result = createSubmittable(this._type, this._rx, decorateMethod);

    const lazySection = section => lazyMethods({}, Object.keys(tx[section]), method => this._decorateExtrinsicEntry(tx[section][method], result));

    const sections = Object.keys(tx);

    for (let i = 0; i < sections.length; i++) {
      lazyMethod(result, sections[i], lazySection);
    }

    return result;
  }

  _decorateExtrinsicEntry(method, creator) {
    const decorated = (...params) => creator(method(...params)); // pass through the `.is`


    decorated.is = other => method.is(other); // eslint-disable-next-line @typescript-eslint/no-unsafe-return


    return this._decorateFunctionMeta(method, decorated);
  }

  _decorateStorage({
    query,
    registry
  }, decorateMethod, blockHash) {
    const result = {};

    const lazySection = section => lazyMethods({}, Object.keys(query[section]), method => blockHash ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash) : this._decorateStorageEntry(query[section][method], decorateMethod));

    const sections = Object.keys(query);

    for (let i = 0; i < sections.length; i++) {
      lazyMethod(result, sections[i], lazySection);
    }

    return result;
  }

  _decorateStorageEntry(creator, decorateMethod) {
    const getArgs = (args, registry) => extractStorageArgs(registry || this.#registry, creator, args);

    const getQueryAt = blockHash => from(this.at(blockHash)).pipe(map(api => getAtQueryFn(api, creator))); // Disable this where it occurs for each field we are decorating

    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    const decorated = this._decorateStorageCall(creator, decorateMethod);

    decorated.creator = creator;
    decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => q(...args))));
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));

    decorated.is = key => key.section === creator.section && key.method === creator.method;

    decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);

    decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));

    decorated.range = decorateMethod((range, ...args) => this._decorateStorageRange(decorated, args, range));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
    decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash)))); // .keys() & .entries() only available on map types

    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
      decorated.entriesAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapEntries(q.creator, blockHash, args)))));
      decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, undefined, opts)));
      decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
      decorated.keysAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapKeys(q.creator, blockHash, args)))));
      decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, undefined, opts)));
    }

    if (this.supportMulti && creator.meta.type.isMap) {
      // When using double map storage function, user need to pass double map key as an array
      decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]])) : this._retrieveMulti(args.map(a => [creator, a])));
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    return this._decorateFunctionMeta(creator, decorated);
  }

  _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
    const getArgs = args => extractStorageArgs(registry, creator, args); // Disable this where it occurs for each field we are decorating

    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
    decorated.creator = creator;
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));

    decorated.is = key => key.section === creator.section && key.method === creator.method;

    decorated.key = (...args) => u8aToHex(compactStripLength(creator(creator.meta.type.isPlain ? undefined : args))[1]);

    decorated.keyPrefix = (...keys) => u8aToHex(creator.keyPrefix(...keys));

    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash)); // .keys() & .entries() only available on map types

    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
      decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
      decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
      decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, blockHash, opts)));
    }

    if (this.supportMulti && creator.meta.type.isMap) {
      // When using double map storage function, user need to pass double map key as an array
      decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]]), blockHash) : this._retrieveMulti(args.map(a => [creator, a]), blockHash));
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    return this._decorateFunctionMeta(creator, decorated);
  } // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
  // we make a subscription, alternatively we push this through a single-shot query


  _decorateStorageCall(creator, decorateMethod) {
    return decorateMethod((...args) => {
      return this.hasSubscriptions ? this._rpcCore.state.subscribeStorage([extractStorageArgs(this.#registry, creator, args)]).pipe(map(([data]) => data) // extract first/only result from list
      ) : this._rpcCore.state.getStorage(extractStorageArgs(this.#registry, creator, args));
    }, {
      methodName: creator.method,
      overrideNoSub: (...args) => this._rpcCore.state.getStorage(extractStorageArgs(this.#registry, creator, args))
    });
  }

  _decorateStorageRange(decorated, args, range) {
    const outputType = unwrapStorageType(this.#registry, decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
    return this._rpcCore.state.queryStorage([decorated.key(...args)], ...range).pipe(map(result => result.map(([blockHash, [value]]) => [blockHash, this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)])));
  } // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes


  _retrieveMulti(keys, blockHash) {
    if (!keys.length) {
      return of([]);
    }

    const queryCall = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    return combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(k => blockHash ? queryCall(k, blockHash) : queryCall(k))).pipe(map(arrayFlatten));
  }

  _retrieveMapKeys({
    iterKey,
    meta,
    method,
    section
  }, at, args) {
    assert(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');
    const headKey = iterKey(...args).toHex();
    const startSubject = new BehaviorSubject(headKey);
    const getKeysPaged = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, Decorate_PAGE_SIZE_K, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, Decorate_PAGE_SIZE_K, startKey);

    const setMeta = key => key.setMeta(meta, section, method);

    return startSubject.pipe(switchMap(getKeysPaged), map(keys => keys.map(setMeta)), tap(keys => {
      setTimeout(() => {
        keys.length === Decorate_PAGE_SIZE_K ? startSubject.next(keys[Decorate_PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
      }, 0);
    }), toArray(), // toArray since we want to startSubject to be completed
    map(arrayFlatten));
  }

  _retrieveMapKeysPaged({
    iterKey,
    meta,
    method,
    section
  }, at, opts) {
    assert(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');

    const setMeta = key => key.setMeta(meta, section, method);

    const getKeysPaged = at ? headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
    return getKeysPaged(iterKey(...opts.args).toHex()).pipe(map(keys => keys.map(setMeta)));
  }

  _retrieveMapEntries(entry, at, args) {
    const queryStorageAt = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
    return this._retrieveMapKeys(entry, at, args).pipe(switchMap(keys => keys.length ? combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(queryStorageAt)).pipe(map(valsArr => arrayFlatten(valsArr).map((value, index) => [keys[index], value]))) : of([])));
  }

  _retrieveMapEntriesPaged(entry, at, opts) {
    const queryStorageAt = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
    return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap(keys => keys.length ? queryStorageAt(keys).pipe(map(valsArr => valsArr.map((value, index) => [keys[index], value]))) : of([])));
  }

  _decorateDeriveRx(decorateMethod) {
    var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;

    const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString(); // Pull in derive from api-derive

    const available = getAvailableDerives(this.#instanceId, this._rx, objectSpread({}, this._options.derives, (_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName || '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives));
    return decorateDeriveSections(decorateMethod, available);
  }

  _decorateDerive(decorateMethod) {
    return decorateDeriveSections(decorateMethod, this._rx.derive);
  }
  /**
   * Put the `this.onCall` function of ApiRx here, because it is needed by
   * `api._rx`.
   */


  _rxDecorateMethod = method => {
    return method;
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/Init.js


// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0






const KEEPALIVE_INTERVAL = 10000;
const Init_l = logger('api/init');

function textToString(t) {
  return t.toString();
}

var _healthTimer = /*#__PURE__*/_classPrivateFieldKey("healthTimer");

var _registries = /*#__PURE__*/_classPrivateFieldKey("registries");

var _updateSub = /*#__PURE__*/_classPrivateFieldKey("updateSub");

var _waitingRegistries = /*#__PURE__*/_classPrivateFieldKey("waitingRegistries");

var _onProviderConnect = /*#__PURE__*/_classPrivateFieldKey("onProviderConnect");

var _onProviderDisconnect = /*#__PURE__*/_classPrivateFieldKey("onProviderDisconnect");

var _onProviderError = /*#__PURE__*/_classPrivateFieldKey("onProviderError");

class Init extends Decorate {
  constructor(options, type, decorateMethod) {
    super(options, type, decorateMethod); // all injected types added to the registry for overrides

    Object.defineProperty(this, _onProviderError, {
      value: _onProviderError2
    });
    Object.defineProperty(this, _onProviderDisconnect, {
      value: _onProviderDisconnect2
    });
    Object.defineProperty(this, _onProviderConnect, {
      value: _onProviderConnect2
    });
    Object.defineProperty(this, _healthTimer, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _registries, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _updateSub, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _waitingRegistries, {
      writable: true,
      value: {}
    });
    this.registry.setKnownTypes(options); // We only register the types (global) if this is not a cloned instance.
    // Do right up-front, so we get in the user types before we are actually
    // doing anything on-chain, this ensures we have the overrides in-place

    if (!options.source) {
      this.registerTypes(options.types);
    } else {
      _classPrivateFieldBase(this, _registries)[_registries] = _classPrivateFieldBase(options.source, _registries)[_registries];
    }

    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);

    if (this.supportMulti) {
      this._queryMulti = this._decorateMulti(this._decorateMethod);
      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
    }

    this._rx.signer = options.signer;

    this._rpcCore.setRegistrySwap(blockHash => this.getBlockRegistry(blockHash));

    this._rpcCore.setResolveBlockHash(blockNumber => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));

    if (this.hasSubscriptions) {
      this._rpcCore.provider.on('disconnected', () => _classPrivateFieldBase(this, _onProviderDisconnect)[_onProviderDisconnect]());

      this._rpcCore.provider.on('error', e => _classPrivateFieldBase(this, _onProviderError)[_onProviderError](e));

      this._rpcCore.provider.on('connected', () => _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]());
    } else {
      Init_l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
    } // If the provider was instantiated earlier, and has already emitted a
    // 'connected' event, then the `on('connected')` won't fire anymore. To
    // cater for this case, we call manually `this._onProviderConnect`.


    if (this._rpcCore.provider.isConnected) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]();
    }
  }
  /**
   * @description Decorates a registry based on the runtime version
   */


  _initRegistry(registry, chain, version, metadata, chainProps) {
    registry.clearCache();
    registry.setChainProperties(chainProps || this.registry.getChainProperties());
    registry.setKnownTypes(this._options);
    registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
    registry.setHasher(getSpecHasher(registry, chain, version.specName)); // for bundled types, pull through the aliases defined

    if (registry.knownTypes.typesBundle) {
      registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
    }

    registry.setMetadata(metadata, undefined, objectSpread({}, getSpecExtensions(registry, chain, version.specName), this._options.signedExtensions));
  }
  /**
   * @description Returns the default versioned registry
   */


  _getDefaultRegistry() {
    return assertReturn(_classPrivateFieldBase(this, _registries)[_registries].find(({
      isDefault
    }) => isDefault), 'Initialization error, cannot find the default registry');
  }
  /**
   * @description Returns a decorated API instance at a specific point in time
   */


  async at(blockHash, knownVersion) {
    const u8aHash = u8aToU8a(blockHash);
    const registry = await this.getBlockRegistry(u8aHash, knownVersion); // always create a new decoration - since we are pointing to a specific hash, this
    // means that all queries needs to use that hash (not a previous one already existing)

    return this._createDecorated(registry, true, null, u8aHash).decoratedApi;
  }

  async _createBlockRegistry(blockHash, header, version) {
    const registry = new TypeRegistry(blockHash);
    const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));

    this._initRegistry(registry, this._runtimeChain, version, metadata); // add our new registry


    const result = {
      lastBlockHash: blockHash,
      metadata,
      registry,
      specName: version.specName,
      specVersion: version.specVersion
    };

    _classPrivateFieldBase(this, _registries)[_registries].push(result);

    return result;
  }

  _cacheBlockRegistryProgress(key, creator) {
    // look for waiting resolves
    let waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];

    if (isUndefined(waiting)) {
      // nothing waiting, construct new
      waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key] = new Promise((resolve, reject) => {
        creator().then(registry => {
          delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
          resolve(registry);
        }).catch(error => {
          delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
          reject(error);
        });
      });
    }

    return waiting;
  }

  _getBlockRegistryViaVersion(blockHash, version) {
    if (version) {
      // check for pre-existing registries. We also check specName, e.g. it
      // could be changed like in Westmint with upgrade from shell -> westmint
      const existingViaVersion = _classPrivateFieldBase(this, _registries)[_registries].find(({
        specName,
        specVersion
      }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));

      if (existingViaVersion) {
        existingViaVersion.lastBlockHash = blockHash;
        return existingViaVersion;
      }
    }

    return null;
  }

  async _getBlockRegistryViaHash(blockHash) {
    // ensure we have everything required
    assert(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain'); // We have to assume that on the RPC layer the calls used here does not call back into
    // the registry swap, so getHeader & getRuntimeVersion should not be historic

    const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash) ? {
      number: BN_ZERO,
      parentHash: this._genesisHash
    } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
    assert(!header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash'); // get the runtime version, either on-chain or via an known upgrade history

    const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
    const version = this.registry.createType('RuntimeVersionPartial', firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
      specName: this._runtimeVersion.specName,
      specVersion: firstVersion.specVersion
    } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
    return (// try to find via version
      this._getBlockRegistryViaVersion(blockHash, version) || ( // return new or in-flight result
      await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)))
    );
  }
  /**
   * @description Sets up a registry based on the block hash defined
   */


  async getBlockRegistry(blockHash, knownVersion) {
    return (// try to find via blockHash
      _classPrivateFieldBase(this, _registries)[_registries].find(({
        lastBlockHash
      }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
      this._getBlockRegistryViaVersion(blockHash, knownVersion) || ( // return new or in-flight result
      await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash)))
    );
  }

  async _loadMeta() {
    var _this$_options$source;

    // on re-connection to the same chain, we don't want to re-do everything from chain again
    if (this._isReady) {
      return true;
    }

    this._unsubscribeUpdates(); // only load from on-chain if we are not a clone (default path), alternatively
    // just use the values from the source instance provided


    [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
    return this._initFromMeta(this._runtimeMetadata);
  } // eslint-disable-next-line @typescript-eslint/require-await


  async _metaFromSource(source) {
    this._extrinsicType = source.extrinsicVersion;
    this._runtimeChain = source.runtimeChain;
    this._runtimeVersion = source.runtimeVersion; // manually build a list of all available methods in this RPC, we are
    // going to filter on it to align the cloned RPC without making a call

    const sections = Object.keys(source.rpc);
    const rpcs = [];

    for (let s = 0; s < sections.length; s++) {
      const section = sections[s];
      const methods = Object.keys(source.rpc[section]);

      for (let m = 0; m < methods.length; m++) {
        rpcs.push(`${section}_${methods[m]}`);
      }
    }

    this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));

    return [source.genesisHash, source.runtimeMetadata];
  } // subscribe to metadata updates, inject the types on changes


  _subscribeUpdates() {
    if (_classPrivateFieldBase(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
      return;
    }

    _classPrivateFieldBase(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap(version => {
      var _this$_runtimeVersion;

      return (// only retrieve the metadata when the on-chain version has been changed
        (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map(metadata => {
          Init_l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
          this._runtimeMetadata = metadata;
          this._runtimeVersion = version;
          this._rx.runtimeVersion = version; // update the default registry version

          const thisRegistry = this._getDefaultRegistry(); // setup the data as per the current versions


          thisRegistry.metadata = metadata;
          thisRegistry.specVersion = version.specVersion;

          this._initRegistry(this.registry, this._runtimeChain, version, metadata);

          this._injectMetadata(thisRegistry, true);

          return true;
        }))
      );
    })).subscribe();
  }

  async _metaFromChain(optMetadata) {
    const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([firstValueFrom(this._rpcCore.chain.getBlockHash(0)), firstValueFrom(this._rpcCore.state.getRuntimeVersion()), firstValueFrom(this._rpcCore.system.chain()), firstValueFrom(this._rpcCore.system.properties()), firstValueFrom(this._rpcCore.rpc.methods()), optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())]); // set our chain version & genesisHash as returned

    this._runtimeChain = chain;
    this._runtimeVersion = runtimeVersion;
    this._rx.runtimeVersion = runtimeVersion; // retrieve metadata, either from chain  or as pass-in via options

    const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
    const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata())); // initializes the registry & RPC

    this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);

    this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));

    this._subscribeUpdates(); // setup the initial registry, when we have none


    if (!_classPrivateFieldBase(this, _registries)[_registries].length) {
      _classPrivateFieldBase(this, _registries)[_registries].push({
        isDefault: true,
        metadata,
        registry: this.registry,
        specName: runtimeVersion.specName,
        specVersion: runtimeVersion.specVersion
      });
    } // get unique types & validate


    metadata.getUniqTypes(this._options.throwOnUnknown || false);
    return [genesisHash, metadata];
  }

  _initFromMeta(metadata) {
    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
    this._rx.extrinsicType = this._extrinsicType;
    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = this._runtimeVersion; // must be set here
    // inject metadata and adjust the types as detected

    this._injectMetadata(this._getDefaultRegistry(), true); // derive is last, since it uses the decorated rx


    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
    this._derive = this._decorateDerive(this._decorateMethod);
    return true;
  }

  _subscribeHealth() {
    // Only enable the health keepalive on WS, not needed on HTTP
    _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(() => {
      firstValueFrom(this._rpcCore.system.health()).catch(() => undefined);
    }, KEEPALIVE_INTERVAL) : null;
  }

  _unsubscribeHealth() {
    if (_classPrivateFieldBase(this, _healthTimer)[_healthTimer]) {
      clearInterval(_classPrivateFieldBase(this, _healthTimer)[_healthTimer]);
      _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = null;
    }
  }

  _unsubscribeUpdates() {
    if (_classPrivateFieldBase(this, _updateSub)[_updateSub]) {
      _classPrivateFieldBase(this, _updateSub)[_updateSub].unsubscribe();

      _classPrivateFieldBase(this, _updateSub)[_updateSub] = null;
    }
  }

  _unsubscribe() {
    this._unsubscribeHealth();

    this._unsubscribeUpdates();
  }

}

async function _onProviderConnect2() {
  this._isConnected.next(true);

  this.emit('connected');

  try {
    const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
    const hasMeta = await this._loadMeta();

    this._subscribeHealth();

    if (hasMeta && !this._isReady && cryptoReady) {
      this._isReady = true;
      this.emit('ready', this);
    }
  } catch (_error) {
    const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
    Init_l.error(error);
    this.emit('error', error);
  }
}

function _onProviderDisconnect2() {
  this._isConnected.next(false);

  this._unsubscribeHealth();

  this.emit('disconnected');
}

function _onProviderError2(error) {
  this.emit('error', error);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/Getters.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0





function assertResult(value) {
  return assertReturn(value, 'Api needs to be initialized before using, listen on \'ready\'');
}

class Getters extends Init {
  /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */
  get consts() {
    return assertResult(this._consts);
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */


  get derive() {
    return assertResult(this._derive);
  }
  /**
   * @description Errors from metadata
   */


  get errors() {
    return assertResult(this._errors);
  }
  /**
   * @description Events from metadata
   */


  get events() {
    return assertResult(this._events);
  }
  /**
   * @description  Returns the version of extrinsics in-use on this chain
   */


  get extrinsicVersion() {
    return this._extrinsicType;
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */


  get genesisHash() {
    return assertResult(this._genesisHash);
  }
  /**
   * @description true is the underlying provider is connected
   */


  get isConnected() {
    return this._isConnected.getValue();
  }
  /**
   * @description The library information name & version (from package.json)
   */


  get libraryInfo() {
    return `${packageInfo.name} v${packageInfo.version}`;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */


  get query() {
    return assertResult(this._query);
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */


  get queryMulti() {
    return assertResult(this._queryMulti);
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */


  get rpc() {
    return assertResult(this._rpc);
  }
  /**
   * @description Contains the chain information for the current node.
   */


  get runtimeChain() {
    return assertResult(this._runtimeChain);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */


  get runtimeMetadata() {
    return assertResult(this._runtimeMetadata);
  }
  /**
   * @description Contains the version information for the current runtime.
   */


  get runtimeVersion() {
    return assertResult(this._runtimeVersion);
  }
  /**
   * @description The underlying Rx API interface
   */


  get rx() {
    return assertResult(this._rx);
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */


  get type() {
    return this._type;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transfer(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */


  get tx() {
    return assertResult(this._extrinsics);
  }
  /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */


  findCall(callIndex) {
    return findCall(this.registry, callIndex);
  }
  /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */


  findError(errorIndex) {
    return findError(this.registry, errorIndex);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/base/index.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0


class ApiBase extends Getters {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options = {}, type, decorateMethod) {
    super(options, type, decorateMethod);
  }
  /**
   * @description Connect from the underlying provider, halting all network traffic
   */


  connect() {
    return this._rpcCore.connect();
  }
  /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */


  disconnect() {
    this._unsubscribe();

    return this._rpcCore.disconnect();
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */


  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Signs a raw signer payload, string or Uint8Array
   */


  async sign(address, data, {
    signer
  } = {}) {
    if (isString(address)) {
      const _signer = signer || this._rx.signer;

      assert(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
      return (await _signer.signRaw(objectSpread({
        type: 'bytes'
      }, data, {
        address
      }))).signature;
    }

    return u8aToHex(address.sign(u8aToU8a(data.data)));
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/promise/Combinator.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

class Combinator {
  #allHasFired = false;
  #callback;
  #fired = [];
  #fns = [];
  #isActive = true;
  #results = [];
  #subscriptions = [];

  constructor(fns, callback) {
    this.#callback = callback; // eslint-disable-next-line @typescript-eslint/require-await

    this.#subscriptions = fns.map(async (input, index) => {
      const [fn, ...args] = Array.isArray(input) ? input : [input];
      this.#fired.push(false);
      this.#fns.push(fn); // Not quite 100% how to have a variable number at the front here
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types

      return fn(...args, this._createCallback(index));
    });
  }

  _allHasFired() {
    this.#allHasFired || (this.#allHasFired = this.#fired.filter(hasFired => !hasFired).length === 0);
    return this.#allHasFired;
  }

  _createCallback(index) {
    return value => {
      this.#fired[index] = true;
      this.#results[index] = value;

      this._triggerUpdate();
    };
  }

  _triggerUpdate() {
    if (!this.#isActive || !isFunction(this.#callback) || !this._allHasFired()) {
      return;
    }

    try {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.#callback(this.#results);
    } catch (error) {// swallow, we don't want the handler to trip us up
    }
  }

  unsubscribe() {
    if (!this.#isActive) {
      return;
    }

    this.#isActive = false; // eslint-disable-next-line @typescript-eslint/no-misused-promises

    this.#subscriptions.forEach(async subscription => {
      try {
        const unsubscribe = await subscription;

        if (isFunction(unsubscribe)) {
          unsubscribe();
        }
      } catch (error) {// ignore
      }
    });
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/promise/decorateMethod.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0


// a Promise completion tracker, wrapping an isComplete variable that ensures
// that the promise only resolves once
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: error => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error);
      }

      return EMPTY;
    },
    resolve: value => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
} // extract the arguments and callback params from a value array possibly containing a callback

function extractArgs(args, needsCallback) {
  const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.
  // actualArgs will then hold the actual arguments to be passed to `method`

  const callback = args.length && isFunction(args[args.length - 1]) ? actualArgs.pop() : undefined; // When we need a subscription, ensure that a valid callback is actually passed

  assert(!needsCallback || isFunction(callback), 'Expected a callback to be passed with subscriptions');
  return [actualArgs, callback];
} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe


function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    // single result tracker - either reject with Error or resolve with Codec result
    const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves

    const subscription = method(...args).pipe(catchError(error => tracker.reject(error))).subscribe(result => {
      tracker.resolve(result);
      setTimeout(() => subscription.unsubscribe(), 0);
    });
  });
} // Decorate a subscription where we have a result callback specified


function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    // either reject with error or resolve with unsubscribe callback
    const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback

    const subscription = method(...args).pipe(catchError(error => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
      // queue result (back of queue to clear current)
      setTimeout(() => resultCb(result), 0);
    });
  });
}
/**
 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
 */


function toPromiseMethod(method, options) {
  const needsCallback = !!(options && options.methodName && options.methodName.includes('subscribe'));
  return function (...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/api/promise/Api.js
// Copyright 2017-2022 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * # @polkadot/api/promise
 *
 * ## Overview
 *
 * @name ApiPromise
 * @description
 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
 *
 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
 *
 * @see [[ApiRx]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * // initialise via static create
 * const api = await ApiPromise.create();
 *
 * // make a subscription to the network head
 * api.rpc.chain.subscribeNewHeads((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { ApiPromise, WsProvider } from '@polkadot/api';
 *
 * // initialise a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialise via isReady & new with specific provider
 * const api = await new ApiPromise({ provider }).isReady;
 *
 * // retrieve the block target time
 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
 * let last = 0;
 *
 * // subscribe to the current block timestamp, updates automatically (callback provided)
 * api.query.timestamp.now((timestamp) => {
 *   const elapsed = last
 *     ? `, ${timestamp.toNumber() - last}s since last`
 *     : '';
 *
 *   last = timestamp.toNumber();
 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
 * });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * ApiPromise.create().then((api) => {
 *   const [nonce] = await api.query.system.account(keyring.alice.address);
 *
 *   api.tx.balances
 *     // create transfer
 *     transfer(keyring.bob.address, 12345)
 *     // sign the transcation
 *     .sign(keyring.alice, { nonce })
 *     // send the transaction (optional status callback)
 *     .send((status) => {
 *       console.log(`current status ${status.type}`);
 *     })
 *     // retrieve the submitted extrinsic hash
 *     .then((hash) => {
 *       console.log(`submitted with hash ${hash}`);
 *     });
 * });
 * ```
 */

class ApiPromise extends ApiBase {
  #isReadyPromise;
  #isReadyOrErrorPromise;
  /**
   * @description Creates an instance of the ApiPromise class
   * @param options Options to create an instance. This can be either [[ApiOptions]] or
   * an [[WsProvider]].
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * new Api().isReady.then((api) => {
   *   api.rpc.subscribeNewHeads((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * });
   * ```
   */

  constructor(options) {
    super(options, 'promise', toPromiseMethod);
    this.#isReadyPromise = new Promise(resolve => {
      super.once('ready', () => resolve(this));
    });
    this.#isReadyOrErrorPromise = new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      super.once('ready', () => tracker.resolve(this));
      super.once('error', error => tracker.reject(error));
    });
  }
  /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */


  static create(options) {
    const instance = new ApiPromise(options);

    if (options && options.throwOnConnect) {
      return instance.isReadyOrError;
    } // Swallow any rejections on isReadyOrError
    // (in Node 15.x this creates issues, when not being looked at)


    instance.isReadyOrError.catch(() => {// ignore
    });
    return instance.isReady;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */


  get isReady() {
    return this.#isReadyPromise;
  }
  /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */


  get isReadyOrError() {
    return this.#isReadyOrErrorPromise;
  }
  /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */


  clone() {
    return new ApiPromise(objectSpread({}, this._options, {
      source: this
    }));
  }
  /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async combineLatest(fns, callback) {
    const combinator = new Combinator(fns, callback);
    return () => {
      combinator.unsubscribe();
    };
  }

}
;// CONCATENATED MODULE: ./src/background/network.js



class WikaNetwork {

    constructor() {
        this.type = null ;
        this.endpoint = null ;
        this.api = null ;
    }

    connect = (type, endpoint, callback) => {
        let self = this ;
        self.type = null ;
        self.endpoint = null ;
        self.api = null ;
        self.wsProvider = new WsProvider(endpoint) ;
        return ApiPromise.create({ provider: self.wsProvider })
            .then((api) => {
                self.type = type ;
                self.endpoint = endpoint ;
                self.api = api ;
                callback() ;
            }) ;
    }

    getReady = () => {
        return (this.api != null) ;
    }

    disconnect = (callback) => {
        return this.api.disconnect().then(callback) ;
    }

    getBalance = (address, callback) => {
        return this.api.query.system.account(address, callback) ;
    }

    getUrl = (url, callback) => {
        return this.api.query.likes.urls(url, callback) ;
    }

    getLike = (address, url, callback) => {
        return this.api.query.likes.likes(address, url, callback) ;
    }

    getLikePrice = (callback) => {
        return this.api.query.likes.likePrice(callback) ;
    }

    getOwnersRequestPrice = (callback) => {
        return this.api.query.owners.requestPrice(callback) ;
    }

    getUrlOwner = (url, callback) => {
        return this.api.query.owners.owners(url, callback) ;
    }

    getOwnerRequest = (url, callback) => {
        return this.api.query.owners.requests(url, callback) ;
    }

    getOwnerResult = (url, callback) => {
        return this.api.query.owners.results(url, callback) ;
    }

    getBlockNumber = (callback) => {
        return this.api.query.system.number(callback) ;
    }

    getUrlInfo = (address, url, callback) => {
        Promise.all([this.api.query.likes.urls(url),this.api.query.likes.likes(address, url)])
            .then((result) => {
                let ans = {
                    urlLikes: Number(result[0][0]),
                    likesSubmittedAt: Number(result[1][0]),
                    likesSubmittedCount:Number(result[1][1]),
                    likesSubmittedRemaining:Number(result[1][2])
                } ;
                callback(ans) ;
            }) ;
    }

    txLike = (url, referrer, numLikes) => {
        return this.api.tx.likes.like(url, referrer, numLikes) ;
    }

    txOwnerRequest = (url) => {
        return this.api.tx.owners.requestUrlCheck(url) ;
    }

}

/* harmony default export */ const network = (WikaNetwork);
// EXTERNAL MODULE: ./node_modules/crypto-js/aes.js
var aes = __webpack_require__(452);
// EXTERNAL MODULE: ./node_modules/crypto-js/enc-utf8.js
var enc_utf8 = __webpack_require__(743);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/empty.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aEmpty
 * @summary Tests for a `Uint8Array` for emptyness
 * @description
 * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
 */
function u8aEmpty(value) {
  // on smaller values < 64 bytes, the byte-by-byte compare is faster than
  // allocating yet another object for DataView (on large buffers the DataView
  // is much faster)
  for (let i = 0; i < value.length; i++) {
    if (value[i]) {
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/pair/fromSeed.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name secp256k1PairFromSeed
 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 */

function secp256k1PairFromSeed(seed, onlyJs) {
  assert(seed.length === 32, 'Expected valid 32-byte private key as a seed');

  if (!hasBigInt || !onlyJs && bundle_isReady()) {
    const full = secp256k1FromSeed(seed);
    const publicKey = full.slice(32); // There is an issue with the secp256k1 when running in an ASM.js environment where
    // it seems that the lazy static section yields invalid results on the _first_ run.
    // If this happens, fail outright, we cannot allow invalid return values
    // https://github.com/polkadot-js/wasm/issues/307

    assert(!u8aEmpty(publicKey), 'Invalid publicKey generated from WASM interface');
    return {
      publicKey,
      secretKey: full.slice(0, 32)
    };
  }

  return {
    publicKey: getPublicKey(seed, true),
    secretKey: seed
  };
}
// EXTERNAL MODULE: ./node_modules/tweetnacl/nacl-fast.js
var nacl_fast = __webpack_require__(780);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ed25519/pair/fromSeed.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name ed25519PairFromSeed
 * @summary Creates a new public/secret keypair from a seed.
 * @description
 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519PairFromSeed } from '@polkadot/util-crypto';
 *
 * ed25519PairFromSeed(...); // => { secretKey: [...], publicKey: [...] }
 * ```
 */

function ed25519PairFromSeed(seed, onlyJs) {
  if (!onlyJs && bundle_isReady()) {
    const full = ed25519KeypairFromSeed(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }

  return nacl_fast.sign.keyPair.fromSeed(seed);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/pair/fromU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

const SEC_LEN = 64;
const PUB_LEN = 32;
const TOT_LEN = SEC_LEN + PUB_LEN;
function sr25519PairFromU8a(full) {
  const fullU8a = u8aToU8a(full);
  assert(fullU8a.length === TOT_LEN, () => `Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
  return {
    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
    secretKey: fullU8a.slice(0, SEC_LEN)
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/pair/fromSeed.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name sr25519PairFromSeed
 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 */

function sr25519PairFromSeed(seed) {
  const seedU8a = u8aToU8a(seed);
  assert(seedU8a.length === 32, () => `Expected a seed matching 32 bytes, found ${seedU8a.length}`);
  return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/base64/bs64.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const bs64_config = {
  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
  coder: base/* base64 */.US,
  type: 'base64'
};
/**
 * @name base64Validate
 * @summary Validates a base64 value.
 * @description
 * Validates that the supplied value is valid base64
 */

const base64Validate = createValidate(bs64_config);
/**
 * @name isBase64
 * @description Checks if the input is in base64, returning true/false
 */

const isBase64 = createIs(base64Validate);
/**
 * @name base64Decode
 * @summary Decodes a base64 value.
 * @description
 * From the provided input, decode the base64 and return the result as an `Uint8Array`.
 */

const bs64_base64Decode = createDecode(bs64_config, base64Validate);
/**
 * @name base64Encode
 * @summary Creates a base64 value.
 * @description
 * From the provided input, create the base64 and return the result as a string.
 */

const base64Encode = createEncode(bs64_config);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/DeriveJunction.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



const RE_NUMBER = /^\d+$/;
const JUNCTION_ID_LEN = 32;
class DeriveJunction {
  #chainCode = new Uint8Array(32);
  #isHard = false;

  static from(value) {
    const result = new DeriveJunction();
    const [code, isHard] = value.startsWith('/') ? [value.substring(1), true] : [value, false];
    result.soft(RE_NUMBER.test(code) ? new lib_bn(code, 10) : code);
    return isHard ? result.harden() : result;
  }

  get chainCode() {
    return this.#chainCode;
  }

  get isHard() {
    return this.#isHard;
  }

  get isSoft() {
    return !this.#isHard;
  }

  hard(value) {
    return this.soft(value).harden();
  }

  harden() {
    this.#isHard = true;
    return this;
  }

  soft(value) {
    if (isNumber(value) || isBn(value) || isBigInt(value)) {
      return this.soft(bnToU8a(value, BN_LE_256_OPTS));
    } else if (isHex(value)) {
      return this.soft(hexToU8a(value));
    } else if (isString(value)) {
      return this.soft(compactAddLength(stringToU8a(value)));
    } else if (value.length > JUNCTION_ID_LEN) {
      return this.soft(blake2AsU8a(value));
    }

    this.#chainCode.fill(0);
    this.#chainCode.set(value, 0);
    return this;
  }

  soften() {
    this.#isHard = false;
    return this;
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/extractPath.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const RE_JUNCTION = /\/(\/?)([^/]+)/g;

/**
 * @description Extract derivation junctions from the supplied path
 */
function keyExtractPath(derivePath) {
  const parts = derivePath.match(RE_JUNCTION);
  const path = [];
  let constructed = '';

  if (parts) {
    constructed = parts.join('');

    for (const p of parts) {
      path.push(DeriveJunction.from(p.substring(1)));
    }
  }

  assert(constructed === derivePath, () => `Re-constructed path "${constructed}" does not match input`);
  return {
    parts,
    path
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/extractSuri.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
/**
 * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).
 */

function keyExtractSuri(suri) {
  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
  const matches = suri.match(RE_CAPTURE);
  assert(!isNull(matches), 'Unable to match provided value to a secret URI');
  const [, phrase,, derivePath,,, password] = matches;
  const {
    path
  } = keyExtractPath(derivePath);
  return {
    derivePath,
    password,
    path,
    phrase
  };
}
;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/hmac.js

// HMAC (RFC 2104)
class HMAC extends Hash {
    constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        assertHash(hash);
        const key = toBytes(_key);
        this.iHash = hash.create();
        if (!(this.iHash instanceof Hash))
            throw new TypeError('Expected instance of class which extends utils.Hash');
        const blockLen = (this.blockLen = this.iHash.blockLen);
        this.outputLen = this.iHash.outputLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length !== this.outputLen)
            throw new Error('HMAC: Invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */
const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/pbkdf2.js

// prettier-ignore

// Common prologue and epilogue for sync/async functions
function pbkdf2Init(hash, _password, _salt, _opts) {
    assertHash(hash);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    assertNumber(c);
    assertNumber(dkLen);
    assertNumber(asyncTick);
    if (c < 1)
        throw new Error('PBKDF2: iterations (c) should be >= 1');
    const password = toBytes(_password);
    const salt = toBytes(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = hmac.create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
        prfW.destroy();
    u.fill(0);
    return DK;
}
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */
function pbkdf2_pbkdf2(hash, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = utils_createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
async function pbkdf2Async(hash, password, salt, opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await asyncLoop(c - 1, asyncTick, (i) => {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/_sha2.js

// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = utils_createView(this.buffer);
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        const { view, buffer, blockLen, finished } = this;
        if (finished)
            throw new Error('digest() was already called');
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = utils_createView(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length < this.outputLen)
            throw new Error('_Sha2: Invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // NOTE: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64bit of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = utils_createView(out);
        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}

;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/sha512.js



// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(n => BigInt(n)));
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = new Uint32Array(80);
const SHA512_W_L = new Uint32Array(80);
class SHA512 extends SHA2 {
    constructor() {
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x6a09e667 | 0;
        this.Al = 0xf3bcc908 | 0;
        this.Bh = 0xbb67ae85 | 0;
        this.Bl = 0x84caa73b | 0;
        this.Ch = 0x3c6ef372 | 0;
        this.Cl = 0xfe94f82b | 0;
        this.Dh = 0xa54ff53a | 0;
        this.Dl = 0x5f1d36f1 | 0;
        this.Eh = 0x510e527f | 0;
        this.El = 0xade682d1 | 0;
        this.Fh = 0x9b05688c | 0;
        this.Fl = 0x2b3e6c1f | 0;
        this.Gh = 0x1f83d9ab | 0;
        this.Gl = 0xfb41bd6b | 0;
        this.Hh = 0x5be0cd19 | 0;
        this.Hl = 0x137e2179 | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
            const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
            const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
            const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
            const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = add3L(T1l, sigma0l, MAJl);
            Ah = add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
class SHA512_256 extends SHA512 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x22312194 | 0;
        this.Al = 0xfc2bf72c | 0;
        this.Bh = 0x9f555fa3 | 0;
        this.Bl = 0xc84c64c2 | 0;
        this.Ch = 0x2393b86b | 0;
        this.Cl = 0x6f53b151 | 0;
        this.Dh = 0x96387719 | 0;
        this.Dl = 0x5940eabd | 0;
        this.Eh = 0x96283ee2 | 0;
        this.El = 0xa88effe3 | 0;
        this.Fh = 0xbe5e1e25 | 0;
        this.Fl = 0x53863992 | 0;
        this.Gh = 0x2b0199fc | 0;
        this.Gl = 0x2c85b8aa | 0;
        this.Hh = 0x0eb72ddc | 0;
        this.Hl = 0x81c52ca2 | 0;
        this.outputLen = 32;
    }
}
class SHA384 extends SHA512 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0xcbbb9d5d | 0;
        this.Al = 0xc1059ed8 | 0;
        this.Bh = 0x629a292a | 0;
        this.Bl = 0x367cd507 | 0;
        this.Ch = 0x9159015a | 0;
        this.Cl = 0x3070dd17 | 0;
        this.Dh = 0x152fecd8 | 0;
        this.Dl = 0xf70e5939 | 0;
        this.Eh = 0x67332667 | 0;
        this.El = 0xffc00b31 | 0;
        this.Fh = 0x8eb44a87 | 0;
        this.Fl = 0x68581511 | 0;
        this.Gh = 0xdb0c2e0d | 0;
        this.Gl = 0x64f98fa7 | 0;
        this.Hh = 0x47b5481d | 0;
        this.Hl = 0xbefa4fa4 | 0;
        this.outputLen = 48;
    }
}
const sha512_sha512 = wrapConstructor(() => new SHA512());
const sha512_256 = wrapConstructor(() => new SHA512_256());
const sha384 = wrapConstructor(() => new SHA384());

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/random/asU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name randomAsU8a
 * @summary Creates a Uint8Array filled with random bytes.
 * @description
 * Returns a `Uint8Array` with the specified (optional) length filled with random bytes.
 * @example
 * <BR>
 *
 * ```javascript
 * import { randomAsU8a } from '@polkadot/util-crypto';
 *
 * randomAsU8a(); // => Uint8Array([...])
 * ```
 */

function randomAsU8a(length = 32) {
  return getRandomValues(new Uint8Array(length));
}
/**
 * @name randomAsHex
 * @description Creates a hex string filled with random bytes.
 */

const randomAsHex = createAsHex(randomAsU8a);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/pbkdf2/encode.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
  const u8aPass = u8aToU8a(passphrase);
  const u8aSalt = u8aToU8a(salt);
  return {
    password: !hasBigInt || !onlyJs && bundle_isReady() ? pbkdf2(u8aPass, u8aSalt, rounds) : pbkdf2_pbkdf2(sha512_sha512, u8aPass, u8aSalt, {
      c: rounds,
      dkLen: 64
    }),
    rounds,
    salt
  };
}
;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/sha256.js


// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const sha256_IV = new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends SHA2 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = sha256_IV[0] | 0;
        this.B = sha256_IV[1] | 0;
        this.C = sha256_IV[2] | 0;
        this.D = sha256_IV[3] | 0;
        this.E = sha256_IV[4] | 0;
        this.F = sha256_IV[5] | 0;
        this.G = sha256_IV[6] | 0;
        this.H = sha256_IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
const sha256_sha256 = wrapConstructor(() => new SHA256());

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sha/asU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name shaAsU8a
 * @summary Creates a sha Uint8Array from the input.
 */

const shaAsU8a = createDualHasher({
  256: sha256,
  512: sha512
}, {
  256: sha256_sha256,
  512: sha512_sha512
});
/**
 * @name sha256AsU8a
 * @summary Creates a sha256 Uint8Array from the input.
 */

const sha256AsU8a = createBitHasher(256, shaAsU8a);
/**
 * @name sha512AsU8a
 * @summary Creates a sha512 Uint8Array from the input.
 */

const sha512AsU8a = createBitHasher(512, shaAsU8a);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/bip39-en.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from the bitcoinjs/bip39 source
// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/
/* harmony default export */ const bip39_en = ('abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo'.split('|'));
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/bip39.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from the bitcoinjs/bip39 source
// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/index.ts
// Copyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>
// ISC Licence
//
// Change made in this version -
//   - Adjust formatting (just eslint differences)
//   - Only English wordlist (this aligns with the wasm-crypto implementation)
//   - Use util-crypto randomAsU8a (instead of randombytes)
//   - Remove setting of wordlist passing of wordlist in functions
//   - Remove mnemonicToSeed (we only use the sync variant)





const INVALID_MNEMONIC = 'Invalid mnemonic';
const INVALID_ENTROPY = 'Invalid entropy';
const INVALID_CHECKSUM = 'Invalid mnemonic checksum';

function normalize(str) {
  return (str || '').normalize('NFKD');
}

function binaryToByte(bin) {
  return parseInt(bin, 2);
}

function bytesToBinary(bytes) {
  return bytes.map(x => x.toString(2).padStart(8, '0')).join('');
}

function deriveChecksumBits(entropyBuffer) {
  return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}

function mnemonicToSeedSync(mnemonic, password) {
  return pbkdf2Encode(stringToU8a(normalize(mnemonic)), stringToU8a(`mnemonic${normalize(password)}`)).password;
}
function mnemonicToEntropy(mnemonic) {
  var _entropyBits$match;

  const words = normalize(mnemonic).split(' ');
  assert(words.length % 3 === 0, INVALID_MNEMONIC); // convert word indices to 11 bit binary strings

  const bits = words.map(word => {
    const index = bip39_en.indexOf(word);
    assert(index !== -1, INVALID_MNEMONIC);
    return index.toString(2).padStart(11, '0');
  }).join(''); // split the binary string into ENT/CS

  const dividerIndex = Math.floor(bits.length / 33) * 32;
  const entropyBits = bits.slice(0, dividerIndex);
  const checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

  const entropyBytes = (_entropyBits$match = entropyBits.match(/(.{1,8})/g)) === null || _entropyBits$match === void 0 ? void 0 : _entropyBits$match.map(binaryToByte);
  assert(entropyBytes && entropyBytes.length % 4 === 0 && entropyBytes.length >= 16 && entropyBytes.length <= 32, INVALID_ENTROPY);
  const entropy = u8aToU8a(entropyBytes);
  const newChecksum = deriveChecksumBits(entropy);
  assert(newChecksum === checksumBits, INVALID_CHECKSUM);
  return entropy;
}
function entropyToMnemonic(entropy) {
  // 128 <= ENT <= 256
  assert(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, INVALID_ENTROPY);
  const entropyBits = bytesToBinary(Array.from(entropy));
  const checksumBits = deriveChecksumBits(entropy); // we just set it prior, so this is a safe check
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  return (entropyBits + checksumBits).match(/(.{1,11})/g).map(binary => bip39_en[binaryToByte(binary)]).join(' ');
}
function generateMnemonic(strength) {
  strength = strength || 128;
  assert(strength % 32 === 0, INVALID_ENTROPY);
  return entropyToMnemonic(randomAsU8a(strength / 8));
}
function validateMnemonic(mnemonic) {
  try {
    mnemonicToEntropy(mnemonic);
  } catch (e) {
    return false;
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/validate.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name mnemonicValidate
 * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
 * ```
 */

function mnemonicValidate(mnemonic, onlyJs) {
  return !hasBigInt || !onlyJs && bundle_isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name mnemonicToLegacySeed
 * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
 *
 * if (isValidMnemonic) {
 *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a
 * }
 * ```
 */

function mnemonicToLegacySeed(mnemonic, password = '', onlyJs, byteLength = 32) {
  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');
  assert([32, 64].includes(byteLength), () => `Invalid seed length ${byteLength}, expected 32 or 64`);
  return byteLength === 32 ? !hasBigInt || !onlyJs && bundle_isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/toEntropy.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



function toEntropy_mnemonicToEntropy(mnemonic, onlyJs) {
  return !hasBigInt || !onlyJs && bundle_isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy(mnemonic);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/toMiniSecret.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





function mnemonicToMiniSecret(mnemonic, password = '', onlyJs) {
  assert(mnemonicValidate(mnemonic), 'Invalid bip39 mnemonic specified');

  if (!onlyJs && bundle_isReady()) {
    return bip39ToMiniSecret(mnemonic, password);
  }

  const entropy = toEntropy_mnemonicToEntropy(mnemonic);
  const salt = stringToU8a(`mnemonic${password}`); // return the first 32 bytes as the seed

  return pbkdf2Encode(entropy, salt).password.slice(0, 32);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/hmac/shaAsU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





const JS_HASH = {
  256: sha256_sha256,
  512: sha512_sha512
};
const WA_MHAC = {
  256: hmacSha256,
  512: hmacSha512
};

function createSha(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a(key, data, bitLength, onlyJs);
}
/**
 * @name hmacShaAsU8a
 * @description creates a Hmac Sha (256/512) Uint8Array from the key & data
 */


function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
  const u8aKey = u8aToU8a(key);
  return !hasBigInt || !onlyJs && bundle_isReady() ? WA_MHAC[bitLength](u8aKey, data) : hmac(JS_HASH[bitLength], u8aKey, data);
}
/**
 * @name hmacSha256AsU8a
 * @description creates a Hmac Sha256 Uint8Array from the key & data
 */

const hmacSha256AsU8a = createSha(256);
/**
 * @name hmacSha512AsU8a
 * @description creates a Hmac Sha512 Uint8Array from the key & data
 */

const hmacSha512AsU8a = createSha(512);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/toBigInt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0



const U8_MAX = x_bigint_BigInt(256);
const U16_MAX = x_bigint_BigInt(256 * 256);

function xor(input) {
  const result = new Uint8Array(input.length);
  const dvI = new DataView(input.buffer, input.byteOffset);
  const dvO = new DataView(result.buffer);
  const mod = input.length % 2;
  const length = input.length - mod;

  for (let i = 0; i < length; i += 2) {
    dvO.setUint16(i, dvI.getUint16(i) ^ 0xffff);
  }

  if (mod) {
    dvO.setUint8(length, dvI.getUint8(length) ^ 0xff);
  }

  return result;
}

function toBigInt(input) {
  const dvI = new DataView(input.buffer, input.byteOffset);
  const mod = input.length % 2;
  const length = input.length - mod;
  let result = x_bigint_BigInt(0);

  for (let i = 0; i < length; i += 2) {
    result = result * U16_MAX + x_bigint_BigInt(dvI.getUint16(i));
  }

  if (mod) {
    result = result * U8_MAX + x_bigint_BigInt(dvI.getUint8(length));
  }

  return result;
}
/**
 * @name u8aToBigInt
 * @summary Creates a BigInt from a Uint8Array object.
 */


function u8aToBigInt(value, options = {}) {
  if (!value || !value.length) {
    return x_bigint_BigInt(0);
  }

  const {
    isLe,
    isNegative
  } = objectSpread({
    isLe: true,
    isNegative: false
  }, options);
  const u8a = isLe ? value.reverse() : value;
  return isNegative ? toBigInt(xor(u8a)) * -consts_1n - consts_1n : toBigInt(u8a);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/hex/toBigInt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




/**
 * @name hexToBigInt
 * @summary Creates a BigInt instance object from a hex string.
 */

function hexToBigInt(value, options = {}) {
  return !value || value === '0x' ? x_bigint_BigInt(0) : u8aToBigInt(hexToU8a(value), objectSpread({
    isLe: false,
    isNegative: false
  }, options));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bi/toBigInt.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0






/**
 * @name nToBigInt
 * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.
 */

function nToBigInt(value) {
  return typeof value === 'bigint' ? value : !value ? x_bigint_BigInt(0) : isHex(value) ? hexToBigInt(value.toString()) : isBn(value) ? x_bigint_BigInt(value.toString()) : isToBigInt(value) ? value.toBigInt() : isToBn(value) ? x_bigint_BigInt(value.toBn().toString()) : x_bigint_BigInt(value);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/bi/toU8a.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0




const DIV = x_bigint_BigInt(256);
const NEG_MASK = x_bigint_BigInt(0xff);

function toU8a_toU8a(value, {
  isLe,
  isNegative
}) {
  const arr = [];

  if (isNegative) {
    value = (value + consts_1n) * -consts_1n;
  }

  while (value !== consts_0n) {
    const mod = value % DIV;
    const val = Number(isNegative ? mod ^ NEG_MASK : mod);

    if (isLe) {
      arr.push(val);
    } else {
      arr.unshift(val);
    }

    value = (value - mod) / DIV;
  }

  return Uint8Array.from(arr);
}
/**
 * @name nToU8a
 * @summary Creates a Uint8Array object from a bigint.
 */


function nToU8a(value, options) {
  const opts = objectSpread({
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, options);
  const valueBi = nToBigInt(value);

  if (valueBi === consts_0n) {
    return opts.bitLength === -1 ? new Uint8Array() : new Uint8Array(Math.ceil((opts.bitLength || 0) / 8));
  }

  const u8a = toU8a_toU8a(valueBi, opts);

  if (opts.bitLength === -1) {
    return u8a;
  }

  const byteLength = Math.ceil((opts.bitLength || 0) / 8);
  const output = new Uint8Array(byteLength);

  if (opts.isNegative) {
    output.fill(0xff);
  }

  output.set(u8a, opts.isLe ? 0 : byteLength - u8a.length);
  return output;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/tweakAdd.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


 // pre-defined curve param as lifted form elliptic
// https://github.com/indutny/elliptic/blob/e71b2d9359c5fe9437fbf46f1f05096de447de57/lib/elliptic/curves.js#L182

const N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');
const N_BI = x_bigint_BigInt(`0x${N}`);
const N_BN = new lib_bn(N, 'hex');

function addBi(seckey, tweak) {
  let res = u8aToBigInt(tweak, BN_BE_OPTS);
  assert(res < N_BI, 'Tweak parameter is out of range');
  res += u8aToBigInt(seckey, BN_BE_OPTS);

  if (res >= N_BI) {
    res -= N_BI;
  }

  assert(res !== consts_0n, 'Invalid resulting private key');
  return nToU8a(res, BN_BE_256_OPTS);
}

function addBn(seckey, tweak) {
  const res = new lib_bn(tweak);
  assert(res.cmp(N_BN) < 0, 'Tweak parameter is out of range');
  res.iadd(new lib_bn(seckey));

  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }

  assert(!res.isZero(), 'Invalid resulting private key');
  return bnToU8a(res, BN_BE_256_OPTS);
}

function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
  assert(isU8a(seckey) && seckey.length === 32, 'Expected seckey to be an Uint8Array with length 32');
  assert(isU8a(tweak) && tweak.length === 32, 'Expected tweak to be an Uint8Array with length 32');
  return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/hd/validatePath.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HARDENED = 0x80000000;
function hdValidatePath(path) {
  if (!path.startsWith('m/')) {
    return false;
  }

  const parts = path.split('/').slice(1);

  for (const p of parts) {
    const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ''), 10) : Number.NaN;

    if (isNaN(n) || n >= HARDENED || n < 0) {
      return false;
    }
  }

  return true;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/hd/ethereum/index.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





const MASTER_SECRET = stringToU8a('Bitcoin seed');

function createCoded(secretKey, chainCode) {
  return {
    chainCode,
    publicKey: secp256k1PairFromSeed(secretKey).publicKey,
    secretKey
  };
}

function deriveChild(hd, index) {
  const indexBuffer = bnToU8a(index, BN_BE_32_OPTS);
  const data = index >= HARDENED ? u8aConcat(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat(hd.publicKey, indexBuffer);

  try {
    const I = hmacShaAsU8a(hd.chainCode, data, 512);
    return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I.slice(0, 32)), I.slice(32));
  } catch (err) {
    // In case parse256(IL) >= n or ki == 0, proceed with the next value for i
    return deriveChild(hd, index + 1);
  }
}

function hdEthereum(seed, path = '') {
  const I = hmacShaAsU8a(MASTER_SECRET, seed, 512);
  let hd = createCoded(I.slice(0, 32), I.slice(32));

  if (!path || path === 'm' || path === 'M' || path === "m'" || path === "M'") {
    return hd;
  }

  assert(hdValidatePath(path), 'Invalid derivation path');
  const parts = path.split('/').slice(1);

  for (const p of parts) {
    hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
  }

  return hd;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/deriveHard.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const HDKD = compactAddLength(stringToU8a('Secp256k1HDKD'));
function secp256k1DeriveHard(seed, chainCode) {
  assert(isU8a(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive'); // NOTE This is specific to the Substrate HDD derivation, so always use the blake2 hasher

  return blake2AsU8a(u8aConcat(HDKD, seed, chainCode), 256);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/hdkdDerive.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

function createSeedDeriveFn(fromSeed, derive) {
  return (keypair, {
    chainCode,
    isHard
  }) => {
    assert(isHard, 'A soft key was found in the path and is not supported');
    return fromSeed(derive(keypair.secretKey.subarray(0, 32), chainCode));
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/hdkdEcdsa.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



const keyHdkdEcdsa = createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ed25519/deriveHard.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const deriveHard_HDKD = compactAddLength(stringToU8a('Ed25519HDKD'));
function ed25519DeriveHard(seed, chainCode) {
  assert(isU8a(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
  return blake2AsU8a(u8aConcat(deriveHard_HDKD, seed, chainCode));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/hdkdEd25519.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const keyHdkdEd25519 = createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/pair/toU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

function sr25519KeypairToU8a({
  publicKey,
  secretKey
}) {
  return u8aConcat(secretKey, publicKey).slice();
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/derive.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



function createDeriveFn(derive) {
  return (keypair, chainCode) => {
    assert(isU8a(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
    return sr25519PairFromU8a(derive(sr25519KeypairToU8a(keypair), chainCode));
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/deriveHard.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const sr25519DeriveHard = createDeriveFn(sr25519DeriveKeypairHard);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/deriveSoft.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const sr25519DeriveSoft = createDeriveFn(sr25519DeriveKeypairSoft);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/hdkdSr25519.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function keyHdkdSr25519(keypair, {
  chainCode,
  isSoft
}) {
  return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/key/fromPath.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



const generators = {
  ecdsa: keyHdkdEcdsa,
  ed25519: keyHdkdEd25519,
  // FIXME This is Substrate-compatible, not Ethereum-compatible
  ethereum: keyHdkdEcdsa,
  sr25519: keyHdkdSr25519
};
function keyFromPath(pair, path, type) {
  const keyHdkd = generators[type];
  let result = pair;

  for (const junction of path) {
    result = keyHdkd(result, junction);
  }

  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/defaults.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
// default substrate dev phrase
const DEV_PHRASE = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk'; // seed from the above phrase

const DEV_SEED = '0xfac7959dbfe72f052e5a0c3c8d6530f202b02fd8f9f5ca3580ec8deb7797479e';
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/hasher.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function hasher(hashType, data, onlyJs) {
  return hashType === 'keccak' ? keccakAsU8a(data, undefined, onlyJs) : blake2AsU8a(data, undefined, undefined, onlyJs);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/sign.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





/**
 * @name secp256k1Sign
 * @description Returns message signature of `message`, using the supplied pair
 */

function sign_secp256k1Sign(message, {
  secretKey
}, hashType = 'blake2', onlyJs) {
  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');
  const data = hasher(hashType, message, onlyJs);

  if (!hasBigInt || !onlyJs && bundle_isReady()) {
    return secp256k1Sign(data, secretKey);
  }

  const [sigBytes, recoveryParam] = signSync(data, secretKey, {
    canonical: true,
    recovered: true
  });
  const {
    r,
    s
  } = Signature.fromHex(sigBytes);
  return u8aConcat(bnToU8a(r, BN_BE_256_OPTS), bnToU8a(s, BN_BE_256_OPTS), new Uint8Array([recoveryParam || 0]));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ed25519/sign.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name ed25519Sign
 * @summary Signs a message using the supplied secretKey
 * @description
 * Returns message signature of `message`, using the `secretKey`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519Sign } from '@polkadot/util-crypto';
 *
 * ed25519Sign([...], [...]); // => [...]
 * ```
 */

function sign_ed25519Sign(message, {
  publicKey,
  secretKey
}, onlyJs) {
  assert(secretKey, 'Expected a valid secretKey');
  const messageU8a = u8aToU8a(message);
  return !onlyJs && bundle_isReady() ? ed25519Sign(publicKey, secretKey.subarray(0, 32), messageU8a) : nacl_fast.sign.detached(messageU8a, secretKey);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/sign.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name sr25519Sign
 * @description Returns message signature of `message`, using the supplied pair
 */

function sign_sr25519Sign(message, {
  publicKey,
  secretKey
}) {
  assert((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) === 32, 'Expected a valid publicKey, 32-bytes');
  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Expected a valid secretKey, 64-bytes');
  return sr25519Sign(publicKey, secretKey, u8aToU8a(message));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/nacl/open.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclOpen
 * @summary Opens a message using the receiver's secretKey and nonce
 * @description
 * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclOpen } from '@polkadot/util-crypto';
 *
 * naclOpen([...], [...], [...]); // => [...]
 * ```
 */

function naclOpen(sealed, nonce, senderBoxPublic, receiverBoxSecret) {
  return nacl_fast.box.open(sealed, nonce, senderBoxPublic, receiverBoxSecret) || null;
}
// EXTERNAL MODULE: ./node_modules/ed2curve/ed2curve.js
var ed2curve = __webpack_require__(678);
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ed25519/convertKey.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function convertSecretKeyToCurve25519(secretKey) {
  return ed2curve.convertSecretKey(secretKey);
}
function convertPublicKeyToCurve25519(publicKey) {
  return assertReturn(ed2curve.convertPublicKey(publicKey), 'Unable to convert publicKey to ed25519');
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/nacl/seal.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name naclSeal
 * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce
 * @description
 * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclSeal } from '@polkadot/util-crypto';
 *
 * naclSeal([...], [...], [...], [...]); // => [...]
 * ```
 */
function naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = randomAsU8a(24)) {
  return {
    nonce,
    sealed: nacl_fast.box(message, nonce, receiverBoxPublic, senderBoxSecret)
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/compress.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



function compress_secp256k1Compress(publicKey, onlyJs) {
  if (publicKey.length === 33) {
    return publicKey;
  }

  assert(publicKey.length === 65, 'Invalid publicKey provided');
  return !hasBigInt || !onlyJs && bundle_isReady() ? secp256k1Compress(publicKey) : Point.fromHex(publicKey).toRawBytes(true);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/wrap.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Originally from https://github.com/polkadot-js/extension/pull/743



const U8A_WRAP_ETHEREUM = u8aToU8a('\x19Ethereum Signed Message:\n');
const U8A_WRAP_PREFIX = u8aToU8a('<Bytes>');
const U8A_WRAP_POSTFIX = u8aToU8a('</Bytes>');
const WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;
function u8aIsWrapped(u8a, withEthereum) {
  return u8a.length >= WRAP_LEN && u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a.length >= U8A_WRAP_ETHEREUM.length && u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
}
function u8aUnwrapBytes(bytes) {
  const u8a = u8aToU8a(bytes); // we don't want to unwrap Ethereum-style wraps

  return u8aIsWrapped(u8a, false) ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length) : u8a;
}
function u8aWrapBytes(bytes) {
  const u8a = u8aToU8a(bytes); // if Ethereum-wrapping, we don't add our wrapping bytes

  return u8aIsWrapped(u8a, true) ? u8a : u8aConcat(U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/ed25519/verify.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name ed25519Sign
 * @summary Verifies the signature on the supplied message.
 * @description
 * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519Verify } from '@polkadot/util-crypto';
 *
 * ed25519Verify([...], [...], [...]); // => true/false
 * ```
 */

function verify_ed25519Verify(message, signature, publicKey, onlyJs) {
  const messageU8a = u8aToU8a(message);
  const publicKeyU8a = u8aToU8a(publicKey);
  const signatureU8a = u8aToU8a(signature);
  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  return !onlyJs && bundle_isReady() ? ed25519Verify(signatureU8a, messageU8a, publicKeyU8a) : nacl_fast.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/recover.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





/**
 * @name secp256k1Recover
 * @description Recovers a publicKey from the supplied signature
 */

function recover_secp256k1Recover(msgHash, signature, recovery, hashType = 'blake2', onlyJs) {
  const sig = u8aToU8a(signature).subarray(0, 64);
  const msg = u8aToU8a(msgHash);
  const publicKey = !hasBigInt || !onlyJs && bundle_isReady() ? secp256k1Recover(msg, sig, recovery) : recoverPublicKey(msg, Signature.fromCompact(sig).toRawBytes(), recovery);
  assert(publicKey, 'Unable to recover publicKey from signature');
  return hashType === 'keccak' ? expand_secp256k1Expand(publicKey, onlyJs) : compress_secp256k1Compress(publicKey, onlyJs);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/secp256k1/verify.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name secp256k1Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */

function secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {
  const sig = u8aToU8a(signature);
  assert(sig.length === 65, `Expected signature with 65 bytes, ${sig.length} found instead`);
  const publicKey = recover_secp256k1Recover(hasher(hashType, msgHash), sig, sig[64], hashType, onlyJs);
  const signerAddr = hasher(hashType, publicKey, onlyJs);
  const inputAddr = u8aToU8a(address); // for Ethereum (keccak) the last 20 bytes is the address

  return u8aEq(publicKey, inputAddr) || (hashType === 'keccak' ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/verify.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


/**
 * @name sr25519Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */

function verify_sr25519Verify(message, signature, publicKey) {
  const publicKeyU8a = u8aToU8a(publicKey);
  const signatureU8a = u8aToU8a(signature);
  assert(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  assert(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  return sr25519Verify(signatureU8a, u8aToU8a(message), publicKeyU8a);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/signature/verify.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0






const secp256k1VerifyHasher = hashType => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);

const VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];
const VERIFIERS = [['ed25519', verify_ed25519Verify], ['sr25519', verify_sr25519Verify], ...VERIFIERS_ECDSA];
const CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];

function verifyDetect(result, {
  message,
  publicKey,
  signature
}, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto, verify]) => {
    try {
      if (verify(message, signature, publicKey)) {
        result.crypto = crypto;
        return true;
      }
    } catch (error) {// do nothing, result.isValid still set to false
    }

    return false;
  });
  return result;
}

function verifyMultisig(result, {
  message,
  publicKey,
  signature
}) {
  assert([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  const type = CRYPTO_TYPES[signature[0]] || 'none';
  result.crypto = type;

  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, {
        message,
        publicKey,
        signature: signature.subarray(1)
      }, VERIFIERS_ECDSA).isValid,
      ed25519: () => verify_ed25519Verify(message, signature.subarray(1), publicKey),
      none: () => {
        throw Error('no verify for `none` crypto type');
      },
      sr25519: () => verify_sr25519Verify(message, signature.subarray(1), publicKey)
    }[type]();
  } catch (error) {// ignore, result.isValid still set to false
  }

  return result;
}

function getVerifyFn(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
}

function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = u8aToU8a(signature);
  assert([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  const publicKey = decodeAddress(addressOrPublicKey);
  const input = {
    message: u8aToU8a(message),
    publicKey,
    signature: signatureU8a
  };
  const result = {
    crypto: 'none',
    isValid: false,
    isWrapped: u8aIsWrapped(input.message, true),
    publicKey
  };
  const isWrappedBytes = u8aIsWrapped(input.message, false);
  const verifyFn = getVerifyFn(signatureU8a);
  verifyFn(result, input);

  if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {
    return result;
  }

  input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
  return verifyFn(result, input);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/vrfSign.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const vrfSign_EMPTY_U8A = new Uint8Array();
/**
 * @name sr25519VrfSign
 * @description Sign with sr25519 vrf signing (deterministic)
 */

function sr25519VrfSign(message, {
  secretKey
}, context = vrfSign_EMPTY_U8A, extra = vrfSign_EMPTY_U8A) {
  assert((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Invalid secretKey, expected 64-bytes');
  return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/sr25519/vrfVerify.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


const vrfVerify_EMPTY_U8A = new Uint8Array();
/**
 * @name sr25519VrfVerify
 * @description Verify with sr25519 vrf verification
 */

function sr25519VrfVerify(message, signOutput, publicKey, context = vrfVerify_EMPTY_U8A, extra = vrfVerify_EMPTY_U8A) {
  const publicKeyU8a = u8aToU8a(publicKey);
  const proofU8a = u8aToU8a(signOutput);
  assert(publicKeyU8a.length === 32, 'Invalid publicKey, expected 32-bytes');
  assert(proofU8a.length === 96, 'Invalid vrfSign output, expected 96 bytes');
  return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util/u8a/fixLength.js
// Copyright 2017-2022 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aFixLength
 * @summary Shifts a Uint8Array to a specific bitLength
 * @description
 * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aFixLength } from '@polkadot/util';
 *
 * u8aFixLength('0x12') // => 0x12
 * u8aFixLength('0x12', 16) // => 0x0012
 * u8aFixLength('0x1234', 8) // => 0x12
 * ```
 */
function u8aFixLength(value, bitLength = -1, atStart = false) {
  const byteLength = Math.ceil(bitLength / 8);

  if (bitLength === -1 || value.length === byteLength) {
    return value;
  } else if (value.length > byteLength) {
    return value.subarray(0, byteLength);
  }

  const result = new Uint8Array(byteLength);
  result.set(value, atStart ? 0 : byteLength - value.length);
  return result;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/nacl/decrypt.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclDecrypt
 * @summary Decrypts a message using the supplied secretKey and nonce
 * @description
 * Returns an decrypted message, using the `secret` and `nonce`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclDecrypt } from '@polkadot/util-crypto';
 *
 * naclDecrypt([...], [...], [...]); // => [...]
 * ```
 */

function naclDecrypt(encrypted, nonce, secret) {
  return nacl_fast.secretbox.open(encrypted, nonce, secret) || null;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/scrypt/defaults.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_PARAMS = {
  N: 1 << 15,
  p: 1,
  r: 8
};
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/scrypt/fromU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



function scryptFromU8a(data) {
  const salt = data.subarray(0, 32);
  const N = u8aToBn(data.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
  const p = u8aToBn(data.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
  const r = u8aToBn(data.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility
  // and updates for greater security. However we need some protection against carefully-crafted params that can
  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults
  // and if no match, bail out

  assert(N === DEFAULT_PARAMS.N && p === DEFAULT_PARAMS.p && r === DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');
  return {
    params: {
      N,
      p,
      r
    },
    salt
  };
}
;// CONCATENATED MODULE: ./node_modules/@noble/hashes/esm/scrypt.js



// RFC 7914 Scrypt KDF
// Left rotate for uint32
const scrypt_rotl = (a, b) => (a << b) | (a >>> (32 - b));
// The main Scrypt loop: uses Salsa extensively.
// Six versions of the function were tried, this is the fastest one.
// prettier-ignore
function XorAndSalsa(prev, pi, input, ii, out, oi) {
    // Based on https://cr.yp.to/salsa20.html
    // Xor blocks
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    // Save state to temporary variables (salsa)
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    // Main loop (salsa)
    for (let i = 0; i < 8; i += 2) {
        x04 ^= scrypt_rotl(x00 + x12 | 0, 7);
        x08 ^= scrypt_rotl(x04 + x00 | 0, 9);
        x12 ^= scrypt_rotl(x08 + x04 | 0, 13);
        x00 ^= scrypt_rotl(x12 + x08 | 0, 18);
        x09 ^= scrypt_rotl(x05 + x01 | 0, 7);
        x13 ^= scrypt_rotl(x09 + x05 | 0, 9);
        x01 ^= scrypt_rotl(x13 + x09 | 0, 13);
        x05 ^= scrypt_rotl(x01 + x13 | 0, 18);
        x14 ^= scrypt_rotl(x10 + x06 | 0, 7);
        x02 ^= scrypt_rotl(x14 + x10 | 0, 9);
        x06 ^= scrypt_rotl(x02 + x14 | 0, 13);
        x10 ^= scrypt_rotl(x06 + x02 | 0, 18);
        x03 ^= scrypt_rotl(x15 + x11 | 0, 7);
        x07 ^= scrypt_rotl(x03 + x15 | 0, 9);
        x11 ^= scrypt_rotl(x07 + x03 | 0, 13);
        x15 ^= scrypt_rotl(x11 + x07 | 0, 18);
        x01 ^= scrypt_rotl(x00 + x03 | 0, 7);
        x02 ^= scrypt_rotl(x01 + x00 | 0, 9);
        x03 ^= scrypt_rotl(x02 + x01 | 0, 13);
        x00 ^= scrypt_rotl(x03 + x02 | 0, 18);
        x06 ^= scrypt_rotl(x05 + x04 | 0, 7);
        x07 ^= scrypt_rotl(x06 + x05 | 0, 9);
        x04 ^= scrypt_rotl(x07 + x06 | 0, 13);
        x05 ^= scrypt_rotl(x04 + x07 | 0, 18);
        x11 ^= scrypt_rotl(x10 + x09 | 0, 7);
        x08 ^= scrypt_rotl(x11 + x10 | 0, 9);
        x09 ^= scrypt_rotl(x08 + x11 | 0, 13);
        x10 ^= scrypt_rotl(x09 + x08 | 0, 18);
        x12 ^= scrypt_rotl(x15 + x14 | 0, 7);
        x13 ^= scrypt_rotl(x12 + x15 | 0, 9);
        x14 ^= scrypt_rotl(x13 + x12 | 0, 13);
        x15 ^= scrypt_rotl(x14 + x13 | 0, 18);
    }
    // Write output (salsa)
    out[oi++] = (y00 + x00) | 0;
    out[oi++] = (y01 + x01) | 0;
    out[oi++] = (y02 + x02) | 0;
    out[oi++] = (y03 + x03) | 0;
    out[oi++] = (y04 + x04) | 0;
    out[oi++] = (y05 + x05) | 0;
    out[oi++] = (y06 + x06) | 0;
    out[oi++] = (y07 + x07) | 0;
    out[oi++] = (y08 + x08) | 0;
    out[oi++] = (y09 + x09) | 0;
    out[oi++] = (y10 + x10) | 0;
    out[oi++] = (y11 + x11) | 0;
    out[oi++] = (y12 + x12) | 0;
    out[oi++] = (y13 + x13) | 0;
    out[oi++] = (y14 + x14) | 0;
    out[oi++] = (y15 + x15) | 0;
}
function BlockMix(input, ii, out, oi, r) {
    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
        if (i > 0)
            tail += 16; // First iteration overwrites tmp value in tail
        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
    }
}
// Common prologue and epilogue for sync/async functions
function scryptInit(password, salt, _opts) {
    // Maxmem - 1GB+1KB by default
    const opts = checkOpts({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024,
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    assertNumber(N);
    assertNumber(r);
    assertNumber(p);
    assertNumber(dkLen);
    assertNumber(asyncTick);
    assertNumber(maxmem);
    if (onProgress !== undefined && typeof onProgress !== 'function')
        throw new Error('progressCb should be function');
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
    }
    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
    }
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
    // Since it has only one iteration there is no reason to use async variant
    const B = pbkdf2_pbkdf2(sha256_sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = utils_u32(B);
    // Re-used between parallel iterations. Array(iterations) of B
    const V = utils_u32(new Uint8Array(blockSize * N));
    const tmp = utils_u32(new Uint8Array(blockSize));
    let blockMixCb = () => { };
    if (onProgress) {
        const totalBlockMix = 2 * N * p;
        // Invoke callback if progress changes from 10.01 to 10.02
        // Allows to draw smooth progress bar on up to 8K screen
        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
            blockMixCnt++;
            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
                onProgress(blockMixCnt / totalBlockMix);
        };
    }
    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
    const res = pbkdf2_pbkdf2(sha256_sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
}
/**
 * Scrypt KDF from RFC 7914.
 * @param password - pass
 * @param salt - salt
 * @param opts - parameters
 * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
 * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
 * - `p` is parallelization factor (1 is common)
 * - `dkLen` is output key length in bytes e.g. 32.
 * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
 * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
 * - `onProgress` - callback function that would be executed for progress report
 * @returns Derived key
 */
function scrypt_scrypt(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
            V[i] = B32[Pi + i]; // V[0] = B[i]
        for (let i = 0, pos = 0; i < N - 1; i++) {
            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        for (let i = 0; i < N; i++) {
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for (let k = 0; k < blockSize32; k++)
                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}
/**
 * Scrypt KDF from RFC 7914.
 */
async function scryptAsync(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
    for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
            V[i] = B32[Pi + i]; // V[0] = B[i]
        let pos = 0;
        await asyncLoop(N - 1, asyncTick, (i) => {
            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        await asyncLoop(N, asyncTick, (i) => {
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for (let k = 0; k < blockSize32; k++)
                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        });
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}

;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/scrypt/encode.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0





function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
  const u8a = u8aToU8a(passphrase);
  return {
    params,
    password: !hasBigInt || !onlyJs && bundle_isReady() ? scrypt(u8a, salt, Math.log2(params.N), params.r, params.p) : scrypt_scrypt(u8a, salt, objectSpread({
      dkLen: 64
    }, params)),
    salt
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/json/constants.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ENCODING = ['scrypt', 'xsalsa20-poly1305'];
const ENCODING_NONE = ['none'];
const ENCODING_VERSION = '3';
const NONCE_LENGTH = 24;
const SCRYPT_LENGTH = 32 + 3 * 4;
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/json/decryptData.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0




function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
  assert(encrypted, 'No encrypted data available to decode');
  assert(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encrypted data');
  let encoded = encrypted;

  if (passphrase) {
    let password;

    if (encType.includes('scrypt')) {
      const {
        params,
        salt
      } = scryptFromU8a(encrypted);
      password = scryptEncode(passphrase, salt, params).password;
      encrypted = encrypted.subarray(SCRYPT_LENGTH);
    } else {
      password = stringToU8a(passphrase);
    }

    encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));
  }

  assert(encoded, 'Unable to decode using the supplied passphrase');
  return encoded;
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pair/defaults.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
const PUB_LENGTH = 32;
const SALT_LENGTH = 32;
const SEC_LENGTH = 64;
const SEED_LENGTH = 32;
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pair/decode.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0



const SEED_OFFSET = PKCS8_HEADER.length;
function decodePair(passphrase, encrypted, _encType) {
  const encType = Array.isArray(_encType) || isUndefined(_encType) ? _encType : [_encType];
  const decrypted = jsonDecryptData(encrypted, passphrase, encType);
  const header = decrypted.subarray(0, PKCS8_HEADER.length);
  assert(u8aEq(header, PKCS8_HEADER), 'Invalid Pkcs8 header found in body');
  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
  let divOffset = SEED_OFFSET + SEC_LENGTH;
  let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length); // old-style, we have the seed here

  if (!u8aEq(divider, PKCS8_DIVIDER)) {
    divOffset = SEED_OFFSET + SEED_LENGTH;
    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
    divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
    assert(u8aEq(divider, PKCS8_DIVIDER), 'Invalid Pkcs8 divider found in body');
  }

  const pubOffset = divOffset + PKCS8_DIVIDER.length;
  const publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
  return {
    publicKey,
    secretKey
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/nacl/encrypt.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



/**
 * @name naclEncrypt
 * @summary Encrypts a message using the supplied secretKey and nonce
 * @description
 * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclEncrypt } from '@polkadot/util-crypto';
 *
 * naclEncrypt([...], [...]); // => [...]
 * ```
 */
function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
  return {
    encrypted: nacl_fast.secretbox(message, nonce, secret),
    nonce
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/scrypt/toU8a.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function scryptToU8a(salt, {
  N,
  p,
  r
}) {
  return u8aConcat(salt, bnToU8a(N, BN_LE_32_OPTS), bnToU8a(p, BN_LE_32_OPTS), bnToU8a(r, BN_LE_32_OPTS));
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pair/encode.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0



function encodePair({
  publicKey,
  secretKey
}, passphrase) {
  assert(secretKey, 'Expected a valid secretKey to be passed to encode');
  const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);

  if (!passphrase) {
    return encoded;
  }

  const {
    params,
    password,
    salt
  } = scryptEncode(passphrase);
  const {
    encrypted,
    nonce
  } = naclEncrypt(encoded, password.subarray(0, 32));
  return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/json/encryptFormat.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0


function jsonEncryptFormat(encoded, contentType, isEncrypted) {
  return {
    encoded: base64Encode(encoded),
    encoding: {
      content: contentType,
      type: isEncrypted ? ENCODING : ENCODING_NONE,
      version: ENCODING_VERSION
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pair/toJson.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0


function pairToJson(type, {
  address,
  meta
}, encoded, isEncrypted) {
  return objectSpread(jsonEncryptFormat(encoded, ['pkcs8', type], isEncrypted), {
    address,
    meta
  });
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pair/index.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0





const SIG_TYPE_NONE = new Uint8Array();
const TYPE_FROM_SEED = {
  ecdsa: secp256k1PairFromSeed,
  ed25519: ed25519PairFromSeed,
  ethereum: secp256k1PairFromSeed,
  sr25519: sr25519PairFromSeed
};
const TYPE_PREFIX = {
  ecdsa: new Uint8Array([2]),
  ed25519: new Uint8Array([0]),
  ethereum: new Uint8Array([2]),
  sr25519: new Uint8Array([1])
};
const TYPE_SIGNATURE = {
  ecdsa: (m, p) => sign_secp256k1Sign(m, p, 'blake2'),
  ed25519: sign_ed25519Sign,
  ethereum: (m, p) => sign_secp256k1Sign(m, p, 'keccak'),
  sr25519: sign_sr25519Sign
};
const TYPE_ADDRESS = {
  ecdsa: p => p.length > 32 ? blake2AsU8a(p) : p,
  ed25519: p => p,
  ethereum: p => p.length === 20 ? p : keccakAsU8a(expand_secp256k1Expand(p)),
  sr25519: p => p
};

function isLocked(secretKey) {
  return !secretKey || u8aEmpty(secretKey);
}

function vrfHash(proof, context, extra) {
  return blake2AsU8a(u8aConcat(context || '', extra || '', proof));
}
/**
 * @name createPair
 * @summary Creates a keyring pair object
 * @description Creates a keyring pair object with provided account public key, metadata, and encoded arguments.
 * The keyring pair stores the account state including the encoded address and associated metadata.
 *
 * It has properties whose values are functions that may be called to perform account actions:
 *
 * - `address` function retrieves the address associated with the account.
 * - `decodedPkcs8` function is called with the account passphrase and account encoded public key.
 * It decodes the encoded public key using the passphrase provided to obtain the decoded account public key
 * and associated secret key that are then available in memory, and changes the account address stored in the
 * state of the pair to correspond to the address of the decoded public key.
 * - `encodePkcs8` function when provided with the correct passphrase associated with the account pair
 * and when the secret key is in memory (when the account pair is not locked) it returns an encoded
 * public key of the account.
 * - `meta` is the metadata that is stored in the state of the pair, either when it was originally
 * created or set via `setMeta`.
 * - `publicKey` returns the public key stored in memory for the pair.
 * - `sign` may be used to return a signature by signing a provided message with the secret
 * key (if it is in memory) using Nacl.
 * - `toJson` calls another `toJson` function and provides the state of the pair,
 * it generates arguments to be passed to the other `toJson` function including an encoded public key of the account
 * that it generates using the secret key from memory (if it has been made available in memory)
 * and the optionally provided passphrase argument. It passes a third boolean argument to `toJson`
 * indicating whether the public key has been encoded or not (if a passphrase argument was provided then it is encoded).
 * The `toJson` function that it calls returns a JSON object with properties including the `address`
 * and `meta` that are assigned with the values stored in the corresponding state variables of the account pair,
 * an `encoded` property that is assigned with the encoded public key in hex format, and an `encoding`
 * property that indicates whether the public key value of the `encoded` property is encoded or not.
 */


function createPair({
  toSS58,
  type
}, {
  publicKey,
  secretKey
}, meta = {}, encoded = null, encTypes) {
  const decodePkcs8 = (passphrase, userEncoded) => {
    const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);

    if (decoded.secretKey.length === 64) {
      publicKey = decoded.publicKey;
      secretKey = decoded.secretKey;
    } else {
      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
      publicKey = pair.publicKey;
      secretKey = pair.secretKey;
    }
  };

  const recode = passphrase => {
    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
    encoded = encodePair({
      publicKey,
      secretKey
    }, passphrase); // re-encode, latest version

    encTypes = undefined; // swap to defaults, latest version follows

    return encoded;
  };

  const encodeAddress = () => {
    const raw = TYPE_ADDRESS[type](publicKey);
    return type === 'ethereum' ? ethereumEncode(raw) : toSS58(raw);
  };

  return {
    get address() {
      return encodeAddress();
    },

    get addressRaw() {
      const raw = TYPE_ADDRESS[type](publicKey);
      return type === 'ethereum' ? raw.slice(-20) : raw;
    },

    get isLocked() {
      return isLocked(secretKey);
    },

    get meta() {
      return meta;
    },

    get publicKey() {
      return publicKey;
    },

    get type() {
      return type;
    },

    // eslint-disable-next-line sort-keys
    decodePkcs8,
    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => {
      assert(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
      assert(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
      const messageU8a = u8aToU8a(encryptedMessageWithNonce);
      return naclOpen(messageU8a.slice(24, messageU8a.length), messageU8a.slice(0, 24), convertPublicKeyToCurve25519(u8aToU8a(senderPublicKey)), convertSecretKeyToCurve25519(secretKey));
    },
    derive: (suri, meta) => {
      assert(type !== 'ethereum', 'Unable to derive on this keypair');
      assert(!isLocked(secretKey), 'Cannot derive on a locked keypair');
      const {
        path
      } = keyExtractPath(suri);
      const derived = keyFromPath({
        publicKey,
        secretKey
      }, path, type);
      return createPair({
        toSS58,
        type
      }, derived, meta, null);
    },
    encodePkcs8: passphrase => {
      return recode(passphrase);
    },
    encryptMessage: (message, recipientPublicKey, nonceIn) => {
      assert(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
      assert(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
      const {
        nonce,
        sealed
      } = naclSeal(u8aToU8a(message), convertSecretKeyToCurve25519(secretKey), convertPublicKeyToCurve25519(u8aToU8a(recipientPublicKey)), nonceIn);
      return u8aConcat(nonce, sealed);
    },
    lock: () => {
      secretKey = new Uint8Array();
    },
    setMeta: additional => {
      meta = objectSpread({}, meta, additional);
    },
    sign: (message, options = {}) => {
      assert(!isLocked(secretKey), 'Cannot sign with a locked key pair');
      return u8aConcat(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), {
        publicKey,
        secretKey
      }));
    },
    toJson: passphrase => {
      // NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
      // pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
      // unless the publicKey is already an address
      const address = ['ecdsa', 'ethereum'].includes(type) ? publicKey.length === 20 ? u8aToHex(publicKey) : u8aToHex(compress_secp256k1Compress(publicKey)) : encodeAddress();
      return pairToJson(type, {
        address,
        meta
      }, recode(passphrase), !!passphrase);
    },
    unlock: passphrase => {
      return decodePkcs8(passphrase);
    },
    verify: (message, signature, signerPublic) => {
      return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
    },
    vrfSign: (message, context, extra) => {
      assert(!isLocked(secretKey), 'Cannot sign with a locked key pair');

      if (type === 'sr25519') {
        return sr25519VrfSign(message, {
          secretKey
        }, context, extra);
      }

      const proof = TYPE_SIGNATURE[type](u8aToU8a(message), {
        publicKey,
        secretKey
      });
      return u8aConcat(vrfHash(proof, context, extra), proof);
    },
    vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
      if (type === 'sr25519') {
        return sr25519VrfVerify(message, vrfResult, publicKey, context, extra);
      }

      const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
      return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
    }
  };
}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/pairs.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0


class Pairs {
  #map = {};

  add(pair) {
    this.#map[decodeAddress(pair.address).toString()] = pair;
    return pair;
  }

  all() {
    return Object.values(this.#map);
  }

  get(address) {
    const pair = this.#map[decodeAddress(address).toString()];
    assert(pair, () => `Unable to retrieve keypair '${isU8a(address) || isHex(address) ? u8aToHex(u8aToU8a(address)) : address}'`);
    return pair;
  }

  remove(address) {
    delete this.#map[decodeAddress(address).toString()];
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/keyring/keyring.js
// Copyright 2017-2022 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0





const PairFromSeed = {
  ecdsa: seed => secp256k1PairFromSeed(seed),
  ed25519: seed => ed25519PairFromSeed(seed),
  ethereum: seed => secp256k1PairFromSeed(seed),
  sr25519: seed => sr25519PairFromSeed(seed)
};

function pairToPublic({
  publicKey
}) {
  return publicKey;
}
/**
 * # @polkadot/keyring
 *
 * ## Overview
 *
 * @name Keyring
 * @summary Keyring management of user accounts
 * @description Allows generation of keyring pairs from a variety of input combinations, such as
 * json object containing account address or public key, account metadata, and account encoded using
 * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,
 * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.
 * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair
 * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform
 * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with
 * an account may be obtained using `toJson` accompanied by the account passphrase.
 */


class Keyring {
  #pairs;
  #type;
  #ss58;
  decodeAddress = decodeAddress;

  constructor(options = {}) {
    options.type = options.type || 'ed25519';
    assert(['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), () => `Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);
    this.#pairs = new Pairs();
    this.#ss58 = options.ss58Format;
    this.#type = options.type;
  }
  /**
   * @description retrieve the pairs (alias for getPairs)
   */


  get pairs() {
    return this.getPairs();
  }
  /**
   * @description retrieve the publicKeys (alias for getPublicKeys)
   */


  get publicKeys() {
    return this.getPublicKeys();
  }
  /**
   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
   */


  get type() {
    return this.#type;
  }
  /**
   * @name addPair
   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   */


  addPair(pair) {
    return this.#pairs.add(pair);
  }
  /**
   * @name addFromAddress
   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from them that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
    const publicKey = this.decodeAddress(address, ignoreChecksum);
    return this.addPair(createPair({
      toSS58: this.encodeAddress,
      type
    }, {
      publicKey,
      secretKey: new Uint8Array()
    }, meta, encoded, encType));
  }
  /**
   * @name addFromJson
   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromJson(json, ignoreChecksum) {
    return this.addPair(this.createFromJson(json, ignoreChecksum));
  }
  /**
   * @name addFromMnemonic
   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
   * argument and a metadata argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromMnemonic(mnemonic, meta = {}, type = this.type) {
    return this.addFromUri(mnemonic, meta, type);
  }
  /**
   * @name addFromPair
   * @summary Stores an account created from an explicit publicKey/secreteKey combination
   */


  addFromPair(pair, meta = {}, type = this.type) {
    return this.addPair(this.createFromPair(pair, meta, type));
  }
  /**
   * @name addFromSeed
   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromSeed(seed, meta = {}, type = this.type) {
    return this.addPair(createPair({
      toSS58: this.encodeAddress,
      type
    }, PairFromSeed[type](seed), meta, null));
  }
  /**
   * @name addFromUri
   * @summary Creates an account via an suri
   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
   */


  addFromUri(suri, meta = {}, type = this.type) {
    return this.addPair(this.createFromUri(suri, meta, type));
  }
  /**
   * @name createFromJson
   * @description Creates a pair from a JSON keyfile
   */


  createFromJson({
    address,
    encoded,
    encoding: {
      content,
      type,
      version
    },
    meta
  }, ignoreChecksum) {
    assert(version !== '3' || content[0] === 'pkcs8', () => `Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);
    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];
    const encType = !Array.isArray(type) ? [type] : type;
    assert(['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType), () => `Unknown crypto type ${cryptoType}`); // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs

    const publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);
    const decoded = isHex(encoded) ? hexToU8a(encoded) : bs64_base64Decode(encoded);
    return createPair({
      toSS58: this.encodeAddress,
      type: cryptoType
    }, {
      publicKey,
      secretKey: new Uint8Array()
    }, meta, decoded, encType);
  }
  /**
   * @name createFromPair
   * @summary Creates a pair from an explicit publicKey/secreteKey combination
   */


  createFromPair(pair, meta = {}, type = this.type) {
    return createPair({
      toSS58: this.encodeAddress,
      type
    }, pair, meta, null);
  }
  /**
   * @name createFromUri
   * @summary Creates a Keypair from an suri
   * @description This creates a pair from the suri, but does not add it to the keyring
   */


  createFromUri(_suri, meta = {}, type = this.type) {
    // here we only aut-add the dev phrase if we have a hard-derived path
    const suri = _suri.startsWith('//') ? `${DEV_PHRASE}${_suri}` : _suri;
    const {
      derivePath,
      password,
      path,
      phrase
    } = keyExtractSuri(suri);
    let seed;
    const isPhraseHex = isHex(phrase, 256);

    if (isPhraseHex) {
      seed = hexToU8a(phrase);
    } else {
      const parts = phrase.split(' ');

      if ([12, 15, 18, 21, 24].includes(parts.length)) {
        seed = type === 'ethereum' ? mnemonicToLegacySeed(phrase, '', false, 64) : mnemonicToMiniSecret(phrase, password);
      } else {
        assert(phrase.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');
        seed = stringToU8a(phrase.padEnd(32));
      }
    }

    const derived = type === 'ethereum' ? isPhraseHex ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once
    : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path, type);
    return createPair({
      toSS58: this.encodeAddress,
      type
    }, derived, meta, null);
  }
  /**
   * @name encodeAddress
   * @description Encodes the input into an ss58 representation
   */


  encodeAddress = (address, ss58Format) => {
    return this.type === 'ethereum' ? ethereumEncode(address) : encodeAddress(address, isUndefined(ss58Format) ? this.#ss58 : ss58Format);
  };
  /**
   * @name getPair
   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
   * @description Returns a keyring pair value from the keyring pair dictionary by performing
   * a key lookup using the provided account address or public key (after decoding it).
   */

  getPair(address) {
    return this.#pairs.get(address);
  }
  /**
   * @name getPairs
   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
   */


  getPairs() {
    return this.#pairs.all();
  }
  /**
   * @name getPublicKeys
   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
   */


  getPublicKeys() {
    return this.#pairs.all().map(pairToPublic);
  }
  /**
   * @name removePair
   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
   */


  removePair(address) {
    this.#pairs.remove(address);
  }
  /**
   * @name setSS58Format;
   * @description Sets the ss58 format for the keyring
   */


  setSS58Format(ss58) {
    this.#ss58 = ss58;
  }
  /**
   * @name toJson
   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
   * @description Returns a JSON object containing the metadata associated with an account
   * when valid address or public key and when the account passphrase is provided if the account secret
   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
   * may backup their account to a JSON file that contains this information.
   */


  toJson(address, passphrase) {
    return this.#pairs.get(address).toJson(passphrase);
  }

}
;// CONCATENATED MODULE: ./node_modules/@polkadot/util-crypto/mnemonic/generate.js
// Copyright 2017-2022 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0



// mapping of words to the actual strength (as expected)
const STRENGTH_MAP = {
  12: 16 * 8,
  15: 20 * 8,
  18: 24 * 8,
  21: 28 * 8,
  24: 32 * 8
};
/**
 * @name mnemonicGenerate
 * @summary Creates a valid mnemonic string using using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * ```
 */

function mnemonicGenerate(numWords = 12, onlyJs) {
  return !hasBigInt || !onlyJs && bundle_isReady() ? bip39Generate(numWords) : generateMnemonic(STRENGTH_MAP[numWords]);
}
;// CONCATENATED MODULE: ./src/background/crypto.js






function crypto_bytesToHex(byteArray) {
  var s = '0x';
  byteArray.forEach(function (byte) {
      s += ('0' + (byte & 0xFF).toString(16)).slice(-2);
  });
  return s;
}

function encryptWithAES(text, passphrase)  {
  return AES.encrypt(text, passphrase).toString();
};

function decryptWithAES(ciphertext, passphrase) {
  const bytes = AES.decrypt(ciphertext, passphrase);
  const originalText = bytes.toString(Utf8);
  return originalText;
};

function importAccount(phrase) {
  let keyring = new Keyring({ type: 'sr25519' });
  let newPair = keyring.addFromUri(phrase) ;
  let account = {
      address: newPair.address,
      addressRaw: crypto_bytesToHex(newPair.addressRaw),
      phrase: phrase,
      accountName: '<Account Name>'
  } ;
  return account ;
}

function generateAccount() {
  let phrase = mnemonicGenerate(12);
  return importAccount(phrase) ;
}






;// CONCATENATED MODULE: ./src/background/storage.js
/* global chrome */


class StorageApp {

  get = (key, callback) => {
    var item = window.localStorage.getItem(key) ;
    if (item) {
        item = JSON.parse(item);
    }
    callback(item) ;
  }

  set = (key, value, callback) => {
    const item = JSON.stringify(value) ;
    window.localStorage.setItem(key, item) ;
    if (callback) {
        callback() ;
    }
  }

}

class StorageExt {

  get = (key, callback) => {
    console.log('StorageExt.get key', key) ;
    chrome.storage.local.get([key], (result) => {
        console.log('StorageExt.get result', result[key]) ;
        callback(result[key]) ;
    }) ;
  }

  set = (key, value, callback) => {
    const data = {} ;
    data[key] = value ;
    chrome.storage.local.set(data, callback) ;
  }

}


;// CONCATENATED MODULE: ./src/background/transaction.js





class Transaction {

    constructor(tx, account, callback) {
        this.tx = tx ;
        this.account = account ;
        this.callback = callback ;
    }

    txMonitor = (result) => {
        let status = result.status ;
        if (status.isInBlock) {
            console.log('txMonitor: isInBlock') ;
        } else if (status.isFinalized) {
            console.log('txMonitor: isFinalized') ;
            this.unsubTransaction();
            let result = {} ;
            let err = parsePolkadotError(result) ;
            if (err) {
                result.error = err ;
            } else {
                result.status = 'done' ;
            }
            this.callback(result) ;
        }
    }

    sendUsingPrivatePhrase = () => {
        let address = this.account.address ;
        let keyring = new Keyring({ type: 'sr25519' });
        let signer = keyring.addFromUri(this.account.phrase);
        console.log('sendTransactionLocal', address, signer);
        let self = this ;
        self.tx.signAndSend(signer, self.txMonitor).then((s) => {
            self.unsubTransaction = s;
        }).catch((err) => {
            self.callback({error:err}) ;
        }) ;
    }

    sendUsingWeb3 = () => {
        let source = this.account.source ;
        let address = this.account.address ;
        console.log('sendTransactionWeb3', source, address);
        let self = this ;
        window.web3FromSource(source).then((injector) => {
            self.tx.signAndSend(address, {signer: injector.signer}, self.txMonitor).then((s) => {
                self.unsubTransaction = s;
            }).catch((err) => {
                self.callback({error:err}) ;
            }) ;
        });
    }

}

/* harmony default export */ const background_transaction = (Transaction);

;// CONCATENATED MODULE: ./src/background/background.js












class WikaBackground {

    constructor() {
        console.log('WikaBackground Constructor START') ;
        // Environment: 'app' or 'ext'
        this.env = getEnvironment() ;
        // Crypto and blockchain connection
        this.cryptoReady = false ;
        this.network = new network() ;
        // Storage implementation
        this.storage = (this.env==='app')?new StorageApp():new StorageExt() ;
        // Unsubscription functions
        this.unsubFunctions = {} ;
        // Done
        console.log('env = '+this.env) ;
        console.log('WikaBackground Constructor DONE') ;
    }




    // ------------
    // Simple calls
    // ------------

    call = (message, callback) => {
        const func = message.func ;
        switch (func) {
            case 'initialize': return this.initialize(message.networkType, message.networkUrl, callback) ;
            case 'connect': return this.connect(message.networkType, message.networkUrl, callback) ;
            case 'getNetworkInfo': return this.getNetworkInfo(callback) ;
            case 'getLikePrice': return this.getLikePrice(callback) ;
            case 'getOwnersRequestPrice': return this.getOwnersRequestPrice(callback) ;
            case 'createTransaction': return this.createTransaction(message.txType, message.params, callback) ;
            case 'keccakAsHex': return this.keccakAsHex(message.text, callback) ;
            case 'generateAccount': return this.generateAccount(callback) ;
            case 'importAccount': return this.importAccount(message.phrase, callback) ;
            case 'getRawAddress': return this.getRawAddress(message.address, callback) ;
            case 'getData': return this.getData(message.field, callback) ;
            case 'saveData': return this.saveData(message.field, message.data, callback) ;
            default: return null ;
        }
    }

    initialize = (networkType, networkUrl, callback) => {
        const self = this ;
        cryptoWaitReady().then(() => {
            self.cryptoReady = true;
            self.connect(networkType, networkUrl, callback);
        }) ;
    }

    connect = (networkType, networkUrl, callback) => {
        this.network.connect(networkType, networkUrl, callback) ;
    }

    getNetworkInfo = (callback) => {
        callback({
            type: this.network.type,
            url: this.network.endpoint,
            ready: this.network.getReady()
        }) ;
    }

    createTransaction = (txType, params, callback) => {
        const self = this ;
        function _tx() {
            switch (txType) {
                case 'like': return self.network.txLike(params.url, params.referrer, params.numLikes) ;
                case 'owner_request': return self.network.txOwnerRequest(params.url) ;
                default: return null ;
            }
        }
        const tx = _tx() ;
        callback(tx) ;
    }

    generateAccount = (callback) => {
        callback(generateAccount()) ;
    }

    importAccount = (phrase, callback) => {
        try {
            const account = importAccount(phrase) ;
            account.imported = true ;
            callback(account) ;
        } catch (e) {
            alert(e)
        }
    }

    getRawAddress = (address, callback) => {
        const addressU8 = decodeAddress(address) ;
        const addressRaw = u8aToHex(addressU8) ;
        callback(addressRaw) ;
    }

    getLikePrice = (callback) => {
        this.network.getLikePrice(callback) ;
    }

    getOwnersRequestPrice = (callback) => {
        this.network.getOwnersRequestPrice(callback) ;
    }

    keccakAsHex = (text, callback) => {
        callback(keccakAsHex(text)) ;
    }

    getData = (field, callback) => {
        console.log('getData', field) ;
        this.storage.get(field, callback) ;
    }

    saveData = (field, data, callback) => {
        this.storage.set(field, data, callback) ;
    }






    // -------------
    // Subscriptions
    // -------------

    subscribe = (message, callback) => {
        const func = message.func ;
        switch (func) {
            case 'getBalance': return this.getBalance(message.address, callback) ;
            case 'getUrl': return this.network.getUrl(message.url, callback) ;
            case 'getLike': return this.network.getLike(message.address, message.url, callback) ;
            case 'getBlockNumber': return this.network.getBlockNumber(callback) ;
            case 'getUrlOwner': return this.network.getUrlOwner(message.url, callback) ;
            case 'getOwnerRequest': return this.network.getOwnerRequest(message.url, callback) ;
            case 'getOwnerResult': return this.network.getOwnerResult(message.url, callback) ;
            default: return null ;
        }
    }

    getBalance = (address, callback) => {
        const self = this ;
        self.network.getBalance(address, callback).then((f) => {
            self.unsubFunctions['getBalance'] = f ;
        }) ;
    }



    // -----------
    // Transaction
    // -----------

    transaction = (message, callback) => {
        const self = this ;
        const account = message.account ;
        console.log('background.transaction.account', account) ;
        self.createTransaction(message.txType, message.params, (tx) => {
            if (account.mode === 'web3') {
                self.sendTransactionUsingWeb3(tx, account, callback) ;
            } else {
                self.sendTransactionUsingPrivatePhrase(tx, account.address, callback) ;
            }
        }) ;

    }

    sendTransactionUsingPrivatePhrase = (tx, address, callback) => {
        this.getData('accounts', (accounts) => {
            const account = findAccount(accounts, address) ;
            const transaction = new background_transaction(tx, account, callback) ;
            transaction.sendUsingPrivatePhrase() ;
        })
    }

    sendTransactionUsingWeb3 = (tx, account, callback) => {
        const transaction = new background_transaction(tx, account, callback) ;
        transaction.sendUsingWeb3() ;
    }




    // -----
    // Unsub
    // -----

    unsub = (func, callback) => {
        const unsub_func = this.unsubFunctions[func] ;
        if (unsub_func) {
            unsub_func() ;
        }
        if (callback) {
            callback() ;
        }
    }





}


/* harmony default export */ const background = (WikaBackground);











;// CONCATENATED MODULE: ./src/background/extension_internal_port.js


class ExtensionInternalPort {

    constructor(background) {
        this.background = background ;
        this.listenOnConnect() ;
        this.listenOnMessage() ;
    }

    listenOnConnect = () => {
        const self = this ;
        chrome.runtime.onConnect.addListener(function(port) {
          if (port.name === "background_interface") {
            self.port = port ;
          }
        });
    }

    listenOnMessage = () => {
        const self = this ;
        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
            const funcType = message.funcType ;
            const func = message.func ;
            if (funcType === 'call') {
                self.background.call(message, sendResponse) ;
                return true ;
            } else if (funcType === 'subscribe') {
                self.background.subscribe(message, (data) => {
                    const newMessage = {
                        func: func,
                        data: data
                    }
                    self.port.postMessage(newMessage);
                }) ;
                sendResponse('ack') ;
            } else if (funcType === 'transaction') {
                self.background.transaction(message, sendResponse) ;
                return true ;
            } else if (funcType === 'unsub') {
                self.background.unsub(func, sendResponse) ;
                return true ;
            } else {
                sendResponse({err: 'Unrecognized funcType', originalMessage: message}) ;
            }
        });
    }

}


/* harmony default export */ const extension_internal_port = (ExtensionInternalPort);
;// CONCATENATED MODULE: ./src/background/extension_external_port.js


const POPUP_PARAMS = "scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,width=500,height=630,left=400,top=100" ;


class ExtensionExternalPort {

    constructor(background) {
        this.background = background ;
        this.registerListener() ;
    }

    registerListener = () => {
        let self = this ;
        chrome.runtime.onMessageExternal.addListener(
          function(request, sender, sendResponse) {
            const source = sender.documentId ;
            const message = request.message ;
            switch (message) {
                case 'ping': return self.ping(source, request, sendResponse) ;
                case 'accounts': return self.accounts(source, request, sendResponse) ;
                case 'transaction': return self.transaction(source, request, sendResponse) ;
                default: return self.debug(source, request, sendResponse) ;
            }
          }
        );
    }

    ping = (source, request, sendResponse) => {
        sendResponse('pong') ;
    }

    accounts = (source, request, sendResponse) => {
        this.background.getData('accounts', (list) => {
            var ans = [] ;
            if (list) {
                ans = list.map((a) => {
                    return {address: a.address,
                            addressRaw: a.addressRaw,
                            name: a.name} ;
                })
            }
            sendResponse(ans) ;
        }) ;
    }

    transaction = (source, request, sendResponse) => {
        function done(outcome) {
            if (outcome === 'confirmed') {
                sendResponse({status:'ok'}) ;
            } else {
                sendResponse({err:'Transaction was not confirmed'}) ;
            }
        }
        const win = window.open("index.html", "extension_popup", POPUP_PARAMS) ;
        var counter = 0 ;
        function check() {
            counter++ ;
            if(win.wikaReactApp && win.wikaReactApp._mounted) {
                win.wikaReactApp.signTransaction(request.txType,
                                                 request.params,
                                                 request.address,
                                                 done);
            } else if (counter<250) {
                setTimeout(check, 10);
            } else {
                sendResponse({status:null, err:'Could not open the Wika extension'}) ;
            }
        }
        check() ;
    }

    debug = (source, request, sendResponse) => {
        const data = {
            message: 'debug',
            source: source,
            request: request
        }
        sendResponse(data) ;
    }

}


/* harmony default export */ const extension_external_port = (ExtensionExternalPort);
;// CONCATENATED MODULE: ./src/background/background_ext.js


console.log('WIKA BACKGROUND_EXT SCRIPT') ;




console.log('imports ok') ;

const defaultNetworkType = "Wika Testnet" ;
const defaultNetworkUrl = "wss://testnode3.wika.network:443" ;

const BACKGROUND = new background() ;
const INTERNAL_PORT = new extension_internal_port(BACKGROUND) ;
const EXTERNAL_PORT = new extension_external_port(BACKGROUND) ;
console.log('background instances ok') ;

BACKGROUND.initialize(defaultNetworkType, defaultNetworkUrl, () => {
    console.log('background init ok')
}) ;

})();

/******/ })()
;